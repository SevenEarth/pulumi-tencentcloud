// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Gaap
{
    public static class GetCertificates
    {
        /// <summary>
        /// Use this data source to query GAAP certificate.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var fooCertificate = new Tencentcloud.Gaap.Certificate("fooCertificate", new Tencentcloud.Gaap.CertificateArgs
        ///         {
        ///             Type = "BASIC",
        ///             Content = "test:tx2KGdo3zJg/.",
        ///         });
        ///         var fooCertificates = Tencentcloud.Gaap.GetCertificates.Invoke(new Tencentcloud.Gaap.GetCertificatesInvokeArgs
        ///         {
        ///             Id = fooCertificate.Id,
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCertificatesResult> InvokeAsync(GetCertificatesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCertificatesResult>("tencentcloud:Gaap/getCertificates:getCertificates", args ?? new GetCertificatesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query GAAP certificate.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var fooCertificate = new Tencentcloud.Gaap.Certificate("fooCertificate", new Tencentcloud.Gaap.CertificateArgs
        ///         {
        ///             Type = "BASIC",
        ///             Content = "test:tx2KGdo3zJg/.",
        ///         });
        ///         var fooCertificates = Tencentcloud.Gaap.GetCertificates.Invoke(new Tencentcloud.Gaap.GetCertificatesInvokeArgs
        ///         {
        ///             Id = fooCertificate.Id,
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCertificatesResult> Invoke(GetCertificatesInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetCertificatesResult>("tencentcloud:Gaap/getCertificates:getCertificates", args ?? new GetCertificatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificatesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the certificate to be queried.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Name of the certificate to be queried.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// Type of the certificate to be queried. Valid values: `BASIC`, `CLIENT`, `SERVER`, `REALSERVER` and `PROXY`. `BASIC` means basic certificate; `CLIENT` means client CA certificate; `SERVER` means server SSL certificate; `REALSERVER` means realserver CA certificate; `PROXY` means proxy SSL certificate.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetCertificatesArgs()
        {
        }
    }

    public sealed class GetCertificatesInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the certificate to be queried.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of the certificate to be queried.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// Type of the certificate to be queried. Valid values: `BASIC`, `CLIENT`, `SERVER`, `REALSERVER` and `PROXY`. `BASIC` means basic certificate; `CLIENT` means client CA certificate; `SERVER` means server SSL certificate; `REALSERVER` means realserver CA certificate; `PROXY` means proxy SSL certificate.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetCertificatesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCertificatesResult
    {
        /// <summary>
        /// An information list of certificate. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificatesCertificateResult> GaapCertificates;
        /// <summary>
        /// ID of the certificate.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Name of the certificate.
        /// </summary>
        public readonly string? Name;
        public readonly string? ResultOutputFile;
        /// <summary>
        /// Type of the certificate.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetCertificatesResult(
            ImmutableArray<Outputs.GetCertificatesCertificateResult> certificates,

            string? id,

            string? name,

            string? resultOutputFile,

            string? type)
        {
            GaapCertificates = certificates;
            Id = id;
            Name = name;
            ResultOutputFile = resultOutputFile;
            Type = type;
        }
    }
}
