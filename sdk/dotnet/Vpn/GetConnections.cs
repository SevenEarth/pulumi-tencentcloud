// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Vpn
{
    public static class GetConnections
    {
        /// <summary>
        /// Use this data source to query detailed information of VPN connections.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foo = Output.Create(Tencentcloud.Vpn.GetConnections.InvokeAsync(new Tencentcloud.Vpn.GetConnectionsArgs
        ///         {
        ///             CustomerGatewayId = "",
        ///             Id = "vpnx-xfqag",
        ///             Name = "main",
        ///             Tags = 
        ///             {
        ///                 { "test", "tf" },
        ///             },
        ///             VpcId = "cgw-xfqag",
        ///             VpnGatewayId = "vpngw-8ccsnclt",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetConnectionsResult> InvokeAsync(GetConnectionsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetConnectionsResult>("tencentcloud:Vpn/getConnections:getConnections", args ?? new GetConnectionsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of VPN connections.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foo = Output.Create(Tencentcloud.Vpn.GetConnections.InvokeAsync(new Tencentcloud.Vpn.GetConnectionsArgs
        ///         {
        ///             CustomerGatewayId = "",
        ///             Id = "vpnx-xfqag",
        ///             Name = "main",
        ///             Tags = 
        ///             {
        ///                 { "test", "tf" },
        ///             },
        ///             VpcId = "cgw-xfqag",
        ///             VpnGatewayId = "vpngw-8ccsnclt",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetConnectionsResult> Invoke(GetConnectionsInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetConnectionsResult>("tencentcloud:Vpn/getConnections:getConnections", args ?? new GetConnectionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectionsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Customer gateway ID of the VPN connection.
        /// </summary>
        [Input("customerGatewayId")]
        public string? CustomerGatewayId { get; set; }

        /// <summary>
        /// ID of the VPN connection.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Name of the VPN connection. The length of character is limited to 1-60.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        [Input("tags")]
        private Dictionary<string, object>? _tags;

        /// <summary>
        /// Tags of the VPN connection to be queried.
        /// </summary>
        public Dictionary<string, object> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, object>());
            set => _tags = value;
        }

        /// <summary>
        /// ID of the VPC.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        /// <summary>
        /// VPN gateway ID of the VPN connection.
        /// </summary>
        [Input("vpnGatewayId")]
        public string? VpnGatewayId { get; set; }

        public GetConnectionsArgs()
        {
        }
    }

    public sealed class GetConnectionsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Customer gateway ID of the VPN connection.
        /// </summary>
        [Input("customerGatewayId")]
        public Input<string>? CustomerGatewayId { get; set; }

        /// <summary>
        /// ID of the VPN connection.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of the VPN connection. The length of character is limited to 1-60.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Tags of the VPN connection to be queried.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// ID of the VPC.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// VPN gateway ID of the VPN connection.
        /// </summary>
        [Input("vpnGatewayId")]
        public Input<string>? VpnGatewayId { get; set; }

        public GetConnectionsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetConnectionsResult
    {
        /// <summary>
        /// Information list of the dedicated connections.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionsConnectionListResult> ConnectionLists;
        /// <summary>
        /// ID of the customer gateway.
        /// </summary>
        public readonly string? CustomerGatewayId;
        /// <summary>
        /// ID of the VPN connection.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Name of the VPN connection.
        /// </summary>
        public readonly string? Name;
        public readonly string? ResultOutputFile;
        /// <summary>
        /// A list of tags used to associate different resources.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Tags;
        /// <summary>
        /// ID of the VPC.
        /// </summary>
        public readonly string? VpcId;
        /// <summary>
        /// ID of the VPN gateway.
        /// </summary>
        public readonly string? VpnGatewayId;

        [OutputConstructor]
        private GetConnectionsResult(
            ImmutableArray<Outputs.GetConnectionsConnectionListResult> connectionLists,

            string? customerGatewayId,

            string? id,

            string? name,

            string? resultOutputFile,

            ImmutableDictionary<string, object>? tags,

            string? vpcId,

            string? vpnGatewayId)
        {
            ConnectionLists = connectionLists;
            CustomerGatewayId = customerGatewayId;
            Id = id;
            Name = name;
            ResultOutputFile = resultOutputFile;
            Tags = tags;
            VpcId = vpcId;
            VpnGatewayId = vpnGatewayId;
        }
    }
}
