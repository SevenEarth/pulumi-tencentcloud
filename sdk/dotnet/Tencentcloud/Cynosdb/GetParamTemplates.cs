// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Cynosdb
{
    public static class GetParamTemplates
    {
        /// <summary>
        /// Use this data source to query detailed information of cynosdb param_templates
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var paramTemplates = Output.Create(Tencentcloud.Cynosdb.GetParamTemplates.InvokeAsync());
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetParamTemplatesResult> InvokeAsync(GetParamTemplatesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetParamTemplatesResult>("tencentcloud:Cynosdb/getParamTemplates:getParamTemplates", args ?? new GetParamTemplatesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of cynosdb param_templates
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var paramTemplates = Output.Create(Tencentcloud.Cynosdb.GetParamTemplates.InvokeAsync());
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetParamTemplatesResult> Invoke(GetParamTemplatesInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetParamTemplatesResult>("tencentcloud:Cynosdb/getParamTemplates:getParamTemplates", args ?? new GetParamTemplatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetParamTemplatesArgs : Pulumi.InvokeArgs
    {
        [Input("dbModes")]
        private List<string>? _dbModes;

        /// <summary>
        /// Database mode, optional values: NORMAL, SERVERLESS.
        /// </summary>
        public List<string> DbModes
        {
            get => _dbModes ?? (_dbModes = new List<string>());
            set => _dbModes = value;
        }

        [Input("engineTypes")]
        private List<string>? _engineTypes;

        /// <summary>
        /// Engine types.
        /// </summary>
        public List<string> EngineTypes
        {
            get => _engineTypes ?? (_engineTypes = new List<string>());
            set => _engineTypes = value;
        }

        [Input("engineVersions")]
        private List<string>? _engineVersions;

        /// <summary>
        /// Database engine version number.
        /// </summary>
        public List<string> EngineVersions
        {
            get => _engineVersions ?? (_engineVersions = new List<string>());
            set => _engineVersions = value;
        }

        /// <summary>
        /// Query limit.
        /// </summary>
        [Input("limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// Page offset.
        /// </summary>
        [Input("offset")]
        public int? Offset { get; set; }

        /// <summary>
        /// The sort field for the returned results.
        /// </summary>
        [Input("orderBy")]
        public string? OrderBy { get; set; }

        /// <summary>
        /// Sort by (asc, desc).
        /// </summary>
        [Input("orderDirection")]
        public string? OrderDirection { get; set; }

        [Input("products")]
        private List<string>? _products;

        /// <summary>
        /// The product type corresponding to the query template.
        /// </summary>
        public List<string> Products
        {
            get => _products ?? (_products = new List<string>());
            set => _products = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        [Input("templateIds")]
        private List<int>? _templateIds;

        /// <summary>
        /// The id list of templates.
        /// </summary>
        public List<int> TemplateIds
        {
            get => _templateIds ?? (_templateIds = new List<int>());
            set => _templateIds = value;
        }

        [Input("templateNames")]
        private List<string>? _templateNames;

        /// <summary>
        /// The name list of templates.
        /// </summary>
        public List<string> TemplateNames
        {
            get => _templateNames ?? (_templateNames = new List<string>());
            set => _templateNames = value;
        }

        [Input("templateTypes")]
        private List<string>? _templateTypes;

        /// <summary>
        /// Template types.
        /// </summary>
        public List<string> TemplateTypes
        {
            get => _templateTypes ?? (_templateTypes = new List<string>());
            set => _templateTypes = value;
        }

        public GetParamTemplatesArgs()
        {
        }
    }

    public sealed class GetParamTemplatesInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("dbModes")]
        private InputList<string>? _dbModes;

        /// <summary>
        /// Database mode, optional values: NORMAL, SERVERLESS.
        /// </summary>
        public InputList<string> DbModes
        {
            get => _dbModes ?? (_dbModes = new InputList<string>());
            set => _dbModes = value;
        }

        [Input("engineTypes")]
        private InputList<string>? _engineTypes;

        /// <summary>
        /// Engine types.
        /// </summary>
        public InputList<string> EngineTypes
        {
            get => _engineTypes ?? (_engineTypes = new InputList<string>());
            set => _engineTypes = value;
        }

        [Input("engineVersions")]
        private InputList<string>? _engineVersions;

        /// <summary>
        /// Database engine version number.
        /// </summary>
        public InputList<string> EngineVersions
        {
            get => _engineVersions ?? (_engineVersions = new InputList<string>());
            set => _engineVersions = value;
        }

        /// <summary>
        /// Query limit.
        /// </summary>
        [Input("limit")]
        public Input<int>? Limit { get; set; }

        /// <summary>
        /// Page offset.
        /// </summary>
        [Input("offset")]
        public Input<int>? Offset { get; set; }

        /// <summary>
        /// The sort field for the returned results.
        /// </summary>
        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        /// <summary>
        /// Sort by (asc, desc).
        /// </summary>
        [Input("orderDirection")]
        public Input<string>? OrderDirection { get; set; }

        [Input("products")]
        private InputList<string>? _products;

        /// <summary>
        /// The product type corresponding to the query template.
        /// </summary>
        public InputList<string> Products
        {
            get => _products ?? (_products = new InputList<string>());
            set => _products = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        [Input("templateIds")]
        private InputList<int>? _templateIds;

        /// <summary>
        /// The id list of templates.
        /// </summary>
        public InputList<int> TemplateIds
        {
            get => _templateIds ?? (_templateIds = new InputList<int>());
            set => _templateIds = value;
        }

        [Input("templateNames")]
        private InputList<string>? _templateNames;

        /// <summary>
        /// The name list of templates.
        /// </summary>
        public InputList<string> TemplateNames
        {
            get => _templateNames ?? (_templateNames = new InputList<string>());
            set => _templateNames = value;
        }

        [Input("templateTypes")]
        private InputList<string>? _templateTypes;

        /// <summary>
        /// Template types.
        /// </summary>
        public InputList<string> TemplateTypes
        {
            get => _templateTypes ?? (_templateTypes = new InputList<string>());
            set => _templateTypes = value;
        }

        public GetParamTemplatesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetParamTemplatesResult
    {
        public readonly ImmutableArray<string> DbModes;
        public readonly ImmutableArray<string> EngineTypes;
        public readonly ImmutableArray<string> EngineVersions;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Parameter Template Information.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetParamTemplatesItemResult> Items;
        public readonly int? Limit;
        public readonly int? Offset;
        public readonly string? OrderBy;
        public readonly string? OrderDirection;
        public readonly ImmutableArray<string> Products;
        public readonly string? ResultOutputFile;
        public readonly ImmutableArray<int> TemplateIds;
        public readonly ImmutableArray<string> TemplateNames;
        public readonly ImmutableArray<string> TemplateTypes;

        [OutputConstructor]
        private GetParamTemplatesResult(
            ImmutableArray<string> dbModes,

            ImmutableArray<string> engineTypes,

            ImmutableArray<string> engineVersions,

            string id,

            ImmutableArray<Outputs.GetParamTemplatesItemResult> items,

            int? limit,

            int? offset,

            string? orderBy,

            string? orderDirection,

            ImmutableArray<string> products,

            string? resultOutputFile,

            ImmutableArray<int> templateIds,

            ImmutableArray<string> templateNames,

            ImmutableArray<string> templateTypes)
        {
            DbModes = dbModes;
            EngineTypes = engineTypes;
            EngineVersions = engineVersions;
            Id = id;
            Items = items;
            Limit = limit;
            Offset = offset;
            OrderBy = orderBy;
            OrderDirection = orderDirection;
            Products = products;
            ResultOutputFile = resultOutputFile;
            TemplateIds = templateIds;
            TemplateNames = templateNames;
            TemplateTypes = templateTypes;
        }
    }
}
