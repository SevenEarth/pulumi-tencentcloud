// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Cynosdb
{
    public static class GetCluster
    {
        /// <summary>
        /// Use this data source to query detailed information of cynosdb cluster
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var cluster = Tencentcloud.Cynosdb.GetCluster.Invoke(new()
        ///     {
        ///         ClusterId = "cynosdbmysql-bws8h88b",
        ///         Database = "users",
        ///         Table = "tb_user_name",
        ///         TableType = "all",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("tencentcloud:Cynosdb/getCluster:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of cynosdb cluster
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var cluster = Tencentcloud.Cynosdb.GetCluster.Invoke(new()
        ///     {
        ///         ClusterId = "cynosdbmysql-bws8h88b",
        ///         Database = "users",
        ///         Table = "tb_user_name",
        ///         TableType = "all",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("tencentcloud:Cynosdb/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        /// <summary>
        /// Database name.
        /// </summary>
        [Input("database")]
        public string? Database { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// Data Table Name.
        /// </summary>
        [Input("table")]
        public string? Table { get; set; }

        /// <summary>
        /// Data table type: view: only return view, base_ Table: only returns the basic table, all: returns the view and table.
        /// </summary>
        [Input("tableType")]
        public string? TableType { get; set; }

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Database name.
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// Data Table Name.
        /// </summary>
        [Input("table")]
        public Input<string>? Table { get; set; }

        /// <summary>
        /// Data table type: view: only return view, base_ Table: only returns the basic table, all: returns the view and table.
        /// </summary>
        [Input("tableType")]
        public Input<string>? TableType { get; set; }

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        public readonly string ClusterId;
        /// <summary>
        /// Database name note: This field may return null, indicating that a valid value cannot be obtained.
        /// </summary>
        public readonly string? Database;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ResultOutputFile;
        public readonly string? Table;
        public readonly string? TableType;
        /// <summary>
        /// Table Name List Note: This field may return null, indicating that a valid value cannot be obtained.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterTableResult> Tables;

        [OutputConstructor]
        private GetClusterResult(
            string clusterId,

            string? database,

            string id,

            string? resultOutputFile,

            string? table,

            string? tableType,

            ImmutableArray<Outputs.GetClusterTableResult> tables)
        {
            ClusterId = clusterId;
            Database = database;
            Id = id;
            ResultOutputFile = resultOutputFile;
            Table = table;
            TableType = tableType;
            Tables = tables;
        }
    }
}
