// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Dcdb
{
    public static class GetUpgradePrice
    {
        /// <summary>
        /// Use this data source to query detailed information of dcdb upgrade_price
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var addUpgradePrice = Output.Create(Tencentcloud.Dcdb.GetUpgradePrice.InvokeAsync(new Tencentcloud.Dcdb.GetUpgradePriceArgs
        ///         {
        ///             InstanceId = local.Dcdb_id,
        ///             UpgradeType = "ADD",
        ///             AddShardConfig = new Tencentcloud.Dcdb.Inputs.GetUpgradePriceAddShardConfigArgs
        ///             {
        ///                 ShardCount = 2,
        ///                 ShardMemory = 2,
        ///                 ShardStorage = 100,
        ///             },
        ///             AmountUnit = "pent",
        ///         }));
        ///         var expandUpgradePrice = Output.Create(Tencentcloud.Dcdb.GetUpgradePrice.InvokeAsync(new Tencentcloud.Dcdb.GetUpgradePriceArgs
        ///         {
        ///             InstanceId = local.Dcdb_id,
        ///             UpgradeType = "EXPAND",
        ///             ExpandShardConfig = new Tencentcloud.Dcdb.Inputs.GetUpgradePriceExpandShardConfigArgs
        ///             {
        ///                 ShardInstanceIds = 
        ///                 {
        ///                     "shard-1b5r04az",
        ///                 },
        ///                 ShardMemory = 2,
        ///                 ShardStorage = 40,
        ///                 ShardNodeCount = 2,
        ///             },
        ///             AmountUnit = "pent",
        ///         }));
        ///         var splitUpgradePrice = Output.Create(Tencentcloud.Dcdb.GetUpgradePrice.InvokeAsync(new Tencentcloud.Dcdb.GetUpgradePriceArgs
        ///         {
        ///             InstanceId = local.Dcdb_id,
        ///             UpgradeType = "SPLIT",
        ///             SplitShardConfig = new Tencentcloud.Dcdb.Inputs.GetUpgradePriceSplitShardConfigArgs
        ///             {
        ///                 ShardInstanceIds = 
        ///                 {
        ///                     "shard-1b5r04az",
        ///                 },
        ///                 SplitRate = 50,
        ///                 ShardMemory = 2,
        ///                 ShardStorage = 100,
        ///             },
        ///             AmountUnit = "pent",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetUpgradePriceResult> InvokeAsync(GetUpgradePriceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetUpgradePriceResult>("tencentcloud:Dcdb/getUpgradePrice:getUpgradePrice", args ?? new GetUpgradePriceArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of dcdb upgrade_price
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var addUpgradePrice = Output.Create(Tencentcloud.Dcdb.GetUpgradePrice.InvokeAsync(new Tencentcloud.Dcdb.GetUpgradePriceArgs
        ///         {
        ///             InstanceId = local.Dcdb_id,
        ///             UpgradeType = "ADD",
        ///             AddShardConfig = new Tencentcloud.Dcdb.Inputs.GetUpgradePriceAddShardConfigArgs
        ///             {
        ///                 ShardCount = 2,
        ///                 ShardMemory = 2,
        ///                 ShardStorage = 100,
        ///             },
        ///             AmountUnit = "pent",
        ///         }));
        ///         var expandUpgradePrice = Output.Create(Tencentcloud.Dcdb.GetUpgradePrice.InvokeAsync(new Tencentcloud.Dcdb.GetUpgradePriceArgs
        ///         {
        ///             InstanceId = local.Dcdb_id,
        ///             UpgradeType = "EXPAND",
        ///             ExpandShardConfig = new Tencentcloud.Dcdb.Inputs.GetUpgradePriceExpandShardConfigArgs
        ///             {
        ///                 ShardInstanceIds = 
        ///                 {
        ///                     "shard-1b5r04az",
        ///                 },
        ///                 ShardMemory = 2,
        ///                 ShardStorage = 40,
        ///                 ShardNodeCount = 2,
        ///             },
        ///             AmountUnit = "pent",
        ///         }));
        ///         var splitUpgradePrice = Output.Create(Tencentcloud.Dcdb.GetUpgradePrice.InvokeAsync(new Tencentcloud.Dcdb.GetUpgradePriceArgs
        ///         {
        ///             InstanceId = local.Dcdb_id,
        ///             UpgradeType = "SPLIT",
        ///             SplitShardConfig = new Tencentcloud.Dcdb.Inputs.GetUpgradePriceSplitShardConfigArgs
        ///             {
        ///                 ShardInstanceIds = 
        ///                 {
        ///                     "shard-1b5r04az",
        ///                 },
        ///                 SplitRate = 50,
        ///                 ShardMemory = 2,
        ///                 ShardStorage = 100,
        ///             },
        ///             AmountUnit = "pent",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetUpgradePriceResult> Invoke(GetUpgradePriceInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetUpgradePriceResult>("tencentcloud:Dcdb/getUpgradePrice:getUpgradePrice", args ?? new GetUpgradePriceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUpgradePriceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Config for adding new shard.
        /// </summary>
        [Input("addShardConfig")]
        public Inputs.GetUpgradePriceAddShardConfigArgs? AddShardConfig { get; set; }

        /// <summary>
        /// Price unit. Valid values: `pent` (cent), `microPent` (microcent).
        /// </summary>
        [Input("amountUnit")]
        public string? AmountUnit { get; set; }

        /// <summary>
        /// Config for expanding existing shard.
        /// </summary>
        [Input("expandShardConfig")]
        public Inputs.GetUpgradePriceExpandShardConfigArgs? ExpandShardConfig { get; set; }

        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// Config for splitting existing shard.
        /// </summary>
        [Input("splitShardConfig")]
        public Inputs.GetUpgradePriceSplitShardConfigArgs? SplitShardConfig { get; set; }

        /// <summary>
        /// Upgrade type, ADD: add new shard, EXPAND: upgrade the existing shard, SPLIT: split existing shard.
        /// </summary>
        [Input("upgradeType", required: true)]
        public string UpgradeType { get; set; } = null!;

        public GetUpgradePriceArgs()
        {
        }
    }

    public sealed class GetUpgradePriceInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Config for adding new shard.
        /// </summary>
        [Input("addShardConfig")]
        public Input<Inputs.GetUpgradePriceAddShardConfigInputArgs>? AddShardConfig { get; set; }

        /// <summary>
        /// Price unit. Valid values: `pent` (cent), `microPent` (microcent).
        /// </summary>
        [Input("amountUnit")]
        public Input<string>? AmountUnit { get; set; }

        /// <summary>
        /// Config for expanding existing shard.
        /// </summary>
        [Input("expandShardConfig")]
        public Input<Inputs.GetUpgradePriceExpandShardConfigInputArgs>? ExpandShardConfig { get; set; }

        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// Config for splitting existing shard.
        /// </summary>
        [Input("splitShardConfig")]
        public Input<Inputs.GetUpgradePriceSplitShardConfigInputArgs>? SplitShardConfig { get; set; }

        /// <summary>
        /// Upgrade type, ADD: add new shard, EXPAND: upgrade the existing shard, SPLIT: split existing shard.
        /// </summary>
        [Input("upgradeType", required: true)]
        public Input<string> UpgradeType { get; set; } = null!;

        public GetUpgradePriceInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetUpgradePriceResult
    {
        public readonly Outputs.GetUpgradePriceAddShardConfigResult? AddShardConfig;
        public readonly string? AmountUnit;
        public readonly Outputs.GetUpgradePriceExpandShardConfigResult? ExpandShardConfig;
        /// <summary>
        /// Price calculation formula.
        /// </summary>
        public readonly string Formula;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        /// <summary>
        /// Original price. Unit: Cent (default). If the request parameter contains `AmountUnit`, see `AmountUnit` description. Currency: CNY (Chinese site), USD (international site).
        /// </summary>
        public readonly int OriginalPrice;
        /// <summary>
        /// The actual price may be different from the original price due to discounts. Unit: Cent (default). If the request parameter contains `AmountUnit`, see `AmountUnit` description. Currency: CNY (Chinese site), USD (international site).
        /// </summary>
        public readonly int Price;
        public readonly string? ResultOutputFile;
        public readonly Outputs.GetUpgradePriceSplitShardConfigResult? SplitShardConfig;
        public readonly string UpgradeType;

        [OutputConstructor]
        private GetUpgradePriceResult(
            Outputs.GetUpgradePriceAddShardConfigResult? addShardConfig,

            string? amountUnit,

            Outputs.GetUpgradePriceExpandShardConfigResult? expandShardConfig,

            string formula,

            string id,

            string instanceId,

            int originalPrice,

            int price,

            string? resultOutputFile,

            Outputs.GetUpgradePriceSplitShardConfigResult? splitShardConfig,

            string upgradeType)
        {
            AddShardConfig = addShardConfig;
            AmountUnit = amountUnit;
            ExpandShardConfig = expandShardConfig;
            Formula = formula;
            Id = id;
            InstanceId = instanceId;
            OriginalPrice = originalPrice;
            Price = price;
            ResultOutputFile = resultOutputFile;
            SplitShardConfig = splitShardConfig;
            UpgradeType = upgradeType;
        }
    }
}
