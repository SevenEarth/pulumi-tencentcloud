// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Sqlserver
{
    /// <summary>
    /// Provides a resource to create a sqlserver complete_expansion
    /// 
    /// ## Example Usage
    /// 
    /// ### First, Create a basic SQL instance
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var zones = Tencentcloud.Availability.GetZonesByProduct.Invoke(new()
    ///     {
    ///         Product = "sqlserver",
    ///     });
    /// 
    ///     var vpc = new Tencentcloud.Vpc.Instance("vpc", new()
    ///     {
    ///         CidrBlock = "10.0.0.0/16",
    ///     });
    /// 
    ///     var subnet = new Tencentcloud.Subnet.Instance("subnet", new()
    ///     {
    ///         AvailabilityZone = zones.Apply(getZonesByProductResult =&gt; getZonesByProductResult.Zones[4]?.Name),
    ///         VpcId = vpc.Id,
    ///         CidrBlock = "10.0.0.0/16",
    ///         IsMulticast = false,
    ///     });
    /// 
    ///     var securityGroup = new Tencentcloud.Security.Group("securityGroup", new()
    ///     {
    ///         Description = "desc.",
    ///     });
    /// 
    ///     var example = new Tencentcloud.Sqlserver.Instance("example", new()
    ///     {
    ///         AvailabilityZone = zones.Apply(getZonesByProductResult =&gt; getZonesByProductResult.Zones[4]?.Name),
    ///         ChargeType = "POSTPAID_BY_HOUR",
    ///         VpcId = vpc.Id,
    ///         SubnetId = subnet.Id,
    ///         SecurityGroups = new[]
    ///         {
    ///             securityGroup.Id,
    ///         },
    ///         ProjectId = 0,
    ///         Memory = 2,
    ///         Storage = 20,
    ///         MaintenanceWeekSets = new[]
    ///         {
    ///             1,
    ///             2,
    ///             3,
    ///         },
    ///         MaintenanceStartTime = "01:00",
    ///         MaintenanceTimeSpan = 3,
    ///         Tags = 
    ///         {
    ///             { "createBy", "tfExample" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Expand the current instance, storage: 20-&gt;40, wait_switch = 1
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Tencentcloud.Sqlserver.Instance("example", new()
    ///     {
    ///         AvailabilityZone = data.Tencentcloud_availability_zones_by_product.Zones.Zones[4].Name,
    ///         ChargeType = "POSTPAID_BY_HOUR",
    ///         VpcId = tencentcloud_vpc.Vpc.Id,
    ///         SubnetId = tencentcloud_subnet.Subnet.Id,
    ///         SecurityGroups = new[]
    ///         {
    ///             tencentcloud_security_group.Security_group.Id,
    ///         },
    ///         ProjectId = 0,
    ///         Memory = 2,
    ///         Storage = 40,
    ///         WaitSwitch = 1,
    ///         MaintenanceWeekSets = new[]
    ///         {
    ///             1,
    ///             2,
    ///             3,
    ///         },
    ///         MaintenanceStartTime = "01:00",
    ///         MaintenanceTimeSpan = 3,
    ///         Tags = 
    ///         {
    ///             { "createBy", "tfExample" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Complete the expansion task immediately
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Tencentcloud.Sqlserver.CompleteExpansion("example", new()
    ///     {
    ///         InstanceId = tencentcloud_sqlserver_instance.Example.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Sqlserver/completeExpansion:CompleteExpansion")]
    public partial class CompleteExpansion : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of imported target instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;


        /// <summary>
        /// Create a CompleteExpansion resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CompleteExpansion(string name, CompleteExpansionArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Sqlserver/completeExpansion:CompleteExpansion", name, args ?? new CompleteExpansionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CompleteExpansion(string name, Input<string> id, CompleteExpansionState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Sqlserver/completeExpansion:CompleteExpansion", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CompleteExpansion resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CompleteExpansion Get(string name, Input<string> id, CompleteExpansionState? state = null, CustomResourceOptions? options = null)
        {
            return new CompleteExpansion(name, id, state, options);
        }
    }

    public sealed class CompleteExpansionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of imported target instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        public CompleteExpansionArgs()
        {
        }
        public static new CompleteExpansionArgs Empty => new CompleteExpansionArgs();
    }

    public sealed class CompleteExpansionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of imported target instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        public CompleteExpansionState()
        {
        }
        public static new CompleteExpansionState Empty => new CompleteExpansionState();
    }
}
