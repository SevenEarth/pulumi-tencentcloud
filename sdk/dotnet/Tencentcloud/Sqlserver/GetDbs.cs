// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Sqlserver
{
    public static class GetDbs
    {
        /// <summary>
        /// Use this data source to query DB resources for the specific SQL Server instance.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var zones = Tencentcloud.Availability.GetZonesByProduct.Invoke(new()
        ///     {
        ///         Product = "sqlserver",
        ///     });
        /// 
        ///     var vpc = new Tencentcloud.Vpc.Instance("vpc", new()
        ///     {
        ///         CidrBlock = "10.0.0.0/16",
        ///     });
        /// 
        ///     var subnet = new Tencentcloud.Subnet.Instance("subnet", new()
        ///     {
        ///         AvailabilityZone = zones.Apply(getZonesByProductResult =&gt; getZonesByProductResult.Zones[4]?.Name),
        ///         VpcId = vpc.Id,
        ///         CidrBlock = "10.0.0.0/16",
        ///         IsMulticast = false,
        ///     });
        /// 
        ///     var securityGroup = new Tencentcloud.Security.Group("securityGroup", new()
        ///     {
        ///         Description = "desc.",
        ///     });
        /// 
        ///     var exampleBasicInstance = new Tencentcloud.Sqlserver.BasicInstance("exampleBasicInstance", new()
        ///     {
        ///         AvailabilityZone = zones.Apply(getZonesByProductResult =&gt; getZonesByProductResult.Zones[4]?.Name),
        ///         ChargeType = "POSTPAID_BY_HOUR",
        ///         VpcId = vpc.Id,
        ///         SubnetId = subnet.Id,
        ///         ProjectId = 0,
        ///         Memory = 4,
        ///         Storage = 100,
        ///         Cpu = 2,
        ///         MachineType = "CLOUD_PREMIUM",
        ///         MaintenanceWeekSets = new[]
        ///         {
        ///             1,
        ///             2,
        ///             3,
        ///         },
        ///         MaintenanceStartTime = "09:00",
        ///         MaintenanceTimeSpan = 3,
        ///         SecurityGroups = new[]
        ///         {
        ///             securityGroup.Id,
        ///         },
        ///         Tags = 
        ///         {
        ///             { "test", "test" },
        ///         },
        ///     });
        /// 
        ///     var exampleDb = new Tencentcloud.Sqlserver.Db("exampleDb", new()
        ///     {
        ///         InstanceId = exampleBasicInstance.Id,
        ///         Charset = "Chinese_PRC_BIN",
        ///         Remark = "test-remark",
        ///     });
        /// 
        ///     var exampleDbs = Tencentcloud.Sqlserver.GetDbs.Invoke(new()
        ///     {
        ///         InstanceId = exampleDb.InstanceId,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDbsResult> InvokeAsync(GetDbsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDbsResult>("tencentcloud:Sqlserver/getDbs:getDbs", args ?? new GetDbsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query DB resources for the specific SQL Server instance.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var zones = Tencentcloud.Availability.GetZonesByProduct.Invoke(new()
        ///     {
        ///         Product = "sqlserver",
        ///     });
        /// 
        ///     var vpc = new Tencentcloud.Vpc.Instance("vpc", new()
        ///     {
        ///         CidrBlock = "10.0.0.0/16",
        ///     });
        /// 
        ///     var subnet = new Tencentcloud.Subnet.Instance("subnet", new()
        ///     {
        ///         AvailabilityZone = zones.Apply(getZonesByProductResult =&gt; getZonesByProductResult.Zones[4]?.Name),
        ///         VpcId = vpc.Id,
        ///         CidrBlock = "10.0.0.0/16",
        ///         IsMulticast = false,
        ///     });
        /// 
        ///     var securityGroup = new Tencentcloud.Security.Group("securityGroup", new()
        ///     {
        ///         Description = "desc.",
        ///     });
        /// 
        ///     var exampleBasicInstance = new Tencentcloud.Sqlserver.BasicInstance("exampleBasicInstance", new()
        ///     {
        ///         AvailabilityZone = zones.Apply(getZonesByProductResult =&gt; getZonesByProductResult.Zones[4]?.Name),
        ///         ChargeType = "POSTPAID_BY_HOUR",
        ///         VpcId = vpc.Id,
        ///         SubnetId = subnet.Id,
        ///         ProjectId = 0,
        ///         Memory = 4,
        ///         Storage = 100,
        ///         Cpu = 2,
        ///         MachineType = "CLOUD_PREMIUM",
        ///         MaintenanceWeekSets = new[]
        ///         {
        ///             1,
        ///             2,
        ///             3,
        ///         },
        ///         MaintenanceStartTime = "09:00",
        ///         MaintenanceTimeSpan = 3,
        ///         SecurityGroups = new[]
        ///         {
        ///             securityGroup.Id,
        ///         },
        ///         Tags = 
        ///         {
        ///             { "test", "test" },
        ///         },
        ///     });
        /// 
        ///     var exampleDb = new Tencentcloud.Sqlserver.Db("exampleDb", new()
        ///     {
        ///         InstanceId = exampleBasicInstance.Id,
        ///         Charset = "Chinese_PRC_BIN",
        ///         Remark = "test-remark",
        ///     });
        /// 
        ///     var exampleDbs = Tencentcloud.Sqlserver.GetDbs.Invoke(new()
        ///     {
        ///         InstanceId = exampleDb.InstanceId,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDbsResult> Invoke(GetDbsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDbsResult>("tencentcloud:Sqlserver/getDbs:getDbs", args ?? new GetDbsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDbsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// SQL Server instance ID which DB belongs to.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// Used to store results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetDbsArgs()
        {
        }
        public static new GetDbsArgs Empty => new GetDbsArgs();
    }

    public sealed class GetDbsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// SQL Server instance ID which DB belongs to.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Used to store results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetDbsInvokeArgs()
        {
        }
        public static new GetDbsInvokeArgs Empty => new GetDbsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDbsResult
    {
        /// <summary>
        /// A list of dbs belong to the specific instance. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDbsDbListResult> DbLists;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// SQL Server instance ID which DB belongs to.
        /// </summary>
        public readonly string InstanceId;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetDbsResult(
            ImmutableArray<Outputs.GetDbsDbListResult> dbLists,

            string id,

            string instanceId,

            string? resultOutputFile)
        {
            DbLists = dbLists;
            Id = id;
            InstanceId = instanceId;
            ResultOutputFile = resultOutputFile;
        }
    }
}
