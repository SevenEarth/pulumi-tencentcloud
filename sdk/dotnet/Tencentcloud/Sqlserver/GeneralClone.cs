// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Sqlserver
{
    /// <summary>
    /// Provides a resource to create a sqlserver general_communication
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var zones = Tencentcloud.Availability.GetZonesByProduct.Invoke(new()
    ///     {
    ///         Product = "sqlserver",
    ///     });
    /// 
    ///     var vpc = new Tencentcloud.Vpc.Instance("vpc", new()
    ///     {
    ///         CidrBlock = "10.0.0.0/16",
    ///     });
    /// 
    ///     var subnet = new Tencentcloud.Subnet.Instance("subnet", new()
    ///     {
    ///         AvailabilityZone = zones.Apply(getZonesByProductResult =&gt; getZonesByProductResult.Zones[4]?.Name),
    ///         VpcId = vpc.Id,
    ///         CidrBlock = "10.0.0.0/16",
    ///         IsMulticast = false,
    ///     });
    /// 
    ///     var securityGroup = new Tencentcloud.Security.Group("securityGroup", new()
    ///     {
    ///         Description = "desc.",
    ///     });
    /// 
    ///     var exampleBasicInstance = new Tencentcloud.Sqlserver.BasicInstance("exampleBasicInstance", new()
    ///     {
    ///         AvailabilityZone = zones.Apply(getZonesByProductResult =&gt; getZonesByProductResult.Zones[4]?.Name),
    ///         ChargeType = "POSTPAID_BY_HOUR",
    ///         VpcId = vpc.Id,
    ///         SubnetId = subnet.Id,
    ///         ProjectId = 0,
    ///         Memory = 4,
    ///         Storage = 100,
    ///         Cpu = 2,
    ///         MachineType = "CLOUD_PREMIUM",
    ///         MaintenanceWeekSets = new[]
    ///         {
    ///             1,
    ///             2,
    ///             3,
    ///         },
    ///         MaintenanceStartTime = "09:00",
    ///         MaintenanceTimeSpan = 3,
    ///         SecurityGroups = new[]
    ///         {
    ///             securityGroup.Id,
    ///         },
    ///         Tags = 
    ///         {
    ///             { "test", "test" },
    ///         },
    ///     });
    /// 
    ///     var exampleDb = new Tencentcloud.Sqlserver.Db("exampleDb", new()
    ///     {
    ///         InstanceId = exampleBasicInstance.Id,
    ///         Charset = "Chinese_PRC_BIN",
    ///         Remark = "test-remark",
    ///     });
    /// 
    ///     var exampleGeneralClone = new Tencentcloud.Sqlserver.GeneralClone("exampleGeneralClone", new()
    ///     {
    ///         InstanceId = exampleDb.InstanceId,
    ///         OldName = exampleDb.Name,
    ///         NewName = "tf_example_db_clone",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// sqlserver general_communication can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import tencentcloud:Sqlserver/generalClone:GeneralClone example mssql-si2823jyl#tf_example_db#tf_example_db_clone
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Sqlserver/generalClone:GeneralClone")]
    public partial class GeneralClone : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Instance ID.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
        /// </summary>
        [Output("newName")]
        public Output<string> NewName { get; private set; } = null!;

        /// <summary>
        /// Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline migration tasks.
        /// </summary>
        [Output("oldName")]
        public Output<string> OldName { get; private set; } = null!;


        /// <summary>
        /// Create a GeneralClone resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GeneralClone(string name, GeneralCloneArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Sqlserver/generalClone:GeneralClone", name, args ?? new GeneralCloneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GeneralClone(string name, Input<string> id, GeneralCloneState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Sqlserver/generalClone:GeneralClone", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GeneralClone resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GeneralClone Get(string name, Input<string> id, GeneralCloneState? state = null, CustomResourceOptions? options = null)
        {
            return new GeneralClone(name, id, state, options);
        }
    }

    public sealed class GeneralCloneArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
        /// </summary>
        [Input("newName", required: true)]
        public Input<string> NewName { get; set; } = null!;

        /// <summary>
        /// Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline migration tasks.
        /// </summary>
        [Input("oldName", required: true)]
        public Input<string> OldName { get; set; } = null!;

        public GeneralCloneArgs()
        {
        }
        public static new GeneralCloneArgs Empty => new GeneralCloneArgs();
    }

    public sealed class GeneralCloneState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
        /// </summary>
        [Input("newName")]
        public Input<string>? NewName { get; set; }

        /// <summary>
        /// Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline migration tasks.
        /// </summary>
        [Input("oldName")]
        public Input<string>? OldName { get; set; }

        public GeneralCloneState()
        {
        }
        public static new GeneralCloneState Empty => new GeneralCloneState();
    }
}
