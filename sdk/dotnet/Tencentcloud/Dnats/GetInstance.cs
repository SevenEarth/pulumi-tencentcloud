// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Dnats
{
    public static class GetInstance
    {
        /// <summary>
        /// Use this data source to query detailed information of DNATs.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Tencentcloud.Dnats.GetInstance.Invoke(new()
        ///     {
        ///         ElasticIp = "123.207.115.136",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("tencentcloud:Dnats/getInstance:getInstance", args ?? new GetInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of DNATs.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Tencentcloud.Dnats.GetInstance.Invoke(new()
        ///     {
        ///         ElasticIp = "123.207.115.136",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("tencentcloud:Dnats/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Description of the NAT forward.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Network address of the EIP.
        /// </summary>
        [Input("elasticIp")]
        public string? ElasticIp { get; set; }

        /// <summary>
        /// Port of the EIP.
        /// </summary>
        [Input("elasticPort")]
        public string? ElasticPort { get; set; }

        /// <summary>
        /// ID of the NAT gateway.
        /// </summary>
        [Input("natId")]
        public string? NatId { get; set; }

        /// <summary>
        /// Network address of the backend service.
        /// </summary>
        [Input("privateIp")]
        public string? PrivateIp { get; set; }

        /// <summary>
        /// Port of intranet.
        /// </summary>
        [Input("privatePort")]
        public string? PrivatePort { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// ID of the VPC.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetInstanceArgs()
        {
        }
        public static new GetInstanceArgs Empty => new GetInstanceArgs();
    }

    public sealed class GetInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Description of the NAT forward.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Network address of the EIP.
        /// </summary>
        [Input("elasticIp")]
        public Input<string>? ElasticIp { get; set; }

        /// <summary>
        /// Port of the EIP.
        /// </summary>
        [Input("elasticPort")]
        public Input<string>? ElasticPort { get; set; }

        /// <summary>
        /// ID of the NAT gateway.
        /// </summary>
        [Input("natId")]
        public Input<string>? NatId { get; set; }

        /// <summary>
        /// Network address of the backend service.
        /// </summary>
        [Input("privateIp")]
        public Input<string>? PrivateIp { get; set; }

        /// <summary>
        /// Port of intranet.
        /// </summary>
        [Input("privatePort")]
        public Input<string>? PrivatePort { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// ID of the VPC.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetInstanceInvokeArgs()
        {
        }
        public static new GetInstanceInvokeArgs Empty => new GetInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        public readonly string? Description;
        /// <summary>
        /// Information list of the DNATs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceDnatListResult> DnatLists;
        /// <summary>
        /// Network address of the EIP.
        /// </summary>
        public readonly string? ElasticIp;
        /// <summary>
        /// Port of the EIP.
        /// </summary>
        public readonly string? ElasticPort;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ID of the NAT.
        /// </summary>
        public readonly string? NatId;
        /// <summary>
        /// Network address of the backend service.
        /// </summary>
        public readonly string? PrivateIp;
        /// <summary>
        /// Port of intranet.
        /// </summary>
        public readonly string? PrivatePort;
        public readonly string? ResultOutputFile;
        /// <summary>
        /// ID of the VPC.
        /// </summary>
        public readonly string? VpcId;

        [OutputConstructor]
        private GetInstanceResult(
            string? description,

            ImmutableArray<Outputs.GetInstanceDnatListResult> dnatLists,

            string? elasticIp,

            string? elasticPort,

            string id,

            string? natId,

            string? privateIp,

            string? privatePort,

            string? resultOutputFile,

            string? vpcId)
        {
            Description = description;
            DnatLists = dnatLists;
            ElasticIp = elasticIp;
            ElasticPort = elasticPort;
            Id = id;
            NatId = natId;
            PrivateIp = privateIp;
            PrivatePort = privatePort;
            ResultOutputFile = resultOutputFile;
            VpcId = vpcId;
        }
    }
}
