// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Pts.Outputs
{

    [OutputType]
    public sealed class GetScenarioWithJobsScenarioWithJobsSetJobResult
    {
        /// <summary>
        /// The reason for aborting the job.
        /// </summary>
        public readonly int AbortReason;
        /// <summary>
        /// Deprecated.
        /// </summary>
        public readonly ImmutableArray<string> Configs;
        /// <summary>
        /// The creation time of the scenario.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The cron job ID.
        /// </summary>
        public readonly string CronId;
        /// <summary>
        /// The test data sets for the load test.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobDatasetResult> Datasets;
        /// <summary>
        /// Whether to run the job in the debug mode. The default value is false.
        /// </summary>
        public readonly bool Debug;
        /// <summary>
        /// The configuration for parsing domain names.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobDomainNameConfigResult> DomainNameConfigs;
        /// <summary>
        /// Job running duration.
        /// </summary>
        public readonly int Duration;
        /// <summary>
        /// The job ending time.
        /// </summary>
        public readonly string EndTime;
        /// <summary>
        /// Error rate.
        /// </summary>
        public readonly double ErrorRate;
        /// <summary>
        /// Deprecated.
        /// </summary>
        public readonly ImmutableArray<string> Extensions;
        /// <summary>
        /// Job ID.
        /// </summary>
        public readonly string JobId;
        /// <summary>
        /// Job owner.
        /// </summary>
        public readonly string JobOwner;
        /// <summary>
        /// The load source information.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobLoadSourceInfoResult> LoadSourceInfos;
        /// <summary>
        /// Deprecated.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobLoadSourceResult> LoadSources;
        /// <summary>
        /// Scenario is load test configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobLoadResult> Loads;
        /// <summary>
        /// The maximum RPS.
        /// </summary>
        public readonly int MaxRequestsPerSecond;
        /// <summary>
        /// The maximum VU of the job.
        /// </summary>
        public readonly int MaxVirtualUserCount;
        /// <summary>
        /// The message describing the job running status.
        /// </summary>
        public readonly string Message;
        /// <summary>
        /// The rate of receiving bytes.
        /// </summary>
        public readonly double NetworkReceiveRate;
        /// <summary>
        /// The rate of sending bytes.
        /// </summary>
        public readonly double NetworkSendRate;
        /// <summary>
        /// The note of the job.
        /// </summary>
        public readonly string Note;
        /// <summary>
        /// The notification hooks.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobNotificationHookResult> NotificationHooks;
        /// <summary>
        /// Plugins.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobPluginResult> Plugins;
        /// <summary>
        /// Project ID.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Project name.
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// The protocol file.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobProtocolResult> Protocols;
        /// <summary>
        /// The files in the request.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobRequestFileResult> RequestFiles;
        /// <summary>
        /// The total reqeust count.
        /// </summary>
        public readonly double RequestTotal;
        /// <summary>
        /// The configuration of the RPS mode load test.
        /// </summary>
        public readonly double RequestsPerSecond;
        /// <summary>
        /// The average response time.
        /// </summary>
        public readonly double ResponseTimeAverage;
        /// <summary>
        /// The maximum response time.
        /// </summary>
        public readonly double ResponseTimeMax;
        /// <summary>
        /// The minimum response time.
        /// </summary>
        public readonly double ResponseTimeMin;
        /// <summary>
        /// The 90 percentile of the response time.
        /// </summary>
        public readonly double ResponseTimeP90;
        /// <summary>
        /// The 95 percentile of the response time.
        /// </summary>
        public readonly double ResponseTimeP95;
        /// <summary>
        /// The 99 percentile of the response time.
        /// </summary>
        public readonly double ResponseTimeP99;
        /// <summary>
        /// Scenario ID.
        /// </summary>
        public readonly string ScenarioId;
        /// <summary>
        /// Scenario name.
        /// </summary>
        public readonly string ScenarioName;
        /// <summary>
        /// Deprecated.
        /// </summary>
        public readonly ImmutableArray<string> Scripts;
        /// <summary>
        /// The job starting time.
        /// </summary>
        public readonly string StartTime;
        /// <summary>
        /// Scenario status.
        /// </summary>
        public readonly int Status;
        /// <summary>
        /// The script of the load test.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobTestScriptResult> TestScripts;
        /// <summary>
        /// Scenario type, e.g.: pts-http, pts-js, pts-trpc, pts-jmeter.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetScenarioWithJobsScenarioWithJobsSetJobResult(
            int abortReason,

            ImmutableArray<string> configs,

            string createdAt,

            string cronId,

            ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobDatasetResult> datasets,

            bool debug,

            ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobDomainNameConfigResult> domainNameConfigs,

            int duration,

            string endTime,

            double errorRate,

            ImmutableArray<string> extensions,

            string jobId,

            string jobOwner,

            ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobLoadSourceInfoResult> loadSourceInfos,

            ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobLoadSourceResult> loadSources,

            ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobLoadResult> loads,

            int maxRequestsPerSecond,

            int maxVirtualUserCount,

            string message,

            double networkReceiveRate,

            double networkSendRate,

            string note,

            ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobNotificationHookResult> notificationHooks,

            ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobPluginResult> plugins,

            string projectId,

            string projectName,

            ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobProtocolResult> protocols,

            ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobRequestFileResult> requestFiles,

            double requestTotal,

            double requestsPerSecond,

            double responseTimeAverage,

            double responseTimeMax,

            double responseTimeMin,

            double responseTimeP90,

            double responseTimeP95,

            double responseTimeP99,

            string scenarioId,

            string scenarioName,

            ImmutableArray<string> scripts,

            string startTime,

            int status,

            ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetJobTestScriptResult> testScripts,

            string type)
        {
            AbortReason = abortReason;
            Configs = configs;
            CreatedAt = createdAt;
            CronId = cronId;
            Datasets = datasets;
            Debug = debug;
            DomainNameConfigs = domainNameConfigs;
            Duration = duration;
            EndTime = endTime;
            ErrorRate = errorRate;
            Extensions = extensions;
            JobId = jobId;
            JobOwner = jobOwner;
            LoadSourceInfos = loadSourceInfos;
            LoadSources = loadSources;
            Loads = loads;
            MaxRequestsPerSecond = maxRequestsPerSecond;
            MaxVirtualUserCount = maxVirtualUserCount;
            Message = message;
            NetworkReceiveRate = networkReceiveRate;
            NetworkSendRate = networkSendRate;
            Note = note;
            NotificationHooks = notificationHooks;
            Plugins = plugins;
            ProjectId = projectId;
            ProjectName = projectName;
            Protocols = protocols;
            RequestFiles = requestFiles;
            RequestTotal = requestTotal;
            RequestsPerSecond = requestsPerSecond;
            ResponseTimeAverage = responseTimeAverage;
            ResponseTimeMax = responseTimeMax;
            ResponseTimeMin = responseTimeMin;
            ResponseTimeP90 = responseTimeP90;
            ResponseTimeP95 = responseTimeP95;
            ResponseTimeP99 = responseTimeP99;
            ScenarioId = scenarioId;
            ScenarioName = scenarioName;
            Scripts = scripts;
            StartTime = startTime;
            Status = status;
            TestScripts = testScripts;
            Type = type;
        }
    }
}
