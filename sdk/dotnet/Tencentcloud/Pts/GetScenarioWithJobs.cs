// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Pts
{
    public static class GetScenarioWithJobs
    {
        /// <summary>
        /// Use this data source to query detailed information of pts scenario_with_jobs
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var scenarioWithJobs = Output.Create(Tencentcloud.Pts.GetScenarioWithJobs.InvokeAsync(new Tencentcloud.Pts.GetScenarioWithJobsArgs
        ///         {
        ///             Ascend = true,
        ///             IgnoreDataset = true,
        ///             IgnoreScript = true,
        ///             ProjectIds = 
        ///             {
        ///                 "project-45vw7v82",
        ///             },
        ///             ScenarioIds = 
        ///             {
        ///                 "scenario-koakp3h6",
        ///             },
        ///             ScenarioName = "pts-jmeter",
        ///             ScenarioType = "pts-jmeter",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetScenarioWithJobsResult> InvokeAsync(GetScenarioWithJobsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetScenarioWithJobsResult>("tencentcloud:Pts/getScenarioWithJobs:getScenarioWithJobs", args ?? new GetScenarioWithJobsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of pts scenario_with_jobs
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var scenarioWithJobs = Output.Create(Tencentcloud.Pts.GetScenarioWithJobs.InvokeAsync(new Tencentcloud.Pts.GetScenarioWithJobsArgs
        ///         {
        ///             Ascend = true,
        ///             IgnoreDataset = true,
        ///             IgnoreScript = true,
        ///             ProjectIds = 
        ///             {
        ///                 "project-45vw7v82",
        ///             },
        ///             ScenarioIds = 
        ///             {
        ///                 "scenario-koakp3h6",
        ///             },
        ///             ScenarioName = "pts-jmeter",
        ///             ScenarioType = "pts-jmeter",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetScenarioWithJobsResult> Invoke(GetScenarioWithJobsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetScenarioWithJobsResult>("tencentcloud:Pts/getScenarioWithJobs:getScenarioWithJobs", args ?? new GetScenarioWithJobsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScenarioWithJobsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Whether to use ascending order.
        /// </summary>
        [Input("ascend")]
        public bool? Ascend { get; set; }

        /// <summary>
        /// Whether to ignore the dataset.
        /// </summary>
        [Input("ignoreDataset")]
        public bool? IgnoreDataset { get; set; }

        /// <summary>
        /// Whether to ignore the script content.
        /// </summary>
        [Input("ignoreScript")]
        public bool? IgnoreScript { get; set; }

        /// <summary>
        /// The field column used for ordering.
        /// </summary>
        [Input("orderBy")]
        public string? OrderBy { get; set; }

        /// <summary>
        /// The job owner.
        /// </summary>
        [Input("owner")]
        public string? Owner { get; set; }

        [Input("projectIds", required: true)]
        private List<string>? _projectIds;

        /// <summary>
        /// Project ID list.
        /// </summary>
        public List<string> ProjectIds
        {
            get => _projectIds ?? (_projectIds = new List<string>());
            set => _projectIds = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        [Input("scenarioIds")]
        private List<string>? _scenarioIds;

        /// <summary>
        /// Scenario ID list.
        /// </summary>
        public List<string> ScenarioIds
        {
            get => _scenarioIds ?? (_scenarioIds = new List<string>());
            set => _scenarioIds = value;
        }

        /// <summary>
        /// Scenario name.
        /// </summary>
        [Input("scenarioName")]
        public string? ScenarioName { get; set; }

        /// <summary>
        /// Scenario type, e.g.: pts-http, pts-js, pts-trpc, pts-jmeter.
        /// </summary>
        [Input("scenarioType")]
        public string? ScenarioType { get; set; }

        public GetScenarioWithJobsArgs()
        {
        }
    }

    public sealed class GetScenarioWithJobsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Whether to use ascending order.
        /// </summary>
        [Input("ascend")]
        public Input<bool>? Ascend { get; set; }

        /// <summary>
        /// Whether to ignore the dataset.
        /// </summary>
        [Input("ignoreDataset")]
        public Input<bool>? IgnoreDataset { get; set; }

        /// <summary>
        /// Whether to ignore the script content.
        /// </summary>
        [Input("ignoreScript")]
        public Input<bool>? IgnoreScript { get; set; }

        /// <summary>
        /// The field column used for ordering.
        /// </summary>
        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        /// <summary>
        /// The job owner.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("projectIds", required: true)]
        private InputList<string>? _projectIds;

        /// <summary>
        /// Project ID list.
        /// </summary>
        public InputList<string> ProjectIds
        {
            get => _projectIds ?? (_projectIds = new InputList<string>());
            set => _projectIds = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        [Input("scenarioIds")]
        private InputList<string>? _scenarioIds;

        /// <summary>
        /// Scenario ID list.
        /// </summary>
        public InputList<string> ScenarioIds
        {
            get => _scenarioIds ?? (_scenarioIds = new InputList<string>());
            set => _scenarioIds = value;
        }

        /// <summary>
        /// Scenario name.
        /// </summary>
        [Input("scenarioName")]
        public Input<string>? ScenarioName { get; set; }

        /// <summary>
        /// Scenario type, e.g.: pts-http, pts-js, pts-trpc, pts-jmeter.
        /// </summary>
        [Input("scenarioType")]
        public Input<string>? ScenarioType { get; set; }

        public GetScenarioWithJobsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetScenarioWithJobsResult
    {
        public readonly bool? Ascend;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IgnoreDataset;
        public readonly bool? IgnoreScript;
        public readonly string? OrderBy;
        /// <summary>
        /// The owner.
        /// </summary>
        public readonly string? Owner;
        public readonly ImmutableArray<string> ProjectIds;
        public readonly string? ResultOutputFile;
        public readonly ImmutableArray<string> ScenarioIds;
        /// <summary>
        /// Scenario name.
        /// </summary>
        public readonly string? ScenarioName;
        public readonly string? ScenarioType;
        /// <summary>
        /// The scenario configuration and its jobs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetResult> ScenarioWithJobsSets;

        [OutputConstructor]
        private GetScenarioWithJobsResult(
            bool? ascend,

            string id,

            bool? ignoreDataset,

            bool? ignoreScript,

            string? orderBy,

            string? owner,

            ImmutableArray<string> projectIds,

            string? resultOutputFile,

            ImmutableArray<string> scenarioIds,

            string? scenarioName,

            string? scenarioType,

            ImmutableArray<Outputs.GetScenarioWithJobsScenarioWithJobsSetResult> scenarioWithJobsSets)
        {
            Ascend = ascend;
            Id = id;
            IgnoreDataset = ignoreDataset;
            IgnoreScript = ignoreScript;
            OrderBy = orderBy;
            Owner = owner;
            ProjectIds = projectIds;
            ResultOutputFile = resultOutputFile;
            ScenarioIds = scenarioIds;
            ScenarioName = scenarioName;
            ScenarioType = scenarioType;
            ScenarioWithJobsSets = scenarioWithJobsSets;
        }
    }
}
