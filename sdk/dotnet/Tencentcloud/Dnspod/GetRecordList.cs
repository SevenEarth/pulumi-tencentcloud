// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Dnspod
{
    public static class GetRecordList
    {
        /// <summary>
        /// Use this data source to query detailed information of dnspod record_list
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var recordList = Tencentcloud.Dnspod.GetRecordList.Invoke(new()
        ///     {
        ///         Domain = "iac-tf.cloud",
        ///         GroupIds = new() { },
        ///         IsExactSubDomain = true,
        ///         Keyword = "",
        ///         MxBegin = 0,
        ///         MxEnd = 10,
        ///         RecordStatuses = new[]
        ///         {
        ///             "ENABLE",
        ///         },
        ///         RecordTypes = new[]
        ///         {
        ///             "A",
        ///             "NS",
        ///             "CNAME",
        ///             "NS",
        ///             "AAAA",
        ///         },
        ///         RecordValue = "bicycle.dnspod.net",
        ///         Remark = "",
        ///         SortField = "UPDATED_ON",
        ///         SortType = "DESC",
        ///         TtlBegin = 1,
        ///         TtlEnd = 864000,
        ///         UpdatedAtBegin = "2021-09-07",
        ///         UpdatedAtEnd = "2023-12-07",
        ///         WeightBegin = 0,
        ///         WeightEnd = 100,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetRecordListResult> InvokeAsync(GetRecordListArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRecordListResult>("tencentcloud:Dnspod/getRecordList:getRecordList", args ?? new GetRecordListArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of dnspod record_list
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var recordList = Tencentcloud.Dnspod.GetRecordList.Invoke(new()
        ///     {
        ///         Domain = "iac-tf.cloud",
        ///         GroupIds = new() { },
        ///         IsExactSubDomain = true,
        ///         Keyword = "",
        ///         MxBegin = 0,
        ///         MxEnd = 10,
        ///         RecordStatuses = new[]
        ///         {
        ///             "ENABLE",
        ///         },
        ///         RecordTypes = new[]
        ///         {
        ///             "A",
        ///             "NS",
        ///             "CNAME",
        ///             "NS",
        ///             "AAAA",
        ///         },
        ///         RecordValue = "bicycle.dnspod.net",
        ///         Remark = "",
        ///         SortField = "UPDATED_ON",
        ///         SortType = "DESC",
        ///         TtlBegin = 1,
        ///         TtlEnd = 864000,
        ///         UpdatedAtBegin = "2021-09-07",
        ///         UpdatedAtEnd = "2023-12-07",
        ///         WeightBegin = 0,
        ///         WeightEnd = 100,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetRecordListResult> Invoke(GetRecordListInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRecordListResult>("tencentcloud:Dnspod/getRecordList:getRecordList", args ?? new GetRecordListInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRecordListArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain to which the resolution record belongs.
        /// </summary>
        [Input("domain", required: true)]
        public string Domain { get; set; } = null!;

        /// <summary>
        /// The domain ID to which the resolution record belongs. If DomainId is provided, the system will ignore the Domain parameter. You can find all Domain and DomainId through the DescribeDomainList interface.
        /// </summary>
        [Input("domainId")]
        public int? DomainId { get; set; }

        [Input("groupIds")]
        private List<int>? _groupIds;

        /// <summary>
        /// When retrieving resolution records under certain groups, pass this group ID. You can obtain the GroupId field through the DescribeRecordGroupList interface.
        /// </summary>
        public List<int> GroupIds
        {
            get => _groupIds ?? (_groupIds = new List<int>());
            set => _groupIds = value;
        }

        /// <summary>
        /// Whether to perform an exact search based on the SubDomain parameter.
        /// </summary>
        [Input("isExactSubDomain")]
        public bool? IsExactSubDomain { get; set; }

        /// <summary>
        /// Search for resolution records by keyword, currently supporting searching host headers and record values.
        /// </summary>
        [Input("keyword")]
        public string? Keyword { get; set; }

        /// <summary>
        /// The starting point of the resolution record MX priority query interval.
        /// </summary>
        [Input("mxBegin")]
        public int? MxBegin { get; set; }

        /// <summary>
        /// The endpoint of the resolution record MX priority query interval.
        /// </summary>
        [Input("mxEnd")]
        public int? MxEnd { get; set; }

        /// <summary>
        /// Project ID.
        /// </summary>
        [Input("projectId")]
        public int? ProjectId { get; set; }

        [Input("recordLines")]
        private List<string>? _recordLines;

        /// <summary>
        /// Retrieve resolution records for certain line IDs. You can view the allowed line information for the current domain through the DescribeRecordLineList interface.
        /// </summary>
        public List<string> RecordLines
        {
            get => _recordLines ?? (_recordLines = new List<string>());
            set => _recordLines = value;
        }

        [Input("recordStatuses")]
        private List<string>? _recordStatuses;

        /// <summary>
        /// Get the resolution record based on the resolution record status. The possible values are ENABLE and DISABLE. ENABLE: Normal DISABLE: Paused.
        /// </summary>
        public List<string> RecordStatuses
        {
            get => _recordStatuses ?? (_recordStatuses = new List<string>());
            set => _recordStatuses = value;
        }

        [Input("recordTypes")]
        private List<string>? _recordTypes;

        /// <summary>
        /// Retrieve certain types of resolution records, such as A, CNAME, NS, AAAA, explicit URL, implicit URL, CAA, SPF, etc.
        /// </summary>
        public List<string> RecordTypes
        {
            get => _recordTypes ?? (_recordTypes = new List<string>());
            set => _recordTypes = value;
        }

        /// <summary>
        /// Get the resolution record based on the resolution record value.
        /// </summary>
        [Input("recordValue")]
        public string? RecordValue { get; set; }

        /// <summary>
        /// Get the resolution record based on the resolution record remark.
        /// </summary>
        [Input("remark")]
        public string? Remark { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// Sorting field, supporting NAME, LINE, TYPE, VALUE, WEIGHT, MX, TTL, UPDATED_ON fields. NAME: The host header of the resolution record LINE: The resolution record line TYPE: The resolution record type VALUE: The resolution record value WEIGHT: The weight MX: MX priority TTL: The resolution record cache time UPDATED_ON: The resolution record update time.
        /// </summary>
        [Input("sortField")]
        public string? SortField { get; set; }

        /// <summary>
        /// Sorting method, ascending: ASC, descending: DESC. The default value is ASC.
        /// </summary>
        [Input("sortType")]
        public string? SortType { get; set; }

        /// <summary>
        /// Retrieve resolution records based on the host header of the resolution record. Fuzzy matching is used by default. You can set the IsExactSubdomain parameter to true for precise searching.
        /// </summary>
        [Input("subDomain")]
        public string? SubDomain { get; set; }

        /// <summary>
        /// The starting point of the resolution record TTL query interval.
        /// </summary>
        [Input("ttlBegin")]
        public int? TtlBegin { get; set; }

        /// <summary>
        /// The endpoint of the resolution record TTL query interval.
        /// </summary>
        [Input("ttlEnd")]
        public int? TtlEnd { get; set; }

        /// <summary>
        /// The starting point of the resolution record update time query interval.
        /// </summary>
        [Input("updatedAtBegin")]
        public string? UpdatedAtBegin { get; set; }

        /// <summary>
        /// The endpoint of the resolution record update time query interval.
        /// </summary>
        [Input("updatedAtEnd")]
        public string? UpdatedAtEnd { get; set; }

        /// <summary>
        /// The starting point of the resolution record weight query interval.
        /// </summary>
        [Input("weightBegin")]
        public int? WeightBegin { get; set; }

        /// <summary>
        /// The endpoint of the resolution record weight query interval.
        /// </summary>
        [Input("weightEnd")]
        public int? WeightEnd { get; set; }

        public GetRecordListArgs()
        {
        }
        public static new GetRecordListArgs Empty => new GetRecordListArgs();
    }

    public sealed class GetRecordListInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain to which the resolution record belongs.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// The domain ID to which the resolution record belongs. If DomainId is provided, the system will ignore the Domain parameter. You can find all Domain and DomainId through the DescribeDomainList interface.
        /// </summary>
        [Input("domainId")]
        public Input<int>? DomainId { get; set; }

        [Input("groupIds")]
        private InputList<int>? _groupIds;

        /// <summary>
        /// When retrieving resolution records under certain groups, pass this group ID. You can obtain the GroupId field through the DescribeRecordGroupList interface.
        /// </summary>
        public InputList<int> GroupIds
        {
            get => _groupIds ?? (_groupIds = new InputList<int>());
            set => _groupIds = value;
        }

        /// <summary>
        /// Whether to perform an exact search based on the SubDomain parameter.
        /// </summary>
        [Input("isExactSubDomain")]
        public Input<bool>? IsExactSubDomain { get; set; }

        /// <summary>
        /// Search for resolution records by keyword, currently supporting searching host headers and record values.
        /// </summary>
        [Input("keyword")]
        public Input<string>? Keyword { get; set; }

        /// <summary>
        /// The starting point of the resolution record MX priority query interval.
        /// </summary>
        [Input("mxBegin")]
        public Input<int>? MxBegin { get; set; }

        /// <summary>
        /// The endpoint of the resolution record MX priority query interval.
        /// </summary>
        [Input("mxEnd")]
        public Input<int>? MxEnd { get; set; }

        /// <summary>
        /// Project ID.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        [Input("recordLines")]
        private InputList<string>? _recordLines;

        /// <summary>
        /// Retrieve resolution records for certain line IDs. You can view the allowed line information for the current domain through the DescribeRecordLineList interface.
        /// </summary>
        public InputList<string> RecordLines
        {
            get => _recordLines ?? (_recordLines = new InputList<string>());
            set => _recordLines = value;
        }

        [Input("recordStatuses")]
        private InputList<string>? _recordStatuses;

        /// <summary>
        /// Get the resolution record based on the resolution record status. The possible values are ENABLE and DISABLE. ENABLE: Normal DISABLE: Paused.
        /// </summary>
        public InputList<string> RecordStatuses
        {
            get => _recordStatuses ?? (_recordStatuses = new InputList<string>());
            set => _recordStatuses = value;
        }

        [Input("recordTypes")]
        private InputList<string>? _recordTypes;

        /// <summary>
        /// Retrieve certain types of resolution records, such as A, CNAME, NS, AAAA, explicit URL, implicit URL, CAA, SPF, etc.
        /// </summary>
        public InputList<string> RecordTypes
        {
            get => _recordTypes ?? (_recordTypes = new InputList<string>());
            set => _recordTypes = value;
        }

        /// <summary>
        /// Get the resolution record based on the resolution record value.
        /// </summary>
        [Input("recordValue")]
        public Input<string>? RecordValue { get; set; }

        /// <summary>
        /// Get the resolution record based on the resolution record remark.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// Sorting field, supporting NAME, LINE, TYPE, VALUE, WEIGHT, MX, TTL, UPDATED_ON fields. NAME: The host header of the resolution record LINE: The resolution record line TYPE: The resolution record type VALUE: The resolution record value WEIGHT: The weight MX: MX priority TTL: The resolution record cache time UPDATED_ON: The resolution record update time.
        /// </summary>
        [Input("sortField")]
        public Input<string>? SortField { get; set; }

        /// <summary>
        /// Sorting method, ascending: ASC, descending: DESC. The default value is ASC.
        /// </summary>
        [Input("sortType")]
        public Input<string>? SortType { get; set; }

        /// <summary>
        /// Retrieve resolution records based on the host header of the resolution record. Fuzzy matching is used by default. You can set the IsExactSubdomain parameter to true for precise searching.
        /// </summary>
        [Input("subDomain")]
        public Input<string>? SubDomain { get; set; }

        /// <summary>
        /// The starting point of the resolution record TTL query interval.
        /// </summary>
        [Input("ttlBegin")]
        public Input<int>? TtlBegin { get; set; }

        /// <summary>
        /// The endpoint of the resolution record TTL query interval.
        /// </summary>
        [Input("ttlEnd")]
        public Input<int>? TtlEnd { get; set; }

        /// <summary>
        /// The starting point of the resolution record update time query interval.
        /// </summary>
        [Input("updatedAtBegin")]
        public Input<string>? UpdatedAtBegin { get; set; }

        /// <summary>
        /// The endpoint of the resolution record update time query interval.
        /// </summary>
        [Input("updatedAtEnd")]
        public Input<string>? UpdatedAtEnd { get; set; }

        /// <summary>
        /// The starting point of the resolution record weight query interval.
        /// </summary>
        [Input("weightBegin")]
        public Input<int>? WeightBegin { get; set; }

        /// <summary>
        /// The endpoint of the resolution record weight query interval.
        /// </summary>
        [Input("weightEnd")]
        public Input<int>? WeightEnd { get; set; }

        public GetRecordListInvokeArgs()
        {
        }
        public static new GetRecordListInvokeArgs Empty => new GetRecordListInvokeArgs();
    }


    [OutputType]
    public sealed class GetRecordListResult
    {
        public readonly string Domain;
        public readonly int? DomainId;
        public readonly ImmutableArray<int> GroupIds;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IsExactSubDomain;
        public readonly string? Keyword;
        public readonly int? MxBegin;
        public readonly int? MxEnd;
        public readonly int? ProjectId;
        /// <summary>
        /// Statistics of the number of records.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecordListRecordCountInfoResult> RecordCountInfos;
        public readonly ImmutableArray<string> RecordLines;
        /// <summary>
        /// List of records.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecordListRecordListResult> DnspodRecordList;
        public readonly ImmutableArray<string> RecordStatuses;
        public readonly ImmutableArray<string> RecordTypes;
        public readonly string? RecordValue;
        /// <summary>
        /// Record remark description.
        /// </summary>
        public readonly string? Remark;
        public readonly string? ResultOutputFile;
        public readonly string? SortField;
        public readonly string? SortType;
        public readonly string? SubDomain;
        public readonly int? TtlBegin;
        public readonly int? TtlEnd;
        public readonly string? UpdatedAtBegin;
        public readonly string? UpdatedAtEnd;
        public readonly int? WeightBegin;
        public readonly int? WeightEnd;

        [OutputConstructor]
        private GetRecordListResult(
            string domain,

            int? domainId,

            ImmutableArray<int> groupIds,

            string id,

            bool? isExactSubDomain,

            string? keyword,

            int? mxBegin,

            int? mxEnd,

            int? projectId,

            ImmutableArray<Outputs.GetRecordListRecordCountInfoResult> recordCountInfos,

            ImmutableArray<string> recordLines,

            ImmutableArray<Outputs.GetRecordListRecordListResult> recordLists,

            ImmutableArray<string> recordStatuses,

            ImmutableArray<string> recordTypes,

            string? recordValue,

            string? remark,

            string? resultOutputFile,

            string? sortField,

            string? sortType,

            string? subDomain,

            int? ttlBegin,

            int? ttlEnd,

            string? updatedAtBegin,

            string? updatedAtEnd,

            int? weightBegin,

            int? weightEnd)
        {
            Domain = domain;
            DomainId = domainId;
            GroupIds = groupIds;
            Id = id;
            IsExactSubDomain = isExactSubDomain;
            Keyword = keyword;
            MxBegin = mxBegin;
            MxEnd = mxEnd;
            ProjectId = projectId;
            RecordCountInfos = recordCountInfos;
            RecordLines = recordLines;
            DnspodRecordList = recordLists;
            RecordStatuses = recordStatuses;
            RecordTypes = recordTypes;
            RecordValue = recordValue;
            Remark = remark;
            ResultOutputFile = resultOutputFile;
            SortField = sortField;
            SortType = sortType;
            SubDomain = subDomain;
            TtlBegin = ttlBegin;
            TtlEnd = ttlEnd;
            UpdatedAtBegin = updatedAtBegin;
            UpdatedAtEnd = updatedAtEnd;
            WeightBegin = weightBegin;
            WeightEnd = weightEnd;
        }
    }
}
