// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Dnspod
{
    public static class GetRecordAnalytics
    {
        /// <summary>
        /// Use this data source to query detailed information of dnspod record_analytics
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var recordAnalytics = Tencentcloud.Dnspod.GetRecordAnalytics.Invoke(new()
        ///     {
        ///         DnsFormat = "HOUR",
        ///         Domain = "iac-tf.cloud",
        ///         EndDate = "2023-11-07",
        ///         StartDate = "2023-09-07",
        ///         Subdomain = "www",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetRecordAnalyticsResult> InvokeAsync(GetRecordAnalyticsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRecordAnalyticsResult>("tencentcloud:Dnspod/getRecordAnalytics:getRecordAnalytics", args ?? new GetRecordAnalyticsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of dnspod record_analytics
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var recordAnalytics = Tencentcloud.Dnspod.GetRecordAnalytics.Invoke(new()
        ///     {
        ///         DnsFormat = "HOUR",
        ///         Domain = "iac-tf.cloud",
        ///         EndDate = "2023-11-07",
        ///         StartDate = "2023-09-07",
        ///         Subdomain = "www",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetRecordAnalyticsResult> Invoke(GetRecordAnalyticsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRecordAnalyticsResult>("tencentcloud:Dnspod/getRecordAnalytics:getRecordAnalytics", args ?? new GetRecordAnalyticsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRecordAnalyticsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// DATE: Statistics by day dimension, HOUR: Statistics by hour dimension.
        /// </summary>
        [Input("dnsFormat")]
        public string? DnsFormat { get; set; }

        /// <summary>
        /// The domain to query for resolution volume.
        /// </summary>
        [Input("domain", required: true)]
        public string Domain { get; set; } = null!;

        /// <summary>
        /// Domain ID. The parameter DomainId has a higher priority than the parameter Domain. If the parameter DomainId is passed, the parameter Domain will be ignored. You can find all Domains and DomainIds through the DescribeDomainList interface.
        /// </summary>
        [Input("domainId")]
        public int? DomainId { get; set; }

        /// <summary>
        /// The end date of the query, format: YYYY-MM-DD.
        /// </summary>
        [Input("endDate", required: true)]
        public string EndDate { get; set; } = null!;

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// The start date of the query, format: YYYY-MM-DD.
        /// </summary>
        [Input("startDate", required: true)]
        public string StartDate { get; set; } = null!;

        /// <summary>
        /// The subdomain to query for resolution volume.
        /// </summary>
        [Input("subdomain", required: true)]
        public string Subdomain { get; set; } = null!;

        public GetRecordAnalyticsArgs()
        {
        }
        public static new GetRecordAnalyticsArgs Empty => new GetRecordAnalyticsArgs();
    }

    public sealed class GetRecordAnalyticsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// DATE: Statistics by day dimension, HOUR: Statistics by hour dimension.
        /// </summary>
        [Input("dnsFormat")]
        public Input<string>? DnsFormat { get; set; }

        /// <summary>
        /// The domain to query for resolution volume.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// Domain ID. The parameter DomainId has a higher priority than the parameter Domain. If the parameter DomainId is passed, the parameter Domain will be ignored. You can find all Domains and DomainIds through the DescribeDomainList interface.
        /// </summary>
        [Input("domainId")]
        public Input<int>? DomainId { get; set; }

        /// <summary>
        /// The end date of the query, format: YYYY-MM-DD.
        /// </summary>
        [Input("endDate", required: true)]
        public Input<string> EndDate { get; set; } = null!;

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// The start date of the query, format: YYYY-MM-DD.
        /// </summary>
        [Input("startDate", required: true)]
        public Input<string> StartDate { get; set; } = null!;

        /// <summary>
        /// The subdomain to query for resolution volume.
        /// </summary>
        [Input("subdomain", required: true)]
        public Input<string> Subdomain { get; set; } = null!;

        public GetRecordAnalyticsInvokeArgs()
        {
        }
        public static new GetRecordAnalyticsInvokeArgs Empty => new GetRecordAnalyticsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRecordAnalyticsResult
    {
        /// <summary>
        /// Subdomain alias resolution statistics information.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecordAnalyticsAliasDataResult> AliasDatas;
        /// <summary>
        /// The subtotal of the resolution volume for the current statistical dimension.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecordAnalyticsDataResult> Datas;
        /// <summary>
        /// DATE: Daily statistics, HOUR: Hourly statistics.
        /// </summary>
        public readonly string? DnsFormat;
        /// <summary>
        /// The domain currently being queried.
        /// </summary>
        public readonly string Domain;
        public readonly int? DomainId;
        /// <summary>
        /// End date of the current statistical period.
        /// </summary>
        public readonly string EndDate;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Subdomain resolution statistics query information.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecordAnalyticsInfoResult> Infos;
        public readonly string? ResultOutputFile;
        /// <summary>
        /// Start date of the current statistical period.
        /// </summary>
        public readonly string StartDate;
        /// <summary>
        /// The subdomain currently being analyzed.
        /// </summary>
        public readonly string Subdomain;

        [OutputConstructor]
        private GetRecordAnalyticsResult(
            ImmutableArray<Outputs.GetRecordAnalyticsAliasDataResult> aliasDatas,

            ImmutableArray<Outputs.GetRecordAnalyticsDataResult> datas,

            string? dnsFormat,

            string domain,

            int? domainId,

            string endDate,

            string id,

            ImmutableArray<Outputs.GetRecordAnalyticsInfoResult> infos,

            string? resultOutputFile,

            string startDate,

            string subdomain)
        {
            AliasDatas = aliasDatas;
            Datas = datas;
            DnsFormat = dnsFormat;
            Domain = domain;
            DomainId = domainId;
            EndDate = endDate;
            Id = id;
            Infos = infos;
            ResultOutputFile = resultOutputFile;
            StartDate = startDate;
            Subdomain = subdomain;
        }
    }
}
