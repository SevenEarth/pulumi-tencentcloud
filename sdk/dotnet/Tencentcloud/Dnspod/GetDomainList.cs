// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Dnspod
{
    public static class GetDomainList
    {
        /// <summary>
        /// Use this data source to query detailed information of dnspod domain_list
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var domainList = Output.Create(Tencentcloud.Dnspod.GetDomainList.InvokeAsync(new Tencentcloud.Dnspod.GetDomainListArgs
        ///         {
        ///             GroupIds = 
        ///             {
        ///                 1,
        ///             },
        ///             Keyword = "",
        ///             Packages = 
        ///             {
        ///                 "",
        ///             },
        ///             ProjectId = -1,
        ///             RecordCountBegin = 0,
        ///             RecordCountEnd = 100,
        ///             Remark = "",
        ///             SortField = "UPDATED_ON",
        ///             SortType = "DESC",
        ///             Statuses = 
        ///             {
        ///                 "PAUSE",
        ///             },
        ///             Tags = 
        ///             {
        ///                 new Tencentcloud.Dnspod.Inputs.GetDomainListTagArgs
        ///                 {
        ///                     TagKey = "created_by",
        ///                     TagValues = 
        ///                     {
        ///                         "terraform",
        ///                     },
        ///                 },
        ///             },
        ///             Type = "ALL",
        ///             UpdatedAtBegin = "2021-05-01 03:00:00",
        ///             UpdatedAtEnd = "2024-05-10 20:00:00",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDomainListResult> InvokeAsync(GetDomainListArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDomainListResult>("tencentcloud:Dnspod/getDomainList:getDomainList", args ?? new GetDomainListArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of dnspod domain_list
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var domainList = Output.Create(Tencentcloud.Dnspod.GetDomainList.InvokeAsync(new Tencentcloud.Dnspod.GetDomainListArgs
        ///         {
        ///             GroupIds = 
        ///             {
        ///                 1,
        ///             },
        ///             Keyword = "",
        ///             Packages = 
        ///             {
        ///                 "",
        ///             },
        ///             ProjectId = -1,
        ///             RecordCountBegin = 0,
        ///             RecordCountEnd = 100,
        ///             Remark = "",
        ///             SortField = "UPDATED_ON",
        ///             SortType = "DESC",
        ///             Statuses = 
        ///             {
        ///                 "PAUSE",
        ///             },
        ///             Tags = 
        ///             {
        ///                 new Tencentcloud.Dnspod.Inputs.GetDomainListTagArgs
        ///                 {
        ///                     TagKey = "created_by",
        ///                     TagValues = 
        ///                     {
        ///                         "terraform",
        ///                     },
        ///                 },
        ///             },
        ///             Type = "ALL",
        ///             UpdatedAtBegin = "2021-05-01 03:00:00",
        ///             UpdatedAtEnd = "2024-05-10 20:00:00",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDomainListResult> Invoke(GetDomainListInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDomainListResult>("tencentcloud:Dnspod/getDomainList:getDomainList", args ?? new GetDomainListInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainListArgs : Pulumi.InvokeArgs
    {
        [Input("groupIds")]
        private List<int>? _groupIds;

        /// <summary>
        /// Get domain names based on domain group id, which can be obtained through the GroupId field in DescribeDomain or DescribeDomainList interface.
        /// </summary>
        public List<int> GroupIds
        {
            get => _groupIds ?? (_groupIds = new List<int>());
            set => _groupIds = value;
        }

        /// <summary>
        /// Get domain names based on keywords.
        /// </summary>
        [Input("keyword")]
        public string? Keyword { get; set; }

        [Input("packages")]
        private List<string>? _packages;

        /// <summary>
        /// Get domain names based on the package, which can be obtained through the Grade field in DescribeDomain or DescribeDomainList interface.
        /// </summary>
        public List<string> Packages
        {
            get => _packages ?? (_packages = new List<string>());
            set => _packages = value;
        }

        /// <summary>
        /// Project ID.
        /// </summary>
        [Input("projectId")]
        public int? ProjectId { get; set; }

        /// <summary>
        /// The start point of the domain name&amp;amp;#39;s record count query range.
        /// </summary>
        [Input("recordCountBegin")]
        public int? RecordCountBegin { get; set; }

        /// <summary>
        /// The end point of the domain name&amp;amp;#39;s record count query range.
        /// </summary>
        [Input("recordCountEnd")]
        public int? RecordCountEnd { get; set; }

        /// <summary>
        /// Get domain names based on remark information.
        /// </summary>
        [Input("remark")]
        public string? Remark { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// Sorting field. Available values are NAME, STATUS, RECORDS, GRADE, UPDATED_ON. NAME: Domain name STATUS: Domain status RECORDS: Number of records GRADE: Package level UPDATED_ON: Update time.
        /// </summary>
        [Input("sortField")]
        public string? SortField { get; set; }

        /// <summary>
        /// Sorting type, ascending: ASC, descending: DESC.
        /// </summary>
        [Input("sortType")]
        public string? SortType { get; set; }

        [Input("statuses")]
        private List<string>? _statuses;

        /// <summary>
        /// Get domain names based on domain status. Available values are ENABLE, LOCK, PAUSE, SPAM. ENABLE: Normal LOCK: Locked PAUSE: Paused SPAM: Banned.
        /// </summary>
        public List<string> Statuses
        {
            get => _statuses ?? (_statuses = new List<string>());
            set => _statuses = value;
        }

        [Input("tags")]
        private List<Inputs.GetDomainListTagArgs>? _tags;

        /// <summary>
        /// Tag description list.
        /// </summary>
        public List<Inputs.GetDomainListTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetDomainListTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Get domain names based on domain group type. Available values are ALL, MINE, SHARE, RECENT. ALL: All MINE: My domain names SHARE: Domain names shared with me RECENT: Recently operated domain names.
        /// </summary>
        [Input("type", required: true)]
        public string Type { get; set; } = null!;

        /// <summary>
        /// The start time of the domain name&amp;amp;#39;s update time to be obtained, such as &amp;amp;#39;2021-05-01 03:00:00&amp;amp;#39;.
        /// </summary>
        [Input("updatedAtBegin")]
        public string? UpdatedAtBegin { get; set; }

        /// <summary>
        /// The end time of the domain name&amp;amp;#39;s update time to be obtained, such as &amp;amp;#39;2021-05-10 20:00:00&amp;amp;#39;.
        /// </summary>
        [Input("updatedAtEnd")]
        public string? UpdatedAtEnd { get; set; }

        public GetDomainListArgs()
        {
        }
    }

    public sealed class GetDomainListInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("groupIds")]
        private InputList<int>? _groupIds;

        /// <summary>
        /// Get domain names based on domain group id, which can be obtained through the GroupId field in DescribeDomain or DescribeDomainList interface.
        /// </summary>
        public InputList<int> GroupIds
        {
            get => _groupIds ?? (_groupIds = new InputList<int>());
            set => _groupIds = value;
        }

        /// <summary>
        /// Get domain names based on keywords.
        /// </summary>
        [Input("keyword")]
        public Input<string>? Keyword { get; set; }

        [Input("packages")]
        private InputList<string>? _packages;

        /// <summary>
        /// Get domain names based on the package, which can be obtained through the Grade field in DescribeDomain or DescribeDomainList interface.
        /// </summary>
        public InputList<string> Packages
        {
            get => _packages ?? (_packages = new InputList<string>());
            set => _packages = value;
        }

        /// <summary>
        /// Project ID.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// The start point of the domain name&amp;amp;#39;s record count query range.
        /// </summary>
        [Input("recordCountBegin")]
        public Input<int>? RecordCountBegin { get; set; }

        /// <summary>
        /// The end point of the domain name&amp;amp;#39;s record count query range.
        /// </summary>
        [Input("recordCountEnd")]
        public Input<int>? RecordCountEnd { get; set; }

        /// <summary>
        /// Get domain names based on remark information.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// Sorting field. Available values are NAME, STATUS, RECORDS, GRADE, UPDATED_ON. NAME: Domain name STATUS: Domain status RECORDS: Number of records GRADE: Package level UPDATED_ON: Update time.
        /// </summary>
        [Input("sortField")]
        public Input<string>? SortField { get; set; }

        /// <summary>
        /// Sorting type, ascending: ASC, descending: DESC.
        /// </summary>
        [Input("sortType")]
        public Input<string>? SortType { get; set; }

        [Input("statuses")]
        private InputList<string>? _statuses;

        /// <summary>
        /// Get domain names based on domain status. Available values are ENABLE, LOCK, PAUSE, SPAM. ENABLE: Normal LOCK: Locked PAUSE: Paused SPAM: Banned.
        /// </summary>
        public InputList<string> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<string>());
            set => _statuses = value;
        }

        [Input("tags")]
        private InputList<Inputs.GetDomainListTagInputArgs>? _tags;

        /// <summary>
        /// Tag description list.
        /// </summary>
        public InputList<Inputs.GetDomainListTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetDomainListTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Get domain names based on domain group type. Available values are ALL, MINE, SHARE, RECENT. ALL: All MINE: My domain names SHARE: Domain names shared with me RECENT: Recently operated domain names.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The start time of the domain name&amp;amp;#39;s update time to be obtained, such as &amp;amp;#39;2021-05-01 03:00:00&amp;amp;#39;.
        /// </summary>
        [Input("updatedAtBegin")]
        public Input<string>? UpdatedAtBegin { get; set; }

        /// <summary>
        /// The end time of the domain name&amp;amp;#39;s update time to be obtained, such as &amp;amp;#39;2021-05-10 20:00:00&amp;amp;#39;.
        /// </summary>
        [Input("updatedAtEnd")]
        public Input<string>? UpdatedAtEnd { get; set; }

        public GetDomainListInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDomainListResult
    {
        /// <summary>
        /// Domain list.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainListDomainListResult> DnspodDomainList;
        /// <summary>
        /// Group Id the domain belongs to.
        /// </summary>
        public readonly ImmutableArray<int> GroupIds;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Keyword;
        public readonly ImmutableArray<string> Packages;
        public readonly int? ProjectId;
        public readonly int? RecordCountBegin;
        public readonly int? RecordCountEnd;
        /// <summary>
        /// Domain remark description.
        /// </summary>
        public readonly string? Remark;
        public readonly string? ResultOutputFile;
        public readonly string? SortField;
        public readonly string? SortType;
        /// <summary>
        /// Domain status, normal: ENABLE, paused: PAUSE, banned: SPAM.
        /// </summary>
        public readonly ImmutableArray<string> Statuses;
        public readonly ImmutableArray<Outputs.GetDomainListTagResult> Tags;
        public readonly string Type;
        public readonly string? UpdatedAtBegin;
        public readonly string? UpdatedAtEnd;

        [OutputConstructor]
        private GetDomainListResult(
            ImmutableArray<Outputs.GetDomainListDomainListResult> domainLists,

            ImmutableArray<int> groupIds,

            string id,

            string? keyword,

            ImmutableArray<string> packages,

            int? projectId,

            int? recordCountBegin,

            int? recordCountEnd,

            string? remark,

            string? resultOutputFile,

            string? sortField,

            string? sortType,

            ImmutableArray<string> statuses,

            ImmutableArray<Outputs.GetDomainListTagResult> tags,

            string type,

            string? updatedAtBegin,

            string? updatedAtEnd)
        {
            DnspodDomainList = domainLists;
            GroupIds = groupIds;
            Id = id;
            Keyword = keyword;
            Packages = packages;
            ProjectId = projectId;
            RecordCountBegin = recordCountBegin;
            RecordCountEnd = recordCountEnd;
            Remark = remark;
            ResultOutputFile = resultOutputFile;
            SortField = sortField;
            SortType = sortType;
            Statuses = statuses;
            Tags = tags;
            Type = type;
            UpdatedAtBegin = updatedAtBegin;
            UpdatedAtEnd = updatedAtEnd;
        }
    }
}
