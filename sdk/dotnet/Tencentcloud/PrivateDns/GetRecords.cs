// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.PrivateDns
{
    public static class GetRecords
    {
        /// <summary>
        /// Use this data source to query detailed information of private dns records
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var privateDnsRecord = Tencentcloud.PrivateDns.GetRecords.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Tencentcloud.PrivateDns.Inputs.GetRecordsFilterInputArgs
        ///             {
        ///                 Name = "Value",
        ///                 Values = new[]
        ///                 {
        ///                     "8.8.8.8",
        ///                 },
        ///             },
        ///         },
        ///         ZoneId = "zone-xxxxxx",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetRecordsResult> InvokeAsync(GetRecordsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRecordsResult>("tencentcloud:PrivateDns/getRecords:getRecords", args ?? new GetRecordsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of private dns records
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var privateDnsRecord = Tencentcloud.PrivateDns.GetRecords.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Tencentcloud.PrivateDns.Inputs.GetRecordsFilterInputArgs
        ///             {
        ///                 Name = "Value",
        ///                 Values = new[]
        ///                 {
        ///                     "8.8.8.8",
        ///                 },
        ///             },
        ///         },
        ///         ZoneId = "zone-xxxxxx",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetRecordsResult> Invoke(GetRecordsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRecordsResult>("tencentcloud:PrivateDns/getRecords:getRecords", args ?? new GetRecordsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRecordsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetRecordsFilterArgs>? _filters;

        /// <summary>
        /// Filter parameters (Value and RecordType filtering are supported).
        /// </summary>
        public List<Inputs.GetRecordsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRecordsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// Private zone id: zone-xxxxxx.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetRecordsArgs()
        {
        }
        public static new GetRecordsArgs Empty => new GetRecordsArgs();
    }

    public sealed class GetRecordsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetRecordsFilterInputArgs>? _filters;

        /// <summary>
        /// Filter parameters (Value and RecordType filtering are supported).
        /// </summary>
        public InputList<Inputs.GetRecordsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRecordsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// Private zone id: zone-xxxxxx.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetRecordsInvokeArgs()
        {
        }
        public static new GetRecordsInvokeArgs Empty => new GetRecordsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRecordsResult
    {
        public readonly ImmutableArray<Outputs.GetRecordsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Parse record list.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecordsRecordSetResult> RecordSets;
        public readonly string? ResultOutputFile;
        /// <summary>
        /// Private zone id: zone-xxxxxx.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetRecordsResult(
            ImmutableArray<Outputs.GetRecordsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetRecordsRecordSetResult> recordSets,

            string? resultOutputFile,

            string zoneId)
        {
            Filters = filters;
            Id = id;
            RecordSets = recordSets;
            ResultOutputFile = resultOutputFile;
            ZoneId = zoneId;
        }
    }
}
