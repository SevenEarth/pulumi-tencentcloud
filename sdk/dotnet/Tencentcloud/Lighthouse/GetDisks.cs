// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Lighthouse
{
    public static class GetDisks
    {
        /// <summary>
        /// Use this data source to query detailed information of lighthouse disk
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var disks = Tencentcloud.Lighthouse.GetDisks.Invoke(new()
        ///     {
        ///         DiskIds = new[]
        ///         {
        ///             "lhdisk-xxxxxx",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDisksResult> InvokeAsync(GetDisksArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDisksResult>("tencentcloud:Lighthouse/getDisks:getDisks", args ?? new GetDisksArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of lighthouse disk
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var disks = Tencentcloud.Lighthouse.GetDisks.Invoke(new()
        ///     {
        ///         DiskIds = new[]
        ///         {
        ///             "lhdisk-xxxxxx",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDisksResult> Invoke(GetDisksInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDisksResult>("tencentcloud:Lighthouse/getDisks:getDisks", args ?? new GetDisksInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDisksArgs : global::Pulumi.InvokeArgs
    {
        [Input("diskIds")]
        private List<string>? _diskIds;

        /// <summary>
        /// List of disk ids.
        /// </summary>
        public List<string> DiskIds
        {
            get => _diskIds ?? (_diskIds = new List<string>());
            set => _diskIds = value;
        }

        [Input("filters")]
        private List<Inputs.GetDisksFilterArgs>? _filters;

        /// <summary>
        /// Filter list.
        /// </summary>
        public List<Inputs.GetDisksFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDisksFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetDisksArgs()
        {
        }
        public static new GetDisksArgs Empty => new GetDisksArgs();
    }

    public sealed class GetDisksInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("diskIds")]
        private InputList<string>? _diskIds;

        /// <summary>
        /// List of disk ids.
        /// </summary>
        public InputList<string> DiskIds
        {
            get => _diskIds ?? (_diskIds = new InputList<string>());
            set => _diskIds = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetDisksFilterInputArgs>? _filters;

        /// <summary>
        /// Filter list.
        /// </summary>
        public InputList<Inputs.GetDisksFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDisksFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetDisksInvokeArgs()
        {
        }
        public static new GetDisksInvokeArgs Empty => new GetDisksInvokeArgs();
    }


    [OutputType]
    public sealed class GetDisksResult
    {
        public readonly ImmutableArray<string> DiskIds;
        /// <summary>
        /// Cloud disk information list.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDisksDiskListResult> DiskLists;
        public readonly ImmutableArray<Outputs.GetDisksFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetDisksResult(
            ImmutableArray<string> diskIds,

            ImmutableArray<Outputs.GetDisksDiskListResult> diskLists,

            ImmutableArray<Outputs.GetDisksFilterResult> filters,

            string id,

            string? resultOutputFile)
        {
            DiskIds = diskIds;
            DiskLists = diskLists;
            Filters = filters;
            Id = id;
            ResultOutputFile = resultOutputFile;
        }
    }
}
