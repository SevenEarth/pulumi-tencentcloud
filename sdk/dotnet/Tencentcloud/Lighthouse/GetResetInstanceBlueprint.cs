// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Lighthouse
{
    public static class GetResetInstanceBlueprint
    {
        /// <summary>
        /// Use this data source to query detailed information of lighthouse reset_instance_blueprint
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var resetInstanceBlueprint = Tencentcloud.Lighthouse.GetResetInstanceBlueprint.Invoke(new()
        ///     {
        ///         InstanceId = "lhins-123456",
        ///         Limit = 20,
        ///         Offset = 0,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetResetInstanceBlueprintResult> InvokeAsync(GetResetInstanceBlueprintArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetResetInstanceBlueprintResult>("tencentcloud:Lighthouse/getResetInstanceBlueprint:getResetInstanceBlueprint", args ?? new GetResetInstanceBlueprintArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of lighthouse reset_instance_blueprint
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var resetInstanceBlueprint = Tencentcloud.Lighthouse.GetResetInstanceBlueprint.Invoke(new()
        ///     {
        ///         InstanceId = "lhins-123456",
        ///         Limit = 20,
        ///         Offset = 0,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetResetInstanceBlueprintResult> Invoke(GetResetInstanceBlueprintInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetResetInstanceBlueprintResult>("tencentcloud:Lighthouse/getResetInstanceBlueprint:getResetInstanceBlueprint", args ?? new GetResetInstanceBlueprintInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetResetInstanceBlueprintArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetResetInstanceBlueprintFilterArgs>? _filters;

        /// <summary>
        /// Filter listblueprint-idFilter by image ID.Type: StringRequired: noblueprint-typeFilter by image type.Valid values: APP_OS: application image; PURE_OS: system image; PRIVATE: custom imageType: StringRequired: noplatform-typeFilter by image platform type.Valid values: LINUX_UNIX: Linux or Unix; WINDOWS: WindowsType: StringRequired: noblueprint-nameFilter by image name.Type: StringRequired: noblueprint-stateFilter by image status.Type: StringRequired: noEach request can contain up to 10 Filters and 5 Filter.Values. BlueprintIds and Filters cannot be specified at the same time.
        /// </summary>
        public List<Inputs.GetResetInstanceBlueprintFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetResetInstanceBlueprintFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// Number of returned results. Default value is 20. Maximum value is 100.
        /// </summary>
        [Input("limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// Offset. Default value is 0.
        /// </summary>
        [Input("offset")]
        public int? Offset { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetResetInstanceBlueprintArgs()
        {
        }
        public static new GetResetInstanceBlueprintArgs Empty => new GetResetInstanceBlueprintArgs();
    }

    public sealed class GetResetInstanceBlueprintInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetResetInstanceBlueprintFilterInputArgs>? _filters;

        /// <summary>
        /// Filter listblueprint-idFilter by image ID.Type: StringRequired: noblueprint-typeFilter by image type.Valid values: APP_OS: application image; PURE_OS: system image; PRIVATE: custom imageType: StringRequired: noplatform-typeFilter by image platform type.Valid values: LINUX_UNIX: Linux or Unix; WINDOWS: WindowsType: StringRequired: noblueprint-nameFilter by image name.Type: StringRequired: noblueprint-stateFilter by image status.Type: StringRequired: noEach request can contain up to 10 Filters and 5 Filter.Values. BlueprintIds and Filters cannot be specified at the same time.
        /// </summary>
        public InputList<Inputs.GetResetInstanceBlueprintFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetResetInstanceBlueprintFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Number of returned results. Default value is 20. Maximum value is 100.
        /// </summary>
        [Input("limit")]
        public Input<int>? Limit { get; set; }

        /// <summary>
        /// Offset. Default value is 0.
        /// </summary>
        [Input("offset")]
        public Input<int>? Offset { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetResetInstanceBlueprintInvokeArgs()
        {
        }
        public static new GetResetInstanceBlueprintInvokeArgs Empty => new GetResetInstanceBlueprintInvokeArgs();
    }


    [OutputType]
    public sealed class GetResetInstanceBlueprintResult
    {
        public readonly ImmutableArray<Outputs.GetResetInstanceBlueprintFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        public readonly int? Limit;
        public readonly int? Offset;
        /// <summary>
        /// List of scene info.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetResetInstanceBlueprintResetInstanceBlueprintSetResult> ResetInstanceBlueprintSets;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetResetInstanceBlueprintResult(
            ImmutableArray<Outputs.GetResetInstanceBlueprintFilterResult> filters,

            string id,

            string instanceId,

            int? limit,

            int? offset,

            ImmutableArray<Outputs.GetResetInstanceBlueprintResetInstanceBlueprintSetResult> resetInstanceBlueprintSets,

            string? resultOutputFile)
        {
            Filters = filters;
            Id = id;
            InstanceId = instanceId;
            Limit = limit;
            Offset = offset;
            ResetInstanceBlueprintSets = resetInstanceBlueprintSets;
            ResultOutputFile = resultOutputFile;
        }
    }
}
