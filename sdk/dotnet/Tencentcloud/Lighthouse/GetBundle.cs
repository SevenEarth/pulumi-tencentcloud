// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Lighthouse
{
    public static class GetBundle
    {
        /// <summary>
        /// Use this data source to query detailed information of lighthouse bundle
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var bundle = Tencentcloud.Lighthouse.GetBundle.Invoke();
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetBundleResult> InvokeAsync(GetBundleArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBundleResult>("tencentcloud:Lighthouse/getBundle:getBundle", args ?? new GetBundleArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of lighthouse bundle
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var bundle = Tencentcloud.Lighthouse.GetBundle.Invoke();
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetBundleResult> Invoke(GetBundleInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBundleResult>("tencentcloud:Lighthouse/getBundle:getBundle", args ?? new GetBundleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBundleArgs : global::Pulumi.InvokeArgs
    {
        [Input("bundleIds")]
        private List<string>? _bundleIds;

        /// <summary>
        /// Bundle ID list.
        /// </summary>
        public List<string> BundleIds
        {
            get => _bundleIds ?? (_bundleIds = new List<string>());
            set => _bundleIds = value;
        }

        [Input("filters")]
        private List<Inputs.GetBundleFilterArgs>? _filters;

        /// <summary>
        /// Filter list.
        /// - `bundle-id`: filter by the bundle ID.
        /// - `support-platform-type`: filter by system type, valid values: `LINUX_UNIX`, `WINDOWS`.
        /// - `bundle-type`: filter according to package type, valid values: `GENERAL_BUNDLE`, `STORAGE_BUNDLE`, `ENTERPRISE_BUNDLE`, `EXCLUSIVE_BUNDLE`, `BEFAST_BUNDLE`.
        /// - `bundle-state`: filter according to package status, valid values: `ONLINE`, `OFFLINE`.
        /// NOTE: The upper limit of Filters per request is 10. The upper limit of Filter.Values is 5. Parameter does not support specifying both BundleIds and Filters.
        /// </summary>
        public List<Inputs.GetBundleFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetBundleFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Number of returned results. Default value is 20. Maximum value is 100.
        /// </summary>
        [Input("limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// Offset. Default value is 0.
        /// </summary>
        [Input("offset")]
        public int? Offset { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        [Input("zones")]
        private List<string>? _zones;

        /// <summary>
        /// Zone list, which contains all zones by default.
        /// </summary>
        public List<string> Zones
        {
            get => _zones ?? (_zones = new List<string>());
            set => _zones = value;
        }

        public GetBundleArgs()
        {
        }
        public static new GetBundleArgs Empty => new GetBundleArgs();
    }

    public sealed class GetBundleInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("bundleIds")]
        private InputList<string>? _bundleIds;

        /// <summary>
        /// Bundle ID list.
        /// </summary>
        public InputList<string> BundleIds
        {
            get => _bundleIds ?? (_bundleIds = new InputList<string>());
            set => _bundleIds = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetBundleFilterInputArgs>? _filters;

        /// <summary>
        /// Filter list.
        /// - `bundle-id`: filter by the bundle ID.
        /// - `support-platform-type`: filter by system type, valid values: `LINUX_UNIX`, `WINDOWS`.
        /// - `bundle-type`: filter according to package type, valid values: `GENERAL_BUNDLE`, `STORAGE_BUNDLE`, `ENTERPRISE_BUNDLE`, `EXCLUSIVE_BUNDLE`, `BEFAST_BUNDLE`.
        /// - `bundle-state`: filter according to package status, valid values: `ONLINE`, `OFFLINE`.
        /// NOTE: The upper limit of Filters per request is 10. The upper limit of Filter.Values is 5. Parameter does not support specifying both BundleIds and Filters.
        /// </summary>
        public InputList<Inputs.GetBundleFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetBundleFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Number of returned results. Default value is 20. Maximum value is 100.
        /// </summary>
        [Input("limit")]
        public Input<int>? Limit { get; set; }

        /// <summary>
        /// Offset. Default value is 0.
        /// </summary>
        [Input("offset")]
        public Input<int>? Offset { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// Zone list, which contains all zones by default.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public GetBundleInvokeArgs()
        {
        }
        public static new GetBundleInvokeArgs Empty => new GetBundleInvokeArgs();
    }


    [OutputType]
    public sealed class GetBundleResult
    {
        public readonly ImmutableArray<string> BundleIds;
        /// <summary>
        /// List of bundle details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBundleBundleSetResult> BundleSets;
        public readonly ImmutableArray<Outputs.GetBundleFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int? Limit;
        public readonly int? Offset;
        public readonly string? ResultOutputFile;
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetBundleResult(
            ImmutableArray<string> bundleIds,

            ImmutableArray<Outputs.GetBundleBundleSetResult> bundleSets,

            ImmutableArray<Outputs.GetBundleFilterResult> filters,

            string id,

            int? limit,

            int? offset,

            string? resultOutputFile,

            ImmutableArray<string> zones)
        {
            BundleIds = bundleIds;
            BundleSets = bundleSets;
            Filters = filters;
            Id = id;
            Limit = limit;
            Offset = offset;
            ResultOutputFile = resultOutputFile;
            Zones = zones;
        }
    }
}
