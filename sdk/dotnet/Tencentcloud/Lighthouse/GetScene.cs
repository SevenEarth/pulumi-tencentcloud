// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Lighthouse
{
    public static class GetScene
    {
        /// <summary>
        /// Use this data source to query detailed information of lighthouse scene with region
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var scene = Output.Create(Tencentcloud.Lighthouse.GetScene.InvokeAsync(new Tencentcloud.Lighthouse.GetSceneArgs
        ///         {
        ///             Limit = 20,
        ///             Offset = 0,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSceneResult> InvokeAsync(GetSceneArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSceneResult>("tencentcloud:Lighthouse/getScene:getScene", args ?? new GetSceneArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of lighthouse scene with region
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var scene = Output.Create(Tencentcloud.Lighthouse.GetScene.InvokeAsync(new Tencentcloud.Lighthouse.GetSceneArgs
        ///         {
        ///             Limit = 20,
        ///             Offset = 0,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSceneResult> Invoke(GetSceneInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSceneResult>("tencentcloud:Lighthouse/getScene:getScene", args ?? new GetSceneInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSceneArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Number of returned results. Default value is 20. Maximum value is 100.
        /// </summary>
        [Input("limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// Offset. Default value is 0.
        /// </summary>
        [Input("offset")]
        public int? Offset { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        [Input("sceneIds")]
        private List<string>? _sceneIds;

        /// <summary>
        /// List of scene IDs.
        /// </summary>
        public List<string> SceneIds
        {
            get => _sceneIds ?? (_sceneIds = new List<string>());
            set => _sceneIds = value;
        }

        public GetSceneArgs()
        {
        }
    }

    public sealed class GetSceneInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Number of returned results. Default value is 20. Maximum value is 100.
        /// </summary>
        [Input("limit")]
        public Input<int>? Limit { get; set; }

        /// <summary>
        /// Offset. Default value is 0.
        /// </summary>
        [Input("offset")]
        public Input<int>? Offset { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        [Input("sceneIds")]
        private InputList<string>? _sceneIds;

        /// <summary>
        /// List of scene IDs.
        /// </summary>
        public InputList<string> SceneIds
        {
            get => _sceneIds ?? (_sceneIds = new InputList<string>());
            set => _sceneIds = value;
        }

        public GetSceneInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSceneResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int? Limit;
        public readonly int? Offset;
        public readonly string? ResultOutputFile;
        public readonly ImmutableArray<string> SceneIds;
        /// <summary>
        /// List of scene info.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSceneSceneSetResult> SceneSets;

        [OutputConstructor]
        private GetSceneResult(
            string id,

            int? limit,

            int? offset,

            string? resultOutputFile,

            ImmutableArray<string> sceneIds,

            ImmutableArray<Outputs.GetSceneSceneSetResult> sceneSets)
        {
            Id = id;
            Limit = limit;
            Offset = offset;
            ResultOutputFile = resultOutputFile;
            SceneIds = sceneIds;
            SceneSets = sceneSets;
        }
    }
}
