// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Tcr
{
    public static class GetImages
    {
        /// <summary>
        /// Use this data source to query detailed information of tcr images
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var images = Tencentcloud.Tcr.GetImages.Invoke(new()
        ///     {
        ///         Digest = "sha256:xxxxx",
        ///         ExactMatch = false,
        ///         ImageVersion = "v1",
        ///         NamespaceName = "ns",
        ///         RegistryId = "tcr-xxx",
        ///         RepositoryName = "repo",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetImagesResult> InvokeAsync(GetImagesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImagesResult>("tencentcloud:Tcr/getImages:getImages", args ?? new GetImagesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of tcr images
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var images = Tencentcloud.Tcr.GetImages.Invoke(new()
        ///     {
        ///         Digest = "sha256:xxxxx",
        ///         ExactMatch = false,
        ///         ImageVersion = "v1",
        ///         NamespaceName = "ns",
        ///         RegistryId = "tcr-xxx",
        ///         RepositoryName = "repo",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetImagesResult> Invoke(GetImagesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImagesResult>("tencentcloud:Tcr/getImages:getImages", args ?? new GetImagesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImagesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// specify image digest for lookup.
        /// </summary>
        [Input("digest")]
        public string? Digest { get; set; }

        /// <summary>
        /// specifies whether it is an exact match, true is an exact match, and not filled is a fuzzy match.
        /// </summary>
        [Input("exactMatch")]
        public bool? ExactMatch { get; set; }

        /// <summary>
        /// image version name, default is fuzzy match.
        /// </summary>
        [Input("imageVersion")]
        public string? ImageVersion { get; set; }

        /// <summary>
        /// namespace name.
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// instance id.
        /// </summary>
        [Input("registryId", required: true)]
        public string RegistryId { get; set; } = null!;

        /// <summary>
        /// repository name.
        /// </summary>
        [Input("repositoryName", required: true)]
        public string RepositoryName { get; set; } = null!;

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetImagesArgs()
        {
        }
        public static new GetImagesArgs Empty => new GetImagesArgs();
    }

    public sealed class GetImagesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// specify image digest for lookup.
        /// </summary>
        [Input("digest")]
        public Input<string>? Digest { get; set; }

        /// <summary>
        /// specifies whether it is an exact match, true is an exact match, and not filled is a fuzzy match.
        /// </summary>
        [Input("exactMatch")]
        public Input<bool>? ExactMatch { get; set; }

        /// <summary>
        /// image version name, default is fuzzy match.
        /// </summary>
        [Input("imageVersion")]
        public Input<string>? ImageVersion { get; set; }

        /// <summary>
        /// namespace name.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// instance id.
        /// </summary>
        [Input("registryId", required: true)]
        public Input<string> RegistryId { get; set; } = null!;

        /// <summary>
        /// repository name.
        /// </summary>
        [Input("repositoryName", required: true)]
        public Input<string> RepositoryName { get; set; } = null!;

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetImagesInvokeArgs()
        {
        }
        public static new GetImagesInvokeArgs Empty => new GetImagesInvokeArgs();
    }


    [OutputType]
    public sealed class GetImagesResult
    {
        /// <summary>
        /// hash value.
        /// </summary>
        public readonly string? Digest;
        public readonly bool? ExactMatch;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// container image information list.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImagesImageInfoListResult> ImageInfoLists;
        /// <summary>
        /// tag name.
        /// </summary>
        public readonly string? ImageVersion;
        public readonly string NamespaceName;
        public readonly string RegistryId;
        public readonly string RepositoryName;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetImagesResult(
            string? digest,

            bool? exactMatch,

            string id,

            ImmutableArray<Outputs.GetImagesImageInfoListResult> imageInfoLists,

            string? imageVersion,

            string namespaceName,

            string registryId,

            string repositoryName,

            string? resultOutputFile)
        {
            Digest = digest;
            ExactMatch = exactMatch;
            Id = id;
            ImageInfoLists = imageInfoLists;
            ImageVersion = imageVersion;
            NamespaceName = namespaceName;
            RegistryId = registryId;
            RepositoryName = repositoryName;
            ResultOutputFile = resultOutputFile;
        }
    }
}
