// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Dts
{
    public static class GetMigrateDbInstances
    {
        /// <summary>
        /// Use this data source to query detailed information of dts migrate_db_instances
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var migrateDbInstances = Output.Create(Tencentcloud.Dts.GetMigrateDbInstances.InvokeAsync(new Tencentcloud.Dts.GetMigrateDbInstancesArgs
        ///         {
        ///             AccountMode = "self",
        ///             DatabaseType = "mysql",
        ///             InstanceId = "cdb-ffulb2sg",
        ///             InstanceName = "cdb_test",
        ///             Limit = 10,
        ///             MigrateRole = "src",
        ///             Offset = 10,
        ///             TmpSecretId = "AKIDvBDyVmna9TadcS4YzfBZmkU5TbX12345",
        ///             TmpSecretKey = "ZswjGWWHm24qMeiX6QUJsELDpC12345",
        ///             TmpToken = "JOqqCPVuWdNZvlVDLxxx",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMigrateDbInstancesResult> InvokeAsync(GetMigrateDbInstancesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetMigrateDbInstancesResult>("tencentcloud:Dts/getMigrateDbInstances:getMigrateDbInstances", args ?? new GetMigrateDbInstancesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of dts migrate_db_instances
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var migrateDbInstances = Output.Create(Tencentcloud.Dts.GetMigrateDbInstances.InvokeAsync(new Tencentcloud.Dts.GetMigrateDbInstancesArgs
        ///         {
        ///             AccountMode = "self",
        ///             DatabaseType = "mysql",
        ///             InstanceId = "cdb-ffulb2sg",
        ///             InstanceName = "cdb_test",
        ///             Limit = 10,
        ///             MigrateRole = "src",
        ///             Offset = 10,
        ///             TmpSecretId = "AKIDvBDyVmna9TadcS4YzfBZmkU5TbX12345",
        ///             TmpSecretKey = "ZswjGWWHm24qMeiX6QUJsELDpC12345",
        ///             TmpToken = "JOqqCPVuWdNZvlVDLxxx",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetMigrateDbInstancesResult> Invoke(GetMigrateDbInstancesInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetMigrateDbInstancesResult>("tencentcloud:Dts/getMigrateDbInstances:getMigrateDbInstances", args ?? new GetMigrateDbInstancesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMigrateDbInstancesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The owning account of the resource is null or self(resources in the self account), other(resources in the other account).
        /// </summary>
        [Input("accountMode")]
        public string? AccountMode { get; set; }

        /// <summary>
        /// Database type.
        /// </summary>
        [Input("databaseType", required: true)]
        public string DatabaseType { get; set; } = null!;

        /// <summary>
        /// Database instance id.
        /// </summary>
        [Input("instanceId")]
        public string? InstanceId { get; set; }

        /// <summary>
        /// Database instance name.
        /// </summary>
        [Input("instanceName")]
        public string? InstanceName { get; set; }

        /// <summary>
        /// Limit.
        /// </summary>
        [Input("limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// Whether the instance is the migration source or destination,src(for source), dst(for destination).
        /// </summary>
        [Input("migrateRole")]
        public string? MigrateRole { get; set; }

        /// <summary>
        /// Offset.
        /// </summary>
        [Input("offset")]
        public int? Offset { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// temporary secret id, used across account.
        /// </summary>
        [Input("tmpSecretId")]
        public string? TmpSecretId { get; set; }

        /// <summary>
        /// temporary secret key, used across account.
        /// </summary>
        [Input("tmpSecretKey")]
        public string? TmpSecretKey { get; set; }

        /// <summary>
        /// temporary token, used across account.
        /// </summary>
        [Input("tmpToken")]
        public string? TmpToken { get; set; }

        public GetMigrateDbInstancesArgs()
        {
        }
    }

    public sealed class GetMigrateDbInstancesInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The owning account of the resource is null or self(resources in the self account), other(resources in the other account).
        /// </summary>
        [Input("accountMode")]
        public Input<string>? AccountMode { get; set; }

        /// <summary>
        /// Database type.
        /// </summary>
        [Input("databaseType", required: true)]
        public Input<string> DatabaseType { get; set; } = null!;

        /// <summary>
        /// Database instance id.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Database instance name.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// Limit.
        /// </summary>
        [Input("limit")]
        public Input<int>? Limit { get; set; }

        /// <summary>
        /// Whether the instance is the migration source or destination,src(for source), dst(for destination).
        /// </summary>
        [Input("migrateRole")]
        public Input<string>? MigrateRole { get; set; }

        /// <summary>
        /// Offset.
        /// </summary>
        [Input("offset")]
        public Input<int>? Offset { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// temporary secret id, used across account.
        /// </summary>
        [Input("tmpSecretId")]
        public Input<string>? TmpSecretId { get; set; }

        /// <summary>
        /// temporary secret key, used across account.
        /// </summary>
        [Input("tmpSecretKey")]
        public Input<string>? TmpSecretKey { get; set; }

        /// <summary>
        /// temporary token, used across account.
        /// </summary>
        [Input("tmpToken")]
        public Input<string>? TmpToken { get; set; }

        public GetMigrateDbInstancesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetMigrateDbInstancesResult
    {
        public readonly string? AccountMode;
        public readonly string DatabaseType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Instance Id.
        /// </summary>
        public readonly string? InstanceId;
        /// <summary>
        /// Database instance name.
        /// </summary>
        public readonly string? InstanceName;
        /// <summary>
        /// Instance list.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMigrateDbInstancesInstanceResult> Instances;
        public readonly int? Limit;
        public readonly string? MigrateRole;
        public readonly int? Offset;
        /// <summary>
        /// Unique request id, provide this when encounter a problem.
        /// </summary>
        public readonly string RequestId;
        public readonly string? ResultOutputFile;
        public readonly string? TmpSecretId;
        public readonly string? TmpSecretKey;
        public readonly string? TmpToken;

        [OutputConstructor]
        private GetMigrateDbInstancesResult(
            string? accountMode,

            string databaseType,

            string id,

            string? instanceId,

            string? instanceName,

            ImmutableArray<Outputs.GetMigrateDbInstancesInstanceResult> instances,

            int? limit,

            string? migrateRole,

            int? offset,

            string requestId,

            string? resultOutputFile,

            string? tmpSecretId,

            string? tmpSecretKey,

            string? tmpToken)
        {
            AccountMode = accountMode;
            DatabaseType = databaseType;
            Id = id;
            InstanceId = instanceId;
            InstanceName = instanceName;
            Instances = instances;
            Limit = limit;
            MigrateRole = migrateRole;
            Offset = offset;
            RequestId = requestId;
            ResultOutputFile = resultOutputFile;
            TmpSecretId = tmpSecretId;
            TmpSecretKey = tmpSecretKey;
            TmpToken = tmpToken;
        }
    }
}
