// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Cos.Inputs
{

    public sealed class BatchOperationCosPutObjectCopyGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This element specifies how ACL is copied. Valid values:
        /// - Copy: inherits the source object ACL
        /// - Replaced: replace source ACL
        /// - Add: add a new ACL based on the source ACL.
        /// </summary>
        [Input("accessControlDirective")]
        public Input<string>? AccessControlDirective { get; set; }

        /// <summary>
        /// Controls the specific access to the object.
        /// </summary>
        [Input("accessControlGrants")]
        public Input<Inputs.BatchOperationCosPutObjectCopyAccessControlGrantsGetArgs>? AccessControlGrants { get; set; }

        /// <summary>
        /// Defines the ACL property of the object. Valid values: private, public-read.
        /// </summary>
        [Input("cannedAccessControlList")]
        public Input<string>? CannedAccessControlList { get; set; }

        /// <summary>
        /// This element specifies whether to copy object metadata from the source object or replace it with metadata in the &lt; NewObjectMetadata &gt; element. Valid values are: Copy, Replaced, Add. Copy: inherit source object metadata; Replaced: replace source metadata; Add: add new metadata based on source metadata.
        /// </summary>
        [Input("metadataDirective")]
        public Input<string>? MetadataDirective { get; set; }

        /// <summary>
        /// When the object is modified after the specified time, the operation is performed, otherwise 412 is returned.
        /// </summary>
        [Input("modifiedSinceConstraint")]
        public Input<int>? ModifiedSinceConstraint { get; set; }

        /// <summary>
        /// Configure the metadata for the object.
        /// </summary>
        [Input("newObjectMetadata")]
        public Input<Inputs.BatchOperationCosPutObjectCopyNewObjectMetadataGetArgs>? NewObjectMetadata { get; set; }

        [Input("newObjectTaggings")]
        private InputList<Inputs.BatchOperationCosPutObjectCopyNewObjectTaggingGetArgs>? _newObjectTaggings;

        /// <summary>
        /// The label of the configuration object, which must be specified when the &lt; TaggingDirective &gt; value is Replace or Add.
        /// </summary>
        public InputList<Inputs.BatchOperationCosPutObjectCopyNewObjectTaggingGetArgs> NewObjectTaggings
        {
            get => _newObjectTaggings ?? (_newObjectTaggings = new InputList<Inputs.BatchOperationCosPutObjectCopyNewObjectTaggingGetArgs>());
            set => _newObjectTaggings = value;
        }

        /// <summary>
        /// Specifies whether the prefix of the source object needs to be replaced. A value of true indicates the replacement object prefix, which needs to be used with &lt;ResourcesPrefix&gt; and &lt;TargetKeyPrefix&gt;. Default value: false.
        /// </summary>
        [Input("prefixReplace")]
        public Input<bool>? PrefixReplace { get; set; }

        /// <summary>
        /// This field is valid only when the &lt; PrefixReplace &gt; value is true. Specify the source object prefix to be replaced, and the replacement directory should end with `/`. Can be empty with a maximum length of 1024 bytes.
        /// </summary>
        [Input("resourcesPrefix")]
        public Input<string>? ResourcesPrefix { get; set; }

        /// <summary>
        /// Sets the storage level of the object. Enumerated value: STANDARD,STANDARD_IA. Default value: STANDARD.
        /// </summary>
        [Input("storageClass")]
        public Input<string>? StorageClass { get; set; }

        /// <summary>
        /// This element specifies whether to copy the object tag from the source object or replace it with the tag in the &lt; NewObjectTagging &gt; element. Valid values are: Copy, Replaced, Add. Copy: inherits the source object tag; Replaced: replaces the source tag; Add: adds a new tag based on the source tag.
        /// </summary>
        [Input("taggingDirective")]
        public Input<string>? TaggingDirective { get; set; }

        /// <summary>
        /// This field is valid only when the &lt;PrefixReplace&gt; value is true. This value represents the replaced prefix, and the replacement directory should end with /. Can be empty with a maximum length of 1024 bytes.
        /// </summary>
        [Input("targetKeyPrefix")]
        public Input<string>? TargetKeyPrefix { get; set; }

        /// <summary>
        /// Sets the target bucket for the Copy. Use qcs to specify, for example, qcs::cos:ap-chengdu:uid/1250000000:examplebucket-1250000000.
        /// </summary>
        [Input("targetResource", required: true)]
        public Input<string> TargetResource { get; set; } = null!;

        /// <summary>
        /// When the object has not been modified after the specified time, the operation is performed, otherwise 412 is returned.
        /// </summary>
        [Input("unmodifiedSinceConstraint")]
        public Input<int>? UnmodifiedSinceConstraint { get; set; }

        public BatchOperationCosPutObjectCopyGetArgs()
        {
        }
        public static new BatchOperationCosPutObjectCopyGetArgs Empty => new BatchOperationCosPutObjectCopyGetArgs();
    }
}
