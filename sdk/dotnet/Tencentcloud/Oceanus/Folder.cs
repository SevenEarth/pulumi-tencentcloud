// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Oceanus
{
    /// <summary>
    /// Provides a resource to create a oceanus folder
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Tencentcloud.Oceanus.Folder("example", new Tencentcloud.Oceanus.FolderArgs
    ///         {
    ///             FolderName = "tf_example",
    ///             FolderType = 0,
    ///             ParentId = "folder-lfqkt11s",
    ///             WorkSpaceId = "space-125703345ap-shenzhen-fsi",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// oceanus folder can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import tencentcloud:Oceanus/folder:Folder example space-125703345ap-shenzhen-fsi#folder-f40fq79g#0
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Oceanus/folder:Folder")]
    public partial class Folder : Pulumi.CustomResource
    {
        /// <summary>
        /// New file name.
        /// </summary>
        [Output("folderName")]
        public Output<string> FolderName { get; private set; } = null!;

        /// <summary>
        /// Folder type, 0: job folder, 1: resource folder. Default is 0.
        /// </summary>
        [Output("folderType")]
        public Output<int?> FolderType { get; private set; } = null!;

        /// <summary>
        /// Parent folder id.
        /// </summary>
        [Output("parentId")]
        public Output<string> ParentId { get; private set; } = null!;

        /// <summary>
        /// Workspace SerialId.
        /// </summary>
        [Output("workSpaceId")]
        public Output<string> WorkSpaceId { get; private set; } = null!;


        /// <summary>
        /// Create a Folder resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Folder(string name, FolderArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Oceanus/folder:Folder", name, args ?? new FolderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Folder(string name, Input<string> id, FolderState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Oceanus/folder:Folder", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Folder resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Folder Get(string name, Input<string> id, FolderState? state = null, CustomResourceOptions? options = null)
        {
            return new Folder(name, id, state, options);
        }
    }

    public sealed class FolderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// New file name.
        /// </summary>
        [Input("folderName", required: true)]
        public Input<string> FolderName { get; set; } = null!;

        /// <summary>
        /// Folder type, 0: job folder, 1: resource folder. Default is 0.
        /// </summary>
        [Input("folderType")]
        public Input<int>? FolderType { get; set; }

        /// <summary>
        /// Parent folder id.
        /// </summary>
        [Input("parentId", required: true)]
        public Input<string> ParentId { get; set; } = null!;

        /// <summary>
        /// Workspace SerialId.
        /// </summary>
        [Input("workSpaceId", required: true)]
        public Input<string> WorkSpaceId { get; set; } = null!;

        public FolderArgs()
        {
        }
    }

    public sealed class FolderState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// New file name.
        /// </summary>
        [Input("folderName")]
        public Input<string>? FolderName { get; set; }

        /// <summary>
        /// Folder type, 0: job folder, 1: resource folder. Default is 0.
        /// </summary>
        [Input("folderType")]
        public Input<int>? FolderType { get; set; }

        /// <summary>
        /// Parent folder id.
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        /// <summary>
        /// Workspace SerialId.
        /// </summary>
        [Input("workSpaceId")]
        public Input<string>? WorkSpaceId { get; set; }

        public FolderState()
        {
        }
    }
}
