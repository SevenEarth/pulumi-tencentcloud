// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Mps
{
    /// <summary>
    /// Provides a resource to create a mps flow
    /// 
    /// ## Example Usage
    /// 
    /// ### Create a mps RTP flow
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @event = new Tencentcloud.Mps.Event("event", new()
    ///     {
    ///         EventName = "tf_test_event_srt_%d",
    ///         Description = "tf test mps event description",
    ///     });
    /// 
    ///     var flow = new Tencentcloud.Mps.Flow("flow", new()
    ///     {
    ///         FlowName = "tf_test_mps_flow_srt_%d",
    ///         MaxBandwidth = 10000000,
    ///         InputGroups = new[]
    ///         {
    ///             new Tencentcloud.Mps.Inputs.FlowInputGroupArgs
    ///             {
    ///                 InputName = "test_inputname",
    ///                 Protocol = "SRT",
    ///                 Description = "input name Description",
    ///                 AllowIpLists = new[]
    ///                 {
    ///                     "0.0.0.0/0",
    ///                 },
    ///                 SrtSettings = new Tencentcloud.Mps.Inputs.FlowInputGroupSrtSettingsArgs
    ///                 {
    ///                     Mode = "LISTENER",
    ///                     StreamId = "#!::u=johnny,r=resource,h=xxx.com,t=stream,m=play",
    ///                     Latency = 1000,
    ///                     RecvLatency = 1000,
    ///                     PeerLatency = 1000,
    ///                     PeerIdleTimeout = 1000,
    ///                 },
    ///             },
    ///         },
    ///         EventId = @event.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Create a mps RTP flow
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var eventRtp = new Tencentcloud.Mps.Event("eventRtp", new()
    ///     {
    ///         EventName = "tf_test_event_rtp_%d",
    ///         Description = "tf test mps event description",
    ///     });
    /// 
    ///     var flowRtp = new Tencentcloud.Mps.Flow("flowRtp", new()
    ///     {
    ///         FlowName = "tf_test_mps_flow_rtp_%d",
    ///         MaxBandwidth = 10000000,
    ///         InputGroups = new[]
    ///         {
    ///             new Tencentcloud.Mps.Inputs.FlowInputGroupArgs
    ///             {
    ///                 InputName = "test_inputname",
    ///                 Protocol = "RTP",
    ///                 Description = "input name Description",
    ///                 AllowIpLists = new[]
    ///                 {
    ///                     "0.0.0.0/0",
    ///                 },
    ///                 RtpSettings = new Tencentcloud.Mps.Inputs.FlowInputGroupRtpSettingsArgs
    ///                 {
    ///                     Fec = "none",
    ///                     IdleTimeout = 1000,
    ///                 },
    ///             },
    ///         },
    ///         EventId = eventRtp.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Create a mps RTP flow and start it
    /// 
    /// Before you start a mps flow, you need to create a output first.
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var eventRtp = new Tencentcloud.Mps.Event("eventRtp", new()
    ///     {
    ///         EventName = "your_event_name",
    ///         Description = "tf test mps event description",
    ///     });
    /// 
    ///     var flowRtp = new Tencentcloud.Mps.Flow("flowRtp", new()
    ///     {
    ///         FlowName = "your_flow_name",
    ///         MaxBandwidth = 10000000,
    ///         InputGroups = new[]
    ///         {
    ///             new Tencentcloud.Mps.Inputs.FlowInputGroupArgs
    ///             {
    ///                 InputName = "test_inputname",
    ///                 Protocol = "RTP",
    ///                 Description = "input name Description",
    ///                 AllowIpLists = new[]
    ///                 {
    ///                     "0.0.0.0/0",
    ///                 },
    ///                 RtpSettings = new Tencentcloud.Mps.Inputs.FlowInputGroupRtpSettingsArgs
    ///                 {
    ///                     Fec = "none",
    ///                     IdleTimeout = 1000,
    ///                 },
    ///             },
    ///         },
    ///         EventId = eventRtp.Id,
    ///     });
    /// 
    ///     var output = new Tencentcloud.Mps.Output("output", new()
    ///     {
    ///         FlowId = flowRtp.Id,
    ///         MpsOutput = new Tencentcloud.Mps.Inputs.OutputOutputArgs
    ///         {
    ///             OutputName = "your_output_name",
    ///             Description = "tf mps output group",
    ///             Protocol = "RTP",
    ///             OutputRegion = "ap-guangzhou",
    ///             RtpSettings = new Tencentcloud.Mps.Inputs.OutputOutputRtpSettingsArgs
    ///             {
    ///                 Destinations = new[]
    ///                 {
    ///                     new Tencentcloud.Mps.Inputs.OutputOutputRtpSettingsDestinationArgs
    ///                     {
    ///                         Ip = "203.205.141.84",
    ///                         Port = 65535,
    ///                     },
    ///                 },
    ///                 Fec = "none",
    ///                 IdleTimeout = 1000,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var operation = new Tencentcloud.Mps.StartFlowOperation("operation", new()
    ///     {
    ///         FlowId = flowRtp.Id,
    ///         Start = true,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             output, 
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// mps flow can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import tencentcloud:Mps/flow:Flow flow flow_id
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Mps/flow:Flow")]
    public partial class Flow : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The event ID associated with this Flow. Each flow can only be associated with one Event.
        /// </summary>
        [Output("eventId")]
        public Output<string?> EventId { get; private set; } = null!;

        /// <summary>
        /// Flow name.
        /// </summary>
        [Output("flowName")]
        public Output<string> FlowName { get; private set; } = null!;

        /// <summary>
        /// The input group for the flow.
        /// </summary>
        [Output("inputGroups")]
        public Output<ImmutableArray<Outputs.FlowInputGroup>> InputGroups { get; private set; } = null!;

        /// <summary>
        /// Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
        /// </summary>
        [Output("maxBandwidth")]
        public Output<int> MaxBandwidth { get; private set; } = null!;


        /// <summary>
        /// Create a Flow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Flow(string name, FlowArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Mps/flow:Flow", name, args ?? new FlowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Flow(string name, Input<string> id, FlowState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Mps/flow:Flow", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Flow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Flow Get(string name, Input<string> id, FlowState? state = null, CustomResourceOptions? options = null)
        {
            return new Flow(name, id, state, options);
        }
    }

    public sealed class FlowArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The event ID associated with this Flow. Each flow can only be associated with one Event.
        /// </summary>
        [Input("eventId")]
        public Input<string>? EventId { get; set; }

        /// <summary>
        /// Flow name.
        /// </summary>
        [Input("flowName", required: true)]
        public Input<string> FlowName { get; set; } = null!;

        [Input("inputGroups")]
        private InputList<Inputs.FlowInputGroupArgs>? _inputGroups;

        /// <summary>
        /// The input group for the flow.
        /// </summary>
        public InputList<Inputs.FlowInputGroupArgs> InputGroups
        {
            get => _inputGroups ?? (_inputGroups = new InputList<Inputs.FlowInputGroupArgs>());
            set => _inputGroups = value;
        }

        /// <summary>
        /// Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
        /// </summary>
        [Input("maxBandwidth", required: true)]
        public Input<int> MaxBandwidth { get; set; } = null!;

        public FlowArgs()
        {
        }
        public static new FlowArgs Empty => new FlowArgs();
    }

    public sealed class FlowState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The event ID associated with this Flow. Each flow can only be associated with one Event.
        /// </summary>
        [Input("eventId")]
        public Input<string>? EventId { get; set; }

        /// <summary>
        /// Flow name.
        /// </summary>
        [Input("flowName")]
        public Input<string>? FlowName { get; set; }

        [Input("inputGroups")]
        private InputList<Inputs.FlowInputGroupGetArgs>? _inputGroups;

        /// <summary>
        /// The input group for the flow.
        /// </summary>
        public InputList<Inputs.FlowInputGroupGetArgs> InputGroups
        {
            get => _inputGroups ?? (_inputGroups = new InputList<Inputs.FlowInputGroupGetArgs>());
            set => _inputGroups = value;
        }

        /// <summary>
        /// Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
        /// </summary>
        [Input("maxBandwidth")]
        public Input<int>? MaxBandwidth { get; set; }

        public FlowState()
        {
        }
        public static new FlowState Empty => new FlowState();
    }
}
