// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Elasticsearch.Outputs
{

    [OutputType]
    public sealed class GetViewsNodesViewResult
    {
        /// <summary>
        /// Whether or not to break.
        /// </summary>
        public readonly double Break;
        /// <summary>
        /// CPU number.
        /// </summary>
        public readonly int CpuNum;
        /// <summary>
        /// CPU usage.
        /// </summary>
        public readonly double CpuUsage;
        /// <summary>
        /// List of disk ID on the node.
        /// </summary>
        public readonly ImmutableArray<string> DiskIds;
        /// <summary>
        /// Total disk size of node.
        /// </summary>
        public readonly int DiskSize;
        /// <summary>
        /// Disk usage.
        /// </summary>
        public readonly double DiskUsage;
        /// <summary>
        /// Whether it is a hidden availability zone.
        /// </summary>
        public readonly bool Hidden;
        /// <summary>
        /// Whether to act as a coordinator node or not.
        /// </summary>
        public readonly bool IsCoordinationNode;
        /// <summary>
        /// JVM memory usage.
        /// </summary>
        public readonly double JvmMemUsage;
        /// <summary>
        /// Node memory size (in GB).
        /// </summary>
        public readonly int MemSize;
        /// <summary>
        /// Memory usage.
        /// </summary>
        public readonly double MemUsage;
        /// <summary>
        /// Node HTTP IP.
        /// </summary>
        public readonly string NodeHttpIp;
        /// <summary>
        /// Node id.
        /// </summary>
        public readonly string NodeId;
        /// <summary>
        /// Node ip.
        /// </summary>
        public readonly string NodeIp;
        /// <summary>
        /// Node role.
        /// </summary>
        public readonly string NodeRole;
        /// <summary>
        /// Number of node fragments.
        /// </summary>
        public readonly int ShardNum;
        /// <summary>
        /// Whether the node is visible.
        /// </summary>
        public readonly double Visible;
        /// <summary>
        /// Zone.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetViewsNodesViewResult(
            double @break,

            int cpuNum,

            double cpuUsage,

            ImmutableArray<string> diskIds,

            int diskSize,

            double diskUsage,

            bool hidden,

            bool isCoordinationNode,

            double jvmMemUsage,

            int memSize,

            double memUsage,

            string nodeHttpIp,

            string nodeId,

            string nodeIp,

            string nodeRole,

            int shardNum,

            double visible,

            string zone)
        {
            Break = @break;
            CpuNum = cpuNum;
            CpuUsage = cpuUsage;
            DiskIds = diskIds;
            DiskSize = diskSize;
            DiskUsage = diskUsage;
            Hidden = hidden;
            IsCoordinationNode = isCoordinationNode;
            JvmMemUsage = jvmMemUsage;
            MemSize = memSize;
            MemUsage = memUsage;
            NodeHttpIp = nodeHttpIp;
            NodeId = nodeId;
            NodeIp = nodeIp;
            NodeRole = nodeRole;
            ShardNum = shardNum;
            Visible = visible;
            Zone = zone;
        }
    }
}
