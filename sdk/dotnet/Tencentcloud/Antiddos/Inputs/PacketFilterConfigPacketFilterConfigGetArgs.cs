// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Antiddos.Inputs
{

    public sealed class PacketFilterConfigPacketFilterConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Action, value [drop (discard) transmit (release) drop_black (discard and pull black) drop_rst (intercept) drop_black_rst (intercept and pull black) forward (continue protection)].
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// The detection depth starting from the detection position, with a value of [0-1500].
        /// </summary>
        [Input("depth")]
        public Input<int>? Depth { get; set; }

        /// <summary>
        /// The second detection depth starting from the second detection position, with a value of [01500].
        /// </summary>
        [Input("depth2")]
        public Input<int>? Depth2 { get; set; }

        /// <summary>
        /// end destination port, ranging from 0 to 65535.
        /// </summary>
        [Input("dportEnd", required: true)]
        public Input<int> DportEnd { get; set; } = null!;

        /// <summary>
        /// Starting destination port, ranging from 0 to 65535.
        /// </summary>
        [Input("dportStart", required: true)]
        public Input<int> DportStart { get; set; } = null!;

        /// <summary>
        /// Whether to include detection values, with a value of [0 (inclusive) and 1 (exclusive)].
        /// </summary>
        [Input("isNot")]
        public Input<int>? IsNot { get; set; }

        /// <summary>
        /// Whether the second detection includes detection values, with a value of [0 (inclusive) and 1 (exclusive)].
        /// </summary>
        [Input("isNot2")]
        public Input<int>? IsNot2 { get; set; }

        /// <summary>
        /// Detection position, value [begin_l3 (IP header) begin_l4 (TCP/UDP header) begin_l5 (T payload) no_match (mismatch)].
        /// </summary>
        [Input("matchBegin")]
        public Input<string>? MatchBegin { get; set; }

        /// <summary>
        /// Second detection position, value [begin_l5 (load) no_match (mismatch)].
        /// </summary>
        [Input("matchBegin2")]
        public Input<string>? MatchBegin2 { get; set; }

        /// <summary>
        /// When there is a second detection condition, the AND or relationship with the first detection condition, with the value [and (and relationship) none (fill in this value when there is no second detection condition)].
        /// </summary>
        [Input("matchLogic")]
        public Input<string>? MatchLogic { get; set; }

        /// <summary>
        /// Detection type, value [Sunday (keyword) pcre (regular expression)].
        /// </summary>
        [Input("matchType")]
        public Input<string>? MatchType { get; set; }

        /// <summary>
        /// The second detection type, with a value of [Sunday (keyword) pcre (regular expression)].
        /// </summary>
        [Input("matchType2")]
        public Input<string>? MatchType2 { get; set; }

        /// <summary>
        /// The offset from the detection position, with a value range of [0, Depth].
        /// </summary>
        [Input("offset")]
        public Input<int>? Offset { get; set; }

        /// <summary>
        /// The offset from the second detection position, with a value range of [0, Depth2].
        /// </summary>
        [Input("offset2")]
        public Input<int>? Offset2 { get; set; }

        /// <summary>
        /// Greater than message length, value 1+.
        /// </summary>
        [Input("pktLenGt")]
        public Input<int>? PktLenGt { get; set; }

        /// <summary>
        /// The maximum message length, ranging from 1 to 1500, must be greater than or equal to the minimum message length.
        /// </summary>
        [Input("pktlenMax", required: true)]
        public Input<int> PktlenMax { get; set; } = null!;

        /// <summary>
        /// Minimum message length, ranging from 1 to 1500.
        /// </summary>
        [Input("pktlenMin", required: true)]
        public Input<int> PktlenMin { get; set; } = null!;

        /// <summary>
        /// Protocol, value [TCP udp icmp all].
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// End source port, values range from 1 to 65535, must be greater than or equal to the start source port.
        /// </summary>
        [Input("sportEnd", required: true)]
        public Input<int> SportEnd { get; set; } = null!;

        /// <summary>
        /// Starting source port, ranging from 0 to 65535.
        /// </summary>
        [Input("sportStart", required: true)]
        public Input<int> SportStart { get; set; } = null!;

        /// <summary>
        /// Detection value, key string or regular expression, value [When the detection type is Sunday, please fill in the string or hexadecimal bytecode, for example, x313233 corresponds to the hexadecimal word&amp;gt;section code of the string &amp;#39;123&amp;#39;; when the detection type is pcre, please fill in the regular expression character string;].
        /// </summary>
        [Input("str")]
        public Input<string>? Str { get; set; }

        /// <summary>
        /// key string or regular expression, value [When the detection type is Sunday, please fill in the string or hexadecimal bytecode, for example, x313233 corresponds to the hexadecimal word&amp;gt;section code of the string &amp;#39;123&amp;#39;; when the detection type is pcre, please fill in the regular expression character string;].
        /// </summary>
        [Input("str2")]
        public Input<string>? Str2 { get; set; }

        public PacketFilterConfigPacketFilterConfigGetArgs()
        {
        }
    }
}
