// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Antiddos
{
    public static class GetPendingRiskInfo
    {
        /// <summary>
        /// Use this data source to query detailed information of antiddos pending risk info
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pendingRiskInfo = Tencentcloud.Antiddos.GetPendingRiskInfo.Invoke();
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetPendingRiskInfoResult> InvokeAsync(GetPendingRiskInfoArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPendingRiskInfoResult>("tencentcloud:Antiddos/getPendingRiskInfo:getPendingRiskInfo", args ?? new GetPendingRiskInfoArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of antiddos pending risk info
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pendingRiskInfo = Tencentcloud.Antiddos.GetPendingRiskInfo.Invoke();
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetPendingRiskInfoResult> Invoke(GetPendingRiskInfoInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPendingRiskInfoResult>("tencentcloud:Antiddos/getPendingRiskInfo:getPendingRiskInfo", args ?? new GetPendingRiskInfoInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPendingRiskInfoArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetPendingRiskInfoArgs()
        {
        }
        public static new GetPendingRiskInfoArgs Empty => new GetPendingRiskInfoArgs();
    }

    public sealed class GetPendingRiskInfoInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetPendingRiskInfoInvokeArgs()
        {
        }
        public static new GetPendingRiskInfoInvokeArgs Empty => new GetPendingRiskInfoInvokeArgs();
    }


    [OutputType]
    public sealed class GetPendingRiskInfoResult
    {
        /// <summary>
        /// Number of resources in the attack.
        /// </summary>
        public readonly int AttackingCount;
        /// <summary>
        /// Number of resources in blockage.
        /// </summary>
        public readonly int BlockingCount;
        /// <summary>
        /// Number of expired resources.
        /// </summary>
        public readonly int ExpiredCount;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Is it a paid user? True: paid user, false: regular user.
        /// </summary>
        public readonly bool IsPaidUsr;
        public readonly string? ResultOutputFile;
        /// <summary>
        /// Total number of all pending risk events.
        /// </summary>
        public readonly int Total;

        [OutputConstructor]
        private GetPendingRiskInfoResult(
            int attackingCount,

            int blockingCount,

            int expiredCount,

            string id,

            bool isPaidUsr,

            string? resultOutputFile,

            int total)
        {
            AttackingCount = attackingCount;
            BlockingCount = blockingCount;
            ExpiredCount = expiredCount;
            Id = id;
            IsPaidUsr = isPaidUsr;
            ResultOutputFile = resultOutputFile;
            Total = total;
        }
    }
}
