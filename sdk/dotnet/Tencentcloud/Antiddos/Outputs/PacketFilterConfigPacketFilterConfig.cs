// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Antiddos.Outputs
{

    [OutputType]
    public sealed class PacketFilterConfigPacketFilterConfig
    {
        /// <summary>
        /// Action, value [drop (discard) transmit (release) drop_black (discard and pull black) drop_rst (intercept) drop_black_rst (intercept and pull black) forward (continue protection)].
        /// </summary>
        public readonly string Action;
        /// <summary>
        /// The detection depth starting from the detection position, with a value of [0-1500].
        /// </summary>
        public readonly int? Depth;
        /// <summary>
        /// The second detection depth starting from the second detection position, with a value of [01500].
        /// </summary>
        public readonly int? Depth2;
        /// <summary>
        /// end destination port, ranging from 0 to 65535.
        /// </summary>
        public readonly int DportEnd;
        /// <summary>
        /// Starting destination port, ranging from 0 to 65535.
        /// </summary>
        public readonly int DportStart;
        /// <summary>
        /// Whether to include detection values, with a value of [0 (inclusive) and 1 (exclusive)].
        /// </summary>
        public readonly int? IsNot;
        /// <summary>
        /// Whether the second detection includes detection values, with a value of [0 (inclusive) and 1 (exclusive)].
        /// </summary>
        public readonly int? IsNot2;
        /// <summary>
        /// Detection position, value [begin_l3 (IP header) begin_l4 (TCP/UDP header) begin_l5 (T payload) no_match (mismatch)].
        /// </summary>
        public readonly string? MatchBegin;
        /// <summary>
        /// Second detection position, value [begin_l5 (load) no_match (mismatch)].
        /// </summary>
        public readonly string? MatchBegin2;
        /// <summary>
        /// When there is a second detection condition, the AND or relationship with the first detection condition, with the value [and (and relationship) none (fill in this value when there is no second detection condition)].
        /// </summary>
        public readonly string? MatchLogic;
        /// <summary>
        /// Detection type, value [Sunday (keyword) pcre (regular expression)].
        /// </summary>
        public readonly string? MatchType;
        /// <summary>
        /// The second detection type, with a value of [Sunday (keyword) pcre (regular expression)].
        /// </summary>
        public readonly string? MatchType2;
        /// <summary>
        /// The offset from the detection position, with a value range of [0, Depth].
        /// </summary>
        public readonly int? Offset;
        /// <summary>
        /// The offset from the second detection position, with a value range of [0, Depth2].
        /// </summary>
        public readonly int? Offset2;
        /// <summary>
        /// Greater than message length, value 1+.
        /// </summary>
        public readonly int? PktLenGt;
        /// <summary>
        /// The maximum message length, ranging from 1 to 1500, must be greater than or equal to the minimum message length.
        /// </summary>
        public readonly int PktlenMax;
        /// <summary>
        /// Minimum message length, ranging from 1 to 1500.
        /// </summary>
        public readonly int PktlenMin;
        /// <summary>
        /// Protocol, value [TCP udp icmp all].
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// End source port, values range from 1 to 65535, must be greater than or equal to the start source port.
        /// </summary>
        public readonly int SportEnd;
        /// <summary>
        /// Starting source port, ranging from 0 to 65535.
        /// </summary>
        public readonly int SportStart;
        /// <summary>
        /// Detection value, key string or regular expression, value [When the detection type is Sunday, please fill in the string or hexadecimal bytecode, for example, x313233 corresponds to the hexadecimal word&amp;gt;section code of the string &amp;#39;123&amp;#39;; when the detection type is pcre, please fill in the regular expression character string;].
        /// </summary>
        public readonly string? Str;
        /// <summary>
        /// key string or regular expression, value [When the detection type is Sunday, please fill in the string or hexadecimal bytecode, for example, x313233 corresponds to the hexadecimal word&amp;gt;section code of the string &amp;#39;123&amp;#39;; when the detection type is pcre, please fill in the regular expression character string;].
        /// </summary>
        public readonly string? Str2;

        [OutputConstructor]
        private PacketFilterConfigPacketFilterConfig(
            string action,

            int? depth,

            int? depth2,

            int dportEnd,

            int dportStart,

            int? isNot,

            int? isNot2,

            string? matchBegin,

            string? matchBegin2,

            string? matchLogic,

            string? matchType,

            string? matchType2,

            int? offset,

            int? offset2,

            int? pktLenGt,

            int pktlenMax,

            int pktlenMin,

            string protocol,

            int sportEnd,

            int sportStart,

            string? str,

            string? str2)
        {
            Action = action;
            Depth = depth;
            Depth2 = depth2;
            DportEnd = dportEnd;
            DportStart = dportStart;
            IsNot = isNot;
            IsNot2 = isNot2;
            MatchBegin = matchBegin;
            MatchBegin2 = matchBegin2;
            MatchLogic = matchLogic;
            MatchType = matchType;
            MatchType2 = matchType2;
            Offset = offset;
            Offset2 = offset2;
            PktLenGt = pktLenGt;
            PktlenMax = pktlenMax;
            PktlenMin = pktlenMin;
            Protocol = protocol;
            SportEnd = sportEnd;
            SportStart = sportStart;
            Str = str;
            Str2 = str2;
        }
    }
}
