// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Nat
{
    /// <summary>
    /// Provides a resource to create a NAT Gateway SNat rule.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var zones = Output.Create(Tencentcloud.Availability.GetZonesByProduct.InvokeAsync(new Tencentcloud.Availability.GetZonesByProductArgs
    ///         {
    ///             Product = "nat",
    ///         }));
    ///         var image = Output.Create(Tencentcloud.Images.GetInstance.InvokeAsync(new Tencentcloud.Images.GetInstanceArgs
    ///         {
    ///             OsName = "centos",
    ///         }));
    ///         var instanceTypes = zones.Apply(zones =&gt; Output.Create(Tencentcloud.Instance.GetTypes.InvokeAsync(new Tencentcloud.Instance.GetTypesArgs
    ///         {
    ///             Filters = 
    ///             {
    ///                 new Tencentcloud.Instance.Inputs.GetTypesFilterArgs
    ///                 {
    ///                     Name = "zone",
    ///                     Values = 
    ///                     {
    ///                         zones.Zones?[0]?.Name,
    ///                     },
    ///                 },
    ///                 new Tencentcloud.Instance.Inputs.GetTypesFilterArgs
    ///                 {
    ///                     Name = "instance-family",
    ///                     Values = 
    ///                     {
    ///                         "S5",
    ///                     },
    ///                 },
    ///             },
    ///             CpuCoreCount = 2,
    ///             ExcludeSoldOut = true,
    ///         })));
    ///         var vpc = new Tencentcloud.Vpc.Instance("vpc", new Tencentcloud.Vpc.InstanceArgs
    ///         {
    ///             CidrBlock = "10.0.0.0/16",
    ///         });
    ///         // Create route_table and entry
    ///         var routeTable = new Tencentcloud.Route.Table("routeTable", new Tencentcloud.Route.TableArgs
    ///         {
    ///             VpcId = vpc.Id,
    ///         });
    ///         var subnet = new Tencentcloud.Subnet.Instance("subnet", new Tencentcloud.Subnet.InstanceArgs
    ///         {
    ///             VpcId = vpc.Id,
    ///             CidrBlock = "10.0.0.0/16",
    ///             AvailabilityZone = zones.Apply(zones =&gt; zones.Zones?[0]?.Name),
    ///             RouteTableId = routeTable.Id,
    ///         });
    ///         var eipExample1 = new Tencentcloud.Eip.Instance("eipExample1", new Tencentcloud.Eip.InstanceArgs
    ///         {
    ///         });
    ///         var eipExample2 = new Tencentcloud.Eip.Instance("eipExample2", new Tencentcloud.Eip.InstanceArgs
    ///         {
    ///         });
    ///         // Create NAT Gateway
    ///         var myNat = new Tencentcloud.Nat.Gateway("myNat", new Tencentcloud.Nat.GatewayArgs
    ///         {
    ///             VpcId = vpc.Id,
    ///             MaxConcurrent = 3000000,
    ///             Bandwidth = 500,
    ///             AssignedEipSets = 
    ///             {
    ///                 eipExample1.PublicIp,
    ///                 eipExample2.PublicIp,
    ///             },
    ///         });
    ///         var routeEntry = new Tencentcloud.Route.TableEntry("routeEntry", new Tencentcloud.Route.TableEntryArgs
    ///         {
    ///             RouteTableId = routeTable.Id,
    ///             DestinationCidrBlock = "10.0.0.0/8",
    ///             NextType = "NAT",
    ///             NextHub = myNat.Id,
    ///         });
    ///         // Subnet Nat gateway snat
    ///         var subnetSnat = new Tencentcloud.Nat.GatewaySnat("subnetSnat", new Tencentcloud.Nat.GatewaySnatArgs
    ///         {
    ///             NatGatewayId = myNat.Id,
    ///             ResourceType = "SUBNET",
    ///             SubnetId = subnet.Id,
    ///             SubnetCidrBlock = subnet.CidrBlock,
    ///             Description = "terraform test",
    ///             PublicIpAddrs = 
    ///             {
    ///                 eipExample1.PublicIp,
    ///                 eipExample2.PublicIp,
    ///             },
    ///         });
    ///         // Create instance
    ///         var example = new Tencentcloud.Instance.Instance("example", new Tencentcloud.Instance.InstanceArgs
    ///         {
    ///             InstanceName = "tf_example",
    ///             AvailabilityZone = zones.Apply(zones =&gt; zones.Zones?[0]?.Name),
    ///             ImageId = image.Apply(image =&gt; image.Images?[0]?.ImageId),
    ///             InstanceType = instanceTypes.Apply(instanceTypes =&gt; instanceTypes.InstanceTypes?[0]?.InstanceType),
    ///             SystemDiskType = "CLOUD_PREMIUM",
    ///             SystemDiskSize = 50,
    ///             Hostname = "user",
    ///             ProjectId = 0,
    ///             VpcId = vpc.Id,
    ///             SubnetId = subnet.Id,
    ///         });
    ///         // NetWorkInterface Nat gateway snat
    ///         var myInstanceSnat = new Tencentcloud.Nat.GatewaySnat("myInstanceSnat", new Tencentcloud.Nat.GatewaySnatArgs
    ///         {
    ///             NatGatewayId = myNat.Id,
    ///             ResourceType = "NETWORKINTERFACE",
    ///             InstanceId = example.Id,
    ///             InstancePrivateIpAddr = example.PrivateIp,
    ///             Description = "terraform test",
    ///             PublicIpAddrs = 
    ///             {
    ///                 eipExample1.PublicIp,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// VPN gateway route can be imported using the id, the id format must be '{nat_gateway_id}#{resource_id}', resource_id range `subnet_id`, `instance_id`, e.g. SUBNET SNat
    /// 
    /// ```sh
    ///  $ pulumi import tencentcloud:Nat/gatewaySnat:GatewaySnat my_snat nat-r4ip1cwt#subnet-2ap74y35
    /// ```
    /// 
    ///  NETWORKINTERFACT SNat
    /// 
    /// ```sh
    ///  $ pulumi import tencentcloud:Nat/gatewaySnat:GatewaySnat my_snat nat-r4ip1cwt#ins-da412f5a
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Nat/gatewaySnat:GatewaySnat")]
    public partial class GatewaySnat : Pulumi.CustomResource
    {
        /// <summary>
        /// Create time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Instance ID, required when `resource_type` is NETWORKINTERFACE.
        /// </summary>
        [Output("instanceId")]
        public Output<string?> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Private IPs of the instance's primary ENI, required when `resource_type` is NETWORKINTERFACE.
        /// </summary>
        [Output("instancePrivateIpAddr")]
        public Output<string?> InstancePrivateIpAddr { get; private set; } = null!;

        /// <summary>
        /// NAT gateway ID.
        /// </summary>
        [Output("natGatewayId")]
        public Output<string> NatGatewayId { get; private set; } = null!;

        /// <summary>
        /// Elastic IP address pool.
        /// </summary>
        [Output("publicIpAddrs")]
        public Output<ImmutableArray<string>> PublicIpAddrs { get; private set; } = null!;

        /// <summary>
        /// Resource type. Valid values: SUBNET, NETWORKINTERFACE.
        /// </summary>
        [Output("resourceType")]
        public Output<string> ResourceType { get; private set; } = null!;

        /// <summary>
        /// SNAT rule ID.
        /// </summary>
        [Output("snatId")]
        public Output<string> SnatId { get; private set; } = null!;

        /// <summary>
        /// The IPv4 CIDR of the subnet, required when `resource_type` is SUBNET.
        /// </summary>
        [Output("subnetCidrBlock")]
        public Output<string?> SubnetCidrBlock { get; private set; } = null!;

        /// <summary>
        /// Subnet instance ID, required when `resource_type` is SUBNET.
        /// </summary>
        [Output("subnetId")]
        public Output<string?> SubnetId { get; private set; } = null!;


        /// <summary>
        /// Create a GatewaySnat resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GatewaySnat(string name, GatewaySnatArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Nat/gatewaySnat:GatewaySnat", name, args ?? new GatewaySnatArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GatewaySnat(string name, Input<string> id, GatewaySnatState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Nat/gatewaySnat:GatewaySnat", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GatewaySnat resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GatewaySnat Get(string name, Input<string> id, GatewaySnatState? state = null, CustomResourceOptions? options = null)
        {
            return new GatewaySnat(name, id, state, options);
        }
    }

    public sealed class GatewaySnatArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Instance ID, required when `resource_type` is NETWORKINTERFACE.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Private IPs of the instance's primary ENI, required when `resource_type` is NETWORKINTERFACE.
        /// </summary>
        [Input("instancePrivateIpAddr")]
        public Input<string>? InstancePrivateIpAddr { get; set; }

        /// <summary>
        /// NAT gateway ID.
        /// </summary>
        [Input("natGatewayId", required: true)]
        public Input<string> NatGatewayId { get; set; } = null!;

        [Input("publicIpAddrs", required: true)]
        private InputList<string>? _publicIpAddrs;

        /// <summary>
        /// Elastic IP address pool.
        /// </summary>
        public InputList<string> PublicIpAddrs
        {
            get => _publicIpAddrs ?? (_publicIpAddrs = new InputList<string>());
            set => _publicIpAddrs = value;
        }

        /// <summary>
        /// Resource type. Valid values: SUBNET, NETWORKINTERFACE.
        /// </summary>
        [Input("resourceType", required: true)]
        public Input<string> ResourceType { get; set; } = null!;

        /// <summary>
        /// The IPv4 CIDR of the subnet, required when `resource_type` is SUBNET.
        /// </summary>
        [Input("subnetCidrBlock")]
        public Input<string>? SubnetCidrBlock { get; set; }

        /// <summary>
        /// Subnet instance ID, required when `resource_type` is SUBNET.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        public GatewaySnatArgs()
        {
        }
    }

    public sealed class GatewaySnatState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Create time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Instance ID, required when `resource_type` is NETWORKINTERFACE.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Private IPs of the instance's primary ENI, required when `resource_type` is NETWORKINTERFACE.
        /// </summary>
        [Input("instancePrivateIpAddr")]
        public Input<string>? InstancePrivateIpAddr { get; set; }

        /// <summary>
        /// NAT gateway ID.
        /// </summary>
        [Input("natGatewayId")]
        public Input<string>? NatGatewayId { get; set; }

        [Input("publicIpAddrs")]
        private InputList<string>? _publicIpAddrs;

        /// <summary>
        /// Elastic IP address pool.
        /// </summary>
        public InputList<string> PublicIpAddrs
        {
            get => _publicIpAddrs ?? (_publicIpAddrs = new InputList<string>());
            set => _publicIpAddrs = value;
        }

        /// <summary>
        /// Resource type. Valid values: SUBNET, NETWORKINTERFACE.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        /// <summary>
        /// SNAT rule ID.
        /// </summary>
        [Input("snatId")]
        public Input<string>? SnatId { get; set; }

        /// <summary>
        /// The IPv4 CIDR of the subnet, required when `resource_type` is SUBNET.
        /// </summary>
        [Input("subnetCidrBlock")]
        public Input<string>? SubnetCidrBlock { get; set; }

        /// <summary>
        /// Subnet instance ID, required when `resource_type` is SUBNET.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        public GatewaySnatState()
        {
        }
    }
}
