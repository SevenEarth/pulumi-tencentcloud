// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Vod
{
    public static class GetAdaptiveDynamicStreamingTemplates
    {
        /// <summary>
        /// Use this data source to query detailed information of VOD adaptive dynamic streaming templates.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var fooAdaptiveDynamicStreamingTemplate = new Tencentcloud.Vod.AdaptiveDynamicStreamingTemplate("fooAdaptiveDynamicStreamingTemplate", new Tencentcloud.Vod.AdaptiveDynamicStreamingTemplateArgs
        ///         {
        ///             Format = "HLS",
        ///             DrmType = "SimpleAES",
        ///             DisableHigherVideoBitrate = false,
        ///             DisableHigherVideoResolution = false,
        ///             Comment = "test",
        ///             StreamInfos = 
        ///             {
        ///                 new Tencentcloud.Vod.Inputs.AdaptiveDynamicStreamingTemplateStreamInfoArgs
        ///                 {
        ///                     Video = new Tencentcloud.Vod.Inputs.AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs
        ///                     {
        ///                         Codec = "libx265",
        ///                         Fps = 4,
        ///                         Bitrate = 129,
        ///                         ResolutionAdaptive = false,
        ///                         Width = 128,
        ///                         Height = 128,
        ///                         FillType = "stretch",
        ///                     },
        ///                     Audio = new Tencentcloud.Vod.Inputs.AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs
        ///                     {
        ///                         Codec = "libmp3lame",
        ///                         Bitrate = 129,
        ///                         SampleRate = 44100,
        ///                         AudioChannel = "dual",
        ///                     },
        ///                     RemoveAudio = false,
        ///                 },
        ///                 new Tencentcloud.Vod.Inputs.AdaptiveDynamicStreamingTemplateStreamInfoArgs
        ///                 {
        ///                     Video = new Tencentcloud.Vod.Inputs.AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs
        ///                     {
        ///                         Codec = "libx264",
        ///                         Fps = 4,
        ///                         Bitrate = 256,
        ///                     },
        ///                     Audio = new Tencentcloud.Vod.Inputs.AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs
        ///                     {
        ///                         Codec = "libfdk_aac",
        ///                         Bitrate = 256,
        ///                         SampleRate = 44100,
        ///                     },
        ///                     RemoveAudio = true,
        ///                 },
        ///             },
        ///         });
        ///         var fooAdaptiveDynamicStreamingTemplates = Tencentcloud.Vod.GetAdaptiveDynamicStreamingTemplates.Invoke(new Tencentcloud.Vod.GetAdaptiveDynamicStreamingTemplatesInvokeArgs
        ///         {
        ///             Type = "Custom",
        ///             Definition = fooAdaptiveDynamicStreamingTemplate.Id,
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAdaptiveDynamicStreamingTemplatesResult> InvokeAsync(GetAdaptiveDynamicStreamingTemplatesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAdaptiveDynamicStreamingTemplatesResult>("tencentcloud:Vod/getAdaptiveDynamicStreamingTemplates:getAdaptiveDynamicStreamingTemplates", args ?? new GetAdaptiveDynamicStreamingTemplatesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of VOD adaptive dynamic streaming templates.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var fooAdaptiveDynamicStreamingTemplate = new Tencentcloud.Vod.AdaptiveDynamicStreamingTemplate("fooAdaptiveDynamicStreamingTemplate", new Tencentcloud.Vod.AdaptiveDynamicStreamingTemplateArgs
        ///         {
        ///             Format = "HLS",
        ///             DrmType = "SimpleAES",
        ///             DisableHigherVideoBitrate = false,
        ///             DisableHigherVideoResolution = false,
        ///             Comment = "test",
        ///             StreamInfos = 
        ///             {
        ///                 new Tencentcloud.Vod.Inputs.AdaptiveDynamicStreamingTemplateStreamInfoArgs
        ///                 {
        ///                     Video = new Tencentcloud.Vod.Inputs.AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs
        ///                     {
        ///                         Codec = "libx265",
        ///                         Fps = 4,
        ///                         Bitrate = 129,
        ///                         ResolutionAdaptive = false,
        ///                         Width = 128,
        ///                         Height = 128,
        ///                         FillType = "stretch",
        ///                     },
        ///                     Audio = new Tencentcloud.Vod.Inputs.AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs
        ///                     {
        ///                         Codec = "libmp3lame",
        ///                         Bitrate = 129,
        ///                         SampleRate = 44100,
        ///                         AudioChannel = "dual",
        ///                     },
        ///                     RemoveAudio = false,
        ///                 },
        ///                 new Tencentcloud.Vod.Inputs.AdaptiveDynamicStreamingTemplateStreamInfoArgs
        ///                 {
        ///                     Video = new Tencentcloud.Vod.Inputs.AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs
        ///                     {
        ///                         Codec = "libx264",
        ///                         Fps = 4,
        ///                         Bitrate = 256,
        ///                     },
        ///                     Audio = new Tencentcloud.Vod.Inputs.AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs
        ///                     {
        ///                         Codec = "libfdk_aac",
        ///                         Bitrate = 256,
        ///                         SampleRate = 44100,
        ///                     },
        ///                     RemoveAudio = true,
        ///                 },
        ///             },
        ///         });
        ///         var fooAdaptiveDynamicStreamingTemplates = Tencentcloud.Vod.GetAdaptiveDynamicStreamingTemplates.Invoke(new Tencentcloud.Vod.GetAdaptiveDynamicStreamingTemplatesInvokeArgs
        ///         {
        ///             Type = "Custom",
        ///             Definition = fooAdaptiveDynamicStreamingTemplate.Id,
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAdaptiveDynamicStreamingTemplatesResult> Invoke(GetAdaptiveDynamicStreamingTemplatesInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAdaptiveDynamicStreamingTemplatesResult>("tencentcloud:Vod/getAdaptiveDynamicStreamingTemplates:getAdaptiveDynamicStreamingTemplates", args ?? new GetAdaptiveDynamicStreamingTemplatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAdaptiveDynamicStreamingTemplatesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique ID filter of adaptive dynamic streaming template.
        /// </summary>
        [Input("definition")]
        public string? Definition { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
        /// </summary>
        [Input("subAppId")]
        public int? SubAppId { get; set; }

        /// <summary>
        /// Template type filter. Valid values: `Preset`, `Custom`. `Preset`: preset template; `Custom`: custom template.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetAdaptiveDynamicStreamingTemplatesArgs()
        {
        }
    }

    public sealed class GetAdaptiveDynamicStreamingTemplatesInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique ID filter of adaptive dynamic streaming template.
        /// </summary>
        [Input("definition")]
        public Input<string>? Definition { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
        /// </summary>
        [Input("subAppId")]
        public Input<int>? SubAppId { get; set; }

        /// <summary>
        /// Template type filter. Valid values: `Preset`, `Custom`. `Preset`: preset template; `Custom`: custom template.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetAdaptiveDynamicStreamingTemplatesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAdaptiveDynamicStreamingTemplatesResult
    {
        /// <summary>
        /// Unique ID of adaptive dynamic streaming template.
        /// </summary>
        public readonly string? Definition;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ResultOutputFile;
        public readonly int? SubAppId;
        /// <summary>
        /// A list of adaptive dynamic streaming templates. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAdaptiveDynamicStreamingTemplatesTemplateListResult> TemplateLists;
        /// <summary>
        /// Template type filter. Valid values: `Preset`,`Custom`. `Preset`: preset template; `Custom`: custom template.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetAdaptiveDynamicStreamingTemplatesResult(
            string? definition,

            string id,

            string? resultOutputFile,

            int? subAppId,

            ImmutableArray<Outputs.GetAdaptiveDynamicStreamingTemplatesTemplateListResult> templateLists,

            string? type)
        {
            Definition = definition;
            Id = id;
            ResultOutputFile = resultOutputFile;
            SubAppId = subAppId;
            TemplateLists = templateLists;
            Type = type;
        }
    }
}
