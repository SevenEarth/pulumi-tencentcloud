// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Tcmq
{
    public static class GetQueue
    {
        /// <summary>
        /// Use this data source to query detailed information of tcmq queue
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var queue = Output.Create(Tencentcloud.Tcmq.GetQueue.InvokeAsync(new Tencentcloud.Tcmq.GetQueueArgs
        ///         {
        ///             QueueName = "queue_name",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetQueueResult> InvokeAsync(GetQueueArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetQueueResult>("tencentcloud:Tcmq/getQueue:getQueue", args ?? new GetQueueArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of tcmq queue
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var queue = Output.Create(Tencentcloud.Tcmq.GetQueue.InvokeAsync(new Tencentcloud.Tcmq.GetQueueArgs
        ///         {
        ///             QueueName = "queue_name",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetQueueResult> Invoke(GetQueueInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetQueueResult>("tencentcloud:Tcmq/getQueue:getQueue", args ?? new GetQueueInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetQueueArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetQueueFilterArgs>? _filters;

        /// <summary>
        /// Filter. Currently, you can filter by tag. The tag name must be prefixed with `tag:`, such as `tag: owner`, `tag: environment`, or `tag: business`.
        /// </summary>
        public List<Inputs.GetQueueFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetQueueFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// For filtering by tag, this parameter must be set to `true`.
        /// </summary>
        [Input("isTagFilter")]
        public bool? IsTagFilter { get; set; }

        /// <summary>
        /// The number of queues to be returned per page in case of paginated return. If this parameter is not passed in, 20 will be used by default. Maximum value: 50.
        /// </summary>
        [Input("limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// Starting position of a queue list to be returned on the current page in case of paginated return. If a value is entered, limit must be specified. If this parameter is left empty, 0 will be used by default.
        /// </summary>
        [Input("offset")]
        public int? Offset { get; set; }

        /// <summary>
        /// Filter by QueueName.
        /// </summary>
        [Input("queueName")]
        public string? QueueName { get; set; }

        [Input("queueNameLists")]
        private List<string>? _queueNameLists;

        /// <summary>
        /// Filter by CMQ queue name.
        /// </summary>
        public List<string> QueueNameLists
        {
            get => _queueNameLists ?? (_queueNameLists = new List<string>());
            set => _queueNameLists = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetQueueArgs()
        {
        }
    }

    public sealed class GetQueueInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetQueueFilterInputArgs>? _filters;

        /// <summary>
        /// Filter. Currently, you can filter by tag. The tag name must be prefixed with `tag:`, such as `tag: owner`, `tag: environment`, or `tag: business`.
        /// </summary>
        public InputList<Inputs.GetQueueFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetQueueFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// For filtering by tag, this parameter must be set to `true`.
        /// </summary>
        [Input("isTagFilter")]
        public Input<bool>? IsTagFilter { get; set; }

        /// <summary>
        /// The number of queues to be returned per page in case of paginated return. If this parameter is not passed in, 20 will be used by default. Maximum value: 50.
        /// </summary>
        [Input("limit")]
        public Input<int>? Limit { get; set; }

        /// <summary>
        /// Starting position of a queue list to be returned on the current page in case of paginated return. If a value is entered, limit must be specified. If this parameter is left empty, 0 will be used by default.
        /// </summary>
        [Input("offset")]
        public Input<int>? Offset { get; set; }

        /// <summary>
        /// Filter by QueueName.
        /// </summary>
        [Input("queueName")]
        public Input<string>? QueueName { get; set; }

        [Input("queueNameLists")]
        private InputList<string>? _queueNameLists;

        /// <summary>
        /// Filter by CMQ queue name.
        /// </summary>
        public InputList<string> QueueNameLists
        {
            get => _queueNameLists ?? (_queueNameLists = new InputList<string>());
            set => _queueNameLists = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetQueueInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetQueueResult
    {
        public readonly ImmutableArray<Outputs.GetQueueFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IsTagFilter;
        public readonly int? Limit;
        public readonly int? Offset;
        /// <summary>
        /// Queue list.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetQueueQueueListResult> QueueLists;
        /// <summary>
        /// Message queue name.
        /// </summary>
        public readonly string? QueueName;
        public readonly ImmutableArray<string> QueueNameLists;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetQueueResult(
            ImmutableArray<Outputs.GetQueueFilterResult> filters,

            string id,

            bool? isTagFilter,

            int? limit,

            int? offset,

            ImmutableArray<Outputs.GetQueueQueueListResult> queueLists,

            string? queueName,

            ImmutableArray<string> queueNameLists,

            string? resultOutputFile)
        {
            Filters = filters;
            Id = id;
            IsTagFilter = isTagFilter;
            Limit = limit;
            Offset = offset;
            QueueLists = queueLists;
            QueueName = queueName;
            QueueNameLists = queueNameLists;
            ResultOutputFile = resultOutputFile;
        }
    }
}
