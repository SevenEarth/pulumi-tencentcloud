// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Ci.Outputs
{

    [OutputType]
    public sealed class MediaSnapshotTemplateSnapshot
    {
        /// <summary>
        /// Screenshot black screen detection parameters, Valid when IsCheckBlack=true, Value reference range [30, 100], indicating the proportion of black pixels, the smaller the value, the smaller the proportion of black pixels, Start&amp;gt;0, the parameter setting is invalid, no filter black screen, Start =0 parameter is valid, the start time of the frame capture is the first frame non-black screen start.
        /// </summary>
        public readonly string? BlackLevel;
        /// <summary>
        /// Screenshot image processing parameters, for example: imageMogr2/format/png.
        /// </summary>
        public readonly string? CiParam;
        /// <summary>
        /// Number of screenshots, range (0 10000].
        /// </summary>
        public readonly string Count;
        /// <summary>
        /// high, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video.
        /// </summary>
        public readonly string? Height;
        /// <summary>
        /// Whether to enable black screen detection true/false.
        /// </summary>
        public readonly string? IsCheckBlack;
        /// <summary>
        /// Whether to check the number of screenshots forcibly, when using custom interval mode to take screenshots, the video time is not long enough to capture Count screenshots, you can switch to average screenshot mode to capture Count screenshots.
        /// </summary>
        public readonly string? IsCheckCount;
        /// <summary>
        /// Screenshot mode, value range: {Interval, Average, KeyFrame}- Interval means interval mode Average means average mode- KeyFrame represents the key frame mode- Interval mode: Start, TimeInterval, The Count parameter takes effect. When Count is set and TimeInterval is not set, Indicates to capture all frames, a total of Count pictures- Average mode: Start, the Count parameter takes effect. express.
        /// </summary>
        public readonly string? Mode;
        /// <summary>
        /// Screenshot black screen detection parameters, Valid when IsCheckBlack=true, The threshold for judging whether a pixel is a black point, value range: [0, 255].
        /// </summary>
        public readonly string? PixelBlackThreshold;
        /// <summary>
        /// Screenshot output mode parameters, Value range: {OnlySnapshot, OnlySprite, SnapshotAndSprite}, OnlySnapshot means output only screenshot mode OnlySprite means only output sprite mode SnapshotAndSprite means output screenshot and sprite mode.
        /// </summary>
        public readonly string? SnapshotOutMode;
        /// <summary>
        /// Screenshot output configuration.
        /// </summary>
        public readonly Outputs.MediaSnapshotTemplateSnapshotSpriteSnapshotConfig? SpriteSnapshotConfig;
        /// <summary>
        /// Starting time, [0 video duration] in seconds, Support float format, the execution accuracy is accurate to milliseconds.
        /// </summary>
        public readonly string? Start;
        /// <summary>
        /// Screenshot time interval, (0 3600], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
        /// </summary>
        public readonly string? TimeInterval;
        /// <summary>
        /// wide, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video.
        /// </summary>
        public readonly string? Width;

        [OutputConstructor]
        private MediaSnapshotTemplateSnapshot(
            string? blackLevel,

            string? ciParam,

            string count,

            string? height,

            string? isCheckBlack,

            string? isCheckCount,

            string? mode,

            string? pixelBlackThreshold,

            string? snapshotOutMode,

            Outputs.MediaSnapshotTemplateSnapshotSpriteSnapshotConfig? spriteSnapshotConfig,

            string? start,

            string? timeInterval,

            string? width)
        {
            BlackLevel = blackLevel;
            CiParam = ciParam;
            Count = count;
            Height = height;
            IsCheckBlack = isCheckBlack;
            IsCheckCount = isCheckCount;
            Mode = mode;
            PixelBlackThreshold = pixelBlackThreshold;
            SnapshotOutMode = snapshotOutMode;
            SpriteSnapshotConfig = spriteSnapshotConfig;
            Start = start;
            TimeInterval = timeInterval;
            Width = width;
        }
    }
}
