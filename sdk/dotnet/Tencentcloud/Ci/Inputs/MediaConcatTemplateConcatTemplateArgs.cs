// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Ci.Inputs
{

    public sealed class MediaConcatTemplateConcatTemplateArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// audio parameters, the target file does not require Audio information, need to set Audio.Remove to true.
        /// </summary>
        [Input("audio")]
        public Input<Inputs.MediaConcatTemplateConcatTemplateAudioArgs>? Audio { get; set; }

        [Input("audioMixes")]
        private InputList<Inputs.MediaConcatTemplateConcatTemplateAudioMixArgs>? _audioMixes;

        /// <summary>
        /// mixing parameters.
        /// </summary>
        public InputList<Inputs.MediaConcatTemplateConcatTemplateAudioMixArgs> AudioMixes
        {
            get => _audioMixes ?? (_audioMixes = new InputList<Inputs.MediaConcatTemplateConcatTemplateAudioMixArgs>());
            set => _audioMixes = value;
        }

        [Input("concatFragments", required: true)]
        private InputList<Inputs.MediaConcatTemplateConcatTemplateConcatFragmentArgs>? _concatFragments;

        /// <summary>
        /// Package format.
        /// </summary>
        public InputList<Inputs.MediaConcatTemplateConcatTemplateConcatFragmentArgs> ConcatFragments
        {
            get => _concatFragments ?? (_concatFragments = new InputList<Inputs.MediaConcatTemplateConcatTemplateConcatFragmentArgs>());
            set => _concatFragments = value;
        }

        /// <summary>
        /// Only splicing without transcoding.
        /// </summary>
        [Input("container", required: true)]
        public Input<Inputs.MediaConcatTemplateConcatTemplateContainerArgs> Container { get; set; } = null!;

        /// <summary>
        /// video information, do not upload Video, which is equivalent to deleting video information.
        /// </summary>
        [Input("video")]
        public Input<Inputs.MediaConcatTemplateConcatTemplateVideoArgs>? Video { get; set; }

        public MediaConcatTemplateConcatTemplateArgs()
        {
        }
    }
}
