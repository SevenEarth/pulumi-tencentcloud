// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Mysql
{
    public static class GetBackupOverview
    {
        /// <summary>
        /// Use this data source to query detailed information of mysql backup_overview
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var backupOverview = Output.Create(Tencentcloud.Mysql.GetBackupOverview.InvokeAsync(new Tencentcloud.Mysql.GetBackupOverviewArgs
        ///         {
        ///             Product = "mysql",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetBackupOverviewResult> InvokeAsync(GetBackupOverviewArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetBackupOverviewResult>("tencentcloud:Mysql/getBackupOverview:getBackupOverview", args ?? new GetBackupOverviewArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of mysql backup_overview
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var backupOverview = Output.Create(Tencentcloud.Mysql.GetBackupOverview.InvokeAsync(new Tencentcloud.Mysql.GetBackupOverviewArgs
        ///         {
        ///             Product = "mysql",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetBackupOverviewResult> Invoke(GetBackupOverviewInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetBackupOverviewResult>("tencentcloud:Mysql/getBackupOverview:getBackupOverview", args ?? new GetBackupOverviewInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackupOverviewArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of cloud database product to be queried, currently only supports `mysql`.
        /// </summary>
        [Input("product", required: true)]
        public string Product { get; set; } = null!;

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetBackupOverviewArgs()
        {
        }
    }

    public sealed class GetBackupOverviewInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of cloud database product to be queried, currently only supports `mysql`.
        /// </summary>
        [Input("product", required: true)]
        public Input<string> Product { get; set; } = null!;

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetBackupOverviewInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetBackupOverviewResult
    {
        /// <summary>
        /// Archive backup capacity, including data backup and log backup. Note: This field may return null, indicating that no valid value can be obtained.
        /// </summary>
        public readonly int BackupArchiveVolume;
        /// <summary>
        /// The total number of user backups in the current region (including data backups and log backups).
        /// </summary>
        public readonly int BackupCount;
        /// <summary>
        /// Standard storage backup capacity, including data backup and log backup. Note: This field may return null, indicating that no valid value can be obtained.
        /// </summary>
        public readonly int BackupStandbyVolume;
        /// <summary>
        /// The total backup capacity of the user in the current region.
        /// </summary>
        public readonly int BackupVolume;
        /// <summary>
        /// The billable capacity of the user&amp;amp;#39;s backup in the current region, that is, the part that exceeds the gifted capacity.
        /// </summary>
        public readonly int BillingVolume;
        /// <summary>
        /// The free backup capacity obtained by the user in the current region.
        /// </summary>
        public readonly int FreeVolume;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Product;
        /// <summary>
        /// The total capacity of off-site backup of the user in the current region. Note: This field may return null, indicating that no valid value can be obtained.
        /// </summary>
        public readonly int RemoteBackupVolume;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetBackupOverviewResult(
            int backupArchiveVolume,

            int backupCount,

            int backupStandbyVolume,

            int backupVolume,

            int billingVolume,

            int freeVolume,

            string id,

            string product,

            int remoteBackupVolume,

            string? resultOutputFile)
        {
            BackupArchiveVolume = backupArchiveVolume;
            BackupCount = backupCount;
            BackupStandbyVolume = backupStandbyVolume;
            BackupVolume = backupVolume;
            BillingVolume = billingVolume;
            FreeVolume = freeVolume;
            Id = id;
            Product = product;
            RemoteBackupVolume = remoteBackupVolume;
            ResultOutputFile = resultOutputFile;
        }
    }
}
