// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Mysql
{
    /// <summary>
    /// Provides a resource to create a mysql password_complexity
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var zones = Tencentcloud.Availability.GetZonesByProduct.Invoke(new()
    ///     {
    ///         Product = "cdb",
    ///     });
    /// 
    ///     var vpc = new Tencentcloud.Vpc.Instance("vpc", new()
    ///     {
    ///         CidrBlock = "10.0.0.0/16",
    ///     });
    /// 
    ///     var subnet = new Tencentcloud.Subnet.Instance("subnet", new()
    ///     {
    ///         AvailabilityZone = zones.Apply(getZonesByProductResult =&gt; getZonesByProductResult.Zones[0]?.Name),
    ///         VpcId = vpc.Id,
    ///         CidrBlock = "10.0.0.0/16",
    ///         IsMulticast = false,
    ///     });
    /// 
    ///     var securityGroup = new Tencentcloud.Security.Group("securityGroup", new()
    ///     {
    ///         Description = "mysql test",
    ///     });
    /// 
    ///     var exampleInstance = new Tencentcloud.Mysql.Instance("exampleInstance", new()
    ///     {
    ///         InternetService = 1,
    ///         EngineVersion = "5.7",
    ///         ChargeType = "POSTPAID",
    ///         RootPassword = "PassWord123",
    ///         SlaveDeployMode = 0,
    ///         AvailabilityZone = zones.Apply(getZonesByProductResult =&gt; getZonesByProductResult.Zones[0]?.Name),
    ///         SlaveSyncMode = 1,
    ///         InstanceName = "tf-example-mysql",
    ///         MemSize = 4000,
    ///         VolumeSize = 200,
    ///         VpcId = vpc.Id,
    ///         SubnetId = subnet.Id,
    ///         IntranetPort = 3306,
    ///         SecurityGroups = new[]
    ///         {
    ///             securityGroup.Id,
    ///         },
    ///         Tags = 
    ///         {
    ///             { "name", "test" },
    ///         },
    ///         Parameters = 
    ///         {
    ///             { "character_set_server", "utf8" },
    ///             { "max_connections", "1000" },
    ///         },
    ///     });
    /// 
    ///     var examplePasswordComplexity = new Tencentcloud.Mysql.PasswordComplexity("examplePasswordComplexity", new()
    ///     {
    ///         InstanceId = exampleInstance.Id,
    ///         ParamLists = new[]
    ///         {
    ///             new Tencentcloud.Mysql.Inputs.PasswordComplexityParamListArgs
    ///             {
    ///                 Name = "validate_password_length",
    ///                 CurrentValue = "8",
    ///             },
    ///             new Tencentcloud.Mysql.Inputs.PasswordComplexityParamListArgs
    ///             {
    ///                 Name = "validate_password_mixed_case_count",
    ///                 CurrentValue = "2",
    ///             },
    ///             new Tencentcloud.Mysql.Inputs.PasswordComplexityParamListArgs
    ///             {
    ///                 Name = "validate_password_number_count",
    ///                 CurrentValue = "2",
    ///             },
    ///             new Tencentcloud.Mysql.Inputs.PasswordComplexityParamListArgs
    ///             {
    ///                 Name = "validate_password_special_char_count",
    ///                 CurrentValue = "2",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Mysql/passwordComplexity:PasswordComplexity")]
    public partial class PasswordComplexity : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Instance ID.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// List of parameters to be modified. Every element is a combination of `Name` (parameter name) and `CurrentValue` (new value). Valid values for `Name` of version 8.0: `validate_password.policy`, `validate_password.lengt`, `validate_password.mixed_case_coun`, `validate_password.number_coun`, `validate_password.special_char_count`. Valid values for `Name` of version 5.6 and 5.7: `validate_password_polic`, `validate_password_lengt` `validate_password_mixed_case_coun`, `validate_password_number_coun`, `validate_password_special_char_coun`.
        /// </summary>
        [Output("paramLists")]
        public Output<ImmutableArray<Outputs.PasswordComplexityParamList>> ParamLists { get; private set; } = null!;


        /// <summary>
        /// Create a PasswordComplexity resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PasswordComplexity(string name, PasswordComplexityArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Mysql/passwordComplexity:PasswordComplexity", name, args ?? new PasswordComplexityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PasswordComplexity(string name, Input<string> id, PasswordComplexityState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Mysql/passwordComplexity:PasswordComplexity", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PasswordComplexity resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PasswordComplexity Get(string name, Input<string> id, PasswordComplexityState? state = null, CustomResourceOptions? options = null)
        {
            return new PasswordComplexity(name, id, state, options);
        }
    }

    public sealed class PasswordComplexityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("paramLists")]
        private InputList<Inputs.PasswordComplexityParamListArgs>? _paramLists;

        /// <summary>
        /// List of parameters to be modified. Every element is a combination of `Name` (parameter name) and `CurrentValue` (new value). Valid values for `Name` of version 8.0: `validate_password.policy`, `validate_password.lengt`, `validate_password.mixed_case_coun`, `validate_password.number_coun`, `validate_password.special_char_count`. Valid values for `Name` of version 5.6 and 5.7: `validate_password_polic`, `validate_password_lengt` `validate_password_mixed_case_coun`, `validate_password_number_coun`, `validate_password_special_char_coun`.
        /// </summary>
        public InputList<Inputs.PasswordComplexityParamListArgs> ParamLists
        {
            get => _paramLists ?? (_paramLists = new InputList<Inputs.PasswordComplexityParamListArgs>());
            set => _paramLists = value;
        }

        public PasswordComplexityArgs()
        {
        }
        public static new PasswordComplexityArgs Empty => new PasswordComplexityArgs();
    }

    public sealed class PasswordComplexityState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("paramLists")]
        private InputList<Inputs.PasswordComplexityParamListGetArgs>? _paramLists;

        /// <summary>
        /// List of parameters to be modified. Every element is a combination of `Name` (parameter name) and `CurrentValue` (new value). Valid values for `Name` of version 8.0: `validate_password.policy`, `validate_password.lengt`, `validate_password.mixed_case_coun`, `validate_password.number_coun`, `validate_password.special_char_count`. Valid values for `Name` of version 5.6 and 5.7: `validate_password_polic`, `validate_password_lengt` `validate_password_mixed_case_coun`, `validate_password_number_coun`, `validate_password_special_char_coun`.
        /// </summary>
        public InputList<Inputs.PasswordComplexityParamListGetArgs> ParamLists
        {
            get => _paramLists ?? (_paramLists = new InputList<Inputs.PasswordComplexityParamListGetArgs>());
            set => _paramLists = value;
        }

        public PasswordComplexityState()
        {
        }
        public static new PasswordComplexityState Empty => new PasswordComplexityState();
    }
}
