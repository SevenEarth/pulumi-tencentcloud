// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Css
{
    /// <summary>
    /// Provides a resource to create a css start_stream_monitor
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var startStreamMonitor = new Tencentcloud.Css.StartStreamMonitor("startStreamMonitor", new Tencentcloud.Css.StartStreamMonitorArgs
    ///         {
    ///             AudibleInputIndexLists = 
    ///             {
    ///                 1,
    ///             },
    ///             MonitorId = "3d5738dd-1ca2-4601-a6e9-004c5ec75c0b",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// css start_stream_monitor can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import tencentcloud:Css/startStreamMonitor:StartStreamMonitor start_stream_monitor start_stream_monitor_id
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Css/startStreamMonitor:StartStreamMonitor")]
    public partial class StartStreamMonitor : Pulumi.CustomResource
    {
        /// <summary>
        /// The input index for monitoring the screen audio, supports multiple input audio sources.The valid range for InputIndex is that it must already exist.If left blank, there will be no audio output by default.
        /// </summary>
        [Output("audibleInputIndexLists")]
        public Output<ImmutableArray<int>> AudibleInputIndexLists { get; private set; } = null!;

        /// <summary>
        /// Monitor id.
        /// </summary>
        [Output("monitorId")]
        public Output<string> MonitorId { get; private set; } = null!;


        /// <summary>
        /// Create a StartStreamMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StartStreamMonitor(string name, StartStreamMonitorArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Css/startStreamMonitor:StartStreamMonitor", name, args ?? new StartStreamMonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StartStreamMonitor(string name, Input<string> id, StartStreamMonitorState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Css/startStreamMonitor:StartStreamMonitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StartStreamMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StartStreamMonitor Get(string name, Input<string> id, StartStreamMonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new StartStreamMonitor(name, id, state, options);
        }
    }

    public sealed class StartStreamMonitorArgs : Pulumi.ResourceArgs
    {
        [Input("audibleInputIndexLists")]
        private InputList<int>? _audibleInputIndexLists;

        /// <summary>
        /// The input index for monitoring the screen audio, supports multiple input audio sources.The valid range for InputIndex is that it must already exist.If left blank, there will be no audio output by default.
        /// </summary>
        public InputList<int> AudibleInputIndexLists
        {
            get => _audibleInputIndexLists ?? (_audibleInputIndexLists = new InputList<int>());
            set => _audibleInputIndexLists = value;
        }

        /// <summary>
        /// Monitor id.
        /// </summary>
        [Input("monitorId", required: true)]
        public Input<string> MonitorId { get; set; } = null!;

        public StartStreamMonitorArgs()
        {
        }
    }

    public sealed class StartStreamMonitorState : Pulumi.ResourceArgs
    {
        [Input("audibleInputIndexLists")]
        private InputList<int>? _audibleInputIndexLists;

        /// <summary>
        /// The input index for monitoring the screen audio, supports multiple input audio sources.The valid range for InputIndex is that it must already exist.If left blank, there will be no audio output by default.
        /// </summary>
        public InputList<int> AudibleInputIndexLists
        {
            get => _audibleInputIndexLists ?? (_audibleInputIndexLists = new InputList<int>());
            set => _audibleInputIndexLists = value;
        }

        /// <summary>
        /// Monitor id.
        /// </summary>
        [Input("monitorId")]
        public Input<string>? MonitorId { get; set; }

        public StartStreamMonitorState()
        {
        }
    }
}
