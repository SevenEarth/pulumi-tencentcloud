// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Wedata
{
    public static class GetRuleTemplates
    {
        /// <summary>
        /// Use this data source to query detailed information of wedata rule templates
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ruleTemplates = Tencentcloud.Wedata.GetRuleTemplates.Invoke(new()
        ///     {
        ///         ProjectId = "1840731346428280832",
        ///         SourceEngineTypes = new[]
        ///         {
        ///             2,
        ///             4,
        ///             16,
        ///         },
        ///         SourceObjectType = 2,
        ///         Type = 2,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetRuleTemplatesResult> InvokeAsync(GetRuleTemplatesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRuleTemplatesResult>("tencentcloud:Wedata/getRuleTemplates:getRuleTemplates", args ?? new GetRuleTemplatesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of wedata rule templates
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ruleTemplates = Tencentcloud.Wedata.GetRuleTemplates.Invoke(new()
        ///     {
        ///         ProjectId = "1840731346428280832",
        ///         SourceEngineTypes = new[]
        ///         {
        ///             2,
        ///             4,
        ///             16,
        ///         },
        ///         SourceObjectType = 2,
        ///         Type = 2,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetRuleTemplatesResult> Invoke(GetRuleTemplatesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRuleTemplatesResult>("tencentcloud:Wedata/getRuleTemplates:getRuleTemplates", args ?? new GetRuleTemplatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRuleTemplatesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Project ID.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        [Input("sourceEngineTypes")]
        private List<int>? _sourceEngineTypes;

        /// <summary>
        /// Applicable type of source data.
        /// </summary>
        public List<int> SourceEngineTypes
        {
            get => _sourceEngineTypes ?? (_sourceEngineTypes = new List<int>());
            set => _sourceEngineTypes = value;
        }

        /// <summary>
        /// Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
        /// </summary>
        [Input("sourceObjectType")]
        public int? SourceObjectType { get; set; }

        /// <summary>
        /// Template type. `1` means System template, `2` means Custom template.
        /// </summary>
        [Input("type")]
        public int? Type { get; set; }

        public GetRuleTemplatesArgs()
        {
        }
        public static new GetRuleTemplatesArgs Empty => new GetRuleTemplatesArgs();
    }

    public sealed class GetRuleTemplatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Project ID.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        [Input("sourceEngineTypes")]
        private InputList<int>? _sourceEngineTypes;

        /// <summary>
        /// Applicable type of source data.
        /// </summary>
        public InputList<int> SourceEngineTypes
        {
            get => _sourceEngineTypes ?? (_sourceEngineTypes = new InputList<int>());
            set => _sourceEngineTypes = value;
        }

        /// <summary>
        /// Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
        /// </summary>
        [Input("sourceObjectType")]
        public Input<int>? SourceObjectType { get; set; }

        /// <summary>
        /// Template type. `1` means System template, `2` means Custom template.
        /// </summary>
        [Input("type")]
        public Input<int>? Type { get; set; }

        public GetRuleTemplatesInvokeArgs()
        {
        }
        public static new GetRuleTemplatesInvokeArgs Empty => new GetRuleTemplatesInvokeArgs();
    }


    [OutputType]
    public sealed class GetRuleTemplatesResult
    {
        /// <summary>
        /// rule template list.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRuleTemplatesDataResult> Datas;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ProjectId;
        public readonly string? ResultOutputFile;
        /// <summary>
        /// Applicable type of source data.
        /// </summary>
        public readonly ImmutableArray<int> SourceEngineTypes;
        /// <summary>
        /// Source object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
        /// </summary>
        public readonly int? SourceObjectType;
        /// <summary>
        /// Template type. `1` means System template, `2` means Custom template.
        /// </summary>
        public readonly int? Type;

        [OutputConstructor]
        private GetRuleTemplatesResult(
            ImmutableArray<Outputs.GetRuleTemplatesDataResult> datas,

            string id,

            string? projectId,

            string? resultOutputFile,

            ImmutableArray<int> sourceEngineTypes,

            int? sourceObjectType,

            int? type)
        {
            Datas = datas;
            Id = id;
            ProjectId = projectId;
            ResultOutputFile = resultOutputFile;
            SourceEngineTypes = sourceEngineTypes;
            SourceObjectType = sourceObjectType;
            Type = type;
        }
    }
}
