// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Wedata
{
    /// <summary>
    /// Provides a resource to create a wedata integration_offline_task
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Tencentcloud.Wedata.IntegrationOfflineTask("example", new()
    ///     {
    ///         CycleStep = 1,
    ///         DelayTime = 0,
    ///         EndTime = "2099-12-31 00:00:00",
    ///         Notes = "terraform example demo.",
    ///         ProjectId = "1612982498218618880",
    ///         StartTime = "2023-12-31 00:00:00",
    ///         TaskAction = "2",
    ///         TaskInfo = new Tencentcloud.Wedata.Inputs.IntegrationOfflineTaskTaskInfoArgs
    ///         {
    ///             Configs = new[]
    ///             {
    ///                 new Tencentcloud.Wedata.Inputs.IntegrationOfflineTaskTaskInfoConfigArgs
    ///                 {
    ///                     Name = "Args",
    ///                     Value = "args",
    ///                 },
    ///                 new Tencentcloud.Wedata.Inputs.IntegrationOfflineTaskTaskInfoConfigArgs
    ///                 {
    ///                     Name = "dirtyDataThreshold",
    ///                     Value = "0",
    ///                 },
    ///                 new Tencentcloud.Wedata.Inputs.IntegrationOfflineTaskTaskInfoConfigArgs
    ///                 {
    ///                     Name = "concurrency",
    ///                     Value = "1",
    ///                 },
    ///                 new Tencentcloud.Wedata.Inputs.IntegrationOfflineTaskTaskInfoConfigArgs
    ///                 {
    ///                     Name = "syncRateLimitUnit",
    ///                     Value = "0",
    ///                 },
    ///             },
    ///             ExecutorId = "20230313175748567418",
    ///             ExtConfigs = new[]
    ///             {
    ///                 new Tencentcloud.Wedata.Inputs.IntegrationOfflineTaskTaskInfoExtConfigArgs
    ///                 {
    ///                     Name = "TaskAlarmRegularList",
    ///                     Value = "73",
    ///                 },
    ///             },
    ///             Incharge = "demo",
    ///             OfflineTaskAddEntity = new Tencentcloud.Wedata.Inputs.IntegrationOfflineTaskTaskInfoOfflineTaskAddEntityArgs
    ///             {
    ///                 CrontabExpression = "0 0 1 * * ?",
    ///                 CycleType = 3,
    ///                 Retriable = 1,
    ///                 RetryWait = 5,
    ///                 SelfDepend = 1,
    ///                 TryLimit = 5,
    ///             },
    ///         },
    ///         TaskMode = "1",
    ///         TaskName = "tf_example",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// wedata integration_offline_task can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import tencentcloud:Wedata/integrationOfflineTask:IntegrationOfflineTask example 1612982498218618880#20231102200955095
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Wedata/integrationOfflineTask:IntegrationOfflineTask")]
    public partial class IntegrationOfflineTask : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Interval time of scheduling, the minimum value: 1.
        /// </summary>
        [Output("cycleStep")]
        public Output<int> CycleStep { get; private set; } = null!;

        /// <summary>
        /// Execution time, unit is minutes, only available for day/week/month/year scheduling. For example, daily scheduling is executed once every day at 02:00, and the delayTime is 120 minutes.
        /// </summary>
        [Output("delayTime")]
        public Output<int> DelayTime { get; private set; } = null!;

        /// <summary>
        /// Effective end time, the format is yyyy-MM-dd HH:mm:ss.
        /// </summary>
        [Output("endTime")]
        public Output<string> EndTime { get; private set; } = null!;

        /// <summary>
        /// Description information.
        /// </summary>
        [Output("notes")]
        public Output<string> Notes { get; private set; } = null!;

        /// <summary>
        /// Project ID.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Effective start time, the format is yyyy-MM-dd HH:mm:ss.
        /// </summary>
        [Output("startTime")]
        public Output<string> StartTime { get; private set; } = null!;

        /// <summary>
        /// Scheduling configuration: flexible period configuration, only available for hourly/weekly/monthly/yearly scheduling. If the hourly task is specified to run at 0:00, 3:00 and 4:00 every day, it is 0,3,4.
        /// </summary>
        [Output("taskAction")]
        public Output<string> TaskAction { get; private set; } = null!;

        /// <summary>
        /// Task ID.
        /// </summary>
        [Output("taskId")]
        public Output<string> TaskId { get; private set; } = null!;

        /// <summary>
        /// Task Information.
        /// </summary>
        [Output("taskInfo")]
        public Output<Outputs.IntegrationOfflineTaskTaskInfo> TaskInfo { get; private set; } = null!;

        /// <summary>
        /// Task display mode, 0: canvas mode, 1: form mode.
        /// </summary>
        [Output("taskMode")]
        public Output<string> TaskMode { get; private set; } = null!;

        /// <summary>
        /// Task name.
        /// </summary>
        [Output("taskName")]
        public Output<string> TaskName { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationOfflineTask resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationOfflineTask(string name, IntegrationOfflineTaskArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Wedata/integrationOfflineTask:IntegrationOfflineTask", name, args ?? new IntegrationOfflineTaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationOfflineTask(string name, Input<string> id, IntegrationOfflineTaskState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Wedata/integrationOfflineTask:IntegrationOfflineTask", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationOfflineTask resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationOfflineTask Get(string name, Input<string> id, IntegrationOfflineTaskState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationOfflineTask(name, id, state, options);
        }
    }

    public sealed class IntegrationOfflineTaskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Interval time of scheduling, the minimum value: 1.
        /// </summary>
        [Input("cycleStep", required: true)]
        public Input<int> CycleStep { get; set; } = null!;

        /// <summary>
        /// Execution time, unit is minutes, only available for day/week/month/year scheduling. For example, daily scheduling is executed once every day at 02:00, and the delayTime is 120 minutes.
        /// </summary>
        [Input("delayTime", required: true)]
        public Input<int> DelayTime { get; set; } = null!;

        /// <summary>
        /// Effective end time, the format is yyyy-MM-dd HH:mm:ss.
        /// </summary>
        [Input("endTime", required: true)]
        public Input<string> EndTime { get; set; } = null!;

        /// <summary>
        /// Description information.
        /// </summary>
        [Input("notes", required: true)]
        public Input<string> Notes { get; set; } = null!;

        /// <summary>
        /// Project ID.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Effective start time, the format is yyyy-MM-dd HH:mm:ss.
        /// </summary>
        [Input("startTime", required: true)]
        public Input<string> StartTime { get; set; } = null!;

        /// <summary>
        /// Scheduling configuration: flexible period configuration, only available for hourly/weekly/monthly/yearly scheduling. If the hourly task is specified to run at 0:00, 3:00 and 4:00 every day, it is 0,3,4.
        /// </summary>
        [Input("taskAction", required: true)]
        public Input<string> TaskAction { get; set; } = null!;

        /// <summary>
        /// Task Information.
        /// </summary>
        [Input("taskInfo", required: true)]
        public Input<Inputs.IntegrationOfflineTaskTaskInfoArgs> TaskInfo { get; set; } = null!;

        /// <summary>
        /// Task display mode, 0: canvas mode, 1: form mode.
        /// </summary>
        [Input("taskMode", required: true)]
        public Input<string> TaskMode { get; set; } = null!;

        /// <summary>
        /// Task name.
        /// </summary>
        [Input("taskName", required: true)]
        public Input<string> TaskName { get; set; } = null!;

        public IntegrationOfflineTaskArgs()
        {
        }
        public static new IntegrationOfflineTaskArgs Empty => new IntegrationOfflineTaskArgs();
    }

    public sealed class IntegrationOfflineTaskState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Interval time of scheduling, the minimum value: 1.
        /// </summary>
        [Input("cycleStep")]
        public Input<int>? CycleStep { get; set; }

        /// <summary>
        /// Execution time, unit is minutes, only available for day/week/month/year scheduling. For example, daily scheduling is executed once every day at 02:00, and the delayTime is 120 minutes.
        /// </summary>
        [Input("delayTime")]
        public Input<int>? DelayTime { get; set; }

        /// <summary>
        /// Effective end time, the format is yyyy-MM-dd HH:mm:ss.
        /// </summary>
        [Input("endTime")]
        public Input<string>? EndTime { get; set; }

        /// <summary>
        /// Description information.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// Project ID.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Effective start time, the format is yyyy-MM-dd HH:mm:ss.
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        /// <summary>
        /// Scheduling configuration: flexible period configuration, only available for hourly/weekly/monthly/yearly scheduling. If the hourly task is specified to run at 0:00, 3:00 and 4:00 every day, it is 0,3,4.
        /// </summary>
        [Input("taskAction")]
        public Input<string>? TaskAction { get; set; }

        /// <summary>
        /// Task ID.
        /// </summary>
        [Input("taskId")]
        public Input<string>? TaskId { get; set; }

        /// <summary>
        /// Task Information.
        /// </summary>
        [Input("taskInfo")]
        public Input<Inputs.IntegrationOfflineTaskTaskInfoGetArgs>? TaskInfo { get; set; }

        /// <summary>
        /// Task display mode, 0: canvas mode, 1: form mode.
        /// </summary>
        [Input("taskMode")]
        public Input<string>? TaskMode { get; set; }

        /// <summary>
        /// Task name.
        /// </summary>
        [Input("taskName")]
        public Input<string>? TaskName { get; set; }

        public IntegrationOfflineTaskState()
        {
        }
        public static new IntegrationOfflineTaskState Empty => new IntegrationOfflineTaskState();
    }
}
