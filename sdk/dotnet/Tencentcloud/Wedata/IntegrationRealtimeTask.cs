// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Wedata
{
    /// <summary>
    /// Provides a resource to create a wedata integration_realtime_task
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Tencentcloud.Wedata.IntegrationRealtimeTask("example", new()
    ///     {
    ///         Description = "description.",
    ///         ProjectId = "1612982498218618880",
    ///         SyncType = 1,
    ///         TaskInfo = new Tencentcloud.Wedata.Inputs.IntegrationRealtimeTaskTaskInfoArgs
    ///         {
    ///             Configs = new[]
    ///             {
    ///                 new Tencentcloud.Wedata.Inputs.IntegrationRealtimeTaskTaskInfoConfigArgs
    ///                 {
    ///                     Name = "concurrency",
    ///                     Value = "1",
    ///                 },
    ///                 new Tencentcloud.Wedata.Inputs.IntegrationRealtimeTaskTaskInfoConfigArgs
    ///                 {
    ///                     Name = "TaskManager",
    ///                     Value = "1",
    ///                 },
    ///                 new Tencentcloud.Wedata.Inputs.IntegrationRealtimeTaskTaskInfoConfigArgs
    ///                 {
    ///                     Name = "JobManager",
    ///                     Value = "1",
    ///                 },
    ///                 new Tencentcloud.Wedata.Inputs.IntegrationRealtimeTaskTaskInfoConfigArgs
    ///                 {
    ///                     Name = "TolerateDirtyData",
    ///                     Value = "0",
    ///                 },
    ///                 new Tencentcloud.Wedata.Inputs.IntegrationRealtimeTaskTaskInfoConfigArgs
    ///                 {
    ///                     Name = "CheckpointingInterval",
    ///                     Value = "1",
    ///                 },
    ///                 new Tencentcloud.Wedata.Inputs.IntegrationRealtimeTaskTaskInfoConfigArgs
    ///                 {
    ///                     Name = "CheckpointingIntervalUnit",
    ///                     Value = "min",
    ///                 },
    ///                 new Tencentcloud.Wedata.Inputs.IntegrationRealtimeTaskTaskInfoConfigArgs
    ///                 {
    ///                     Name = "RestartStrategyFixedDelayAttempts",
    ///                     Value = "-1",
    ///                 },
    ///                 new Tencentcloud.Wedata.Inputs.IntegrationRealtimeTaskTaskInfoConfigArgs
    ///                 {
    ///                     Name = "ResourceAllocationType",
    ///                     Value = "0",
    ///                 },
    ///                 new Tencentcloud.Wedata.Inputs.IntegrationRealtimeTaskTaskInfoConfigArgs
    ///                 {
    ///                     Name = "TaskAlarmRegularList",
    ///                     Value = "35",
    ///                 },
    ///             },
    ///             ExecutorId = "20230313175748567418",
    ///             Incharge = "100028439226",
    ///         },
    ///         TaskMode = "1",
    ///         TaskName = "tf_example",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// wedata integration_realtime_task can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import tencentcloud:Wedata/integrationRealtimeTask:IntegrationRealtimeTask example 1776563389209296896#h9d39630a-ae45-4460-90b2-0b093cbfef5d
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Wedata/integrationRealtimeTask:IntegrationRealtimeTask")]
    public partial class IntegrationRealtimeTask : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description information.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Project ID.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
        /// </summary>
        [Output("syncType")]
        public Output<int> SyncType { get; private set; } = null!;

        /// <summary>
        /// The task id to which the node belongs.
        /// </summary>
        [Output("taskId")]
        public Output<string> TaskId { get; private set; } = null!;

        /// <summary>
        /// Task Information.
        /// </summary>
        [Output("taskInfo")]
        public Output<Outputs.IntegrationRealtimeTaskTaskInfo> TaskInfo { get; private set; } = null!;

        /// <summary>
        /// Task display mode, 0: canvas mode, 1: form mode.
        /// </summary>
        [Output("taskMode")]
        public Output<string> TaskMode { get; private set; } = null!;

        /// <summary>
        /// Task name.
        /// </summary>
        [Output("taskName")]
        public Output<string> TaskName { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationRealtimeTask resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationRealtimeTask(string name, IntegrationRealtimeTaskArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Wedata/integrationRealtimeTask:IntegrationRealtimeTask", name, args ?? new IntegrationRealtimeTaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationRealtimeTask(string name, Input<string> id, IntegrationRealtimeTaskState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Wedata/integrationRealtimeTask:IntegrationRealtimeTask", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationRealtimeTask resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationRealtimeTask Get(string name, Input<string> id, IntegrationRealtimeTaskState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationRealtimeTask(name, id, state, options);
        }
    }

    public sealed class IntegrationRealtimeTaskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Project ID.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
        /// </summary>
        [Input("syncType", required: true)]
        public Input<int> SyncType { get; set; } = null!;

        /// <summary>
        /// Task Information.
        /// </summary>
        [Input("taskInfo", required: true)]
        public Input<Inputs.IntegrationRealtimeTaskTaskInfoArgs> TaskInfo { get; set; } = null!;

        /// <summary>
        /// Task display mode, 0: canvas mode, 1: form mode.
        /// </summary>
        [Input("taskMode", required: true)]
        public Input<string> TaskMode { get; set; } = null!;

        /// <summary>
        /// Task name.
        /// </summary>
        [Input("taskName", required: true)]
        public Input<string> TaskName { get; set; } = null!;

        public IntegrationRealtimeTaskArgs()
        {
        }
        public static new IntegrationRealtimeTaskArgs Empty => new IntegrationRealtimeTaskArgs();
    }

    public sealed class IntegrationRealtimeTaskState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Project ID.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
        /// </summary>
        [Input("syncType")]
        public Input<int>? SyncType { get; set; }

        /// <summary>
        /// The task id to which the node belongs.
        /// </summary>
        [Input("taskId")]
        public Input<string>? TaskId { get; set; }

        /// <summary>
        /// Task Information.
        /// </summary>
        [Input("taskInfo")]
        public Input<Inputs.IntegrationRealtimeTaskTaskInfoGetArgs>? TaskInfo { get; set; }

        /// <summary>
        /// Task display mode, 0: canvas mode, 1: form mode.
        /// </summary>
        [Input("taskMode")]
        public Input<string>? TaskMode { get; set; }

        /// <summary>
        /// Task name.
        /// </summary>
        [Input("taskName")]
        public Input<string>? TaskName { get; set; }

        public IntegrationRealtimeTaskState()
        {
        }
        public static new IntegrationRealtimeTaskState Empty => new IntegrationRealtimeTaskState();
    }
}
