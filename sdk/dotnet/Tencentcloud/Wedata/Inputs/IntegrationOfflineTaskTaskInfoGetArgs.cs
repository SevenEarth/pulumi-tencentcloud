// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Wedata.Inputs
{

    public sealed class IntegrationOfflineTaskTaskInfoGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// User App Id.
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        [Input("configs")]
        private InputList<Inputs.IntegrationOfflineTaskTaskInfoConfigGetArgs>? _configs;

        /// <summary>
        /// Task configuration.
        /// </summary>
        public InputList<Inputs.IntegrationOfflineTaskTaskInfoConfigGetArgs> Configs
        {
            get => _configs ?? (_configs = new InputList<Inputs.IntegrationOfflineTaskTaskInfoConfigGetArgs>());
            set => _configs = value;
        }

        /// <summary>
        /// Create time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Creator User ID.
        /// </summary>
        [Input("creatorUin")]
        public Input<string>? CreatorUin { get; set; }

        [Input("dataProxyUrls")]
        private InputList<string>? _dataProxyUrls;

        /// <summary>
        /// Data proxy url.
        /// </summary>
        public InputList<string> DataProxyUrls
        {
            get => _dataProxyUrls ?? (_dataProxyUrls = new InputList<string>());
            set => _dataProxyUrls = value;
        }

        [Input("executeContexts")]
        private InputList<Inputs.IntegrationOfflineTaskTaskInfoExecuteContextGetArgs>? _executeContexts;

        /// <summary>
        /// Execute context.
        /// </summary>
        public InputList<Inputs.IntegrationOfflineTaskTaskInfoExecuteContextGetArgs> ExecuteContexts
        {
            get => _executeContexts ?? (_executeContexts = new InputList<Inputs.IntegrationOfflineTaskTaskInfoExecuteContextGetArgs>());
            set => _executeContexts = value;
        }

        /// <summary>
        /// Executor group name.
        /// </summary>
        [Input("executorGroupName")]
        public Input<string>? ExecutorGroupName { get; set; }

        /// <summary>
        /// Executor resource ID.
        /// </summary>
        [Input("executorId")]
        public Input<string>? ExecutorId { get; set; }

        [Input("extConfigs")]
        private InputList<Inputs.IntegrationOfflineTaskTaskInfoExtConfigGetArgs>? _extConfigs;

        /// <summary>
        /// Node extension configuration information.
        /// </summary>
        public InputList<Inputs.IntegrationOfflineTaskTaskInfoExtConfigGetArgs> ExtConfigs
        {
            get => _extConfigs ?? (_extConfigs = new InputList<Inputs.IntegrationOfflineTaskTaskInfoExtConfigGetArgs>());
            set => _extConfigs = value;
        }

        /// <summary>
        /// Whether the task been submitted.
        /// </summary>
        [Input("hasVersion")]
        public Input<bool>? HasVersion { get; set; }

        /// <summary>
        /// InLong manager url.
        /// </summary>
        [Input("inLongManagerUrl")]
        public Input<string>? InLongManagerUrl { get; set; }

        /// <summary>
        /// InLong manager version.
        /// </summary>
        [Input("inLongManagerVersion")]
        public Input<string>? InLongManagerVersion { get; set; }

        /// <summary>
        /// InLong stream id.
        /// </summary>
        [Input("inLongStreamId")]
        public Input<string>? InLongStreamId { get; set; }

        /// <summary>
        /// Incharge user.
        /// </summary>
        [Input("incharge")]
        public Input<string>? Incharge { get; set; }

        /// <summary>
        /// Input datasource type.
        /// </summary>
        [Input("inputDatasourceType")]
        public Input<string>? InputDatasourceType { get; set; }

        /// <summary>
        /// Instance version.
        /// </summary>
        [Input("instanceVersion")]
        public Input<int>? InstanceVersion { get; set; }

        /// <summary>
        /// The last time the task was run.
        /// </summary>
        [Input("lastRunTime")]
        public Input<string>? LastRunTime { get; set; }

        /// <summary>
        /// Whether the task been locked.
        /// </summary>
        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        /// <summary>
        /// User locked task.
        /// </summary>
        [Input("locker")]
        public Input<string>? Locker { get; set; }

        [Input("mappings")]
        private InputList<Inputs.IntegrationOfflineTaskTaskInfoMappingGetArgs>? _mappings;

        /// <summary>
        /// Node mapping.
        /// </summary>
        public InputList<Inputs.IntegrationOfflineTaskTaskInfoMappingGetArgs> Mappings
        {
            get => _mappings ?? (_mappings = new InputList<Inputs.IntegrationOfflineTaskTaskInfoMappingGetArgs>());
            set => _mappings = value;
        }

        /// <summary>
        /// Number of reads.
        /// </summary>
        [Input("numRecordsIn")]
        public Input<int>? NumRecordsIn { get; set; }

        /// <summary>
        /// Number of writes.
        /// </summary>
        [Input("numRecordsOut")]
        public Input<int>? NumRecordsOut { get; set; }

        /// <summary>
        /// Times of restarts.
        /// </summary>
        [Input("numRestarts")]
        public Input<int>? NumRestarts { get; set; }

        /// <summary>
        /// Offline task scheduling configuration.
        /// </summary>
        [Input("offlineTaskAddEntity")]
        public Input<Inputs.IntegrationOfflineTaskTaskInfoOfflineTaskAddEntityGetArgs>? OfflineTaskAddEntity { get; set; }

        /// <summary>
        /// Operator User ID.
        /// </summary>
        [Input("operatorUin")]
        public Input<string>? OperatorUin { get; set; }

        /// <summary>
        /// Output datasource type.
        /// </summary>
        [Input("outputDatasourceType")]
        public Input<string>? OutputDatasourceType { get; set; }

        /// <summary>
        /// Owner User ID.
        /// </summary>
        [Input("ownerUin")]
        public Input<string>? OwnerUin { get; set; }

        /// <summary>
        /// Reading stage, 0: full amount, 1: partial full amount, 2: all incremental.
        /// </summary>
        [Input("readPhase")]
        public Input<int>? ReadPhase { get; set; }

        /// <summary>
        /// Read latency.
        /// </summary>
        [Input("readerDelay")]
        public Input<double>? ReaderDelay { get; set; }

        /// <summary>
        /// The amount of resources consumed by real-time task.
        /// </summary>
        [Input("runningCu")]
        public Input<double>? RunningCu { get; set; }

        /// <summary>
        /// Task scheduling id (job id such as oceanus or us).
        /// </summary>
        [Input("scheduleTaskId")]
        public Input<string>? ScheduleTaskId { get; set; }

        /// <summary>
        /// Task status 1. Not started | Task initialization, 2. Task starting, 3. Running, 4. Paused, 5. Task stopping, 6. Stopped, 7. Execution failed, 8. deleted, 9. Locked, 404. unknown status.
        /// </summary>
        [Input("status")]
        public Input<int>? Status { get; set; }

        /// <summary>
        /// The time the task was stopped.
        /// </summary>
        [Input("stopTime")]
        public Input<string>? StopTime { get; set; }

        /// <summary>
        /// Whether the task version has been submitted for operation and maintenance.
        /// </summary>
        [Input("submit")]
        public Input<bool>? Submit { get; set; }

        /// <summary>
        /// Resource tiering status, 0: in progress, 1: successful, 2: failed.
        /// </summary>
        [Input("switchResource")]
        public Input<int>? SwitchResource { get; set; }

        /// <summary>
        /// Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
        /// </summary>
        [Input("syncType")]
        public Input<int>? SyncType { get; set; }

        [Input("taskAlarmRegularLists")]
        private InputList<string>? _taskAlarmRegularLists;

        /// <summary>
        /// Task alarm regular.
        /// </summary>
        public InputList<string> TaskAlarmRegularLists
        {
            get => _taskAlarmRegularLists ?? (_taskAlarmRegularLists = new InputList<string>());
            set => _taskAlarmRegularLists = value;
        }

        /// <summary>
        /// Inlong Task Group ID.
        /// </summary>
        [Input("taskGroupId")]
        public Input<string>? TaskGroupId { get; set; }

        /// <summary>
        /// Task display mode, 0: canvas mode, 1: form mode.
        /// </summary>
        [Input("taskMode")]
        public Input<string>? TaskMode { get; set; }

        /// <summary>
        /// Update time.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// The workflow id to which the task belongs.
        /// </summary>
        [Input("workflowId")]
        public Input<string>? WorkflowId { get; set; }

        public IntegrationOfflineTaskTaskInfoGetArgs()
        {
        }
    }
}
