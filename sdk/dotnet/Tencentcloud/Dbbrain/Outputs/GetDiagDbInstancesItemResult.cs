// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Dbbrain.Outputs
{

    [OutputType]
    public sealed class GetDiagDbInstancesItemResult
    {
        /// <summary>
        /// Instance audit log enable status. `ALL_AUDIT`: full audit is enabled; `RULE_AUDIT`: rule audit is enabled; `UNBOUND`: audit is not enabled.
        /// </summary>
        public readonly string AuditPolicyStatus;
        /// <summary>
        /// Instance audit log running status. `normal`: running; `paused`: arrears suspended.
        /// </summary>
        public readonly string AuditRunningStatus;
        /// <summary>
        /// number of cores.
        /// </summary>
        public readonly int Cpu;
        /// <summary>
        /// create time.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// resource expiration time.
        /// </summary>
        public readonly string DeadlineTime;
        /// <summary>
        /// cdb type.
        /// </summary>
        public readonly string DeployMode;
        /// <summary>
        /// database version.
        /// </summary>
        public readonly string EngineVersion;
        /// <summary>
        /// the number of abnormal events.
        /// </summary>
        public readonly int EventCount;
        /// <summary>
        /// group ID.
        /// </summary>
        public readonly string GroupId;
        /// <summary>
        /// group name.
        /// </summary>
        public readonly string GroupName;
        /// <summary>
        /// health score.
        /// </summary>
        public readonly int HealthScore;
        /// <summary>
        /// cdb instance initialization flag: `0`: not initialized; `1`: initialized.
        /// </summary>
        public readonly int InitFlag;
        /// <summary>
        /// status of instance inspection/overview.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDiagDbInstancesItemInstanceConfResult> InstanceConfs;
        /// <summary>
        /// instance id.
        /// </summary>
        public readonly string InstanceId;
        /// <summary>
        /// instance name.
        /// </summary>
        public readonly string InstanceName;
        /// <summary>
        /// instance type. `1`: MASTER; `2`: DR, `3`: RO, `4`: SDR.
        /// </summary>
        public readonly int InstanceType;
        /// <summary>
        /// Intranet VIPNote: This field may return null, indicating that no valid value can be obtained.
        /// </summary>
        public readonly string InternalVip;
        /// <summary>
        /// Intranet portNote: This field may return null, indicating that no valid value can be obtained.
        /// </summary>
        public readonly int InternalVport;
        /// <summary>
        /// whether it is an instance supported by DBbrain, always pass `true`.
        /// </summary>
        public readonly bool IsSupported;
        /// <summary>
        /// memory, in MB.
        /// </summary>
        public readonly int Memory;
        /// <summary>
        /// service product type, supported values include: `mysql` - cloud database MySQL, `cynosdb` - cloud database TDSQL-C for MySQL, the default is `mysql`.
        /// </summary>
        public readonly string Product;
        /// <summary>
        /// region.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// enabled status of the instance security audit log. `ON`: security audit is enabled; `OFF`: security audit is not enabled.
        /// </summary>
        public readonly string SecAuditStatus;
        /// <summary>
        /// access source.
        /// </summary>
        public readonly string Source;
        /// <summary>
        /// Instance status: `0`: Shipping; `1`: Running normally; `4`: Destroying; `5`: Isolating.
        /// </summary>
        public readonly int Status;
        /// <summary>
        /// task status.
        /// </summary>
        public readonly int TaskStatus;
        /// <summary>
        /// subnet uniform ID.
        /// </summary>
        public readonly string UniqSubnetId;
        /// <summary>
        /// the unified ID of the private network.
        /// </summary>
        public readonly string UniqVpcId;
        /// <summary>
        /// intranet address.
        /// </summary>
        public readonly string Vip;
        /// <summary>
        /// hard disk storage, in GB.
        /// </summary>
        public readonly int Volume;
        /// <summary>
        /// intranet port.
        /// </summary>
        public readonly int Vport;

        [OutputConstructor]
        private GetDiagDbInstancesItemResult(
            string auditPolicyStatus,

            string auditRunningStatus,

            int cpu,

            string createTime,

            string deadlineTime,

            string deployMode,

            string engineVersion,

            int eventCount,

            string groupId,

            string groupName,

            int healthScore,

            int initFlag,

            ImmutableArray<Outputs.GetDiagDbInstancesItemInstanceConfResult> instanceConfs,

            string instanceId,

            string instanceName,

            int instanceType,

            string internalVip,

            int internalVport,

            bool isSupported,

            int memory,

            string product,

            string region,

            string secAuditStatus,

            string source,

            int status,

            int taskStatus,

            string uniqSubnetId,

            string uniqVpcId,

            string vip,

            int volume,

            int vport)
        {
            AuditPolicyStatus = auditPolicyStatus;
            AuditRunningStatus = auditRunningStatus;
            Cpu = cpu;
            CreateTime = createTime;
            DeadlineTime = deadlineTime;
            DeployMode = deployMode;
            EngineVersion = engineVersion;
            EventCount = eventCount;
            GroupId = groupId;
            GroupName = groupName;
            HealthScore = healthScore;
            InitFlag = initFlag;
            InstanceConfs = instanceConfs;
            InstanceId = instanceId;
            InstanceName = instanceName;
            InstanceType = instanceType;
            InternalVip = internalVip;
            InternalVport = internalVport;
            IsSupported = isSupported;
            Memory = memory;
            Product = product;
            Region = region;
            SecAuditStatus = secAuditStatus;
            Source = source;
            Status = status;
            TaskStatus = taskStatus;
            UniqSubnetId = uniqSubnetId;
            UniqVpcId = uniqVpcId;
            Vip = vip;
            Volume = volume;
            Vport = vport;
        }
    }
}
