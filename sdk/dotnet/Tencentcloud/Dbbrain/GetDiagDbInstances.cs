// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Dbbrain
{
    public static class GetDiagDbInstances
    {
        /// <summary>
        /// Use this data source to query detailed information of dbbrain diag_db_instances
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var diagDbInstances = Output.Create(Tencentcloud.Dbbrain.GetDiagDbInstances.InvokeAsync(new Tencentcloud.Dbbrain.GetDiagDbInstancesArgs
        ///         {
        ///             InstanceNames = 
        ///             {
        ///                 "keep_preset_mysql",
        ///             },
        ///             IsSupported = true,
        ///             Product = "mysql",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDiagDbInstancesResult> InvokeAsync(GetDiagDbInstancesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDiagDbInstancesResult>("tencentcloud:Dbbrain/getDiagDbInstances:getDiagDbInstances", args ?? new GetDiagDbInstancesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of dbbrain diag_db_instances
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var diagDbInstances = Output.Create(Tencentcloud.Dbbrain.GetDiagDbInstances.InvokeAsync(new Tencentcloud.Dbbrain.GetDiagDbInstancesArgs
        ///         {
        ///             InstanceNames = 
        ///             {
        ///                 "keep_preset_mysql",
        ///             },
        ///             IsSupported = true,
        ///             Product = "mysql",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDiagDbInstancesResult> Invoke(GetDiagDbInstancesInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDiagDbInstancesResult>("tencentcloud:Dbbrain/getDiagDbInstances:getDiagDbInstances", args ?? new GetDiagDbInstancesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDiagDbInstancesArgs : Pulumi.InvokeArgs
    {
        [Input("instanceIds")]
        private List<string>? _instanceIds;

        /// <summary>
        /// query based on the instance ID condition.
        /// </summary>
        public List<string> InstanceIds
        {
            get => _instanceIds ?? (_instanceIds = new List<string>());
            set => _instanceIds = value;
        }

        [Input("instanceNames")]
        private List<string>? _instanceNames;

        /// <summary>
        /// query based on the instance name condition.
        /// </summary>
        public List<string> InstanceNames
        {
            get => _instanceNames ?? (_instanceNames = new List<string>());
            set => _instanceNames = value;
        }

        /// <summary>
        /// whether it is an instance supported by DBbrain, always pass `true`.
        /// </summary>
        [Input("isSupported", required: true)]
        public bool IsSupported { get; set; }

        /// <summary>
        /// service product type, supported values include: `mysql` - cloud database MySQL, `cynosdb` - cloud database TDSQL-C for MySQL, the default is `mysql`.
        /// </summary>
        [Input("product", required: true)]
        public string Product { get; set; } = null!;

        [Input("regions")]
        private List<string>? _regions;

        /// <summary>
        /// query based on geographical conditions.
        /// </summary>
        public List<string> Regions
        {
            get => _regions ?? (_regions = new List<string>());
            set => _regions = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetDiagDbInstancesArgs()
        {
        }
    }

    public sealed class GetDiagDbInstancesInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("instanceIds")]
        private InputList<string>? _instanceIds;

        /// <summary>
        /// query based on the instance ID condition.
        /// </summary>
        public InputList<string> InstanceIds
        {
            get => _instanceIds ?? (_instanceIds = new InputList<string>());
            set => _instanceIds = value;
        }

        [Input("instanceNames")]
        private InputList<string>? _instanceNames;

        /// <summary>
        /// query based on the instance name condition.
        /// </summary>
        public InputList<string> InstanceNames
        {
            get => _instanceNames ?? (_instanceNames = new InputList<string>());
            set => _instanceNames = value;
        }

        /// <summary>
        /// whether it is an instance supported by DBbrain, always pass `true`.
        /// </summary>
        [Input("isSupported", required: true)]
        public Input<bool> IsSupported { get; set; } = null!;

        /// <summary>
        /// service product type, supported values include: `mysql` - cloud database MySQL, `cynosdb` - cloud database TDSQL-C for MySQL, the default is `mysql`.
        /// </summary>
        [Input("product", required: true)]
        public Input<string> Product { get; set; } = null!;

        [Input("regions")]
        private InputList<string>? _regions;

        /// <summary>
        /// query based on geographical conditions.
        /// </summary>
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetDiagDbInstancesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDiagDbInstancesResult
    {
        /// <summary>
        /// all-instance inspection status. `0`: All-instance inspection is enabled; `1`: All-instance inspection is not enabled.
        /// </summary>
        public readonly int DbScanStatus;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> InstanceIds;
        public readonly ImmutableArray<string> InstanceNames;
        /// <summary>
        /// whether it is an instance supported by DBbrain.
        /// </summary>
        public readonly bool IsSupported;
        /// <summary>
        /// information about the instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDiagDbInstancesItemResult> Items;
        /// <summary>
        /// belongs to the product.
        /// </summary>
        public readonly string Product;
        public readonly ImmutableArray<string> Regions;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetDiagDbInstancesResult(
            int dbScanStatus,

            string id,

            ImmutableArray<string> instanceIds,

            ImmutableArray<string> instanceNames,

            bool isSupported,

            ImmutableArray<Outputs.GetDiagDbInstancesItemResult> items,

            string product,

            ImmutableArray<string> regions,

            string? resultOutputFile)
        {
            DbScanStatus = dbScanStatus;
            Id = id;
            InstanceIds = instanceIds;
            InstanceNames = instanceNames;
            IsSupported = isSupported;
            Items = items;
            Product = product;
            Regions = regions;
            ResultOutputFile = resultOutputFile;
        }
    }
}
