// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Dbbrain
{
    public static class GetSqlTemplates
    {
        /// <summary>
        /// Use this data source to query detailed information of dbbrain sql_templates
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var sqlTemplates = Output.Create(Tencentcloud.Dbbrain.GetSqlTemplates.InvokeAsync(new Tencentcloud.Dbbrain.GetSqlTemplatesArgs
        ///         {
        ///             InstanceId = "",
        ///             Product = "",
        ///             Schema = "",
        ///             SqlText = "",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSqlTemplatesResult> InvokeAsync(GetSqlTemplatesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSqlTemplatesResult>("tencentcloud:Dbbrain/getSqlTemplates:getSqlTemplates", args ?? new GetSqlTemplatesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of dbbrain sql_templates
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var sqlTemplates = Output.Create(Tencentcloud.Dbbrain.GetSqlTemplates.InvokeAsync(new Tencentcloud.Dbbrain.GetSqlTemplatesArgs
        ///         {
        ///             InstanceId = "",
        ///             Product = "",
        ///             Schema = "",
        ///             SqlText = "",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSqlTemplatesResult> Invoke(GetSqlTemplatesInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSqlTemplatesResult>("tencentcloud:Dbbrain/getSqlTemplates:getSqlTemplates", args ?? new GetSqlTemplatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSqlTemplatesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// instance id.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL, the default is mysql.
        /// </summary>
        [Input("product")]
        public string? Product { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// database name.
        /// </summary>
        [Input("schema", required: true)]
        public string Schema { get; set; } = null!;

        /// <summary>
        /// SQL statements.
        /// </summary>
        [Input("sqlText", required: true)]
        public string SqlText { get; set; } = null!;

        public GetSqlTemplatesArgs()
        {
        }
    }

    public sealed class GetSqlTemplatesInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// instance id.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL, the default is mysql.
        /// </summary>
        [Input("product")]
        public Input<string>? Product { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// database name.
        /// </summary>
        [Input("schema", required: true)]
        public Input<string> Schema { get; set; } = null!;

        /// <summary>
        /// SQL statements.
        /// </summary>
        [Input("sqlText", required: true)]
        public Input<string> SqlText { get; set; } = null!;

        public GetSqlTemplatesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSqlTemplatesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        public readonly string? Product;
        public readonly string? ResultOutputFile;
        public readonly string Schema;
        /// <summary>
        /// SQL template ID.
        /// </summary>
        public readonly int SqlId;
        /// <summary>
        /// SQL template content.
        /// </summary>
        public readonly string SqlTemplate;
        public readonly string SqlText;
        /// <summary>
        /// sql type.
        /// </summary>
        public readonly string SqlType;

        [OutputConstructor]
        private GetSqlTemplatesResult(
            string id,

            string instanceId,

            string? product,

            string? resultOutputFile,

            string schema,

            int sqlId,

            string sqlTemplate,

            string sqlText,

            string sqlType)
        {
            Id = id;
            InstanceId = instanceId;
            Product = product;
            ResultOutputFile = resultOutputFile;
            Schema = schema;
            SqlId = sqlId;
            SqlTemplate = sqlTemplate;
            SqlText = sqlText;
            SqlType = sqlType;
        }
    }
}
