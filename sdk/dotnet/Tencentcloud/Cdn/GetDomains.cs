// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Cdn
{
    public static class GetDomains
    {
        /// <summary>
        /// Use this data source to query the detail information of CDN domain.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Tencentcloud.Cdn.GetDomains.Invoke(new()
        ///     {
        ///         Domain = "xxxx.com",
        ///         FullUrlCache = false,
        ///         HttpsSwitch = "on",
        ///         OriginPullProtocol = "follow",
        ///         ServiceType = "web",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDomainsResult> InvokeAsync(GetDomainsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDomainsResult>("tencentcloud:Cdn/getDomains:getDomains", args ?? new GetDomainsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query the detail information of CDN domain.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Tencentcloud.Cdn.GetDomains.Invoke(new()
        ///     {
        ///         Domain = "xxxx.com",
        ///         FullUrlCache = false,
        ///         HttpsSwitch = "on",
        ///         OriginPullProtocol = "follow",
        ///         ServiceType = "web",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDomainsResult> Invoke(GetDomainsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainsResult>("tencentcloud:Cdn/getDomains:getDomains", args ?? new GetDomainsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Acceleration domain name.
        /// </summary>
        [Input("domain")]
        public string? Domain { get; set; }

        /// <summary>
        /// Whether to enable full-path cache.
        /// </summary>
        [Input("fullUrlCache")]
        public bool? FullUrlCache { get; set; }

        /// <summary>
        /// HTTPS configuration. Valid values: `on`, `off` and `processing`.
        /// </summary>
        [Input("httpsSwitch")]
        public string? HttpsSwitch { get; set; }

        /// <summary>
        /// Origin-pull protocol configuration. Valid values: `http`, `https` and `follow`.
        /// </summary>
        [Input("originPullProtocol")]
        public string? OriginPullProtocol { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// Service type of acceleration domain name. The available value include `web`, `download` and `media`.
        /// </summary>
        [Input("serviceType")]
        public string? ServiceType { get; set; }

        public GetDomainsArgs()
        {
        }
        public static new GetDomainsArgs Empty => new GetDomainsArgs();
    }

    public sealed class GetDomainsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Acceleration domain name.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Whether to enable full-path cache.
        /// </summary>
        [Input("fullUrlCache")]
        public Input<bool>? FullUrlCache { get; set; }

        /// <summary>
        /// HTTPS configuration. Valid values: `on`, `off` and `processing`.
        /// </summary>
        [Input("httpsSwitch")]
        public Input<string>? HttpsSwitch { get; set; }

        /// <summary>
        /// Origin-pull protocol configuration. Valid values: `http`, `https` and `follow`.
        /// </summary>
        [Input("originPullProtocol")]
        public Input<string>? OriginPullProtocol { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// Service type of acceleration domain name. The available value include `web`, `download` and `media`.
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        public GetDomainsInvokeArgs()
        {
        }
        public static new GetDomainsInvokeArgs Empty => new GetDomainsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainsResult
    {
        /// <summary>
        /// Acceleration domain name.
        /// </summary>
        public readonly string? Domain;
        /// <summary>
        /// An information list of cdn domain. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainsDomainListResult> DomainLists;
        /// <summary>
        /// Whether to enable full-path cache.
        /// </summary>
        public readonly bool? FullUrlCache;
        /// <summary>
        /// HTTPS configuration switch.
        /// </summary>
        public readonly string? HttpsSwitch;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Origin-pull protocol configuration.
        /// </summary>
        public readonly string? OriginPullProtocol;
        public readonly string? ResultOutputFile;
        /// <summary>
        /// Service type of acceleration domain name.
        /// </summary>
        public readonly string? ServiceType;

        [OutputConstructor]
        private GetDomainsResult(
            string? domain,

            ImmutableArray<Outputs.GetDomainsDomainListResult> domainLists,

            bool? fullUrlCache,

            string? httpsSwitch,

            string id,

            string? originPullProtocol,

            string? resultOutputFile,

            string? serviceType)
        {
            Domain = domain;
            DomainLists = domainLists;
            FullUrlCache = fullUrlCache;
            HttpsSwitch = httpsSwitch;
            Id = id;
            OriginPullProtocol = originPullProtocol;
            ResultOutputFile = resultOutputFile;
            ServiceType = serviceType;
        }
    }
}
