// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Tse
{
    /// <summary>
    /// Provides a resource to create a tse cngw_route
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var config = new Config();
    ///         var availabilityZone = config.Get("availabilityZone") ?? "ap-guangzhou-4";
    ///         var vpc = new Tencentcloud.Vpc.Instance("vpc", new Tencentcloud.Vpc.InstanceArgs
    ///         {
    ///             CidrBlock = "10.0.0.0/16",
    ///         });
    ///         var subnet = new Tencentcloud.Subnet.Instance("subnet", new Tencentcloud.Subnet.InstanceArgs
    ///         {
    ///             VpcId = vpc.Id,
    ///             AvailabilityZone = availabilityZone,
    ///             CidrBlock = "10.0.1.0/24",
    ///         });
    ///         var cngwGateway = new Tencentcloud.Tse.CngwGateway("cngwGateway", new Tencentcloud.Tse.CngwGatewayArgs
    ///         {
    ///             Description = "terraform test1",
    ///             EnableCls = true,
    ///             EngineRegion = "ap-guangzhou",
    ///             FeatureVersion = "STANDARD",
    ///             GatewayVersion = "2.5.1",
    ///             IngressClassName = "tse-nginx-ingress",
    ///             InternetMaxBandwidthOut = 0,
    ///             TradeType = 0,
    ///             Type = "kong",
    ///             NodeConfig = new Tencentcloud.Tse.Inputs.CngwGatewayNodeConfigArgs
    ///             {
    ///                 Number = 2,
    ///                 Specification = "1c2g",
    ///             },
    ///             VpcConfig = new Tencentcloud.Tse.Inputs.CngwGatewayVpcConfigArgs
    ///             {
    ///                 SubnetId = subnet.Id,
    ///                 VpcId = vpc.Id,
    ///             },
    ///             Tags = 
    ///             {
    ///                 { "createdBy", "terraform" },
    ///             },
    ///         });
    ///         var cngwService = new Tencentcloud.Tse.CngwService("cngwService", new Tencentcloud.Tse.CngwServiceArgs
    ///         {
    ///             GatewayId = cngwGateway.Id,
    ///             Path = "/test",
    ///             Protocol = "http",
    ///             Retries = 5,
    ///             Timeout = 60000,
    ///             UpstreamType = "HostIP",
    ///             UpstreamInfo = new Tencentcloud.Tse.Inputs.CngwServiceUpstreamInfoArgs
    ///             {
    ///                 Algorithm = "round-robin",
    ///                 AutoScalingCvmPort = 0,
    ///                 Host = "arunma.cn",
    ///                 Port = 8012,
    ///                 SlowStart = 0,
    ///             },
    ///         });
    ///         var cngwRoute = new Tencentcloud.Tse.CngwRoute("cngwRoute", new Tencentcloud.Tse.CngwRouteArgs
    ///         {
    ///             DestinationPorts = {},
    ///             GatewayId = cngwGateway.Id,
    ///             Hosts = 
    ///             {
    ///                 "192.168.0.1:9090",
    ///             },
    ///             HttpsRedirectStatusCode = 426,
    ///             Paths = 
    ///             {
    ///                 "/user",
    ///             },
    ///             Headers = 
    ///             {
    ///                 new Tencentcloud.Tse.Inputs.CngwRouteHeaderArgs
    ///                 {
    ///                     Key = "req",
    ///                     Value = "terraform",
    ///                 },
    ///             },
    ///             PreserveHost = false,
    ///             Protocols = 
    ///             {
    ///                 "http",
    ///                 "https",
    ///             },
    ///             RouteName = "terraform-route",
    ///             ServiceId = cngwService.ServiceId,
    ///             StripPath = true,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Tse/cngwRoute:CngwRoute")]
    public partial class CngwRoute : Pulumi.CustomResource
    {
        /// <summary>
        /// destination port for Layer 4 matching.
        /// </summary>
        [Output("destinationPorts")]
        public Output<ImmutableArray<int>> DestinationPorts { get; private set; } = null!;

        /// <summary>
        /// This field has been deprecated and will be deleted in subsequent versions. whether to enable forced HTTPS, no longer use.
        /// </summary>
        [Output("forceHttps")]
        public Output<bool?> ForceHttps { get; private set; } = null!;

        /// <summary>
        /// gateway ID.
        /// </summary>
        [Output("gatewayId")]
        public Output<string> GatewayId { get; private set; } = null!;

        /// <summary>
        /// the headers of route.
        /// </summary>
        [Output("headers")]
        public Output<ImmutableArray<Outputs.CngwRouteHeader>> Headers { get; private set; } = null!;

        /// <summary>
        /// host list.
        /// </summary>
        [Output("hosts")]
        public Output<ImmutableArray<string>> Hosts { get; private set; } = null!;

        /// <summary>
        /// https redirection status code.
        /// </summary>
        [Output("httpsRedirectStatusCode")]
        public Output<int?> HttpsRedirectStatusCode { get; private set; } = null!;

        /// <summary>
        /// route methods. Reference value:`GET`,`POST`,`DELETE`,`PUT`,`OPTIONS`,`PATCH`,`HEAD`,`ANY`,`TRACE`,`COPY`,`MOVE`,`PROPFIND`,`PROPPATCH`,`MKCOL`,`LOCK`,`UNLOCK`.
        /// </summary>
        [Output("methods")]
        public Output<ImmutableArray<string>> Methods { get; private set; } = null!;

        /// <summary>
        /// path list.
        /// </summary>
        [Output("paths")]
        public Output<ImmutableArray<string>> Paths { get; private set; } = null!;

        /// <summary>
        /// whether to keep the host when forwarding to the backend.
        /// </summary>
        [Output("preserveHost")]
        public Output<bool?> PreserveHost { get; private set; } = null!;

        /// <summary>
        /// the protocol list of route.Reference value:`https`,`http`.
        /// </summary>
        [Output("protocols")]
        public Output<ImmutableArray<string>> Protocols { get; private set; } = null!;

        /// <summary>
        /// the id of the route, unique in the instance.
        /// </summary>
        [Output("routeId")]
        public Output<string> RouteId { get; private set; } = null!;

        /// <summary>
        /// the name of the route, unique in the instance.
        /// </summary>
        [Output("routeName")]
        public Output<string?> RouteName { get; private set; } = null!;

        /// <summary>
        /// ID of the service which the route belongs to.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// whether to strip path when forwarding to the backend.
        /// </summary>
        [Output("stripPath")]
        public Output<bool?> StripPath { get; private set; } = null!;


        /// <summary>
        /// Create a CngwRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CngwRoute(string name, CngwRouteArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Tse/cngwRoute:CngwRoute", name, args ?? new CngwRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CngwRoute(string name, Input<string> id, CngwRouteState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Tse/cngwRoute:CngwRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CngwRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CngwRoute Get(string name, Input<string> id, CngwRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new CngwRoute(name, id, state, options);
        }
    }

    public sealed class CngwRouteArgs : Pulumi.ResourceArgs
    {
        [Input("destinationPorts")]
        private InputList<int>? _destinationPorts;

        /// <summary>
        /// destination port for Layer 4 matching.
        /// </summary>
        public InputList<int> DestinationPorts
        {
            get => _destinationPorts ?? (_destinationPorts = new InputList<int>());
            set => _destinationPorts = value;
        }

        /// <summary>
        /// This field has been deprecated and will be deleted in subsequent versions. whether to enable forced HTTPS, no longer use.
        /// </summary>
        [Input("forceHttps")]
        public Input<bool>? ForceHttps { get; set; }

        /// <summary>
        /// gateway ID.
        /// </summary>
        [Input("gatewayId", required: true)]
        public Input<string> GatewayId { get; set; } = null!;

        [Input("headers")]
        private InputList<Inputs.CngwRouteHeaderArgs>? _headers;

        /// <summary>
        /// the headers of route.
        /// </summary>
        public InputList<Inputs.CngwRouteHeaderArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.CngwRouteHeaderArgs>());
            set => _headers = value;
        }

        [Input("hosts")]
        private InputList<string>? _hosts;

        /// <summary>
        /// host list.
        /// </summary>
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        /// <summary>
        /// https redirection status code.
        /// </summary>
        [Input("httpsRedirectStatusCode")]
        public Input<int>? HttpsRedirectStatusCode { get; set; }

        [Input("methods")]
        private InputList<string>? _methods;

        /// <summary>
        /// route methods. Reference value:`GET`,`POST`,`DELETE`,`PUT`,`OPTIONS`,`PATCH`,`HEAD`,`ANY`,`TRACE`,`COPY`,`MOVE`,`PROPFIND`,`PROPPATCH`,`MKCOL`,`LOCK`,`UNLOCK`.
        /// </summary>
        public InputList<string> Methods
        {
            get => _methods ?? (_methods = new InputList<string>());
            set => _methods = value;
        }

        [Input("paths")]
        private InputList<string>? _paths;

        /// <summary>
        /// path list.
        /// </summary>
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        /// <summary>
        /// whether to keep the host when forwarding to the backend.
        /// </summary>
        [Input("preserveHost")]
        public Input<bool>? PreserveHost { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// the protocol list of route.Reference value:`https`,`http`.
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// the name of the route, unique in the instance.
        /// </summary>
        [Input("routeName")]
        public Input<string>? RouteName { get; set; }

        /// <summary>
        /// ID of the service which the route belongs to.
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        /// <summary>
        /// whether to strip path when forwarding to the backend.
        /// </summary>
        [Input("stripPath")]
        public Input<bool>? StripPath { get; set; }

        public CngwRouteArgs()
        {
        }
    }

    public sealed class CngwRouteState : Pulumi.ResourceArgs
    {
        [Input("destinationPorts")]
        private InputList<int>? _destinationPorts;

        /// <summary>
        /// destination port for Layer 4 matching.
        /// </summary>
        public InputList<int> DestinationPorts
        {
            get => _destinationPorts ?? (_destinationPorts = new InputList<int>());
            set => _destinationPorts = value;
        }

        /// <summary>
        /// This field has been deprecated and will be deleted in subsequent versions. whether to enable forced HTTPS, no longer use.
        /// </summary>
        [Input("forceHttps")]
        public Input<bool>? ForceHttps { get; set; }

        /// <summary>
        /// gateway ID.
        /// </summary>
        [Input("gatewayId")]
        public Input<string>? GatewayId { get; set; }

        [Input("headers")]
        private InputList<Inputs.CngwRouteHeaderGetArgs>? _headers;

        /// <summary>
        /// the headers of route.
        /// </summary>
        public InputList<Inputs.CngwRouteHeaderGetArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.CngwRouteHeaderGetArgs>());
            set => _headers = value;
        }

        [Input("hosts")]
        private InputList<string>? _hosts;

        /// <summary>
        /// host list.
        /// </summary>
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        /// <summary>
        /// https redirection status code.
        /// </summary>
        [Input("httpsRedirectStatusCode")]
        public Input<int>? HttpsRedirectStatusCode { get; set; }

        [Input("methods")]
        private InputList<string>? _methods;

        /// <summary>
        /// route methods. Reference value:`GET`,`POST`,`DELETE`,`PUT`,`OPTIONS`,`PATCH`,`HEAD`,`ANY`,`TRACE`,`COPY`,`MOVE`,`PROPFIND`,`PROPPATCH`,`MKCOL`,`LOCK`,`UNLOCK`.
        /// </summary>
        public InputList<string> Methods
        {
            get => _methods ?? (_methods = new InputList<string>());
            set => _methods = value;
        }

        [Input("paths")]
        private InputList<string>? _paths;

        /// <summary>
        /// path list.
        /// </summary>
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        /// <summary>
        /// whether to keep the host when forwarding to the backend.
        /// </summary>
        [Input("preserveHost")]
        public Input<bool>? PreserveHost { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// the protocol list of route.Reference value:`https`,`http`.
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// the id of the route, unique in the instance.
        /// </summary>
        [Input("routeId")]
        public Input<string>? RouteId { get; set; }

        /// <summary>
        /// the name of the route, unique in the instance.
        /// </summary>
        [Input("routeName")]
        public Input<string>? RouteName { get; set; }

        /// <summary>
        /// ID of the service which the route belongs to.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        /// <summary>
        /// whether to strip path when forwarding to the backend.
        /// </summary>
        [Input("stripPath")]
        public Input<bool>? StripPath { get; set; }

        public CngwRouteState()
        {
        }
    }
}
