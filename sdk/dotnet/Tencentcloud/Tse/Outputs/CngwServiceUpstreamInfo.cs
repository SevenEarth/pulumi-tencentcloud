// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Tse.Outputs
{

    [OutputType]
    public sealed class CngwServiceUpstreamInfo
    {
        /// <summary>
        /// load balance algorithm,default: `round-robin`, `least-connections` and `consisten_hashing` also support.
        /// </summary>
        public readonly string? Algorithm;
        /// <summary>
        /// auto scaling group port of cvm.
        /// </summary>
        public readonly int? AutoScalingCvmPort;
        /// <summary>
        /// auto scaling group ID of cvm.
        /// </summary>
        public readonly string? AutoScalingGroupId;
        /// <summary>
        /// hook status in auto scaling group of cvm.
        /// </summary>
        public readonly string? AutoScalingHookStatus;
        /// <summary>
        /// tat cmd status in auto scaling group of cvm.
        /// </summary>
        public readonly string? AutoScalingTatCmdStatus;
        /// <summary>
        /// an IP address or domain name.
        /// </summary>
        public readonly string? Host;
        /// <summary>
        /// namespace.
        /// </summary>
        public readonly string? Namespace;
        /// <summary>
        /// backend service port.valid values: `1` to `65535`.
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// exact source service type.
        /// </summary>
        public readonly string? RealSourceType;
        /// <summary>
        /// scf lambda name.
        /// </summary>
        public readonly string? ScfLambdaName;
        /// <summary>
        /// scf lambda version.
        /// </summary>
        public readonly string? ScfLambdaQualifier;
        /// <summary>
        /// scf lambda namespace.
        /// </summary>
        public readonly string? ScfNamespace;
        /// <summary>
        /// scf lambda type.
        /// </summary>
        public readonly string? ScfType;
        /// <summary>
        /// the name of the service in registry or kubernetes.
        /// </summary>
        public readonly string? ServiceName;
        /// <summary>
        /// slow start time, unit: `second`, when it is enabled, weight of the node is increased from 1 to the target value gradually.
        /// </summary>
        public readonly int? SlowStart;
        /// <summary>
        /// service source ID.
        /// </summary>
        public readonly string? SourceId;
        /// <summary>
        /// the name of source service.
        /// </summary>
        public readonly string? SourceName;
        /// <summary>
        /// source service type.
        /// </summary>
        public readonly string? SourceType;
        /// <summary>
        /// provided when service type is IPList.
        /// </summary>
        public readonly ImmutableArray<Outputs.CngwServiceUpstreamInfoTarget> Targets;

        [OutputConstructor]
        private CngwServiceUpstreamInfo(
            string? algorithm,

            int? autoScalingCvmPort,

            string? autoScalingGroupId,

            string? autoScalingHookStatus,

            string? autoScalingTatCmdStatus,

            string? host,

            string? @namespace,

            int? port,

            string? realSourceType,

            string? scfLambdaName,

            string? scfLambdaQualifier,

            string? scfNamespace,

            string? scfType,

            string? serviceName,

            int? slowStart,

            string? sourceId,

            string? sourceName,

            string? sourceType,

            ImmutableArray<Outputs.CngwServiceUpstreamInfoTarget> targets)
        {
            Algorithm = algorithm;
            AutoScalingCvmPort = autoScalingCvmPort;
            AutoScalingGroupId = autoScalingGroupId;
            AutoScalingHookStatus = autoScalingHookStatus;
            AutoScalingTatCmdStatus = autoScalingTatCmdStatus;
            Host = host;
            Namespace = @namespace;
            Port = port;
            RealSourceType = realSourceType;
            ScfLambdaName = scfLambdaName;
            ScfLambdaQualifier = scfLambdaQualifier;
            ScfNamespace = scfNamespace;
            ScfType = scfType;
            ServiceName = serviceName;
            SlowStart = slowStart;
            SourceId = sourceId;
            SourceName = sourceName;
            SourceType = sourceType;
            Targets = targets;
        }
    }
}
