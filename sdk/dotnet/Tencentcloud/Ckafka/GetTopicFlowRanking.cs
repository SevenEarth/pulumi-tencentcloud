// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Ckafka
{
    public static class GetTopicFlowRanking
    {
        /// <summary>
        /// Use this data source to query detailed information of ckafka topic_flow_ranking
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var topicFlowRanking = Output.Create(Tencentcloud.Ckafka.GetTopicFlowRanking.InvokeAsync(new Tencentcloud.Ckafka.GetTopicFlowRankingArgs
        ///         {
        ///             BeginDate = "2023-05-29T00:00:00+08:00",
        ///             EndDate = "2021-05-29T23:59:59+08:00",
        ///             InstanceId = "ckafka-xxxxxx",
        ///             RankingType = "PRO",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTopicFlowRankingResult> InvokeAsync(GetTopicFlowRankingArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTopicFlowRankingResult>("tencentcloud:Ckafka/getTopicFlowRanking:getTopicFlowRanking", args ?? new GetTopicFlowRankingArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of ckafka topic_flow_ranking
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var topicFlowRanking = Output.Create(Tencentcloud.Ckafka.GetTopicFlowRanking.InvokeAsync(new Tencentcloud.Ckafka.GetTopicFlowRankingArgs
        ///         {
        ///             BeginDate = "2023-05-29T00:00:00+08:00",
        ///             EndDate = "2021-05-29T23:59:59+08:00",
        ///             InstanceId = "ckafka-xxxxxx",
        ///             RankingType = "PRO",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTopicFlowRankingResult> Invoke(GetTopicFlowRankingInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetTopicFlowRankingResult>("tencentcloud:Ckafka/getTopicFlowRanking:getTopicFlowRanking", args ?? new GetTopicFlowRankingInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTopicFlowRankingArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// BeginDate.
        /// </summary>
        [Input("beginDate")]
        public string? BeginDate { get; set; }

        /// <summary>
        /// EndDate.
        /// </summary>
        [Input("endDate")]
        public string? EndDate { get; set; }

        /// <summary>
        /// InstanceId.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// Ranking type. `PRO`: topic production flow, `CON`: topic consumption traffic.
        /// </summary>
        [Input("rankingType", required: true)]
        public string RankingType { get; set; } = null!;

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetTopicFlowRankingArgs()
        {
        }
    }

    public sealed class GetTopicFlowRankingInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// BeginDate.
        /// </summary>
        [Input("beginDate")]
        public Input<string>? BeginDate { get; set; }

        /// <summary>
        /// EndDate.
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// InstanceId.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Ranking type. `PRO`: topic production flow, `CON`: topic consumption traffic.
        /// </summary>
        [Input("rankingType", required: true)]
        public Input<string> RankingType { get; set; } = null!;

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetTopicFlowRankingInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetTopicFlowRankingResult
    {
        public readonly string? BeginDate;
        public readonly string? EndDate;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        public readonly string RankingType;
        public readonly string? ResultOutputFile;
        /// <summary>
        /// result.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTopicFlowRankingResultResult> Results;

        [OutputConstructor]
        private GetTopicFlowRankingResult(
            string? beginDate,

            string? endDate,

            string id,

            string instanceId,

            string rankingType,

            string? resultOutputFile,

            ImmutableArray<Outputs.GetTopicFlowRankingResultResult> results)
        {
            BeginDate = beginDate;
            EndDate = endDate;
            Id = id;
            InstanceId = instanceId;
            RankingType = rankingType;
            ResultOutputFile = resultOutputFile;
            Results = results;
        }
    }
}
