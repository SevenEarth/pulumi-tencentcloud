// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Ckafka.Inputs
{

    public sealed class DatahubTaskTargetResourceMySqlParamGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// the name of the column to be monitored.
        /// </summary>
        [Input("dataSourceIncrementColumn")]
        public Input<string>? DataSourceIncrementColumn { get; set; }

        /// <summary>
        /// TIMESTAMP indicates that the incremental column is of timestamp type, INCREMENT indicates that the incremental column is of self-incrementing id type.
        /// </summary>
        [Input("dataSourceIncrementMode")]
        public Input<string>? DataSourceIncrementMode { get; set; }

        /// <summary>
        /// TABLE indicates that the read item is a table, QUERY indicates that the read item is a query.
        /// </summary>
        [Input("dataSourceMonitorMode")]
        public Input<string>? DataSourceMonitorMode { get; set; }

        /// <summary>
        /// When DataMonitorMode=TABLE, pass in the Table that needs to be read; when DataMonitorMode=QUERY, pass in the query sql statement that needs to be read.
        /// </summary>
        [Input("dataSourceMonitorResource")]
        public Input<string>? DataSourceMonitorResource { get; set; }

        /// <summary>
        /// HEAD means copy stock + incremental data, TAIL means copy only incremental data.
        /// </summary>
        [Input("dataSourceStartFrom")]
        public Input<string>? DataSourceStartFrom { get; set; }

        /// <summary>
        /// INSERT means insert using Insert mode, UPSERT means insert using Upsert mode.
        /// </summary>
        [Input("dataTargetInsertMode")]
        public Input<string>? DataTargetInsertMode { get; set; }

        /// <summary>
        /// When DataInsertMode=UPSERT, pass in the primary key that the current upsert depends on.
        /// </summary>
        [Input("dataTargetPrimaryKeyField")]
        public Input<string>? DataTargetPrimaryKeyField { get; set; }

        [Input("dataTargetRecordMappings")]
        private InputList<Inputs.DatahubTaskTargetResourceMySqlParamDataTargetRecordMappingGetArgs>? _dataTargetRecordMappings;

        /// <summary>
        /// Mapping relationship between tables and messages.
        /// </summary>
        public InputList<Inputs.DatahubTaskTargetResourceMySqlParamDataTargetRecordMappingGetArgs> DataTargetRecordMappings
        {
            get => _dataTargetRecordMappings ?? (_dataTargetRecordMappings = new InputList<Inputs.DatahubTaskTargetResourceMySqlParamDataTargetRecordMappingGetArgs>());
            set => _dataTargetRecordMappings = value;
        }

        /// <summary>
        /// MySQL database name, * is the whole database.
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// The Topic that stores the Ddl information of My SQL, if it is empty, it will not be stored by default.
        /// </summary>
        [Input("ddlTopic")]
        public Input<string>? DdlTopic { get; set; }

        /// <summary>
        /// When the member parameter Drop Invalid Message To Cls is set to true, the Drop Invalid Message parameter is invalid.
        /// </summary>
        [Input("dropCls")]
        public Input<Inputs.DatahubTaskTargetResourceMySqlParamDropClsGetArgs>? DropCls { get; set; }

        /// <summary>
        /// Whether to discard messages that fail to parse, the default is true.
        /// </summary>
        [Input("dropInvalidMessage")]
        public Input<bool>? DropInvalidMessage { get; set; }

        /// <summary>
        /// If the value is all, DDL data and DML data will also be written to the selected topic; if the value is dml, only DML data will be written to the selected topic.
        /// </summary>
        [Input("includeContentChanges")]
        public Input<string>? IncludeContentChanges { get; set; }

        /// <summary>
        /// If the value is true, and the value of the binlog rows query log events configuration item in My SQL is ON, the data flowing into the topic contains the original SQL statement; if the value is false, the data flowing into the topic does not contain Original SQL statement.
        /// </summary>
        [Input("includeQuery")]
        public Input<bool>? IncludeQuery { get; set; }

        /// <summary>
        /// When the Table input is a prefix, the value of this item is true, otherwise it is false.
        /// </summary>
        [Input("isTablePrefix")]
        public Input<bool>? IsTablePrefix { get; set; }

        /// <summary>
        /// Whether the input table is a regular expression, if this option and Is Table Prefix are true at the same time, the judgment priority of this option is higher than Is Table Prefix.
        /// </summary>
        [Input("isTableRegular")]
        public Input<bool>? IsTableRegular { get; set; }

        /// <summary>
        /// Format library1.table1 field 1,field 2;library 2.table2 field 2, between tables; (semicolon) separated, between fields, (comma) separated. The table that is not specified defaults to the primary key of the table.
        /// </summary>
        [Input("keyColumns")]
        public Input<string>? KeyColumns { get; set; }

        /// <summary>
        /// output format, DEFAULT, CANAL_1, CANAL_2.
        /// </summary>
        [Input("outputFormat")]
        public Input<string>? OutputFormat { get; set; }

        /// <summary>
        /// If the value is true, the message will carry the schema corresponding to the message structure, if the value is false, it will not carry.
        /// </summary>
        [Input("recordWithSchema")]
        public Input<bool>? RecordWithSchema { get; set; }

        /// <summary>
        /// MySQL connection Id.
        /// </summary>
        [Input("resource", required: true)]
        public Input<string> Resource { get; set; } = null!;

        /// <summary>
        /// database name of signal table.
        /// </summary>
        [Input("signalDatabase")]
        public Input<string>? SignalDatabase { get; set; }

        /// <summary>
        /// whether to Copy inventory information (schema_only does not copy, initial full amount), the default is initial.
        /// </summary>
        [Input("snapshotMode")]
        public Input<string>? SnapshotMode { get; set; }

        /// <summary>
        /// The name of the MySQL data table,  is the non-system table in all the monitored databases, which can be separated by, to monitor multiple data tables, but the data table needs to be filled in the format of data database name.data table name, when a regular expression needs to be filled in, the format is data database name.data table name.
        /// </summary>
        [Input("table", required: true)]
        public Input<string> Table { get; set; } = null!;

        /// <summary>
        /// Regular expression for routing events to specific topics, defaults to (.*).
        /// </summary>
        [Input("topicRegex")]
        public Input<string>? TopicRegex { get; set; }

        /// <summary>
        /// TopicRegex, $1, $2.
        /// </summary>
        [Input("topicReplacement")]
        public Input<string>? TopicReplacement { get; set; }

        public DatahubTaskTargetResourceMySqlParamGetArgs()
        {
        }
    }
}
