// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Ckafka
{
    public static class GetGroupOffsets
    {
        /// <summary>
        /// Use this data source to query detailed information of ckafka group_offsets
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var groupOffsets = Output.Create(Tencentcloud.Ckafka.GetGroupOffsets.InvokeAsync(new Tencentcloud.Ckafka.GetGroupOffsetsArgs
        ///         {
        ///             Group = "xxxxxx",
        ///             InstanceId = "ckafka-xxxxxx",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetGroupOffsetsResult> InvokeAsync(GetGroupOffsetsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGroupOffsetsResult>("tencentcloud:Ckafka/getGroupOffsets:getGroupOffsets", args ?? new GetGroupOffsetsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of ckafka group_offsets
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var groupOffsets = Output.Create(Tencentcloud.Ckafka.GetGroupOffsets.InvokeAsync(new Tencentcloud.Ckafka.GetGroupOffsetsArgs
        ///         {
        ///             Group = "xxxxxx",
        ///             InstanceId = "ckafka-xxxxxx",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetGroupOffsetsResult> Invoke(GetGroupOffsetsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetGroupOffsetsResult>("tencentcloud:Ckafka/getGroupOffsets:getGroupOffsets", args ?? new GetGroupOffsetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupOffsetsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Kafka consumer group name.
        /// </summary>
        [Input("group", required: true)]
        public string Group { get; set; } = null!;

        /// <summary>
        /// InstanceId.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// fuzzy match topicName.
        /// </summary>
        [Input("searchWord")]
        public string? SearchWord { get; set; }

        [Input("topics")]
        private List<string>? _topics;

        /// <summary>
        /// An array of topic names subscribed by the group, if there is no such array, it means all topic information under the specified group.
        /// </summary>
        public List<string> Topics
        {
            get => _topics ?? (_topics = new List<string>());
            set => _topics = value;
        }

        public GetGroupOffsetsArgs()
        {
        }
    }

    public sealed class GetGroupOffsetsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Kafka consumer group name.
        /// </summary>
        [Input("group", required: true)]
        public Input<string> Group { get; set; } = null!;

        /// <summary>
        /// InstanceId.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// fuzzy match topicName.
        /// </summary>
        [Input("searchWord")]
        public Input<string>? SearchWord { get; set; }

        [Input("topics")]
        private InputList<string>? _topics;

        /// <summary>
        /// An array of topic names subscribed by the group, if there is no such array, it means all topic information under the specified group.
        /// </summary>
        public InputList<string> Topics
        {
            get => _topics ?? (_topics = new InputList<string>());
            set => _topics = value;
        }

        public GetGroupOffsetsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetGroupOffsetsResult
    {
        public readonly string Group;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        public readonly string? ResultOutputFile;
        public readonly string? SearchWord;
        /// <summary>
        /// The topic array, where each element is a json object.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGroupOffsetsTopicListResult> TopicLists;
        public readonly ImmutableArray<string> Topics;

        [OutputConstructor]
        private GetGroupOffsetsResult(
            string group,

            string id,

            string instanceId,

            string? resultOutputFile,

            string? searchWord,

            ImmutableArray<Outputs.GetGroupOffsetsTopicListResult> topicLists,

            ImmutableArray<string> topics)
        {
            Group = group;
            Id = id;
            InstanceId = instanceId;
            ResultOutputFile = resultOutputFile;
            SearchWord = searchWord;
            TopicLists = topicLists;
            Topics = topics;
        }
    }
}
