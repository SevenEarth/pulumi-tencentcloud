// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Ckafka.Outputs
{

    [OutputType]
    public sealed class GetDatahubTaskTaskListSourceResourceEsParamDropDlqKafkaParamResult
    {
        /// <summary>
        /// Whether to perform compression when writing a topic, if it is not enabled, fill in none, if it is enabled, you can choose one of gzip, snappy, lz4 to fill in.
        /// </summary>
        public readonly string CompressionType;
        /// <summary>
        /// ConnectorSyncType.
        /// </summary>
        public readonly string ConnectorSyncType;
        /// <summary>
        /// enable dead letter queue.
        /// </summary>
        public readonly bool EnableToleration;
        /// <summary>
        /// KeepPartition.
        /// </summary>
        public readonly bool KeepPartition;
        /// <summary>
        /// 1 source topic message is amplified into msg Multiple and written to the target topic (this parameter is currently only applicable to ckafka flowing into ckafka).
        /// </summary>
        public readonly int MsgMultiple;
        /// <summary>
        /// Offset type, initial position earliest, latest position latest, time point position timestamp.
        /// </summary>
        public readonly string OffsetType;
        /// <summary>
        /// the partition num of the topic.
        /// </summary>
        public readonly int PartitionNum;
        /// <summary>
        /// Qps(query per seconds) limit.
        /// </summary>
        public readonly int QpsLimit;
        /// <summary>
        /// Resource.
        /// </summary>
        public readonly string Resource;
        /// <summary>
        /// instance name.
        /// </summary>
        public readonly string ResourceName;
        /// <summary>
        /// Whether it is a self-built cluster.
        /// </summary>
        public readonly bool SelfBuilt;
        /// <summary>
        /// It must be passed when the Offset type is timestamp, and the time stamp is passed, accurate to the second.
        /// </summary>
        public readonly int StartTime;
        /// <summary>
        /// maps of table to topic, required when multi topic is selected.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatahubTaskTaskListSourceResourceEsParamDropDlqKafkaParamTableMappingResult> TableMappings;
        /// <summary>
        /// Topic name, use `,` when more than 1 topic.
        /// </summary>
        public readonly string Topic;
        /// <summary>
        /// Topic TopicId.
        /// </summary>
        public readonly string TopicId;
        /// <summary>
        /// whether the used topic need to be automatically created (currently only supports SOURCE inflow tasks).
        /// </summary>
        public readonly bool UseAutoCreateTopic;
        /// <summary>
        /// whether to use multi table.
        /// </summary>
        public readonly bool UseTableMapping;
        /// <summary>
        /// Zone ID.
        /// </summary>
        public readonly int ZoneId;

        [OutputConstructor]
        private GetDatahubTaskTaskListSourceResourceEsParamDropDlqKafkaParamResult(
            string compressionType,

            string connectorSyncType,

            bool enableToleration,

            bool keepPartition,

            int msgMultiple,

            string offsetType,

            int partitionNum,

            int qpsLimit,

            string resource,

            string resourceName,

            bool selfBuilt,

            int startTime,

            ImmutableArray<Outputs.GetDatahubTaskTaskListSourceResourceEsParamDropDlqKafkaParamTableMappingResult> tableMappings,

            string topic,

            string topicId,

            bool useAutoCreateTopic,

            bool useTableMapping,

            int zoneId)
        {
            CompressionType = compressionType;
            ConnectorSyncType = connectorSyncType;
            EnableToleration = enableToleration;
            KeepPartition = keepPartition;
            MsgMultiple = msgMultiple;
            OffsetType = offsetType;
            PartitionNum = partitionNum;
            QpsLimit = qpsLimit;
            Resource = resource;
            ResourceName = resourceName;
            SelfBuilt = selfBuilt;
            StartTime = startTime;
            TableMappings = tableMappings;
            Topic = topic;
            TopicId = topicId;
            UseAutoCreateTopic = useAutoCreateTopic;
            UseTableMapping = useTableMapping;
            ZoneId = zoneId;
        }
    }
}
