// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Ckafka.Outputs
{

    [OutputType]
    public sealed class GetDatahubTaskTaskListTargetResourcePostgreSqlParamResult
    {
        /// <summary>
        /// Upstream data format (JSON|Debezium), required when the database synchronization mode matches the default field.
        /// </summary>
        public readonly string DataFormat;
        /// <summary>
        /// INSERT means insert using Insert mode, UPSERT means insert using Upsert mode.
        /// </summary>
        public readonly string DataTargetInsertMode;
        /// <summary>
        /// When DataInsertMode=UPSERT, pass in the primary key that the current upsert depends on.
        /// </summary>
        public readonly string DataTargetPrimaryKeyField;
        /// <summary>
        /// Mapping relationship between tables and messages.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatahubTaskTaskListTargetResourcePostgreSqlParamDataTargetRecordMappingResult> DataTargetRecordMappings;
        /// <summary>
        /// SQLServer database name.
        /// </summary>
        public readonly string Database;
        /// <summary>
        /// Whether to discard messages that fail to parse, the default is true.
        /// </summary>
        public readonly bool DropInvalidMessage;
        /// <summary>
        /// Whether the input table is a regular expression.
        /// </summary>
        public readonly bool IsTableRegular;
        /// <summary>
        /// Format  library1.table1:field 1,field2;library2.table2:field2, between tables; (semicolon) separated, between fields, (comma) separated. The table that is not specified defaults to the primary key of the table.
        /// </summary>
        public readonly string KeyColumns;
        /// <summary>
        /// (decoderbufs/pgoutput), default decoderbufs.
        /// </summary>
        public readonly string PluginName;
        /// <summary>
        /// If the value is true, the message will carry the schema corresponding to the message structure, if the value is false, it will not carry.
        /// </summary>
        public readonly bool RecordWithSchema;
        /// <summary>
        /// Resource.
        /// </summary>
        public readonly string Resource;
        /// <summary>
        /// schema_only|initial default initial.
        /// </summary>
        public readonly string SnapshotMode;
        /// <summary>
        /// SQLServer table, is the non-system table in all the monitored databases, you can use, to monitor multiple data tables, but the data table needs to be filled in the format of data database name.data table name.
        /// </summary>
        public readonly string Table;

        [OutputConstructor]
        private GetDatahubTaskTaskListTargetResourcePostgreSqlParamResult(
            string dataFormat,

            string dataTargetInsertMode,

            string dataTargetPrimaryKeyField,

            ImmutableArray<Outputs.GetDatahubTaskTaskListTargetResourcePostgreSqlParamDataTargetRecordMappingResult> dataTargetRecordMappings,

            string database,

            bool dropInvalidMessage,

            bool isTableRegular,

            string keyColumns,

            string pluginName,

            bool recordWithSchema,

            string resource,

            string snapshotMode,

            string table)
        {
            DataFormat = dataFormat;
            DataTargetInsertMode = dataTargetInsertMode;
            DataTargetPrimaryKeyField = dataTargetPrimaryKeyField;
            DataTargetRecordMappings = dataTargetRecordMappings;
            Database = database;
            DropInvalidMessage = dropInvalidMessage;
            IsTableRegular = isTableRegular;
            KeyColumns = keyColumns;
            PluginName = pluginName;
            RecordWithSchema = recordWithSchema;
            Resource = resource;
            SnapshotMode = snapshotMode;
            Table = table;
        }
    }
}
