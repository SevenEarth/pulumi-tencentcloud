// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Cat
{
    public static class GetMetricData
    {
        /// <summary>
        /// Use this data source to query detailed information of cat metric_data
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var metricData = Tencentcloud.Cat.GetMetricData.Invoke(new()
        ///     {
        ///         AnalyzeTaskType = "AnalyzeTaskType_Network",
        ///         Field = "avg(\"ping_time\")",
        ///         Filters = new[]
        ///         {
        ///             "\"host\" = 'www.qq.com'",
        ///             "time &gt;= now()-1h",
        ///         },
        ///         MetricType = "gauge",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetMetricDataResult> InvokeAsync(GetMetricDataArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetricDataResult>("tencentcloud:Cat/getMetricData:getMetricData", args ?? new GetMetricDataArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of cat metric_data
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var metricData = Tencentcloud.Cat.GetMetricData.Invoke(new()
        ///     {
        ///         AnalyzeTaskType = "AnalyzeTaskType_Network",
        ///         Field = "avg(\"ping_time\")",
        ///         Filters = new[]
        ///         {
        ///             "\"host\" = 'www.qq.com'",
        ///             "time &gt;= now()-1h",
        ///         },
        ///         MetricType = "gauge",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetMetricDataResult> Invoke(GetMetricDataInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetricDataResult>("tencentcloud:Cat/getMetricData:getMetricData", args ?? new GetMetricDataInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetricDataArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Analysis of task type, supported types: `AnalyzeTaskType_Network`: network quality, `AnalyzeTaskType_Browse`: page performance, `AnalyzeTaskType_Transport`: port performance, `AnalyzeTaskType_UploadDownload`: file transport, `AnalyzeTaskType_MediaStream`: audiovisual experience.
        /// </summary>
        [Input("analyzeTaskType", required: true)]
        public string AnalyzeTaskType { get; set; } = null!;

        /// <summary>
        /// Detailed fields of metrics, specified metrics can be passed or aggregate metrics, such as avg(ping_time) means entire delay.
        /// </summary>
        [Input("field", required: true)]
        public string Field { get; set; } = null!;

        /// <summary>
        /// Filter conditions can be passed as a single filter or multiple parameters concatenated together.
        /// </summary>
        [Input("filter")]
        public string? Filter { get; set; }

        [Input("filters", required: true)]
        private List<string>? _filters;

        /// <summary>
        /// Multiple condition filtering, supports combining multiple filtering conditions for query.
        /// </summary>
        public List<string> Filters
        {
            get => _filters ?? (_filters = new List<string>());
            set => _filters = value;
        }

        /// <summary>
        /// Aggregation time, such as 1m, 1d, 30d, and so on.
        /// </summary>
        [Input("groupBy")]
        public string? GroupBy { get; set; }

        /// <summary>
        /// Metric type, metrics queries are passed with gauge by default.
        /// </summary>
        [Input("metricType", required: true)]
        public string MetricType { get; set; } = null!;

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetMetricDataArgs()
        {
        }
        public static new GetMetricDataArgs Empty => new GetMetricDataArgs();
    }

    public sealed class GetMetricDataInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Analysis of task type, supported types: `AnalyzeTaskType_Network`: network quality, `AnalyzeTaskType_Browse`: page performance, `AnalyzeTaskType_Transport`: port performance, `AnalyzeTaskType_UploadDownload`: file transport, `AnalyzeTaskType_MediaStream`: audiovisual experience.
        /// </summary>
        [Input("analyzeTaskType", required: true)]
        public Input<string> AnalyzeTaskType { get; set; } = null!;

        /// <summary>
        /// Detailed fields of metrics, specified metrics can be passed or aggregate metrics, such as avg(ping_time) means entire delay.
        /// </summary>
        [Input("field", required: true)]
        public Input<string> Field { get; set; } = null!;

        /// <summary>
        /// Filter conditions can be passed as a single filter or multiple parameters concatenated together.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        [Input("filters", required: true)]
        private InputList<string>? _filters;

        /// <summary>
        /// Multiple condition filtering, supports combining multiple filtering conditions for query.
        /// </summary>
        public InputList<string> Filters
        {
            get => _filters ?? (_filters = new InputList<string>());
            set => _filters = value;
        }

        /// <summary>
        /// Aggregation time, such as 1m, 1d, 30d, and so on.
        /// </summary>
        [Input("groupBy")]
        public Input<string>? GroupBy { get; set; }

        /// <summary>
        /// Metric type, metrics queries are passed with gauge by default.
        /// </summary>
        [Input("metricType", required: true)]
        public Input<string> MetricType { get; set; } = null!;

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetMetricDataInvokeArgs()
        {
        }
        public static new GetMetricDataInvokeArgs Empty => new GetMetricDataInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetricDataResult
    {
        public readonly string AnalyzeTaskType;
        public readonly string Field;
        public readonly string? Filter;
        public readonly ImmutableArray<string> Filters;
        public readonly string? GroupBy;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Return JSON string.
        /// </summary>
        public readonly string MetricSet;
        public readonly string MetricType;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetMetricDataResult(
            string analyzeTaskType,

            string field,

            string? filter,

            ImmutableArray<string> filters,

            string? groupBy,

            string id,

            string metricSet,

            string metricType,

            string? resultOutputFile)
        {
            AnalyzeTaskType = analyzeTaskType;
            Field = field;
            Filter = filter;
            Filters = filters;
            GroupBy = groupBy;
            Id = id;
            MetricSet = metricSet;
            MetricType = metricType;
            ResultOutputFile = resultOutputFile;
        }
    }
}
