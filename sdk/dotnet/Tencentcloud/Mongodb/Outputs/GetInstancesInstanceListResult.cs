// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Mongodb.Outputs
{

    [OutputType]
    public sealed class GetInstancesInstanceListResult
    {
        /// <summary>
        /// Auto renew flag.
        /// </summary>
        public readonly int AutoRenewFlag;
        /// <summary>
        /// The available zone of the Mongodb.
        /// </summary>
        public readonly string AvailableZone;
        /// <summary>
        /// The charge type of instance.
        /// </summary>
        public readonly string ChargeType;
        /// <summary>
        /// Type of Mongodb cluster, and available values include replica set cluster(expressed with `REPLSET`), sharding cluster(expressed with `SHARD`).
        /// </summary>
        public readonly string ClusterType;
        /// <summary>
        /// Number of cpu's core.
        /// </summary>
        public readonly int Cpu;
        /// <summary>
        /// Creation time of the Mongodb instance.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Version of the Mongodb engine.
        /// </summary>
        public readonly string EngineVersion;
        /// <summary>
        /// ID of the Mongodb instance to be queried.
        /// </summary>
        public readonly string InstanceId;
        /// <summary>
        /// Name of the Mongodb instance.
        /// </summary>
        public readonly string InstanceName;
        /// <summary>
        /// Type of Mongodb instance.
        /// </summary>
        public readonly string MachineType;
        /// <summary>
        /// Memory size.
        /// </summary>
        public readonly int Memory;
        /// <summary>
        /// ID of the project which the instance belongs.
        /// </summary>
        public readonly int ProjectId;
        /// <summary>
        /// Number of sharding.
        /// </summary>
        public readonly int ShardQuantity;
        /// <summary>
        /// Status of the Mongodb, and available values include pending initialization(expressed with 0),  processing(expressed with 1), running(expressed with 2) and expired(expressed with -2).
        /// </summary>
        public readonly int Status;
        /// <summary>
        /// ID of the subnet.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// Tags of the Mongodb instance to be queried.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Tags;
        /// <summary>
        /// IP of the Mongodb instance.
        /// </summary>
        public readonly string Vip;
        /// <summary>
        /// Disk size.
        /// </summary>
        public readonly int Volume;
        /// <summary>
        /// ID of the VPC.
        /// </summary>
        public readonly string VpcId;
        /// <summary>
        /// IP port of the Mongodb instance.
        /// </summary>
        public readonly int Vport;

        [OutputConstructor]
        private GetInstancesInstanceListResult(
            int autoRenewFlag,

            string availableZone,

            string chargeType,

            string clusterType,

            int cpu,

            string createTime,

            string engineVersion,

            string instanceId,

            string instanceName,

            string machineType,

            int memory,

            int projectId,

            int shardQuantity,

            int status,

            string subnetId,

            ImmutableDictionary<string, object> tags,

            string vip,

            int volume,

            string vpcId,

            int vport)
        {
            AutoRenewFlag = autoRenewFlag;
            AvailableZone = availableZone;
            ChargeType = chargeType;
            ClusterType = clusterType;
            Cpu = cpu;
            CreateTime = createTime;
            EngineVersion = engineVersion;
            InstanceId = instanceId;
            InstanceName = instanceName;
            MachineType = machineType;
            Memory = memory;
            ProjectId = projectId;
            ShardQuantity = shardQuantity;
            Status = status;
            SubnetId = subnetId;
            Tags = tags;
            Vip = vip;
            Volume = volume;
            VpcId = vpcId;
            Vport = vport;
        }
    }
}
