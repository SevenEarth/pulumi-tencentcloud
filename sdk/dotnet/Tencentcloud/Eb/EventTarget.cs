// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Eb
{
    /// <summary>
    /// Provides a resource to create a eb event_target
    /// 
    /// ## Example Usage
    /// 
    /// ### Create an event target of type scf
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var zone = config.Get("zone") ?? "ap-guangzhou";
    ///     var @namespace = config.Get("namespace") ?? "default";
    ///     var function = config.Get("function") ?? "keep-1676351130";
    ///     var functionVersion = config.Get("functionVersion") ?? "$LATEST";
    ///     var fooUsers = Tencentcloud.Cam.GetUsers.Invoke();
    /// 
    ///     var fooEventBus = new Tencentcloud.Eb.EventBus("fooEventBus", new()
    ///     {
    ///         EventBusName = "tf-event_bus",
    ///         Description = "event bus desc",
    ///         EnableStore = false,
    ///         SaveDays = 1,
    ///         Tags = 
    ///         {
    ///             { "createdBy", "terraform" },
    ///         },
    ///     });
    /// 
    ///     var fooEventRule = new Tencentcloud.Eb.EventRule("fooEventRule", new()
    ///     {
    ///         EventBusId = fooEventBus.Id,
    ///         RuleName = "tf-event_rule",
    ///         Description = "event rule desc",
    ///         Enable = true,
    ///         EventPattern = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["source"] = "apigw.cloud.tencent",
    ///             ["type"] = new[]
    ///             {
    ///                 "connector:apigw",
    ///             },
    ///         }),
    ///         Tags = 
    ///         {
    ///             { "createdBy", "terraform" },
    ///         },
    ///     });
    /// 
    ///     var scfTarget = new Tencentcloud.Eb.EventTarget("scfTarget", new()
    ///     {
    ///         EventBusId = fooEventBus.Id,
    ///         RuleId = fooEventRule.RuleId,
    ///         Type = "scf",
    ///         TargetDescription = new Tencentcloud.Eb.Inputs.EventTargetTargetDescriptionArgs
    ///         {
    ///             ResourceDescription = $"qcs::scf:{zone}:uin/{fooUsers.Apply(getUsersResult =&gt; getUsersResult.UserLists[0]?.Uin)}:namespace/{@namespace}/function/{function}/{functionVersion}",
    ///             ScfParams = new Tencentcloud.Eb.Inputs.EventTargetTargetDescriptionScfParamsArgs
    ///             {
    ///                 BatchEventCount = 1,
    ///                 BatchTimeout = 1,
    ///                 EnableBatchDelivery = true,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Create an event target of type ckafka
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var ckafka = config.Get("ckafka") ?? "ckafka-qzoeaqx8";
    ///     var ckafkaTarget = new Tencentcloud.Eb.EventTarget("ckafkaTarget", new()
    ///     {
    ///         EventBusId = tencentcloud_eb_event_bus.Foo.Id,
    ///         RuleId = tencentcloud_eb_event_rule.Foo.Rule_id,
    ///         Type = "ckafka",
    ///         TargetDescription = new Tencentcloud.Eb.Inputs.EventTargetTargetDescriptionArgs
    ///         {
    ///             ResourceDescription = $"qcs::scf:{@var.Zone}:uin/{data.Tencentcloud_cam_users.Foo.User_list[0].Uin}:ckafkaId/uin/{data.Tencentcloud_cam_users.Foo.User_list[0].Uin}/{ckafka}",
    ///             CkafkaTargetParams = new Tencentcloud.Eb.Inputs.EventTargetTargetDescriptionCkafkaTargetParamsArgs
    ///             {
    ///                 TopicName = "dasdasd",
    ///                 RetryPolicy = new Tencentcloud.Eb.Inputs.EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs
    ///                 {
    ///                     MaxRetryAttempts = 360,
    ///                     RetryInterval = 60,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// eb event_target can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import tencentcloud:Eb/eventTarget:EventTarget event_target event_target_id
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Eb/eventTarget:EventTarget")]
    public partial class EventTarget : global::Pulumi.CustomResource
    {
        /// <summary>
        /// event bus id.
        /// </summary>
        [Output("eventBusId")]
        public Output<string> EventBusId { get; private set; } = null!;

        /// <summary>
        /// event rule id.
        /// </summary>
        [Output("ruleId")]
        public Output<string> RuleId { get; private set; } = null!;

        /// <summary>
        /// target description.
        /// </summary>
        [Output("targetDescription")]
        public Output<Outputs.EventTargetTargetDescription> TargetDescription { get; private set; } = null!;

        /// <summary>
        /// target type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a EventTarget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventTarget(string name, EventTargetArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Eb/eventTarget:EventTarget", name, args ?? new EventTargetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventTarget(string name, Input<string> id, EventTargetState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Eb/eventTarget:EventTarget", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventTarget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventTarget Get(string name, Input<string> id, EventTargetState? state = null, CustomResourceOptions? options = null)
        {
            return new EventTarget(name, id, state, options);
        }
    }

    public sealed class EventTargetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// event bus id.
        /// </summary>
        [Input("eventBusId", required: true)]
        public Input<string> EventBusId { get; set; } = null!;

        /// <summary>
        /// event rule id.
        /// </summary>
        [Input("ruleId", required: true)]
        public Input<string> RuleId { get; set; } = null!;

        /// <summary>
        /// target description.
        /// </summary>
        [Input("targetDescription", required: true)]
        public Input<Inputs.EventTargetTargetDescriptionArgs> TargetDescription { get; set; } = null!;

        /// <summary>
        /// target type.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public EventTargetArgs()
        {
        }
        public static new EventTargetArgs Empty => new EventTargetArgs();
    }

    public sealed class EventTargetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// event bus id.
        /// </summary>
        [Input("eventBusId")]
        public Input<string>? EventBusId { get; set; }

        /// <summary>
        /// event rule id.
        /// </summary>
        [Input("ruleId")]
        public Input<string>? RuleId { get; set; }

        /// <summary>
        /// target description.
        /// </summary>
        [Input("targetDescription")]
        public Input<Inputs.EventTargetTargetDescriptionGetArgs>? TargetDescription { get; set; }

        /// <summary>
        /// target type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public EventTargetState()
        {
        }
        public static new EventTargetState Empty => new EventTargetState();
    }
}
