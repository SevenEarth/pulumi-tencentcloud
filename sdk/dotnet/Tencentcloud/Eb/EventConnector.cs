// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Eb
{
    /// <summary>
    /// Provides a resource to create a eb event_connector
    /// 
    /// &gt; **NOTE:** When the type is `apigw`, the import function is not supported.
    /// 
    /// ## Example Usage
    /// ### Create ckafka event connector
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooInfo = Output.Create(Tencentcloud.User.GetInfo.InvokeAsync());
    ///         var fooEventBus = new Tencentcloud.Eb.EventBus("fooEventBus", new Tencentcloud.Eb.EventBusArgs
    ///         {
    ///             EventBusName = "tf-event_bus",
    ///             Description = "event bus desc",
    ///             EnableStore = false,
    ///             SaveDays = 1,
    ///             Tags = 
    ///             {
    ///                 { "createdBy", "terraform" },
    ///             },
    ///         });
    ///         var kafkaInstance = new Tencentcloud.Ckafka.Instance("kafkaInstance", new Tencentcloud.Ckafka.InstanceArgs
    ///         {
    ///             InstanceName = "ckafka-instance-maz-tf-test",
    ///             ZoneId = 100003,
    ///             MultiZoneFlag = true,
    ///             ZoneIds = 
    ///             {
    ///                 100003,
    ///                 100006,
    ///             },
    ///             Period = 1,
    ///             VpcId = @var.Vpc_id,
    ///             SubnetId = @var.Subnet_id,
    ///             MsgRetentionTime = 1300,
    ///             RenewFlag = 0,
    ///             KafkaVersion = "1.1.1",
    ///             DiskSize = 500,
    ///             DiskType = "CLOUD_BASIC",
    ///             Config = new Tencentcloud.Ckafka.Inputs.InstanceConfigArgs
    ///             {
    ///                 AutoCreateTopicEnable = true,
    ///                 DefaultNumPartitions = 3,
    ///                 DefaultReplicationFactor = 3,
    ///             },
    ///             DynamicRetentionConfig = new Tencentcloud.Ckafka.Inputs.InstanceDynamicRetentionConfigArgs
    ///             {
    ///                 Enable = 1,
    ///             },
    ///         });
    ///         var ckafkaId = kafkaInstance.Id;
    ///         var uin = fooInfo.Apply(fooInfo =&gt; fooInfo.OwnerUin);
    ///         var eventConnector = new Tencentcloud.Eb.EventConnector("eventConnector", new Tencentcloud.Eb.EventConnectorArgs
    ///         {
    ///             EventBusId = fooEventBus.Id,
    ///             ConnectionName = "tf-event-connector",
    ///             Description = "event connector desc1",
    ///             Enable = true,
    ///             Type = "ckafka",
    ///             ConnectionDescription = new Tencentcloud.Eb.Inputs.EventConnectorConnectionDescriptionArgs
    ///             {
    ///                 ResourceDescription = Output.Tuple(uin, uin, ckafkaId).Apply(values =&gt;
    ///                 {
    ///                     var uin = values.Item1;
    ///                     var uin1 = values.Item2;
    ///                     var ckafkaId = values.Item3;
    ///                     return $"qcs::ckafka:ap-guangzhou:uin/{uin}:ckafkaId/uin/{uin1}/{ckafkaId}";
    ///                 }),
    ///                 CkafkaParams = new Tencentcloud.Eb.Inputs.EventConnectorConnectionDescriptionCkafkaParamsArgs
    ///                 {
    ///                     Offset = "latest",
    ///                     TopicName = "dasdasd",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Create api_gateway event connector
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooInfo = Output.Create(Tencentcloud.User.GetInfo.InvokeAsync());
    ///         var fooEventBus = new Tencentcloud.Eb.EventBus("fooEventBus", new Tencentcloud.Eb.EventBusArgs
    ///         {
    ///             EventBusName = "tf-event_bus",
    ///             Description = "event bus desc",
    ///             EnableStore = false,
    ///             SaveDays = 1,
    ///             Tags = 
    ///             {
    ///                 { "createdBy", "terraform" },
    ///             },
    ///         });
    ///         var service = new Tencentcloud.ApiGateway.Service("service", new Tencentcloud.ApiGateway.ServiceArgs
    ///         {
    ///             ServiceName = "tf-eb-service",
    ///             Protocol = "http&amp;https",
    ///             ServiceDesc = "your nice service",
    ///             NetTypes = 
    ///             {
    ///                 "INNER",
    ///                 "OUTER",
    ///             },
    ///             IpVersion = "IPv4",
    ///         });
    ///         var uin = fooInfo.Apply(fooInfo =&gt; fooInfo.OwnerUin);
    ///         var serviceId = service.Id;
    ///         var eventConnector = new Tencentcloud.Eb.EventConnector("eventConnector", new Tencentcloud.Eb.EventConnectorArgs
    ///         {
    ///             EventBusId = fooEventBus.Id,
    ///             ConnectionName = "tf-event-connector",
    ///             Description = "event connector desc1",
    ///             Enable = false,
    ///             Type = "apigw",
    ///             ConnectionDescription = new Tencentcloud.Eb.Inputs.EventConnectorConnectionDescriptionArgs
    ///             {
    ///                 ResourceDescription = Output.Tuple(uin, serviceId).Apply(values =&gt;
    ///                 {
    ///                     var uin = values.Item1;
    ///                     var serviceId = values.Item2;
    ///                     return $"qcs::apigw:ap-guangzhou:uin/{uin}:serviceid/{serviceId}";
    ///                 }),
    ///                 ApiGwParams = new Tencentcloud.Eb.Inputs.EventConnectorConnectionDescriptionApiGwParamsArgs
    ///                 {
    ///                     Protocol = "HTTP",
    ///                     Method = "GET",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// eb event_connector can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import tencentcloud:Eb/eventConnector:EventConnector event_connector eventBusId#connectionId
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Eb/eventConnector:EventConnector")]
    public partial class EventConnector : Pulumi.CustomResource
    {
        /// <summary>
        /// Connector description.
        /// </summary>
        [Output("connectionDescription")]
        public Output<Outputs.EventConnectorConnectionDescription> ConnectionDescription { get; private set; } = null!;

        /// <summary>
        /// connector name.
        /// </summary>
        [Output("connectionName")]
        public Output<string> ConnectionName { get; private set; } = null!;

        /// <summary>
        /// description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// switch.
        /// </summary>
        [Output("enable")]
        public Output<bool?> Enable { get; private set; } = null!;

        /// <summary>
        /// event bus Id.
        /// </summary>
        [Output("eventBusId")]
        public Output<string> EventBusId { get; private set; } = null!;

        /// <summary>
        /// type.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a EventConnector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventConnector(string name, EventConnectorArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Eb/eventConnector:EventConnector", name, args ?? new EventConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventConnector(string name, Input<string> id, EventConnectorState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Eb/eventConnector:EventConnector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventConnector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventConnector Get(string name, Input<string> id, EventConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new EventConnector(name, id, state, options);
        }
    }

    public sealed class EventConnectorArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Connector description.
        /// </summary>
        [Input("connectionDescription", required: true)]
        public Input<Inputs.EventConnectorConnectionDescriptionArgs> ConnectionDescription { get; set; } = null!;

        /// <summary>
        /// connector name.
        /// </summary>
        [Input("connectionName", required: true)]
        public Input<string> ConnectionName { get; set; } = null!;

        /// <summary>
        /// description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// switch.
        /// </summary>
        [Input("enable")]
        public Input<bool>? Enable { get; set; }

        /// <summary>
        /// event bus Id.
        /// </summary>
        [Input("eventBusId", required: true)]
        public Input<string> EventBusId { get; set; } = null!;

        /// <summary>
        /// type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public EventConnectorArgs()
        {
        }
    }

    public sealed class EventConnectorState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Connector description.
        /// </summary>
        [Input("connectionDescription")]
        public Input<Inputs.EventConnectorConnectionDescriptionGetArgs>? ConnectionDescription { get; set; }

        /// <summary>
        /// connector name.
        /// </summary>
        [Input("connectionName")]
        public Input<string>? ConnectionName { get; set; }

        /// <summary>
        /// description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// switch.
        /// </summary>
        [Input("enable")]
        public Input<bool>? Enable { get; set; }

        /// <summary>
        /// event bus Id.
        /// </summary>
        [Input("eventBusId")]
        public Input<string>? EventBusId { get; set; }

        /// <summary>
        /// type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public EventConnectorState()
        {
        }
    }
}
