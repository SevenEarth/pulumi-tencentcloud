// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Monitor
{
    /// <summary>
    /// Provides a resource to create a tmp tke template attachment
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var config = new Config();
    ///         var defaultInstanceType = config.Get("defaultInstanceType") ?? "SA1.MEDIUM2";
    ///         var availabilityZoneFirst = config.Get("availabilityZoneFirst") ?? "ap-guangzhou-3";
    ///         var availabilityZoneSecond = config.Get("availabilityZoneSecond") ?? "ap-guangzhou-4";
    ///         var exampleClusterCidr = config.Get("exampleClusterCidr") ?? "10.31.0.0/16";
    ///         var vpcOne = Output.Create(Tencentcloud.Vpc.GetSubnets.InvokeAsync(new Tencentcloud.Vpc.GetSubnetsArgs
    ///         {
    ///             IsDefault = true,
    ///             AvailabilityZone = availabilityZoneFirst,
    ///         }));
    ///         var firstVpcId = vpcOne.Apply(vpcOne =&gt; vpcOne.InstanceLists?[0]?.VpcId);
    ///         var firstSubnetId = vpcOne.Apply(vpcOne =&gt; vpcOne.InstanceLists?[0]?.SubnetId);
    ///         var vpcTwo = Output.Create(Tencentcloud.Vpc.GetSubnets.InvokeAsync(new Tencentcloud.Vpc.GetSubnetsArgs
    ///         {
    ///             IsDefault = true,
    ///             AvailabilityZone = availabilityZoneSecond,
    ///         }));
    ///         var secondVpcId = vpcTwo.Apply(vpcTwo =&gt; vpcTwo.InstanceLists?[0]?.VpcId);
    ///         var secondSubnetId = vpcTwo.Apply(vpcTwo =&gt; vpcTwo.InstanceLists?[0]?.SubnetId);
    ///         var sg = new Tencentcloud.Security.Group("sg", new Tencentcloud.Security.GroupArgs
    ///         {
    ///         });
    ///         var sgId = sg.Id;
    ///         var @default = Output.Create(Tencentcloud.Images.GetInstance.InvokeAsync(new Tencentcloud.Images.GetInstanceArgs
    ///         {
    ///             ImageTypes = 
    ///             {
    ///                 "PUBLIC_IMAGE",
    ///             },
    ///             ImageNameRegex = "Final",
    ///         }));
    ///         var imageId = @default.Apply(@default =&gt; @default.ImageId);
    ///         var sgRule = new Tencentcloud.Security.GroupLiteRule("sgRule", new Tencentcloud.Security.GroupLiteRuleArgs
    ///         {
    ///             SecurityGroupId = sg.Id,
    ///             Ingresses = 
    ///             {
    ///                 "ACCEPT#10.0.0.0/16#ALL#ALL",
    ///                 "ACCEPT#172.16.0.0/22#ALL#ALL",
    ///                 "DROP#0.0.0.0/0#ALL#ALL",
    ///             },
    ///             Egresses = 
    ///             {
    ///                 "ACCEPT#172.16.0.0/22#ALL#ALL",
    ///             },
    ///         });
    ///         var example = new Tencentcloud.Kubernetes.Cluster("example", new Tencentcloud.Kubernetes.ClusterArgs
    ///         {
    ///             VpcId = firstVpcId,
    ///             ClusterCidr = exampleClusterCidr,
    ///             ClusterMaxPodNum = 32,
    ///             ClusterName = "tf_example_cluster",
    ///             ClusterDesc = "example for tke cluster",
    ///             ClusterMaxServiceNum = 32,
    ///             ClusterInternet = false,
    ///             ClusterInternetSecurityGroup = sgId,
    ///             ClusterVersion = "1.22.5",
    ///             ClusterDeployType = "MANAGED_CLUSTER",
    ///             WorkerConfigs = 
    ///             {
    ///                 new Tencentcloud.Kubernetes.Inputs.ClusterWorkerConfigArgs
    ///                 {
    ///                     Count = 1,
    ///                     AvailabilityZone = availabilityZoneFirst,
    ///                     InstanceType = defaultInstanceType,
    ///                     SystemDiskType = "CLOUD_SSD",
    ///                     SystemDiskSize = 60,
    ///                     InternetChargeType = "TRAFFIC_POSTPAID_BY_HOUR",
    ///                     InternetMaxBandwidthOut = 100,
    ///                     PublicIpAssigned = true,
    ///                     SubnetId = firstSubnetId,
    ///                     ImgId = imageId,
    ///                     DataDisks = 
    ///                     {
    ///                         new Tencentcloud.Kubernetes.Inputs.ClusterWorkerConfigDataDiskArgs
    ///                         {
    ///                             DiskType = "CLOUD_PREMIUM",
    ///                             DiskSize = 50,
    ///                         },
    ///                     },
    ///                     EnhancedSecurityService = false,
    ///                     EnhancedMonitorService = false,
    ///                     UserData = "dGVzdA==",
    ///                     Password = "ZZXXccvv1212",
    ///                 },
    ///                 new Tencentcloud.Kubernetes.Inputs.ClusterWorkerConfigArgs
    ///                 {
    ///                     Count = 1,
    ///                     AvailabilityZone = availabilityZoneSecond,
    ///                     InstanceType = defaultInstanceType,
    ///                     SystemDiskType = "CLOUD_SSD",
    ///                     SystemDiskSize = 60,
    ///                     InternetChargeType = "TRAFFIC_POSTPAID_BY_HOUR",
    ///                     InternetMaxBandwidthOut = 100,
    ///                     PublicIpAssigned = true,
    ///                     SubnetId = secondSubnetId,
    ///                     DataDisks = 
    ///                     {
    ///                         new Tencentcloud.Kubernetes.Inputs.ClusterWorkerConfigDataDiskArgs
    ///                         {
    ///                             DiskType = "CLOUD_PREMIUM",
    ///                             DiskSize = 50,
    ///                         },
    ///                     },
    ///                     EnhancedSecurityService = false,
    ///                     EnhancedMonitorService = false,
    ///                     UserData = "dGVzdA==",
    ///                     CamRoleName = "CVM_QcsRole",
    ///                     Password = "ZZXXccvv1212",
    ///                 },
    ///             },
    ///             Labels = 
    ///             {
    ///                 { "test1", "test1" },
    ///                 { "test2", "test2" },
    ///             },
    ///         });
    ///         var zone = config.Get("zone") ?? "ap-guangzhou";
    ///         var clusterType = config.Get("clusterType") ?? "tke";
    ///         var fooTmpInstance = new Tencentcloud.Monitor.TmpInstance("fooTmpInstance", new Tencentcloud.Monitor.TmpInstanceArgs
    ///         {
    ///             InstanceName = "tf-tmp-instance",
    ///             VpcId = firstVpcId,
    ///             SubnetId = firstSubnetId,
    ///             DataRetentionTime = 30,
    ///             Zone = availabilityZoneSecond,
    ///             Tags = 
    ///             {
    ///                 { "createdBy", "terraform" },
    ///             },
    ///         });
    ///         // tmp tke bind
    ///         var fooTmpTkeClusterAgent = new Tencentcloud.Monitor.TmpTkeClusterAgent("fooTmpTkeClusterAgent", new Tencentcloud.Monitor.TmpTkeClusterAgentArgs
    ///         {
    ///             InstanceId = fooTmpInstance.Id,
    ///             Agents = new Tencentcloud.Monitor.Inputs.TmpTkeClusterAgentAgentsArgs
    ///             {
    ///                 Region = zone,
    ///                 ClusterType = clusterType,
    ///                 ClusterId = example.Id,
    ///                 EnableExternal = false,
    ///             },
    ///         });
    ///         // create monitor template
    ///         var fooTmpTkeTemplate = new Tencentcloud.Monitor.TmpTkeTemplate("fooTmpTkeTemplate", new Tencentcloud.Monitor.TmpTkeTemplateArgs
    ///         {
    ///             Template = new Tencentcloud.Monitor.Inputs.TmpTkeTemplateTemplateArgs
    ///             {
    ///                 Name = "tf-template",
    ///                 Level = "cluster",
    ///                 Describe = "template",
    ///                 ServiceMonitors = 
    ///                 {
    ///                     new Tencentcloud.Monitor.Inputs.TmpTkeTemplateTemplateServiceMonitorArgs
    ///                     {
    ///                         Name = "tf-ServiceMonitor",
    ///                         Config = @"apiVersion: monitoring.coreos.com/v1
    /// kind: ServiceMonitor
    /// metadata:
    ///   name: example-service-monitor
    ///   namespace: monitoring
    ///   labels:
    ///     k8s-app: example-service
    /// spec:
    ///   selector:
    ///     matchLabels:
    ///       k8s-app: example-service
    ///   namespaceSelector:
    ///     matchNames:
    ///       - default
    ///   endpoints:
    ///   - port: http-metrics
    ///     interval: 30s
    ///     path: /metrics
    ///     scheme: http
    ///     bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    ///     tlsConfig:
    ///       insecureSkipVerify: true
    /// ",
    ///                     },
    ///                 },
    ///                 PodMonitors = 
    ///                 {
    ///                     new Tencentcloud.Monitor.Inputs.TmpTkeTemplateTemplatePodMonitorArgs
    ///                     {
    ///                         Name = "tf-PodMonitors",
    ///                         Config = @"apiVersion: monitoring.coreos.com/v1
    /// kind: PodMonitor
    /// metadata:
    ///   name: example-pod-monitor
    ///   namespace: monitoring
    ///   labels:
    ///     k8s-app: example-pod
    /// spec:
    ///   selector:
    ///     matchLabels:
    ///       k8s-app: example-pod
    ///   namespaceSelector:
    ///     matchNames:
    ///       - default
    ///   podMetricsEndpoints:
    ///   - port: http-metrics
    ///     interval: 30s
    ///     path: /metrics
    ///     scheme: http
    ///     bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    ///     tlsConfig:
    ///       insecureSkipVerify: true
    /// ",
    ///                     },
    ///                     new Tencentcloud.Monitor.Inputs.TmpTkeTemplateTemplatePodMonitorArgs
    ///                     {
    ///                         Name = "tf-RawJobs",
    ///                         Config = @"scrape_configs:
    ///   - job_name: 'example-job'
    ///     scrape_interval: 30s
    ///     static_configs:
    ///       - targets: ['example-service.default.svc.cluster.local:8080']
    ///     metrics_path: /metrics
    ///     scheme: http
    ///     bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    ///     tls_config:
    ///       insecure_skip_verify: true
    /// ",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///         var tempAttachment = new Tencentcloud.Monitor.TmpTkeTemplateAttachment("tempAttachment", new Tencentcloud.Monitor.TmpTkeTemplateAttachmentArgs
    ///         {
    ///             TemplateId = fooTmpTkeTemplate.Id,
    ///             Targets = new Tencentcloud.Monitor.Inputs.TmpTkeTemplateAttachmentTargetsArgs
    ///             {
    ///                 ClusterType = clusterType,
    ///                 ClusterId = example.Id,
    ///                 Region = zone,
    ///                 InstanceId = fooTmpInstance.Id,
    ///             },
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 fooTmpTkeClusterAgent,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Monitor/tmpTkeTemplateAttachment:TmpTkeTemplateAttachment")]
    public partial class TmpTkeTemplateAttachment : Pulumi.CustomResource
    {
        /// <summary>
        /// Sync target details.
        /// </summary>
        [Output("targets")]
        public Output<Outputs.TmpTkeTemplateAttachmentTargets> Targets { get; private set; } = null!;

        /// <summary>
        /// The ID of the template, which is used for the outgoing reference.
        /// </summary>
        [Output("templateId")]
        public Output<string> TemplateId { get; private set; } = null!;


        /// <summary>
        /// Create a TmpTkeTemplateAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TmpTkeTemplateAttachment(string name, TmpTkeTemplateAttachmentArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Monitor/tmpTkeTemplateAttachment:TmpTkeTemplateAttachment", name, args ?? new TmpTkeTemplateAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TmpTkeTemplateAttachment(string name, Input<string> id, TmpTkeTemplateAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Monitor/tmpTkeTemplateAttachment:TmpTkeTemplateAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TmpTkeTemplateAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TmpTkeTemplateAttachment Get(string name, Input<string> id, TmpTkeTemplateAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new TmpTkeTemplateAttachment(name, id, state, options);
        }
    }

    public sealed class TmpTkeTemplateAttachmentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sync target details.
        /// </summary>
        [Input("targets", required: true)]
        public Input<Inputs.TmpTkeTemplateAttachmentTargetsArgs> Targets { get; set; } = null!;

        /// <summary>
        /// The ID of the template, which is used for the outgoing reference.
        /// </summary>
        [Input("templateId", required: true)]
        public Input<string> TemplateId { get; set; } = null!;

        public TmpTkeTemplateAttachmentArgs()
        {
        }
    }

    public sealed class TmpTkeTemplateAttachmentState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sync target details.
        /// </summary>
        [Input("targets")]
        public Input<Inputs.TmpTkeTemplateAttachmentTargetsGetArgs>? Targets { get; set; }

        /// <summary>
        /// The ID of the template, which is used for the outgoing reference.
        /// </summary>
        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        public TmpTkeTemplateAttachmentState()
        {
        }
    }
}
