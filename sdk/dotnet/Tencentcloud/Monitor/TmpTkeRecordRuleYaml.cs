// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Monitor
{
    /// <summary>
    /// Provides a resource to create a tke tmpRecordRule
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var config = new Config();
    ///         var defaultInstanceType = config.Get("defaultInstanceType") ?? "SA1.MEDIUM2";
    ///         var availabilityZoneFirst = config.Get("availabilityZoneFirst") ?? "ap-guangzhou-3";
    ///         var availabilityZoneSecond = config.Get("availabilityZoneSecond") ?? "ap-guangzhou-4";
    ///         var exampleClusterCidr = config.Get("exampleClusterCidr") ?? "10.31.0.0/16";
    ///         var vpcOne = Output.Create(Tencentcloud.Vpc.GetSubnets.InvokeAsync(new Tencentcloud.Vpc.GetSubnetsArgs
    ///         {
    ///             IsDefault = true,
    ///             AvailabilityZone = availabilityZoneFirst,
    ///         }));
    ///         var firstVpcId = vpcOne.Apply(vpcOne =&gt; vpcOne.InstanceLists?[0]?.VpcId);
    ///         var firstSubnetId = vpcOne.Apply(vpcOne =&gt; vpcOne.InstanceLists?[0]?.SubnetId);
    ///         var vpcTwo = Output.Create(Tencentcloud.Vpc.GetSubnets.InvokeAsync(new Tencentcloud.Vpc.GetSubnetsArgs
    ///         {
    ///             IsDefault = true,
    ///             AvailabilityZone = availabilityZoneSecond,
    ///         }));
    ///         var secondVpcId = vpcTwo.Apply(vpcTwo =&gt; vpcTwo.InstanceLists?[0]?.VpcId);
    ///         var secondSubnetId = vpcTwo.Apply(vpcTwo =&gt; vpcTwo.InstanceLists?[0]?.SubnetId);
    ///         var sg = new Tencentcloud.Security.Group("sg", new Tencentcloud.Security.GroupArgs
    ///         {
    ///         });
    ///         var sgId = sg.Id;
    ///         var @default = Output.Create(Tencentcloud.Images.GetInstance.InvokeAsync(new Tencentcloud.Images.GetInstanceArgs
    ///         {
    ///             ImageTypes = 
    ///             {
    ///                 "PUBLIC_IMAGE",
    ///             },
    ///             ImageNameRegex = "Final",
    ///         }));
    ///         var imageId = @default.Apply(@default =&gt; @default.ImageId);
    ///         var sgRule = new Tencentcloud.Security.GroupLiteRule("sgRule", new Tencentcloud.Security.GroupLiteRuleArgs
    ///         {
    ///             SecurityGroupId = sg.Id,
    ///             Ingresses = 
    ///             {
    ///                 "ACCEPT#10.0.0.0/16#ALL#ALL",
    ///                 "ACCEPT#172.16.0.0/22#ALL#ALL",
    ///                 "DROP#0.0.0.0/0#ALL#ALL",
    ///             },
    ///             Egresses = 
    ///             {
    ///                 "ACCEPT#172.16.0.0/22#ALL#ALL",
    ///             },
    ///         });
    ///         var example = new Tencentcloud.Kubernetes.Cluster("example", new Tencentcloud.Kubernetes.ClusterArgs
    ///         {
    ///             VpcId = firstVpcId,
    ///             ClusterCidr = exampleClusterCidr,
    ///             ClusterMaxPodNum = 32,
    ///             ClusterName = "tf_example_cluster",
    ///             ClusterDesc = "example for tke cluster",
    ///             ClusterMaxServiceNum = 32,
    ///             ClusterInternet = false,
    ///             ClusterInternetSecurityGroup = sgId,
    ///             ClusterVersion = "1.22.5",
    ///             ClusterDeployType = "MANAGED_CLUSTER",
    ///             WorkerConfigs = 
    ///             {
    ///                 new Tencentcloud.Kubernetes.Inputs.ClusterWorkerConfigArgs
    ///                 {
    ///                     Count = 1,
    ///                     AvailabilityZone = availabilityZoneFirst,
    ///                     InstanceType = defaultInstanceType,
    ///                     SystemDiskType = "CLOUD_SSD",
    ///                     SystemDiskSize = 60,
    ///                     InternetChargeType = "TRAFFIC_POSTPAID_BY_HOUR",
    ///                     InternetMaxBandwidthOut = 100,
    ///                     PublicIpAssigned = true,
    ///                     SubnetId = firstSubnetId,
    ///                     ImgId = imageId,
    ///                     DataDisks = 
    ///                     {
    ///                         new Tencentcloud.Kubernetes.Inputs.ClusterWorkerConfigDataDiskArgs
    ///                         {
    ///                             DiskType = "CLOUD_PREMIUM",
    ///                             DiskSize = 50,
    ///                         },
    ///                     },
    ///                     EnhancedSecurityService = false,
    ///                     EnhancedMonitorService = false,
    ///                     UserData = "dGVzdA==",
    ///                     Password = "ZZXXccvv1212",
    ///                 },
    ///                 new Tencentcloud.Kubernetes.Inputs.ClusterWorkerConfigArgs
    ///                 {
    ///                     Count = 1,
    ///                     AvailabilityZone = availabilityZoneSecond,
    ///                     InstanceType = defaultInstanceType,
    ///                     SystemDiskType = "CLOUD_SSD",
    ///                     SystemDiskSize = 60,
    ///                     InternetChargeType = "TRAFFIC_POSTPAID_BY_HOUR",
    ///                     InternetMaxBandwidthOut = 100,
    ///                     PublicIpAssigned = true,
    ///                     SubnetId = secondSubnetId,
    ///                     DataDisks = 
    ///                     {
    ///                         new Tencentcloud.Kubernetes.Inputs.ClusterWorkerConfigDataDiskArgs
    ///                         {
    ///                             DiskType = "CLOUD_PREMIUM",
    ///                             DiskSize = 50,
    ///                         },
    ///                     },
    ///                     EnhancedSecurityService = false,
    ///                     EnhancedMonitorService = false,
    ///                     UserData = "dGVzdA==",
    ///                     CamRoleName = "CVM_QcsRole",
    ///                     Password = "ZZXXccvv1212",
    ///                 },
    ///             },
    ///             Labels = 
    ///             {
    ///                 { "test1", "test1" },
    ///                 { "test2", "test2" },
    ///             },
    ///         });
    ///         var zone = config.Get("zone") ?? "ap-guangzhou";
    ///         var clusterType = config.Get("clusterType") ?? "tke";
    ///         var fooTmpInstance = new Tencentcloud.Monitor.TmpInstance("fooTmpInstance", new Tencentcloud.Monitor.TmpInstanceArgs
    ///         {
    ///             InstanceName = "tf-tmp-instance",
    ///             VpcId = firstVpcId,
    ///             SubnetId = firstSubnetId,
    ///             DataRetentionTime = 30,
    ///             Zone = availabilityZoneSecond,
    ///             Tags = 
    ///             {
    ///                 { "createdBy", "terraform" },
    ///             },
    ///         });
    ///         // tmp tke bind
    ///         var fooTmpTkeClusterAgent = new Tencentcloud.Monitor.TmpTkeClusterAgent("fooTmpTkeClusterAgent", new Tencentcloud.Monitor.TmpTkeClusterAgentArgs
    ///         {
    ///             InstanceId = fooTmpInstance.Id,
    ///             Agents = new Tencentcloud.Monitor.Inputs.TmpTkeClusterAgentAgentsArgs
    ///             {
    ///                 Region = zone,
    ///                 ClusterType = clusterType,
    ///                 ClusterId = example.Id,
    ///                 EnableExternal = false,
    ///             },
    ///         });
    ///         // create record rule
    ///         var fooTmpTkeRecordRuleYaml = new Tencentcloud.Monitor.TmpTkeRecordRuleYaml("fooTmpTkeRecordRuleYaml", new Tencentcloud.Monitor.TmpTkeRecordRuleYamlArgs
    ///         {
    ///             InstanceId = fooTmpInstance.Id,
    ///             Content = @"apiVersion: monitoring.coreos.com/v1
    /// kind: PrometheusRule
    /// metadata:
    ///   name: example-record
    /// spec:
    ///   groups:
    ///     - name: kube-apiserver.rules
    ///       rules:
    ///         - expr: sum(metrics_test)
    ///           labels:
    ///             verb: read
    ///           record: 'apiserver_request:burnrate1d'
    /// ",
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 fooTmpTkeClusterAgent,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Monitor/tmpTkeRecordRuleYaml:TmpTkeRecordRuleYaml")]
    public partial class TmpTkeRecordRuleYaml : Pulumi.CustomResource
    {
        /// <summary>
        /// An ID identify the cluster, like cls-xxxxxx.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Contents of record rules in yaml format.
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// Instance Id.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Name of the instance.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Used for the argument, if the configuration comes to the template, the template id.
        /// </summary>
        [Output("templateId")]
        public Output<string> TemplateId { get; private set; } = null!;

        /// <summary>
        /// Last modified time of record rule.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a TmpTkeRecordRuleYaml resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TmpTkeRecordRuleYaml(string name, TmpTkeRecordRuleYamlArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Monitor/tmpTkeRecordRuleYaml:TmpTkeRecordRuleYaml", name, args ?? new TmpTkeRecordRuleYamlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TmpTkeRecordRuleYaml(string name, Input<string> id, TmpTkeRecordRuleYamlState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Monitor/tmpTkeRecordRuleYaml:TmpTkeRecordRuleYaml", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TmpTkeRecordRuleYaml resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TmpTkeRecordRuleYaml Get(string name, Input<string> id, TmpTkeRecordRuleYamlState? state = null, CustomResourceOptions? options = null)
        {
            return new TmpTkeRecordRuleYaml(name, id, state, options);
        }
    }

    public sealed class TmpTkeRecordRuleYamlArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Contents of record rules in yaml format.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// Instance Id.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        public TmpTkeRecordRuleYamlArgs()
        {
        }
    }

    public sealed class TmpTkeRecordRuleYamlState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An ID identify the cluster, like cls-xxxxxx.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Contents of record rules in yaml format.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// Instance Id.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Name of the instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Used for the argument, if the configuration comes to the template, the template id.
        /// </summary>
        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        /// <summary>
        /// Last modified time of record rule.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public TmpTkeRecordRuleYamlState()
        {
        }
    }
}
