// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Monitor.Outputs
{

    [OutputType]
    public sealed class AlarmPolicyEventCondition
    {
        /// <summary>
        /// Number of periods.
        /// </summary>
        public readonly int? ContinuePeriod;
        /// <summary>
        /// Metric display name, which is used in the output parameter.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
        /// </summary>
        public readonly Outputs.AlarmPolicyEventConditionFilter? Filter;
        /// <summary>
        /// Whether the alarm frequency increases exponentially.
        /// </summary>
        public readonly int? IsPowerNotice;
        /// <summary>
        /// Metric name or event name.
        /// </summary>
        public readonly string? MetricName;
        /// <summary>
        /// Alarm interval in seconds.
        /// </summary>
        public readonly int? NoticeFrequency;
        /// <summary>
        /// Operator.
        /// </summary>
        public readonly string? Operator;
        /// <summary>
        /// Statistical period in seconds.
        /// </summary>
        public readonly int? Period;
        /// <summary>
        /// Trigger condition type.
        /// </summary>
        public readonly string? RuleType;
        /// <summary>
        /// Unit, which is used in the output parameter.
        /// </summary>
        public readonly string? Unit;
        /// <summary>
        /// Threshold.
        /// </summary>
        public readonly string? Value;

        [OutputConstructor]
        private AlarmPolicyEventCondition(
            int? continuePeriod,

            string? description,

            Outputs.AlarmPolicyEventConditionFilter? filter,

            int? isPowerNotice,

            string? metricName,

            int? noticeFrequency,

            string? @operator,

            int? period,

            string? ruleType,

            string? unit,

            string? value)
        {
            ContinuePeriod = continuePeriod;
            Description = description;
            Filter = filter;
            IsPowerNotice = isPowerNotice;
            MetricName = metricName;
            NoticeFrequency = noticeFrequency;
            Operator = @operator;
            Period = period;
            RuleType = ruleType;
            Unit = unit;
            Value = value;
        }
    }
}
