// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Monitor
{
    public static class GetAlarmMonitorType
    {
        /// <summary>
        /// Use this data source to query detailed information of monitor alarm_monitor_type
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var alarmMonitorType = Tencentcloud.Monitor.GetAlarmMonitorType.Invoke();
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetAlarmMonitorTypeResult> InvokeAsync(GetAlarmMonitorTypeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAlarmMonitorTypeResult>("tencentcloud:Monitor/getAlarmMonitorType:getAlarmMonitorType", args ?? new GetAlarmMonitorTypeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of monitor alarm_monitor_type
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var alarmMonitorType = Tencentcloud.Monitor.GetAlarmMonitorType.Invoke();
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetAlarmMonitorTypeResult> Invoke(GetAlarmMonitorTypeInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAlarmMonitorTypeResult>("tencentcloud:Monitor/getAlarmMonitorType:getAlarmMonitorType", args ?? new GetAlarmMonitorTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAlarmMonitorTypeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetAlarmMonitorTypeArgs()
        {
        }
        public static new GetAlarmMonitorTypeArgs Empty => new GetAlarmMonitorTypeArgs();
    }

    public sealed class GetAlarmMonitorTypeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetAlarmMonitorTypeInvokeArgs()
        {
        }
        public static new GetAlarmMonitorTypeInvokeArgs Empty => new GetAlarmMonitorTypeInvokeArgs();
    }


    [OutputType]
    public sealed class GetAlarmMonitorTypeResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Monitoring type details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlarmMonitorTypeMonitorTypeInfoResult> MonitorTypeInfos;
        /// <summary>
        /// Monitoring type, cloud product monitoring is MT_ QCE.
        /// </summary>
        public readonly ImmutableArray<string> MonitorTypes;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetAlarmMonitorTypeResult(
            string id,

            ImmutableArray<Outputs.GetAlarmMonitorTypeMonitorTypeInfoResult> monitorTypeInfos,

            ImmutableArray<string> monitorTypes,

            string? resultOutputFile)
        {
            Id = id;
            MonitorTypeInfos = monitorTypeInfos;
            MonitorTypes = monitorTypes;
            ResultOutputFile = resultOutputFile;
        }
    }
}
