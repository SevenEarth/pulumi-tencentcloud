// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Monitor
{
    public static class GetAlarmNotices
    {
        /// <summary>
        /// Use this data source to Interlude notification list.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var notices = Tencentcloud.Monitor.GetAlarmNotices.Invoke(new()
        ///     {
        ///         GroupIds = new() { },
        ///         Name = "",
        ///         NoticeIds = new() { },
        ///         Order = "DESC",
        ///         OwnerUid = 1,
        ///         ReceiverType = "",
        ///         UserIds = new() { },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetAlarmNoticesResult> InvokeAsync(GetAlarmNoticesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAlarmNoticesResult>("tencentcloud:Monitor/getAlarmNotices:getAlarmNotices", args ?? new GetAlarmNoticesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to Interlude notification list.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var notices = Tencentcloud.Monitor.GetAlarmNotices.Invoke(new()
        ///     {
        ///         GroupIds = new() { },
        ///         Name = "",
        ///         NoticeIds = new() { },
        ///         Order = "DESC",
        ///         OwnerUid = 1,
        ///         ReceiverType = "",
        ///         UserIds = new() { },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetAlarmNoticesResult> Invoke(GetAlarmNoticesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAlarmNoticesResult>("tencentcloud:Monitor/getAlarmNotices:getAlarmNotices", args ?? new GetAlarmNoticesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAlarmNoticesArgs : global::Pulumi.InvokeArgs
    {
        [Input("groupIds")]
        private List<int>? _groupIds;

        /// <summary>
        /// Receive group list.
        /// </summary>
        public List<int> GroupIds
        {
            get => _groupIds ?? (_groupIds = new List<int>());
            set => _groupIds = value;
        }

        /// <summary>
        /// Alarm notification template name Used for fuzzy search.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("noticeIds")]
        private List<string>? _noticeIds;

        /// <summary>
        /// Receive group list.
        /// </summary>
        public List<string> NoticeIds
        {
            get => _noticeIds ?? (_noticeIds = new List<string>());
            set => _noticeIds = value;
        }

        /// <summary>
        /// Sort by update time ASC=forward order DESC=reverse order.
        /// </summary>
        [Input("order")]
        public string? Order { get; set; }

        /// <summary>
        /// The primary account uid is used to create a preset notification.
        /// </summary>
        [Input("ownerUid")]
        public int? OwnerUid { get; set; }

        /// <summary>
        /// To filter alarm notification templates according to recipients, you need to select the notification user type. USER=user GROUP=user group Leave blank = not filter by recipient.
        /// </summary>
        [Input("receiverType")]
        public string? ReceiverType { get; set; }

        /// <summary>
        /// Used to store results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        [Input("userIds")]
        private List<int>? _userIds;

        /// <summary>
        /// List of recipients.
        /// </summary>
        public List<int> UserIds
        {
            get => _userIds ?? (_userIds = new List<int>());
            set => _userIds = value;
        }

        public GetAlarmNoticesArgs()
        {
        }
        public static new GetAlarmNoticesArgs Empty => new GetAlarmNoticesArgs();
    }

    public sealed class GetAlarmNoticesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("groupIds")]
        private InputList<int>? _groupIds;

        /// <summary>
        /// Receive group list.
        /// </summary>
        public InputList<int> GroupIds
        {
            get => _groupIds ?? (_groupIds = new InputList<int>());
            set => _groupIds = value;
        }

        /// <summary>
        /// Alarm notification template name Used for fuzzy search.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("noticeIds")]
        private InputList<string>? _noticeIds;

        /// <summary>
        /// Receive group list.
        /// </summary>
        public InputList<string> NoticeIds
        {
            get => _noticeIds ?? (_noticeIds = new InputList<string>());
            set => _noticeIds = value;
        }

        /// <summary>
        /// Sort by update time ASC=forward order DESC=reverse order.
        /// </summary>
        [Input("order")]
        public Input<string>? Order { get; set; }

        /// <summary>
        /// The primary account uid is used to create a preset notification.
        /// </summary>
        [Input("ownerUid")]
        public Input<int>? OwnerUid { get; set; }

        /// <summary>
        /// To filter alarm notification templates according to recipients, you need to select the notification user type. USER=user GROUP=user group Leave blank = not filter by recipient.
        /// </summary>
        [Input("receiverType")]
        public Input<string>? ReceiverType { get; set; }

        /// <summary>
        /// Used to store results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        [Input("userIds")]
        private InputList<int>? _userIds;

        /// <summary>
        /// List of recipients.
        /// </summary>
        public InputList<int> UserIds
        {
            get => _userIds ?? (_userIds = new InputList<int>());
            set => _userIds = value;
        }

        public GetAlarmNoticesInvokeArgs()
        {
        }
        public static new GetAlarmNoticesInvokeArgs Empty => new GetAlarmNoticesInvokeArgs();
    }


    [OutputType]
    public sealed class GetAlarmNoticesResult
    {
        /// <summary>
        /// Alarm notification template list.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlarmNoticesAlarmNoticeResult> AlarmNotices;
        /// <summary>
        /// User group ID list.
        /// </summary>
        public readonly ImmutableArray<int> GroupIds;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Alarm notification template name.
        /// </summary>
        public readonly string? Name;
        public readonly ImmutableArray<string> NoticeIds;
        public readonly string? Order;
        public readonly int? OwnerUid;
        /// <summary>
        /// Recipient Type USER=User GROUP=User Group.
        /// </summary>
        public readonly string? ReceiverType;
        public readonly string? ResultOutputFile;
        /// <summary>
        /// User UID List.
        /// </summary>
        public readonly ImmutableArray<int> UserIds;

        [OutputConstructor]
        private GetAlarmNoticesResult(
            ImmutableArray<Outputs.GetAlarmNoticesAlarmNoticeResult> alarmNotices,

            ImmutableArray<int> groupIds,

            string id,

            string? name,

            ImmutableArray<string> noticeIds,

            string? order,

            int? ownerUid,

            string? receiverType,

            string? resultOutputFile,

            ImmutableArray<int> userIds)
        {
            AlarmNotices = alarmNotices;
            GroupIds = groupIds;
            Id = id;
            Name = name;
            NoticeIds = noticeIds;
            Order = order;
            OwnerUid = ownerUid;
            ReceiverType = receiverType;
            ResultOutputFile = resultOutputFile;
            UserIds = userIds;
        }
    }
}
