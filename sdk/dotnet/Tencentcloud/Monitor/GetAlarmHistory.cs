// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Monitor
{
    public static class GetAlarmHistory
    {
        /// <summary>
        /// Use this data source to query detailed information of monitor alarm_history
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var alarmHistory = Output.Create(Tencentcloud.Monitor.GetAlarmHistory.InvokeAsync(new Tencentcloud.Monitor.GetAlarmHistoryArgs
        ///         {
        ///             Content = "CPU利用率 &gt; 3%",
        ///             EndTime = 1697212799,
        ///             Module = "monitor",
        ///             MonitorTypes = 
        ///             {
        ///                 "MT_QCE",
        ///             },
        ///             Namespaces = 
        ///             {
        ///                 new Tencentcloud.Monitor.Inputs.GetAlarmHistoryNamespaceArgs
        ///                 {
        ///                     MonitorType = "CpuUsage",
        ///                     Namespace = "cvm_device",
        ///                 },
        ///             },
        ///             Order = "DESC",
        ///             PolicyIds = 
        ///             {
        ///                 "policy-iejtp4ue",
        ///             },
        ///             PolicyName = "terraform_test",
        ///             ProjectIds = 
        ///             {
        ///                 0,
        ///             },
        ///             StartTime = 1696608000,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAlarmHistoryResult> InvokeAsync(GetAlarmHistoryArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAlarmHistoryResult>("tencentcloud:Monitor/getAlarmHistory:getAlarmHistory", args ?? new GetAlarmHistoryArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of monitor alarm_history
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var alarmHistory = Output.Create(Tencentcloud.Monitor.GetAlarmHistory.InvokeAsync(new Tencentcloud.Monitor.GetAlarmHistoryArgs
        ///         {
        ///             Content = "CPU利用率 &gt; 3%",
        ///             EndTime = 1697212799,
        ///             Module = "monitor",
        ///             MonitorTypes = 
        ///             {
        ///                 "MT_QCE",
        ///             },
        ///             Namespaces = 
        ///             {
        ///                 new Tencentcloud.Monitor.Inputs.GetAlarmHistoryNamespaceArgs
        ///                 {
        ///                     MonitorType = "CpuUsage",
        ///                     Namespace = "cvm_device",
        ///                 },
        ///             },
        ///             Order = "DESC",
        ///             PolicyIds = 
        ///             {
        ///                 "policy-iejtp4ue",
        ///             },
        ///             PolicyName = "terraform_test",
        ///             ProjectIds = 
        ///             {
        ///                 0,
        ///             },
        ///             StartTime = 1696608000,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAlarmHistoryResult> Invoke(GetAlarmHistoryInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAlarmHistoryResult>("tencentcloud:Monitor/getAlarmHistory:getAlarmHistory", args ?? new GetAlarmHistoryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAlarmHistoryArgs : Pulumi.InvokeArgs
    {
        [Input("alarmLevels")]
        private List<string>? _alarmLevels;

        /// <summary>
        /// Alarm levels.
        /// </summary>
        public List<string> AlarmLevels
        {
            get => _alarmLevels ?? (_alarmLevels = new List<string>());
            set => _alarmLevels = value;
        }

        /// <summary>
        /// Filter by alarm object. Fuzzy search with string is supported.
        /// </summary>
        [Input("alarmObject")]
        public string? AlarmObject { get; set; }

        [Input("alarmStatuses")]
        private List<string>? _alarmStatuses;

        /// <summary>
        /// Filter by alarm status. Valid values: ALARM (not resolved), OK (resolved), NO_CONF (expired), NO_DATA (insufficient data). If this parameter is left empty, all will be queried by default.
        /// </summary>
        public List<string> AlarmStatuses
        {
            get => _alarmStatuses ?? (_alarmStatuses = new List<string>());
            set => _alarmStatuses = value;
        }

        /// <summary>
        /// Fuzzy search by alarm content.
        /// </summary>
        [Input("content")]
        public string? Content { get; set; }

        /// <summary>
        /// End time, which is the current timestamp and the time when the alarm FirstOccurTime first occurs. An alarm record can be searched only if its FirstOccurTime is earlier than the EndTime.
        /// </summary>
        [Input("endTime")]
        public int? EndTime { get; set; }

        [Input("instanceGroupIds")]
        private List<int>? _instanceGroupIds;

        /// <summary>
        /// Filter by instance group ID.
        /// </summary>
        public List<int> InstanceGroupIds
        {
            get => _instanceGroupIds ?? (_instanceGroupIds = new List<int>());
            set => _instanceGroupIds = value;
        }

        [Input("metricNames")]
        private List<string>? _metricNames;

        /// <summary>
        /// Filter by metric name.
        /// </summary>
        public List<string> MetricNames
        {
            get => _metricNames ?? (_metricNames = new List<string>());
            set => _metricNames = value;
        }

        /// <summary>
        /// Value fixed at monitor.
        /// </summary>
        [Input("module", required: true)]
        public string Module { get; set; } = null!;

        [Input("monitorTypes")]
        private List<string>? _monitorTypes;

        /// <summary>
        /// Filter by monitor type. Valid values: MT_QCE (Tencent Cloud service monitoring), MT_TAW (application performance monitoring), MT_RUM (frontend performance monitoring), MT_PROBE (cloud automated testing). If this parameter is left empty, all types will be queried by default.
        /// </summary>
        public List<string> MonitorTypes
        {
            get => _monitorTypes ?? (_monitorTypes = new List<string>());
            set => _monitorTypes = value;
        }

        [Input("namespaces")]
        private List<Inputs.GetAlarmHistoryNamespaceArgs>? _namespaces;

        /// <summary>
        /// Filter by policy type. Monitoring type and policy type are first-level and second-level filters respectively and both need to be passed in. For example, [{MonitorType: MT_QCE, Namespace: cvm_device}].
        /// </summary>
        public List<Inputs.GetAlarmHistoryNamespaceArgs> Namespaces
        {
            get => _namespaces ?? (_namespaces = new List<Inputs.GetAlarmHistoryNamespaceArgs>());
            set => _namespaces = value;
        }

        /// <summary>
        /// Sort by the first occurrence time in descending order by default. Valid values: ASC (ascending), DESC (descending).
        /// </summary>
        [Input("order")]
        public string? Order { get; set; }

        [Input("policyIds")]
        private List<string>? _policyIds;

        /// <summary>
        /// Search by alarm policy ID list.
        /// </summary>
        public List<string> PolicyIds
        {
            get => _policyIds ?? (_policyIds = new List<string>());
            set => _policyIds = value;
        }

        /// <summary>
        /// Fuzzy search by policy name.
        /// </summary>
        [Input("policyName")]
        public string? PolicyName { get; set; }

        [Input("projectIds")]
        private List<int>? _projectIds;

        /// <summary>
        /// Filter by project ID. Valid values: -1 (no project), 0 (default project).
        /// </summary>
        public List<int> ProjectIds
        {
            get => _projectIds ?? (_projectIds = new List<int>());
            set => _projectIds = value;
        }

        [Input("receiverGroups")]
        private List<int>? _receiverGroups;

        /// <summary>
        /// Search by recipient group.
        /// </summary>
        public List<int> ReceiverGroups
        {
            get => _receiverGroups ?? (_receiverGroups = new List<int>());
            set => _receiverGroups = value;
        }

        [Input("receiverUids")]
        private List<int>? _receiverUids;

        /// <summary>
        /// Search by recipient.
        /// </summary>
        public List<int> ReceiverUids
        {
            get => _receiverUids ?? (_receiverUids = new List<int>());
            set => _receiverUids = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// Start time, which is the timestamp one day ago by default and the time when the alarm FirstOccurTime first occurs. An alarm record can be searched only if its FirstOccurTime is later than the StartTime.
        /// </summary>
        [Input("startTime")]
        public int? StartTime { get; set; }

        public GetAlarmHistoryArgs()
        {
        }
    }

    public sealed class GetAlarmHistoryInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("alarmLevels")]
        private InputList<string>? _alarmLevels;

        /// <summary>
        /// Alarm levels.
        /// </summary>
        public InputList<string> AlarmLevels
        {
            get => _alarmLevels ?? (_alarmLevels = new InputList<string>());
            set => _alarmLevels = value;
        }

        /// <summary>
        /// Filter by alarm object. Fuzzy search with string is supported.
        /// </summary>
        [Input("alarmObject")]
        public Input<string>? AlarmObject { get; set; }

        [Input("alarmStatuses")]
        private InputList<string>? _alarmStatuses;

        /// <summary>
        /// Filter by alarm status. Valid values: ALARM (not resolved), OK (resolved), NO_CONF (expired), NO_DATA (insufficient data). If this parameter is left empty, all will be queried by default.
        /// </summary>
        public InputList<string> AlarmStatuses
        {
            get => _alarmStatuses ?? (_alarmStatuses = new InputList<string>());
            set => _alarmStatuses = value;
        }

        /// <summary>
        /// Fuzzy search by alarm content.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// End time, which is the current timestamp and the time when the alarm FirstOccurTime first occurs. An alarm record can be searched only if its FirstOccurTime is earlier than the EndTime.
        /// </summary>
        [Input("endTime")]
        public Input<int>? EndTime { get; set; }

        [Input("instanceGroupIds")]
        private InputList<int>? _instanceGroupIds;

        /// <summary>
        /// Filter by instance group ID.
        /// </summary>
        public InputList<int> InstanceGroupIds
        {
            get => _instanceGroupIds ?? (_instanceGroupIds = new InputList<int>());
            set => _instanceGroupIds = value;
        }

        [Input("metricNames")]
        private InputList<string>? _metricNames;

        /// <summary>
        /// Filter by metric name.
        /// </summary>
        public InputList<string> MetricNames
        {
            get => _metricNames ?? (_metricNames = new InputList<string>());
            set => _metricNames = value;
        }

        /// <summary>
        /// Value fixed at monitor.
        /// </summary>
        [Input("module", required: true)]
        public Input<string> Module { get; set; } = null!;

        [Input("monitorTypes")]
        private InputList<string>? _monitorTypes;

        /// <summary>
        /// Filter by monitor type. Valid values: MT_QCE (Tencent Cloud service monitoring), MT_TAW (application performance monitoring), MT_RUM (frontend performance monitoring), MT_PROBE (cloud automated testing). If this parameter is left empty, all types will be queried by default.
        /// </summary>
        public InputList<string> MonitorTypes
        {
            get => _monitorTypes ?? (_monitorTypes = new InputList<string>());
            set => _monitorTypes = value;
        }

        [Input("namespaces")]
        private InputList<Inputs.GetAlarmHistoryNamespaceInputArgs>? _namespaces;

        /// <summary>
        /// Filter by policy type. Monitoring type and policy type are first-level and second-level filters respectively and both need to be passed in. For example, [{MonitorType: MT_QCE, Namespace: cvm_device}].
        /// </summary>
        public InputList<Inputs.GetAlarmHistoryNamespaceInputArgs> Namespaces
        {
            get => _namespaces ?? (_namespaces = new InputList<Inputs.GetAlarmHistoryNamespaceInputArgs>());
            set => _namespaces = value;
        }

        /// <summary>
        /// Sort by the first occurrence time in descending order by default. Valid values: ASC (ascending), DESC (descending).
        /// </summary>
        [Input("order")]
        public Input<string>? Order { get; set; }

        [Input("policyIds")]
        private InputList<string>? _policyIds;

        /// <summary>
        /// Search by alarm policy ID list.
        /// </summary>
        public InputList<string> PolicyIds
        {
            get => _policyIds ?? (_policyIds = new InputList<string>());
            set => _policyIds = value;
        }

        /// <summary>
        /// Fuzzy search by policy name.
        /// </summary>
        [Input("policyName")]
        public Input<string>? PolicyName { get; set; }

        [Input("projectIds")]
        private InputList<int>? _projectIds;

        /// <summary>
        /// Filter by project ID. Valid values: -1 (no project), 0 (default project).
        /// </summary>
        public InputList<int> ProjectIds
        {
            get => _projectIds ?? (_projectIds = new InputList<int>());
            set => _projectIds = value;
        }

        [Input("receiverGroups")]
        private InputList<int>? _receiverGroups;

        /// <summary>
        /// Search by recipient group.
        /// </summary>
        public InputList<int> ReceiverGroups
        {
            get => _receiverGroups ?? (_receiverGroups = new InputList<int>());
            set => _receiverGroups = value;
        }

        [Input("receiverUids")]
        private InputList<int>? _receiverUids;

        /// <summary>
        /// Search by recipient.
        /// </summary>
        public InputList<int> ReceiverUids
        {
            get => _receiverUids ?? (_receiverUids = new InputList<int>());
            set => _receiverUids = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// Start time, which is the timestamp one day ago by default and the time when the alarm FirstOccurTime first occurs. An alarm record can be searched only if its FirstOccurTime is later than the StartTime.
        /// </summary>
        [Input("startTime")]
        public Input<int>? StartTime { get; set; }

        public GetAlarmHistoryInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAlarmHistoryResult
    {
        public readonly ImmutableArray<string> AlarmLevels;
        /// <summary>
        /// Alarm object.
        /// </summary>
        public readonly string? AlarmObject;
        /// <summary>
        /// Alarm status. Valid values: ALARM (not resolved), OK (resolved), NO_CONF (expired), NO_DATA (insufficient data).
        /// </summary>
        public readonly ImmutableArray<string> AlarmStatuses;
        /// <summary>
        /// Alarm content.
        /// </summary>
        public readonly string? Content;
        public readonly int? EndTime;
        /// <summary>
        /// Alarm record list.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlarmHistoryHistoryResult> Histories;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<int> InstanceGroupIds;
        public readonly ImmutableArray<string> MetricNames;
        public readonly string Module;
        public readonly ImmutableArray<string> MonitorTypes;
        public readonly ImmutableArray<Outputs.GetAlarmHistoryNamespaceResult> Namespaces;
        public readonly string? Order;
        public readonly ImmutableArray<string> PolicyIds;
        /// <summary>
        /// Policy name.
        /// </summary>
        public readonly string? PolicyName;
        public readonly ImmutableArray<int> ProjectIds;
        /// <summary>
        /// Recipient group list.
        /// </summary>
        public readonly ImmutableArray<int> ReceiverGroups;
        /// <summary>
        /// Recipient list.
        /// </summary>
        public readonly ImmutableArray<int> ReceiverUids;
        public readonly string? ResultOutputFile;
        public readonly int? StartTime;

        [OutputConstructor]
        private GetAlarmHistoryResult(
            ImmutableArray<string> alarmLevels,

            string? alarmObject,

            ImmutableArray<string> alarmStatuses,

            string? content,

            int? endTime,

            ImmutableArray<Outputs.GetAlarmHistoryHistoryResult> histories,

            string id,

            ImmutableArray<int> instanceGroupIds,

            ImmutableArray<string> metricNames,

            string module,

            ImmutableArray<string> monitorTypes,

            ImmutableArray<Outputs.GetAlarmHistoryNamespaceResult> namespaces,

            string? order,

            ImmutableArray<string> policyIds,

            string? policyName,

            ImmutableArray<int> projectIds,

            ImmutableArray<int> receiverGroups,

            ImmutableArray<int> receiverUids,

            string? resultOutputFile,

            int? startTime)
        {
            AlarmLevels = alarmLevels;
            AlarmObject = alarmObject;
            AlarmStatuses = alarmStatuses;
            Content = content;
            EndTime = endTime;
            Histories = histories;
            Id = id;
            InstanceGroupIds = instanceGroupIds;
            MetricNames = metricNames;
            Module = module;
            MonitorTypes = monitorTypes;
            Namespaces = namespaces;
            Order = order;
            PolicyIds = policyIds;
            PolicyName = policyName;
            ProjectIds = projectIds;
            ReceiverGroups = receiverGroups;
            ReceiverUids = receiverUids;
            ResultOutputFile = resultOutputFile;
            StartTime = startTime;
        }
    }
}
