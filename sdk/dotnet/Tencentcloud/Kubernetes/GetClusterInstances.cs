// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Kubernetes
{
    public static class GetClusterInstances
    {
        /// <summary>
        /// Use this data source to query detailed information of kubernetes cluster_instances
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var clusterInstances = Output.Create(Tencentcloud.Kubernetes.GetClusterInstances.InvokeAsync(new Tencentcloud.Kubernetes.GetClusterInstancesArgs
        ///         {
        ///             ClusterId = "cls-ely08ic4",
        ///             Filters = 
        ///             {
        ///                 new Tencentcloud.Kubernetes.Inputs.GetClusterInstancesFilterArgs
        ///                 {
        ///                     Name = "nodepool-id",
        ///                     Values = 
        ///                     {
        ///                         "np-p4e6whqu",
        ///                     },
        ///                 },
        ///             },
        ///             InstanceIds = 
        ///             {
        ///                 "ins-kqmx8dm2",
        ///             },
        ///             InstanceRole = "WORKER",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetClusterInstancesResult> InvokeAsync(GetClusterInstancesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClusterInstancesResult>("tencentcloud:Kubernetes/getClusterInstances:getClusterInstances", args ?? new GetClusterInstancesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of kubernetes cluster_instances
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var clusterInstances = Output.Create(Tencentcloud.Kubernetes.GetClusterInstances.InvokeAsync(new Tencentcloud.Kubernetes.GetClusterInstancesArgs
        ///         {
        ///             ClusterId = "cls-ely08ic4",
        ///             Filters = 
        ///             {
        ///                 new Tencentcloud.Kubernetes.Inputs.GetClusterInstancesFilterArgs
        ///                 {
        ///                     Name = "nodepool-id",
        ///                     Values = 
        ///                     {
        ///                         "np-p4e6whqu",
        ///                     },
        ///                 },
        ///             },
        ///             InstanceIds = 
        ///             {
        ///                 "ins-kqmx8dm2",
        ///             },
        ///             InstanceRole = "WORKER",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetClusterInstancesResult> Invoke(GetClusterInstancesInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetClusterInstancesResult>("tencentcloud:Kubernetes/getClusterInstances:getClusterInstances", args ?? new GetClusterInstancesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterInstancesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetClusterInstancesFilterArgs>? _filters;

        /// <summary>
        /// List of filter conditions. The optional values of Name are `nodepool-id` and `nodepool-instance-type`. Name is `nodepool-id`, which means filtering machines based on node pool id, and Value is the specific node pool id. Name is `nodepool-instance-type`, which indicates how the node is added to the node pool. Value is MANUALLY_ADDED (manually added to the node pool), AUTOSCALING_ADDED (joined by scaling group expansion method), ALL (manually join the node pool and join the node pool through scaling group expansion).
        /// </summary>
        public List<Inputs.GetClusterInstancesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetClusterInstancesFilterArgs>());
            set => _filters = value;
        }

        [Input("instanceIds")]
        private List<string>? _instanceIds;

        /// <summary>
        /// List of node instance IDs to be obtained. If it is empty, it means pulling all node instances in the cluster.
        /// </summary>
        public List<string> InstanceIds
        {
            get => _instanceIds ?? (_instanceIds = new List<string>());
            set => _instanceIds = value;
        }

        /// <summary>
        /// Node role, MASTER, WORKER, ETCD, MASTER_ETCD,ALL, default is WORKER.
        /// </summary>
        [Input("instanceRole")]
        public string? InstanceRole { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetClusterInstancesArgs()
        {
        }
    }

    public sealed class GetClusterInstancesInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetClusterInstancesFilterInputArgs>? _filters;

        /// <summary>
        /// List of filter conditions. The optional values of Name are `nodepool-id` and `nodepool-instance-type`. Name is `nodepool-id`, which means filtering machines based on node pool id, and Value is the specific node pool id. Name is `nodepool-instance-type`, which indicates how the node is added to the node pool. Value is MANUALLY_ADDED (manually added to the node pool), AUTOSCALING_ADDED (joined by scaling group expansion method), ALL (manually join the node pool and join the node pool through scaling group expansion).
        /// </summary>
        public InputList<Inputs.GetClusterInstancesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetClusterInstancesFilterInputArgs>());
            set => _filters = value;
        }

        [Input("instanceIds")]
        private InputList<string>? _instanceIds;

        /// <summary>
        /// List of node instance IDs to be obtained. If it is empty, it means pulling all node instances in the cluster.
        /// </summary>
        public InputList<string> InstanceIds
        {
            get => _instanceIds ?? (_instanceIds = new InputList<string>());
            set => _instanceIds = value;
        }

        /// <summary>
        /// Node role, MASTER, WORKER, ETCD, MASTER_ETCD,ALL, default is WORKER.
        /// </summary>
        [Input("instanceRole")]
        public Input<string>? InstanceRole { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetClusterInstancesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetClusterInstancesResult
    {
        public readonly string ClusterId;
        public readonly ImmutableArray<Outputs.GetClusterInstancesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> InstanceIds;
        /// <summary>
        /// Node role, MASTER, WORKER, ETCD, MASTER_ETCD,ALL, default is WORKER.
        /// </summary>
        public readonly string? InstanceRole;
        /// <summary>
        /// List of instances in the cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterInstancesInstanceSetResult> InstanceSets;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetClusterInstancesResult(
            string clusterId,

            ImmutableArray<Outputs.GetClusterInstancesFilterResult> filters,

            string id,

            ImmutableArray<string> instanceIds,

            string? instanceRole,

            ImmutableArray<Outputs.GetClusterInstancesInstanceSetResult> instanceSets,

            string? resultOutputFile)
        {
            ClusterId = clusterId;
            Filters = filters;
            Id = id;
            InstanceIds = instanceIds;
            InstanceRole = instanceRole;
            InstanceSets = instanceSets;
            ResultOutputFile = resultOutputFile;
        }
    }
}
