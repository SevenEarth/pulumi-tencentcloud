// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Kubernetes
{
    public static class GetClusterNativeNodePools
    {
        /// <summary>
        /// Use this data source to query detailed information of tke kubernetes cluster_native_node_pools
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var kubernetesClusterNativeNodePools = Tencentcloud.Kubernetes.GetClusterNativeNodePools.Invoke(new()
        ///     {
        ///         ClusterId = "cls-eyi0erm0",
        ///         Filters = new[]
        ///         {
        ///             new Tencentcloud.Kubernetes.Inputs.GetClusterNativeNodePoolsFilterInputArgs
        ///             {
        ///                 Name = "NodePoolsName",
        ///                 Values = new[]
        ///                 {
        ///                     "native_node_pool",
        ///                 },
        ///             },
        ///             new Tencentcloud.Kubernetes.Inputs.GetClusterNativeNodePoolsFilterInputArgs
        ///             {
        ///                 Name = "NodePoolsId",
        ///                 Values = new[]
        ///                 {
        ///                     "np-ngjwhdv4",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetClusterNativeNodePoolsResult> InvokeAsync(GetClusterNativeNodePoolsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterNativeNodePoolsResult>("tencentcloud:Kubernetes/getClusterNativeNodePools:getClusterNativeNodePools", args ?? new GetClusterNativeNodePoolsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of tke kubernetes cluster_native_node_pools
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var kubernetesClusterNativeNodePools = Tencentcloud.Kubernetes.GetClusterNativeNodePools.Invoke(new()
        ///     {
        ///         ClusterId = "cls-eyi0erm0",
        ///         Filters = new[]
        ///         {
        ///             new Tencentcloud.Kubernetes.Inputs.GetClusterNativeNodePoolsFilterInputArgs
        ///             {
        ///                 Name = "NodePoolsName",
        ///                 Values = new[]
        ///                 {
        ///                     "native_node_pool",
        ///                 },
        ///             },
        ///             new Tencentcloud.Kubernetes.Inputs.GetClusterNativeNodePoolsFilterInputArgs
        ///             {
        ///                 Name = "NodePoolsId",
        ///                 Values = new[]
        ///                 {
        ///                     "np-ngjwhdv4",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetClusterNativeNodePoolsResult> Invoke(GetClusterNativeNodePoolsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterNativeNodePoolsResult>("tencentcloud:Kubernetes/getClusterNativeNodePools:getClusterNativeNodePools", args ?? new GetClusterNativeNodePoolsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterNativeNodePoolsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetClusterNativeNodePoolsFilterArgs>? _filters;

        /// <summary>
        /// Query filter conditions: NodePoolsName, Filter according to the node pool name, type: String, required: no. NodePoolsId, Filter according to the node pool ID, type: String, required: no. tags, Filter according to the label key value pairs, type: String, required: no. tag:tag-key, Filter according to the label key value pairs, type: String, required: no.
        /// </summary>
        public List<Inputs.GetClusterNativeNodePoolsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetClusterNativeNodePoolsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetClusterNativeNodePoolsArgs()
        {
        }
        public static new GetClusterNativeNodePoolsArgs Empty => new GetClusterNativeNodePoolsArgs();
    }

    public sealed class GetClusterNativeNodePoolsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetClusterNativeNodePoolsFilterInputArgs>? _filters;

        /// <summary>
        /// Query filter conditions: NodePoolsName, Filter according to the node pool name, type: String, required: no. NodePoolsId, Filter according to the node pool ID, type: String, required: no. tags, Filter according to the label key value pairs, type: String, required: no. tag:tag-key, Filter according to the label key value pairs, type: String, required: no.
        /// </summary>
        public InputList<Inputs.GetClusterNativeNodePoolsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetClusterNativeNodePoolsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetClusterNativeNodePoolsInvokeArgs()
        {
        }
        public static new GetClusterNativeNodePoolsInvokeArgs Empty => new GetClusterNativeNodePoolsInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterNativeNodePoolsResult
    {
        /// <summary>
        /// ID of the cluster.
        /// </summary>
        public readonly string ClusterId;
        public readonly ImmutableArray<Outputs.GetClusterNativeNodePoolsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Node pool list.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNativeNodePoolsNodePoolResult> NodePools;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetClusterNativeNodePoolsResult(
            string clusterId,

            ImmutableArray<Outputs.GetClusterNativeNodePoolsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetClusterNativeNodePoolsNodePoolResult> nodePools,

            string? resultOutputFile)
        {
            ClusterId = clusterId;
            Filters = filters;
            Id = id;
            NodePools = nodePools;
            ResultOutputFile = resultOutputFile;
        }
    }
}
