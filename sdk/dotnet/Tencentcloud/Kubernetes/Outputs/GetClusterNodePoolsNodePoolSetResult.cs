// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Kubernetes.Outputs
{

    [OutputType]
    public sealed class GetClusterNodePoolsNodePoolSetResult
    {
        /// <summary>
        /// ID of autoscaling group.
        /// </summary>
        public readonly string AutoscalingGroupId;
        /// <summary>
        /// Status information.
        /// </summary>
        public readonly string AutoscalingGroupStatus;
        /// <summary>
        /// ID of the cluster.
        /// </summary>
        public readonly string ClusterInstanceId;
        /// <summary>
        /// Multi disk data disk mounting information.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolsNodePoolSetDataDiskResult> DataDisks;
        /// <summary>
        /// Remove protection switch.
        /// </summary>
        public readonly bool DeletionProtection;
        /// <summary>
        /// Expected number of nodes.
        /// </summary>
        public readonly int DesiredNodesNum;
        /// <summary>
        /// When the cluster belongs to the node podCIDR size customization mode, the node pool needs to have the pod number attribute.
        /// </summary>
        public readonly int DesiredPodNum;
        /// <summary>
        /// Dockerd --graph specified value, default to /var/lib/docker.
        /// </summary>
        public readonly string DockerGraphPath;
        /// <summary>
        /// Node configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolsNodePoolSetExtraArgResult> ExtraArgs;
        /// <summary>
        /// GPU driver related parameters.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolsNodePoolSetGpuArgResult> GpuArgs;
        /// <summary>
        /// ID of image.
        /// </summary>
        public readonly string ImageId;
        /// <summary>
        /// Labels of the node pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolsNodePoolSetLabelResult> Labels;
        /// <summary>
        /// ID of launch configuration.
        /// </summary>
        public readonly string LaunchConfigurationId;
        /// <summary>
        /// Life cycle state of the node pool, include: creating, normal, updating, deleting, deleted.
        /// </summary>
        public readonly string LifeState;
        /// <summary>
        /// Maximum number of nodes.
        /// </summary>
        public readonly int MaxNodesNum;
        /// <summary>
        /// Minimum number of nodes.
        /// </summary>
        public readonly int MinNodesNum;
        /// <summary>
        /// The attribute name, if there are multiple filters, the relationship between the filters is a logical AND relationship.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Node List.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolsNodePoolSetNodeCountSummaryResult> NodeCountSummaries;
        /// <summary>
        /// ID of the node pool.
        /// </summary>
        public readonly string NodePoolId;
        /// <summary>
        /// Node Pool OS Name.
        /// </summary>
        public readonly string NodePoolOs;
        /// <summary>
        /// Mirror version of container.
        /// </summary>
        public readonly string OsCustomizeType;
        /// <summary>
        /// User defined script, executed before User Script.
        /// </summary>
        public readonly string PreStartUserScript;
        /// <summary>
        /// Resource tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolsNodePoolSetTagResult> Tags;
        /// <summary>
        /// Labels of the node pool.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterNodePoolsNodePoolSetTaintResult> Taints;
        /// <summary>
        /// Is it not schedulable.
        /// </summary>
        public readonly int Unschedulable;
        /// <summary>
        /// User defined scripts.
        /// </summary>
        public readonly string UserScript;

        [OutputConstructor]
        private GetClusterNodePoolsNodePoolSetResult(
            string autoscalingGroupId,

            string autoscalingGroupStatus,

            string clusterInstanceId,

            ImmutableArray<Outputs.GetClusterNodePoolsNodePoolSetDataDiskResult> dataDisks,

            bool deletionProtection,

            int desiredNodesNum,

            int desiredPodNum,

            string dockerGraphPath,

            ImmutableArray<Outputs.GetClusterNodePoolsNodePoolSetExtraArgResult> extraArgs,

            ImmutableArray<Outputs.GetClusterNodePoolsNodePoolSetGpuArgResult> gpuArgs,

            string imageId,

            ImmutableArray<Outputs.GetClusterNodePoolsNodePoolSetLabelResult> labels,

            string launchConfigurationId,

            string lifeState,

            int maxNodesNum,

            int minNodesNum,

            string name,

            ImmutableArray<Outputs.GetClusterNodePoolsNodePoolSetNodeCountSummaryResult> nodeCountSummaries,

            string nodePoolId,

            string nodePoolOs,

            string osCustomizeType,

            string preStartUserScript,

            ImmutableArray<Outputs.GetClusterNodePoolsNodePoolSetTagResult> tags,

            ImmutableArray<Outputs.GetClusterNodePoolsNodePoolSetTaintResult> taints,

            int unschedulable,

            string userScript)
        {
            AutoscalingGroupId = autoscalingGroupId;
            AutoscalingGroupStatus = autoscalingGroupStatus;
            ClusterInstanceId = clusterInstanceId;
            DataDisks = dataDisks;
            DeletionProtection = deletionProtection;
            DesiredNodesNum = desiredNodesNum;
            DesiredPodNum = desiredPodNum;
            DockerGraphPath = dockerGraphPath;
            ExtraArgs = extraArgs;
            GpuArgs = gpuArgs;
            ImageId = imageId;
            Labels = labels;
            LaunchConfigurationId = launchConfigurationId;
            LifeState = lifeState;
            MaxNodesNum = maxNodesNum;
            MinNodesNum = minNodesNum;
            Name = name;
            NodeCountSummaries = nodeCountSummaries;
            NodePoolId = nodePoolId;
            NodePoolOs = nodePoolOs;
            OsCustomizeType = osCustomizeType;
            PreStartUserScript = preStartUserScript;
            Tags = tags;
            Taints = taints;
            Unschedulable = unschedulable;
            UserScript = userScript;
        }
    }
}
