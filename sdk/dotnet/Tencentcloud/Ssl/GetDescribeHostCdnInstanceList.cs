// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Ssl
{
    public static class GetDescribeHostCdnInstanceList
    {
        /// <summary>
        /// Use this data source to query detailed information of ssl describe_host_cdn_instance_list
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var describeHostCdnInstanceList = Tencentcloud.Ssl.GetDescribeHostCdnInstanceList.Invoke(new()
        ///     {
        ///         CertificateId = "8u8DII0l",
        ///         ResourceType = "cdn",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDescribeHostCdnInstanceListResult> InvokeAsync(GetDescribeHostCdnInstanceListArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDescribeHostCdnInstanceListResult>("tencentcloud:Ssl/getDescribeHostCdnInstanceList:getDescribeHostCdnInstanceList", args ?? new GetDescribeHostCdnInstanceListArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of ssl describe_host_cdn_instance_list
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var describeHostCdnInstanceList = Tencentcloud.Ssl.GetDescribeHostCdnInstanceList.Invoke(new()
        ///     {
        ///         CertificateId = "8u8DII0l",
        ///         ResourceType = "cdn",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDescribeHostCdnInstanceListResult> Invoke(GetDescribeHostCdnInstanceListInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDescribeHostCdnInstanceListResult>("tencentcloud:Ssl/getDescribeHostCdnInstanceList:getDescribeHostCdnInstanceList", args ?? new GetDescribeHostCdnInstanceListInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDescribeHostCdnInstanceListArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Whether.
        /// </summary>
        [Input("asyncCache")]
        public int? AsyncCache { get; set; }

        /// <summary>
        /// Certificate ID to be deployed.
        /// </summary>
        [Input("certificateId", required: true)]
        public string CertificateId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetDescribeHostCdnInstanceListFilterArgs>? _filters;

        /// <summary>
        /// List of filtering parameters; Filterkey: domainmatch.
        /// </summary>
        public List<Inputs.GetDescribeHostCdnInstanceListFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDescribeHostCdnInstanceListFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Whether to query the cache, 1: Yes; 0: No, the default is the query cache, the cache is half an hour.
        /// </summary>
        [Input("isCache")]
        public int? IsCache { get; set; }

        /// <summary>
        /// Original certificate ID.
        /// </summary>
        [Input("oldCertificateId")]
        public string? OldCertificateId { get; set; }

        /// <summary>
        /// Deploy resource type.
        /// </summary>
        [Input("resourceType", required: true)]
        public string ResourceType { get; set; } = null!;

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetDescribeHostCdnInstanceListArgs()
        {
        }
        public static new GetDescribeHostCdnInstanceListArgs Empty => new GetDescribeHostCdnInstanceListArgs();
    }

    public sealed class GetDescribeHostCdnInstanceListInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Whether.
        /// </summary>
        [Input("asyncCache")]
        public Input<int>? AsyncCache { get; set; }

        /// <summary>
        /// Certificate ID to be deployed.
        /// </summary>
        [Input("certificateId", required: true)]
        public Input<string> CertificateId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetDescribeHostCdnInstanceListFilterInputArgs>? _filters;

        /// <summary>
        /// List of filtering parameters; Filterkey: domainmatch.
        /// </summary>
        public InputList<Inputs.GetDescribeHostCdnInstanceListFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDescribeHostCdnInstanceListFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Whether to query the cache, 1: Yes; 0: No, the default is the query cache, the cache is half an hour.
        /// </summary>
        [Input("isCache")]
        public Input<int>? IsCache { get; set; }

        /// <summary>
        /// Original certificate ID.
        /// </summary>
        [Input("oldCertificateId")]
        public Input<string>? OldCertificateId { get; set; }

        /// <summary>
        /// Deploy resource type.
        /// </summary>
        [Input("resourceType", required: true)]
        public Input<string> ResourceType { get; set; } = null!;

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetDescribeHostCdnInstanceListInvokeArgs()
        {
        }
        public static new GetDescribeHostCdnInstanceListInvokeArgs Empty => new GetDescribeHostCdnInstanceListInvokeArgs();
    }


    [OutputType]
    public sealed class GetDescribeHostCdnInstanceListResult
    {
        public readonly int? AsyncCache;
        /// <summary>
        /// Current cache read timeNote: This field may return NULL, indicating that the valid value cannot be obtained.
        /// </summary>
        public readonly string AsyncCacheTime;
        /// <summary>
        /// Asynchronous refresh current execution numberNote: This field may return NULL, indicating that the valid value cannot be obtained.
        /// </summary>
        public readonly int AsyncOffset;
        /// <summary>
        /// The total number of asynchronous refreshNote: This field may return NULL, indicating that the valid value cannot be obtained.
        /// </summary>
        public readonly int AsyncTotalNum;
        public readonly string CertificateId;
        public readonly ImmutableArray<Outputs.GetDescribeHostCdnInstanceListFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// CDN instance listNote: This field may return NULL, indicating that the valid value cannot be obtained.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDescribeHostCdnInstanceListInstanceListResult> InstanceLists;
        public readonly int? IsCache;
        public readonly string? OldCertificateId;
        public readonly string ResourceType;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetDescribeHostCdnInstanceListResult(
            int? asyncCache,

            string asyncCacheTime,

            int asyncOffset,

            int asyncTotalNum,

            string certificateId,

            ImmutableArray<Outputs.GetDescribeHostCdnInstanceListFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetDescribeHostCdnInstanceListInstanceListResult> instanceLists,

            int? isCache,

            string? oldCertificateId,

            string resourceType,

            string? resultOutputFile)
        {
            AsyncCache = asyncCache;
            AsyncCacheTime = asyncCacheTime;
            AsyncOffset = asyncOffset;
            AsyncTotalNum = asyncTotalNum;
            CertificateId = certificateId;
            Filters = filters;
            Id = id;
            InstanceLists = instanceLists;
            IsCache = isCache;
            OldCertificateId = oldCertificateId;
            ResourceType = resourceType;
            ResultOutputFile = resultOutputFile;
        }
    }
}
