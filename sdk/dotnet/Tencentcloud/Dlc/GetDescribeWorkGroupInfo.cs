// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Dlc
{
    public static class GetDescribeWorkGroupInfo
    {
        /// <summary>
        /// Use this data source to query detailed information of dlc describe_work_group_info
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var describeWorkGroupInfo = Tencentcloud.Dlc.GetDescribeWorkGroupInfo.Invoke(new()
        ///     {
        ///         SortBy = "create-time",
        ///         Sorting = "desc",
        ///         Type = "User",
        ///         WorkGroupId = 23181,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDescribeWorkGroupInfoResult> InvokeAsync(GetDescribeWorkGroupInfoArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDescribeWorkGroupInfoResult>("tencentcloud:Dlc/getDescribeWorkGroupInfo:getDescribeWorkGroupInfo", args ?? new GetDescribeWorkGroupInfoArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of dlc describe_work_group_info
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var describeWorkGroupInfo = Tencentcloud.Dlc.GetDescribeWorkGroupInfo.Invoke(new()
        ///     {
        ///         SortBy = "create-time",
        ///         Sorting = "desc",
        ///         Type = "User",
        ///         WorkGroupId = 23181,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDescribeWorkGroupInfoResult> Invoke(GetDescribeWorkGroupInfoInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDescribeWorkGroupInfoResult>("tencentcloud:Dlc/getDescribeWorkGroupInfo:getDescribeWorkGroupInfo", args ?? new GetDescribeWorkGroupInfoInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDescribeWorkGroupInfoArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetDescribeWorkGroupInfoFilterArgs>? _filters;

        /// <summary>
        /// Query filter conditions. when Type is User, fuzzy search with Key as user-name is supported; when Type is DataAuth, key is supported; policy-type: permission type; policy-source: data source; data-name: database table fuzzy search; when Type is EngineAuth, supports key; policy-type: permission type; policy-source: data source; engine-name: fuzzy search of library tables.
        /// </summary>
        public List<Inputs.GetDescribeWorkGroupInfoFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDescribeWorkGroupInfoFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// Sorting fields, when Type is User, support create-time, user-name, when type is DataAuth, support create-time, when type is EngineAuth, support create-time.
        /// </summary>
        [Input("sortBy")]
        public string? SortBy { get; set; }

        /// <summary>
        /// Sorting method, desc means forward order, asc means reverse order, the default is asc.
        /// </summary>
        [Input("sorting")]
        public string? Sorting { get; set; }

        /// <summary>
        /// Query information type, only support: User: user information/DataAuth: data permission/EngineAuth: engine permission.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        /// <summary>
        /// Work group id.
        /// </summary>
        [Input("workGroupId")]
        public int? WorkGroupId { get; set; }

        public GetDescribeWorkGroupInfoArgs()
        {
        }
        public static new GetDescribeWorkGroupInfoArgs Empty => new GetDescribeWorkGroupInfoArgs();
    }

    public sealed class GetDescribeWorkGroupInfoInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetDescribeWorkGroupInfoFilterInputArgs>? _filters;

        /// <summary>
        /// Query filter conditions. when Type is User, fuzzy search with Key as user-name is supported; when Type is DataAuth, key is supported; policy-type: permission type; policy-source: data source; data-name: database table fuzzy search; when Type is EngineAuth, supports key; policy-type: permission type; policy-source: data source; engine-name: fuzzy search of library tables.
        /// </summary>
        public InputList<Inputs.GetDescribeWorkGroupInfoFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDescribeWorkGroupInfoFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// Sorting fields, when Type is User, support create-time, user-name, when type is DataAuth, support create-time, when type is EngineAuth, support create-time.
        /// </summary>
        [Input("sortBy")]
        public Input<string>? SortBy { get; set; }

        /// <summary>
        /// Sorting method, desc means forward order, asc means reverse order, the default is asc.
        /// </summary>
        [Input("sorting")]
        public Input<string>? Sorting { get; set; }

        /// <summary>
        /// Query information type, only support: User: user information/DataAuth: data permission/EngineAuth: engine permission.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Work group id.
        /// </summary>
        [Input("workGroupId")]
        public Input<int>? WorkGroupId { get; set; }

        public GetDescribeWorkGroupInfoInvokeArgs()
        {
        }
        public static new GetDescribeWorkGroupInfoInvokeArgs Empty => new GetDescribeWorkGroupInfoInvokeArgs();
    }


    [OutputType]
    public sealed class GetDescribeWorkGroupInfoResult
    {
        public readonly ImmutableArray<Outputs.GetDescribeWorkGroupInfoFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ResultOutputFile;
        public readonly string? SortBy;
        public readonly string? Sorting;
        /// <summary>
        /// The type of information contained. User: user information; DataAuth: data permissions; EngineAuth: engine permissions.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// Work group id.
        /// </summary>
        public readonly int? WorkGroupId;
        /// <summary>
        /// Workgroup details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDescribeWorkGroupInfoWorkGroupInfoResult> WorkGroupInfos;

        [OutputConstructor]
        private GetDescribeWorkGroupInfoResult(
            ImmutableArray<Outputs.GetDescribeWorkGroupInfoFilterResult> filters,

            string id,

            string? resultOutputFile,

            string? sortBy,

            string? sorting,

            string? type,

            int? workGroupId,

            ImmutableArray<Outputs.GetDescribeWorkGroupInfoWorkGroupInfoResult> workGroupInfos)
        {
            Filters = filters;
            Id = id;
            ResultOutputFile = resultOutputFile;
            SortBy = sortBy;
            Sorting = sorting;
            Type = type;
            WorkGroupId = workGroupId;
            WorkGroupInfos = workGroupInfos;
        }
    }
}
