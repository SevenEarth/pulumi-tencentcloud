// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Dlc.Outputs
{

    [OutputType]
    public sealed class GetDescribeDataEngineDataEngineResult
    {
        /// <summary>
        /// Whether to automatically start the cluster, prepay not support.
        /// </summary>
        public readonly bool AutoResume;
        /// <summary>
        /// Whether to automatically suspend the cluster, prepay not support.
        /// </summary>
        public readonly bool AutoSuspend;
        /// <summary>
        /// Cluster automatic suspension time, default 10 minutes.
        /// </summary>
        public readonly int AutoSuspendTime;
        /// <summary>
        /// Engine Image version id.
        /// </summary>
        public readonly string ChildImageVersionId;
        /// <summary>
        /// Engine VPC network segment, just like 192.0.2.1/24.
        /// </summary>
        public readonly string CidrBlock;
        /// <summary>
        /// Engine cluster type, only support: spark_cu/presto_cu.
        /// </summary>
        public readonly string ClusterType;
        /// <summary>
        /// Create time.
        /// </summary>
        public readonly int CreateTime;
        /// <summary>
        /// Engine crontab resume or suspend strategy, only support: 0: Wait(default), 1: Kill.
        /// </summary>
        public readonly int CrontabResumeSuspend;
        /// <summary>
        /// Engine auto suspend strategy, when AutoSuspend is true, CrontabResumeSuspend must stop.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDescribeDataEngineDataEngineCrontabResumeSuspendStrategyResult> CrontabResumeSuspendStrategies;
        /// <summary>
        /// Engine unique id.
        /// </summary>
        public readonly string DataEngineId;
        /// <summary>
        /// Engine name.
        /// </summary>
        public readonly string DataEngineName;
        /// <summary>
        /// Whether it is the default virtual cluster.
        /// </summary>
        public readonly bool DefaultDataEngine;
        /// <summary>
        /// Is it the default engine?.
        /// </summary>
        public readonly bool DefaultHouse;
        /// <summary>
        /// For spark Batch ExecType, yearly and monthly cluster elastic limit.
        /// </summary>
        public readonly int ElasticLimit;
        /// <summary>
        /// For spark Batch ExecType, yearly and monthly cluster whether to enable elasticity.
        /// </summary>
        public readonly bool ElasticSwitch;
        /// <summary>
        /// Engine exec type, only support SQL(default) or BATCH.
        /// </summary>
        public readonly string EngineExecType;
        /// <summary>
        /// Engine type, only support: spark/presto.
        /// </summary>
        public readonly string EngineType;
        /// <summary>
        /// Expire time.
        /// </summary>
        public readonly string ExpireTime;
        /// <summary>
        /// Engine major version id.
        /// </summary>
        public readonly string ImageVersionId;
        /// <summary>
        /// Engine image version name.
        /// </summary>
        public readonly string ImageVersionName;
        /// <summary>
        /// Isolated time.
        /// </summary>
        public readonly string IsolatedTime;
        /// <summary>
        /// Engine max cluster size,  MaxClusters less than or equal to 10 and MaxClusters bigger than MinClusters.
        /// </summary>
        public readonly int MaxClusters;
        /// <summary>
        /// Maximum number of concurrent tasks in a single cluster, default 5.
        /// </summary>
        public readonly int MaxConcurrency;
        /// <summary>
        /// Engine description information.
        /// </summary>
        public readonly string Message;
        /// <summary>
        /// Engine min size, greater than or equal to 1 and MaxClusters bigger than MinClusters.
        /// </summary>
        public readonly int MinClusters;
        /// <summary>
        /// Engine mode, only support 1: ByAmount, 2: YearlyAndMonthly.
        /// </summary>
        public readonly int Mode;
        /// <summary>
        /// Network connection configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDescribeDataEngineDataEngineNetworkConnectionSetResult> NetworkConnectionSets;
        /// <summary>
        /// Engine permissions.
        /// </summary>
        public readonly ImmutableArray<string> Permissions;
        /// <summary>
        /// Reference ID.
        /// </summary>
        public readonly string QuotaId;
        /// <summary>
        /// Automatic renewal flag, 0, initial state, automatic renewal is not performed by default. If the user has prepaid non-stop service privileges, automatic renewal will occur. 1: Automatic renewal. 2: Make it clear that there will be no automatic renewal.
        /// </summary>
        public readonly int RenewFlag;
        /// <summary>
        /// Engine resource type not match, only support: Standard_CU/Memory_CU(only BATCH ExecType).
        /// </summary>
        public readonly string ResourceType;
        /// <summary>
        /// Reversal time.
        /// </summary>
        public readonly string ReversalTime;
        /// <summary>
        /// For spark Batch ExecType, cluster session resource configuration template.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDescribeDataEngineDataEngineSessionResourceTemplateResult> SessionResourceTemplates;
        /// <summary>
        /// Engine size.
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// Automatic recovery time, prepay not support.
        /// </summary>
        public readonly int SpendAfter;
        /// <summary>
        /// Whether to enable the backup cluster.
        /// </summary>
        public readonly bool StartStandbyCluster;
        /// <summary>
        /// Engine state, only support: 0:Init/-1:Failed/-2:Deleted/1:Pause/2:Running/3:ToBeDelete/4:Deleting.
        /// </summary>
        public readonly int State;
        /// <summary>
        /// Operator.
        /// </summary>
        public readonly string SubAccountUin;
        /// <summary>
        /// Tag list.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDescribeDataEngineDataEngineTagListResult> TagLists;
        /// <summary>
        /// Tolerable queuing time, default 0. scaling may be triggered when tasks are queued for longer than the tolerable time. if this parameter is 0, it means that capacity expansion may be triggered immediately once a task is queued.
        /// </summary>
        public readonly int TolerableQueueTime;
        /// <summary>
        /// Jump address of ui.
        /// </summary>
        public readonly string UiURL;
        /// <summary>
        /// Update time.
        /// </summary>
        public readonly int UpdateTime;
        /// <summary>
        /// User&amp;amp;#39;s nickname.
        /// </summary>
        public readonly string UserAlias;
        /// <summary>
        /// User appid.
        /// </summary>
        public readonly int UserAppId;
        /// <summary>
        /// User uin.
        /// </summary>
        public readonly string UserUin;

        [OutputConstructor]
        private GetDescribeDataEngineDataEngineResult(
            bool autoResume,

            bool autoSuspend,

            int autoSuspendTime,

            string childImageVersionId,

            string cidrBlock,

            string clusterType,

            int createTime,

            int crontabResumeSuspend,

            ImmutableArray<Outputs.GetDescribeDataEngineDataEngineCrontabResumeSuspendStrategyResult> crontabResumeSuspendStrategies,

            string dataEngineId,

            string dataEngineName,

            bool defaultDataEngine,

            bool defaultHouse,

            int elasticLimit,

            bool elasticSwitch,

            string engineExecType,

            string engineType,

            string expireTime,

            string imageVersionId,

            string imageVersionName,

            string isolatedTime,

            int maxClusters,

            int maxConcurrency,

            string message,

            int minClusters,

            int mode,

            ImmutableArray<Outputs.GetDescribeDataEngineDataEngineNetworkConnectionSetResult> networkConnectionSets,

            ImmutableArray<string> permissions,

            string quotaId,

            int renewFlag,

            string resourceType,

            string reversalTime,

            ImmutableArray<Outputs.GetDescribeDataEngineDataEngineSessionResourceTemplateResult> sessionResourceTemplates,

            int size,

            int spendAfter,

            bool startStandbyCluster,

            int state,

            string subAccountUin,

            ImmutableArray<Outputs.GetDescribeDataEngineDataEngineTagListResult> tagLists,

            int tolerableQueueTime,

            string uiURL,

            int updateTime,

            string userAlias,

            int userAppId,

            string userUin)
        {
            AutoResume = autoResume;
            AutoSuspend = autoSuspend;
            AutoSuspendTime = autoSuspendTime;
            ChildImageVersionId = childImageVersionId;
            CidrBlock = cidrBlock;
            ClusterType = clusterType;
            CreateTime = createTime;
            CrontabResumeSuspend = crontabResumeSuspend;
            CrontabResumeSuspendStrategies = crontabResumeSuspendStrategies;
            DataEngineId = dataEngineId;
            DataEngineName = dataEngineName;
            DefaultDataEngine = defaultDataEngine;
            DefaultHouse = defaultHouse;
            ElasticLimit = elasticLimit;
            ElasticSwitch = elasticSwitch;
            EngineExecType = engineExecType;
            EngineType = engineType;
            ExpireTime = expireTime;
            ImageVersionId = imageVersionId;
            ImageVersionName = imageVersionName;
            IsolatedTime = isolatedTime;
            MaxClusters = maxClusters;
            MaxConcurrency = maxConcurrency;
            Message = message;
            MinClusters = minClusters;
            Mode = mode;
            NetworkConnectionSets = networkConnectionSets;
            Permissions = permissions;
            QuotaId = quotaId;
            RenewFlag = renewFlag;
            ResourceType = resourceType;
            ReversalTime = reversalTime;
            SessionResourceTemplates = sessionResourceTemplates;
            Size = size;
            SpendAfter = spendAfter;
            StartStandbyCluster = startStandbyCluster;
            State = state;
            SubAccountUin = subAccountUin;
            TagLists = tagLists;
            TolerableQueueTime = tolerableQueueTime;
            UiURL = uiURL;
            UpdateTime = updateTime;
            UserAlias = userAlias;
            UserAppId = userAppId;
            UserUin = userUin;
        }
    }
}
