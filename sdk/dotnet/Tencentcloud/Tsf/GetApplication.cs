// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Tsf
{
    public static class GetApplication
    {
        /// <summary>
        /// Use this data source to query detailed information of tsf application
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var application = Tencentcloud.Tsf.GetApplication.Invoke(new()
        ///     {
        ///         ApplicationIdLists = new[]
        ///         {
        ///             "application-a24x29xv",
        ///         },
        ///         ApplicationType = "V",
        ///         MicroserviceType = "N",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetApplicationResult> InvokeAsync(GetApplicationArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApplicationResult>("tencentcloud:Tsf/getApplication:getApplication", args ?? new GetApplicationArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of tsf application
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var application = Tencentcloud.Tsf.GetApplication.Invoke(new()
        ///     {
        ///         ApplicationIdLists = new[]
        ///         {
        ///             "application-a24x29xv",
        ///         },
        ///         ApplicationType = "V",
        ///         MicroserviceType = "N",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetApplicationResult> Invoke(GetApplicationInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationResult>("tencentcloud:Tsf/getApplication:getApplication", args ?? new GetApplicationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicationArgs : global::Pulumi.InvokeArgs
    {
        [Input("applicationIdLists")]
        private List<string>? _applicationIdLists;

        /// <summary>
        /// Id list.
        /// </summary>
        public List<string> ApplicationIdLists
        {
            get => _applicationIdLists ?? (_applicationIdLists = new List<string>());
            set => _applicationIdLists = value;
        }

        [Input("applicationResourceTypeLists")]
        private List<string>? _applicationResourceTypeLists;

        /// <summary>
        /// An array of application resource types.
        /// </summary>
        public List<string> ApplicationResourceTypeLists
        {
            get => _applicationResourceTypeLists ?? (_applicationResourceTypeLists = new List<string>());
            set => _applicationResourceTypeLists = value;
        }

        /// <summary>
        /// The application type. V OR C, V means VM, C means container.
        /// </summary>
        [Input("applicationType")]
        public string? ApplicationType { get; set; }

        /// <summary>
        /// The microservice type of the application.
        /// </summary>
        [Input("microserviceType")]
        public string? MicroserviceType { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetApplicationArgs()
        {
        }
        public static new GetApplicationArgs Empty => new GetApplicationArgs();
    }

    public sealed class GetApplicationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("applicationIdLists")]
        private InputList<string>? _applicationIdLists;

        /// <summary>
        /// Id list.
        /// </summary>
        public InputList<string> ApplicationIdLists
        {
            get => _applicationIdLists ?? (_applicationIdLists = new InputList<string>());
            set => _applicationIdLists = value;
        }

        [Input("applicationResourceTypeLists")]
        private InputList<string>? _applicationResourceTypeLists;

        /// <summary>
        /// An array of application resource types.
        /// </summary>
        public InputList<string> ApplicationResourceTypeLists
        {
            get => _applicationResourceTypeLists ?? (_applicationResourceTypeLists = new InputList<string>());
            set => _applicationResourceTypeLists = value;
        }

        /// <summary>
        /// The application type. V OR C, V means VM, C means container.
        /// </summary>
        [Input("applicationType")]
        public Input<string>? ApplicationType { get; set; }

        /// <summary>
        /// The microservice type of the application.
        /// </summary>
        [Input("microserviceType")]
        public Input<string>? MicroserviceType { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetApplicationInvokeArgs()
        {
        }
        public static new GetApplicationInvokeArgs Empty => new GetApplicationInvokeArgs();
    }


    [OutputType]
    public sealed class GetApplicationResult
    {
        public readonly ImmutableArray<string> ApplicationIdLists;
        public readonly ImmutableArray<string> ApplicationResourceTypeLists;
        /// <summary>
        /// The type of the application.
        /// </summary>
        public readonly string? ApplicationType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The microservice type of the application.
        /// </summary>
        public readonly string? MicroserviceType;
        public readonly string? ResultOutputFile;
        /// <summary>
        /// The application paging list information.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetApplicationResultResult> Results;

        [OutputConstructor]
        private GetApplicationResult(
            ImmutableArray<string> applicationIdLists,

            ImmutableArray<string> applicationResourceTypeLists,

            string? applicationType,

            string id,

            string? microserviceType,

            string? resultOutputFile,

            ImmutableArray<Outputs.GetApplicationResultResult> results)
        {
            ApplicationIdLists = applicationIdLists;
            ApplicationResourceTypeLists = applicationResourceTypeLists;
            ApplicationType = applicationType;
            Id = id;
            MicroserviceType = microserviceType;
            ResultOutputFile = resultOutputFile;
            Results = results;
        }
    }
}
