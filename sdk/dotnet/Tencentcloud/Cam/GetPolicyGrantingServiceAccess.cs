// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Cam
{
    public static class GetPolicyGrantingServiceAccess
    {
        /// <summary>
        /// Use this data source to query detailed information of cam policy_granting_service_access
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var policyGrantingServiceAccess = Output.Create(Tencentcloud.Cam.GetPolicyGrantingServiceAccess.InvokeAsync(new Tencentcloud.Cam.GetPolicyGrantingServiceAccessArgs
        ///         {
        ///             RoleId = 4611686018436804608,
        ///             ServiceType = "cam",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPolicyGrantingServiceAccessResult> InvokeAsync(GetPolicyGrantingServiceAccessArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPolicyGrantingServiceAccessResult>("tencentcloud:Cam/getPolicyGrantingServiceAccess:getPolicyGrantingServiceAccess", args ?? new GetPolicyGrantingServiceAccessArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of cam policy_granting_service_access
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var policyGrantingServiceAccess = Output.Create(Tencentcloud.Cam.GetPolicyGrantingServiceAccess.InvokeAsync(new Tencentcloud.Cam.GetPolicyGrantingServiceAccessArgs
        ///         {
        ///             RoleId = 4611686018436804608,
        ///             ServiceType = "cam",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPolicyGrantingServiceAccessResult> Invoke(GetPolicyGrantingServiceAccessInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPolicyGrantingServiceAccessResult>("tencentcloud:Cam/getPolicyGrantingServiceAccess:getPolicyGrantingServiceAccess", args ?? new GetPolicyGrantingServiceAccessInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicyGrantingServiceAccessArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Group Id, one of the three (TargetUin, RoleId, GroupId) must be passed.
        /// </summary>
        [Input("groupId")]
        public int? GroupId { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// Role Id, one of the three (TargetUin, RoleId, GroupId) must be passed.
        /// </summary>
        [Input("roleId")]
        public int? RoleId { get; set; }

        /// <summary>
        /// Service type, this field needs to be passed when viewing the details of the service authorization interface.
        /// </summary>
        [Input("serviceType")]
        public string? ServiceType { get; set; }

        /// <summary>
        /// Sub-account uin, one of the three (TargetUin, RoleId, GroupId) must be passed.
        /// </summary>
        [Input("targetUin")]
        public int? TargetUin { get; set; }

        public GetPolicyGrantingServiceAccessArgs()
        {
        }
    }

    public sealed class GetPolicyGrantingServiceAccessInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Group Id, one of the three (TargetUin, RoleId, GroupId) must be passed.
        /// </summary>
        [Input("groupId")]
        public Input<int>? GroupId { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// Role Id, one of the three (TargetUin, RoleId, GroupId) must be passed.
        /// </summary>
        [Input("roleId")]
        public Input<int>? RoleId { get; set; }

        /// <summary>
        /// Service type, this field needs to be passed when viewing the details of the service authorization interface.
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        /// <summary>
        /// Sub-account uin, one of the three (TargetUin, RoleId, GroupId) must be passed.
        /// </summary>
        [Input("targetUin")]
        public Input<int>? TargetUin { get; set; }

        public GetPolicyGrantingServiceAccessInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPolicyGrantingServiceAccessResult
    {
        public readonly int? GroupId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicyGrantingServiceAccessListResult> Lists;
        public readonly string? ResultOutputFile;
        public readonly int? RoleId;
        /// <summary>
        /// Service type.
        /// </summary>
        public readonly string? ServiceType;
        public readonly int? TargetUin;

        [OutputConstructor]
        private GetPolicyGrantingServiceAccessResult(
            int? groupId,

            string id,

            ImmutableArray<Outputs.GetPolicyGrantingServiceAccessListResult> lists,

            string? resultOutputFile,

            int? roleId,

            string? serviceType,

            int? targetUin)
        {
            GroupId = groupId;
            Id = id;
            Lists = lists;
            ResultOutputFile = resultOutputFile;
            RoleId = roleId;
            ServiceType = serviceType;
            TargetUin = targetUin;
        }
    }
}
