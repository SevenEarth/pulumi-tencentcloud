// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Eks.Outputs
{

    [OutputType]
    public sealed class ContainerInstanceInitContainer
    {
        /// <summary>
        /// Container launch argument list.
        /// </summary>
        public readonly ImmutableArray<string> Args;
        /// <summary>
        /// Container launch command list.
        /// </summary>
        public readonly ImmutableArray<string> Commands;
        /// <summary>
        /// Number of cpu core of container.
        /// </summary>
        public readonly double? Cpu;
        /// <summary>
        /// Map of environment variables of container OS.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? EnvVars;
        /// <summary>
        /// Image of Container.
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// Memory size of container.
        /// </summary>
        public readonly double? Memory;
        /// <summary>
        /// Name of Container.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of volume mount informations.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerInstanceInitContainerVolumeMount> VolumeMounts;
        /// <summary>
        /// Container working directory.
        /// </summary>
        public readonly string? WorkingDir;

        [OutputConstructor]
        private ContainerInstanceInitContainer(
            ImmutableArray<string> args,

            ImmutableArray<string> commands,

            double? cpu,

            ImmutableDictionary<string, object>? envVars,

            string image,

            double? memory,

            string name,

            ImmutableArray<Outputs.ContainerInstanceInitContainerVolumeMount> volumeMounts,

            string? workingDir)
        {
            Args = args;
            Commands = commands;
            Cpu = cpu;
            EnvVars = envVars;
            Image = image;
            Memory = memory;
            Name = name;
            VolumeMounts = volumeMounts;
            WorkingDir = workingDir;
        }
    }
}
