// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.ApiGateway
{
    public static class GetThrottlingServices
    {
        /// <summary>
        /// Use this data source to query API gateway throttling services.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var service = new Tencentcloud.ApiGateway.Service("service", new Tencentcloud.ApiGateway.ServiceArgs
        ///         {
        ///             ServiceName = "niceservice",
        ///             Protocol = "http&amp;https",
        ///             ServiceDesc = "your nice service",
        ///             NetTypes = 
        ///             {
        ///                 "INNER",
        ///                 "OUTER",
        ///             },
        ///             IpVersion = "IPv4",
        ///             ReleaseLimit = 100,
        ///             PreLimit = 100,
        ///             TestLimit = 100,
        ///         });
        ///         var id = Tencentcloud.ApiGateway.GetThrottlingServices.Invoke(new Tencentcloud.ApiGateway.GetThrottlingServicesInvokeArgs
        ///         {
        ///             ServiceId = service.Id,
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetThrottlingServicesResult> InvokeAsync(GetThrottlingServicesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetThrottlingServicesResult>("tencentcloud:ApiGateway/getThrottlingServices:getThrottlingServices", args ?? new GetThrottlingServicesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query API gateway throttling services.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var service = new Tencentcloud.ApiGateway.Service("service", new Tencentcloud.ApiGateway.ServiceArgs
        ///         {
        ///             ServiceName = "niceservice",
        ///             Protocol = "http&amp;https",
        ///             ServiceDesc = "your nice service",
        ///             NetTypes = 
        ///             {
        ///                 "INNER",
        ///                 "OUTER",
        ///             },
        ///             IpVersion = "IPv4",
        ///             ReleaseLimit = 100,
        ///             PreLimit = 100,
        ///             TestLimit = 100,
        ///         });
        ///         var id = Tencentcloud.ApiGateway.GetThrottlingServices.Invoke(new Tencentcloud.ApiGateway.GetThrottlingServicesInvokeArgs
        ///         {
        ///             ServiceId = service.Id,
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetThrottlingServicesResult> Invoke(GetThrottlingServicesInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetThrottlingServicesResult>("tencentcloud:ApiGateway/getThrottlingServices:getThrottlingServices", args ?? new GetThrottlingServicesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetThrottlingServicesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// Service ID for query.
        /// </summary>
        [Input("serviceId")]
        public string? ServiceId { get; set; }

        public GetThrottlingServicesArgs()
        {
        }
    }

    public sealed class GetThrottlingServicesInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// Service ID for query.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        public GetThrottlingServicesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetThrottlingServicesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of Throttling policy.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetThrottlingServicesListResult> Lists;
        public readonly string? ResultOutputFile;
        /// <summary>
        /// Service ID for query.
        /// </summary>
        public readonly string? ServiceId;

        [OutputConstructor]
        private GetThrottlingServicesResult(
            string id,

            ImmutableArray<Outputs.GetThrottlingServicesListResult> lists,

            string? resultOutputFile,

            string? serviceId)
        {
            Id = id;
            Lists = lists;
            ResultOutputFile = resultOutputFile;
            ServiceId = serviceId;
        }
    }
}
