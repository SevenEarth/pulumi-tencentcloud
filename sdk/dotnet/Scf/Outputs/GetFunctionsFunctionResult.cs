// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Scf.Outputs
{

    [OutputType]
    public sealed class GetFunctionsFunctionResult
    {
        /// <summary>
        /// CLS logset ID of the SCF function.
        /// </summary>
        public readonly string ClsLogsetId;
        /// <summary>
        /// CLS topic ID of the SCF function.
        /// </summary>
        public readonly string ClsTopicId;
        /// <summary>
        /// Code error of the SCF function.
        /// </summary>
        public readonly string CodeError;
        /// <summary>
        /// Code result of the SCF function.
        /// </summary>
        public readonly string CodeResult;
        /// <summary>
        /// Code size of the SCF function.
        /// </summary>
        public readonly int CodeSize;
        /// <summary>
        /// Create time of the SCF function trigger.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// Description of the SCF function to be queried.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Whether EIP is a fixed IP.
        /// </summary>
        public readonly bool EipFixed;
        /// <summary>
        /// EIP list of the SCF function.
        /// </summary>
        public readonly ImmutableArray<string> Eips;
        /// <summary>
        /// Whether the EIP enabled.
        /// </summary>
        public readonly bool EnableEipConfig;
        /// <summary>
        /// Whether the public net enabled.
        /// </summary>
        public readonly bool EnablePublicNet;
        /// <summary>
        /// Environment variable of the SCF function.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Environment;
        /// <summary>
        /// Errno of the SCF function.
        /// </summary>
        public readonly int ErrNo;
        /// <summary>
        /// Handler of the SCF function.
        /// </summary>
        public readonly string Handler;
        /// <summary>
        /// Host of the SCF function.
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// Whether to automatically install dependencies.
        /// </summary>
        public readonly bool InstallDependency;
        /// <summary>
        /// Whether to enable L5.
        /// </summary>
        public readonly bool L5Enable;
        /// <summary>
        /// Memory size of the SCF function runtime, unit is M.
        /// </summary>
        public readonly int MemSize;
        /// <summary>
        /// Modify time of the SCF function trigger.
        /// </summary>
        public readonly string ModifyTime;
        /// <summary>
        /// Name of the SCF function to be queried.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Namespace of the SCF function to be queried.
        /// </summary>
        public readonly string Namespace;
        /// <summary>
        /// CAM role of the SCF function.
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// Runtime of the SCF function.
        /// </summary>
        public readonly string Runtime;
        /// <summary>
        /// Status of the SCF function.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Status description of the SCF function.
        /// </summary>
        public readonly string StatusDesc;
        /// <summary>
        /// Subnet ID of the SCF function.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// Tags of the SCF function to be queried, can use up to 10 tags.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Tags;
        /// <summary>
        /// Timeout of the SCF function maximum execution time, unit is second.
        /// </summary>
        public readonly int Timeout;
        /// <summary>
        /// Trigger details list the SCF function. Each element contains the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionsFunctionTriggerInfoResult> TriggerInfos;
        /// <summary>
        /// Vip of the SCF function.
        /// </summary>
        public readonly string Vip;
        /// <summary>
        /// VPC ID of the SCF function.
        /// </summary>
        public readonly string VpcId;

        [OutputConstructor]
        private GetFunctionsFunctionResult(
            string clsLogsetId,

            string clsTopicId,

            string codeError,

            string codeResult,

            int codeSize,

            string createTime,

            string description,

            bool eipFixed,

            ImmutableArray<string> eips,

            bool enableEipConfig,

            bool enablePublicNet,

            ImmutableDictionary<string, object> environment,

            int errNo,

            string handler,

            string host,

            bool installDependency,

            bool l5Enable,

            int memSize,

            string modifyTime,

            string name,

            string @namespace,

            string role,

            string runtime,

            string status,

            string statusDesc,

            string subnetId,

            ImmutableDictionary<string, object> tags,

            int timeout,

            ImmutableArray<Outputs.GetFunctionsFunctionTriggerInfoResult> triggerInfos,

            string vip,

            string vpcId)
        {
            ClsLogsetId = clsLogsetId;
            ClsTopicId = clsTopicId;
            CodeError = codeError;
            CodeResult = codeResult;
            CodeSize = codeSize;
            CreateTime = createTime;
            Description = description;
            EipFixed = eipFixed;
            Eips = eips;
            EnableEipConfig = enableEipConfig;
            EnablePublicNet = enablePublicNet;
            Environment = environment;
            ErrNo = errNo;
            Handler = handler;
            Host = host;
            InstallDependency = installDependency;
            L5Enable = l5Enable;
            MemSize = memSize;
            ModifyTime = modifyTime;
            Name = name;
            Namespace = @namespace;
            Role = role;
            Runtime = runtime;
            Status = status;
            StatusDesc = statusDesc;
            SubnetId = subnetId;
            Tags = tags;
            Timeout = timeout;
            TriggerInfos = triggerInfos;
            Vip = vip;
            VpcId = vpcId;
        }
    }
}
