// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Cdn
{
    public static class Domains
    {
        public static Task<DomainsResult> InvokeAsync(DomainsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<DomainsResult>("tencentcloud:Cdn/domains:Domains", args ?? new DomainsArgs(), options.WithDefaults());

        public static Output<DomainsResult> Invoke(DomainsInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<DomainsResult>("tencentcloud:Cdn/domains:Domains", args ?? new DomainsInvokeArgs(), options.WithDefaults());
    }


    public sealed class DomainsArgs : Pulumi.InvokeArgs
    {
        [Input("domain")]
        public string? Domain { get; set; }

        [Input("fullUrlCache")]
        public bool? FullUrlCache { get; set; }

        [Input("httpsSwitch")]
        public string? HttpsSwitch { get; set; }

        [Input("originPullProtocol")]
        public string? OriginPullProtocol { get; set; }

        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        [Input("serviceType")]
        public string? ServiceType { get; set; }

        public DomainsArgs()
        {
        }
    }

    public sealed class DomainsInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("fullUrlCache")]
        public Input<bool>? FullUrlCache { get; set; }

        [Input("httpsSwitch")]
        public Input<string>? HttpsSwitch { get; set; }

        [Input("originPullProtocol")]
        public Input<string>? OriginPullProtocol { get; set; }

        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        public DomainsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class DomainsResult
    {
        public readonly string? Domain;
        public readonly ImmutableArray<Outputs.DomainsDomainListResult> DomainLists;
        public readonly bool? FullUrlCache;
        public readonly string? HttpsSwitch;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OriginPullProtocol;
        public readonly string? ResultOutputFile;
        public readonly string? ServiceType;

        [OutputConstructor]
        private DomainsResult(
            string? domain,

            ImmutableArray<Outputs.DomainsDomainListResult> domainLists,

            bool? fullUrlCache,

            string? httpsSwitch,

            string id,

            string? originPullProtocol,

            string? resultOutputFile,

            string? serviceType)
        {
            Domain = domain;
            DomainLists = domainLists;
            FullUrlCache = fullUrlCache;
            HttpsSwitch = httpsSwitch;
            Id = id;
            OriginPullProtocol = originPullProtocol;
            ResultOutputFile = resultOutputFile;
            ServiceType = serviceType;
        }
    }
}
