// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of kubernetes clusterInstances
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const clusterInstances = tencentcloud.Kubernetes.getClusterInstances({
 *     clusterId: "cls-ely08ic4",
 *     filters: [{
 *         name: "nodepool-id",
 *         values: ["np-p4e6whqu"],
 *     }],
 *     instanceIds: ["ins-kqmx8dm2"],
 *     instanceRole: "WORKER",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getClusterInstances(args: GetClusterInstancesArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterInstancesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:Kubernetes/getClusterInstances:getClusterInstances", {
        "clusterId": args.clusterId,
        "filters": args.filters,
        "instanceIds": args.instanceIds,
        "instanceRole": args.instanceRole,
        "resultOutputFile": args.resultOutputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getClusterInstances.
 */
export interface GetClusterInstancesArgs {
    /**
     * ID of the cluster.
     */
    clusterId: string;
    /**
     * List of filter conditions. The optional values of Name are `nodepool-id` and `nodepool-instance-type`. Name is `nodepool-id`, which means filtering machines based on node pool id, and Value is the specific node pool id. Name is `nodepool-instance-type`, which indicates how the node is added to the node pool. Value is MANUALLY_ADDED (manually added to the node pool), AUTOSCALING_ADDED (joined by scaling group expansion method), ALL (manually join the node pool and join the node pool through scaling group expansion).
     */
    filters?: inputs.Kubernetes.GetClusterInstancesFilter[];
    /**
     * List of node instance IDs to be obtained. If it is empty, it means pulling all node instances in the cluster.
     */
    instanceIds?: string[];
    /**
     * Node role, MASTER, WORKER, ETCD, MASTER_ETCD,ALL, default is WORKER.
     */
    instanceRole?: string;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
}

/**
 * A collection of values returned by getClusterInstances.
 */
export interface GetClusterInstancesResult {
    readonly clusterId: string;
    readonly filters?: outputs.Kubernetes.GetClusterInstancesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceIds?: string[];
    /**
     * Node role, MASTER, WORKER, ETCD, MASTER_ETCD,ALL, default is WORKER.
     */
    readonly instanceRole?: string;
    /**
     * List of instances in the cluster.
     */
    readonly instanceSets: outputs.Kubernetes.GetClusterInstancesInstanceSet[];
    readonly resultOutputFile?: string;
}
/**
 * Use this data source to query detailed information of kubernetes clusterInstances
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const clusterInstances = tencentcloud.Kubernetes.getClusterInstances({
 *     clusterId: "cls-ely08ic4",
 *     filters: [{
 *         name: "nodepool-id",
 *         values: ["np-p4e6whqu"],
 *     }],
 *     instanceIds: ["ins-kqmx8dm2"],
 *     instanceRole: "WORKER",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getClusterInstancesOutput(args: GetClusterInstancesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterInstancesResult> {
    return pulumi.output(args).apply((a: any) => getClusterInstances(a, opts))
}

/**
 * A collection of arguments for invoking getClusterInstances.
 */
export interface GetClusterInstancesOutputArgs {
    /**
     * ID of the cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * List of filter conditions. The optional values of Name are `nodepool-id` and `nodepool-instance-type`. Name is `nodepool-id`, which means filtering machines based on node pool id, and Value is the specific node pool id. Name is `nodepool-instance-type`, which indicates how the node is added to the node pool. Value is MANUALLY_ADDED (manually added to the node pool), AUTOSCALING_ADDED (joined by scaling group expansion method), ALL (manually join the node pool and join the node pool through scaling group expansion).
     */
    filters?: pulumi.Input<pulumi.Input<inputs.Kubernetes.GetClusterInstancesFilterArgs>[]>;
    /**
     * List of node instance IDs to be obtained. If it is empty, it means pulling all node instances in the cluster.
     */
    instanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Node role, MASTER, WORKER, ETCD, MASTER_ETCD,ALL, default is WORKER.
     */
    instanceRole?: pulumi.Input<string>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
}
