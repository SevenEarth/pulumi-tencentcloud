// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provide a resource to create serverless node pool of cluster.
 *
 * ## Example Usage
 * ### Add serverless node pool to a cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const config = new pulumi.Config();
 * const availabilityZone = config.get("availabilityZone") || "ap-guangzhou-3";
 * const exampleClusterCidr = config.get("exampleClusterCidr") || "10.31.0.0/16";
 * const vpc = tencentcloud.Vpc.getSubnets({
 *     isDefault: true,
 *     availabilityZone: availabilityZone,
 * });
 * const vpcId = vpc.then(vpc => vpc.instanceLists?[0]?.vpcId);
 * const subnetId = vpc.then(vpc => vpc.instanceLists?[0]?.subnetId);
 * const sg = tencentcloud.Security.getGroups({
 *     name: "default",
 * });
 * const sgId = sg.then(sg => sg.securityGroups?[0]?.securityGroupId);
 * const exampleCluster = new tencentcloud.kubernetes.Cluster("exampleCluster", {
 *     vpcId: vpcId,
 *     clusterCidr: exampleClusterCidr,
 *     clusterMaxPodNum: 32,
 *     clusterName: "tf_example_cluster",
 *     clusterDesc: "tf example cluster",
 *     clusterMaxServiceNum: 32,
 *     clusterVersion: "1.18.4",
 *     clusterDeployType: "MANAGED_CLUSTER",
 * });
 * const exampleServerlessNodePool = new tencentcloud.kubernetes.ServerlessNodePool("exampleServerlessNodePool", {
 *     clusterId: exampleCluster.id,
 *     serverlessNodes: [
 *         {
 *             displayName: "tf_example_serverless_node1",
 *             subnetId: subnetId,
 *         },
 *         {
 *             displayName: "tf_example_serverless_node2",
 *             subnetId: subnetId,
 *         },
 *     ],
 *     securityGroupIds: [sgId],
 *     labels: {
 *         label1: "value1",
 *         label2: "value2",
 *     },
 * });
 * ```
 * ### Adding taints to the virtual nodes under this node pool
 *
 * The pods without appropriate tolerations will not be scheduled on this node. Refer [taint-and-toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) for more details.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 *
 * const example = new tencentcloud.kubernetes.ServerlessNodePool("example", {
 *     clusterId: tencentcloud_kubernetes_cluster.example.id,
 *     serverlessNodes: [
 *         {
 *             displayName: "tf_example_serverless_node1",
 *             subnetId: local.subnet_id,
 *         },
 *         {
 *             displayName: "tf_example_serverless_node2",
 *             subnetId: local.subnet_id,
 *         },
 *     ],
 *     securityGroupIds: [local.sg_id],
 *     labels: {
 *         label1: "value1",
 *         label2: "value2",
 *     },
 *     taints: [
 *         {
 *             key: "key1",
 *             value: "value1",
 *             effect: "NoSchedule",
 *         },
 *         {
 *             key: "key1",
 *             value: "value1",
 *             effect: "NoExecute",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * serverless node pool can be imported, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:Kubernetes/serverlessNodePool:ServerlessNodePool test cls-xxx#np-xxx
 * ```
 */
export class ServerlessNodePool extends pulumi.CustomResource {
    /**
     * Get an existing ServerlessNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerlessNodePoolState, opts?: pulumi.CustomResourceOptions): ServerlessNodePool {
        return new ServerlessNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Kubernetes/serverlessNodePool:ServerlessNodePool';

    /**
     * Returns true if the given object is an instance of ServerlessNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerlessNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerlessNodePool.__pulumiType;
    }

    /**
     * cluster id of serverless node pool.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * labels of serverless node.
     */
    public readonly labels!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * life state of serverless node pool.
     */
    public /*out*/ readonly lifeState!: pulumi.Output<string>;
    /**
     * serverless node pool name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * security groups of serverless node pool.
     */
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * node list of serverless node pool.
     */
    public readonly serverlessNodes!: pulumi.Output<outputs.Kubernetes.ServerlessNodePoolServerlessNode[]>;
    /**
     * taints of serverless node.
     */
    public readonly taints!: pulumi.Output<outputs.Kubernetes.ServerlessNodePoolTaint[] | undefined>;

    /**
     * Create a ServerlessNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerlessNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerlessNodePoolArgs | ServerlessNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerlessNodePoolState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lifeState"] = state ? state.lifeState : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["serverlessNodes"] = state ? state.serverlessNodes : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
        } else {
            const args = argsOrState as ServerlessNodePoolArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.serverlessNodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverlessNodes'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["serverlessNodes"] = args ? args.serverlessNodes : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["lifeState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerlessNodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerlessNodePool resources.
 */
export interface ServerlessNodePoolState {
    /**
     * cluster id of serverless node pool.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * labels of serverless node.
     */
    labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * life state of serverless node pool.
     */
    lifeState?: pulumi.Input<string>;
    /**
     * serverless node pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * security groups of serverless node pool.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * node list of serverless node pool.
     */
    serverlessNodes?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ServerlessNodePoolServerlessNode>[]>;
    /**
     * taints of serverless node.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ServerlessNodePoolTaint>[]>;
}

/**
 * The set of arguments for constructing a ServerlessNodePool resource.
 */
export interface ServerlessNodePoolArgs {
    /**
     * cluster id of serverless node pool.
     */
    clusterId: pulumi.Input<string>;
    /**
     * labels of serverless node.
     */
    labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * serverless node pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * security groups of serverless node pool.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * node list of serverless node pool.
     */
    serverlessNodes: pulumi.Input<pulumi.Input<inputs.Kubernetes.ServerlessNodePoolServerlessNode>[]>;
    /**
     * taints of serverless node.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ServerlessNodePoolTaint>[]>;
}
