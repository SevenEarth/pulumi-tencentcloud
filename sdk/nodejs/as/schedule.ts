// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource for an AS (Auto scaling) schedule.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const zones = tencentcloud.Availability.getZonesByProduct({
 *     product: "as",
 * });
 * const image = tencentcloud.Images.getInstance({
 *     imageTypes: ["PUBLIC_IMAGE"],
 *     osName: "TencentOS Server 3.2 (Final)",
 * });
 * const vpc = new tencentcloud.vpc.Instance("vpc", {cidrBlock: "10.0.0.0/16"});
 * const subnet = new tencentcloud.subnet.Instance("subnet", {
 *     vpcId: vpc.id,
 *     cidrBlock: "10.0.0.0/16",
 *     availabilityZone: zones.then(zones => zones.zones?[0]?.name),
 * });
 * const exampleScalingConfig = new tencentcloud.as.ScalingConfig("exampleScalingConfig", {
 *     configurationName: "tf-example",
 *     imageId: image.then(image => image.images?[0]?.imageId),
 *     instanceTypes: [
 *         "SA1.SMALL1",
 *         "SA2.SMALL1",
 *         "SA2.SMALL2",
 *         "SA2.SMALL4",
 *     ],
 *     instanceNameSettings: {
 *         instanceName: "test-ins-name",
 *     },
 * });
 * const exampleScalingGroup = new tencentcloud.as.ScalingGroup("exampleScalingGroup", {
 *     scalingGroupName: "tf-example",
 *     configurationId: exampleScalingConfig.id,
 *     maxSize: 1,
 *     minSize: 0,
 *     vpcId: vpc.id,
 *     subnetIds: [subnet.id],
 * });
 * const exampleSchedule = new tencentcloud.as.Schedule("exampleSchedule", {
 *     scalingGroupId: exampleScalingGroup.id,
 *     scheduleActionName: "tf-as-schedule",
 *     maxSize: 10,
 *     minSize: 0,
 *     desiredCapacity: 0,
 *     startTime: "2019-01-01T00:00:00+08:00",
 *     endTime: "2019-12-01T00:00:00+08:00",
 *     recurrence: "0 0 * * *",
 * });
 * ```
 */
export class Schedule extends pulumi.CustomResource {
    /**
     * Get an existing Schedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScheduleState, opts?: pulumi.CustomResourceOptions): Schedule {
        return new Schedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:As/schedule:Schedule';

    /**
     * Returns true if the given object is an instance of Schedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Schedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Schedule.__pulumiType;
    }

    /**
     * The desired number of CVM instances that should be running in the group.
     */
    public readonly desiredCapacity!: pulumi.Output<number>;
    /**
     * The time for this action to end, in "YYYY-MM-DDThh:mm:ss+08:00" format (UTC+8).
     */
    public readonly endTime!: pulumi.Output<string | undefined>;
    /**
     * The maximum size for the Auto Scaling group.
     */
    public readonly maxSize!: pulumi.Output<number>;
    /**
     * The minimum size for the Auto Scaling group.
     */
    public readonly minSize!: pulumi.Output<number>;
    /**
     * The time when recurring future actions will start. Start time is specified by the user following the Unix cron syntax format. And this argument should be set with endTime together.
     */
    public readonly recurrence!: pulumi.Output<string | undefined>;
    /**
     * ID of a scaling group.
     */
    public readonly scalingGroupId!: pulumi.Output<string>;
    /**
     * The name of this scaling action.
     */
    public readonly scheduleActionName!: pulumi.Output<string>;
    /**
     * The time for this action to start, in "YYYY-MM-DDThh:mm:ss+08:00" format (UTC+8).
     */
    public readonly startTime!: pulumi.Output<string>;

    /**
     * Create a Schedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScheduleArgs | ScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScheduleState | undefined;
            resourceInputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["recurrence"] = state ? state.recurrence : undefined;
            resourceInputs["scalingGroupId"] = state ? state.scalingGroupId : undefined;
            resourceInputs["scheduleActionName"] = state ? state.scheduleActionName : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
        } else {
            const args = argsOrState as ScheduleArgs | undefined;
            if ((!args || args.desiredCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'desiredCapacity'");
            }
            if ((!args || args.maxSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxSize'");
            }
            if ((!args || args.minSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minSize'");
            }
            if ((!args || args.scalingGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalingGroupId'");
            }
            if ((!args || args.scheduleActionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduleActionName'");
            }
            if ((!args || args.startTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'startTime'");
            }
            resourceInputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["recurrence"] = args ? args.recurrence : undefined;
            resourceInputs["scalingGroupId"] = args ? args.scalingGroupId : undefined;
            resourceInputs["scheduleActionName"] = args ? args.scheduleActionName : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Schedule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Schedule resources.
 */
export interface ScheduleState {
    /**
     * The desired number of CVM instances that should be running in the group.
     */
    desiredCapacity?: pulumi.Input<number>;
    /**
     * The time for this action to end, in "YYYY-MM-DDThh:mm:ss+08:00" format (UTC+8).
     */
    endTime?: pulumi.Input<string>;
    /**
     * The maximum size for the Auto Scaling group.
     */
    maxSize?: pulumi.Input<number>;
    /**
     * The minimum size for the Auto Scaling group.
     */
    minSize?: pulumi.Input<number>;
    /**
     * The time when recurring future actions will start. Start time is specified by the user following the Unix cron syntax format. And this argument should be set with endTime together.
     */
    recurrence?: pulumi.Input<string>;
    /**
     * ID of a scaling group.
     */
    scalingGroupId?: pulumi.Input<string>;
    /**
     * The name of this scaling action.
     */
    scheduleActionName?: pulumi.Input<string>;
    /**
     * The time for this action to start, in "YYYY-MM-DDThh:mm:ss+08:00" format (UTC+8).
     */
    startTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Schedule resource.
 */
export interface ScheduleArgs {
    /**
     * The desired number of CVM instances that should be running in the group.
     */
    desiredCapacity: pulumi.Input<number>;
    /**
     * The time for this action to end, in "YYYY-MM-DDThh:mm:ss+08:00" format (UTC+8).
     */
    endTime?: pulumi.Input<string>;
    /**
     * The maximum size for the Auto Scaling group.
     */
    maxSize: pulumi.Input<number>;
    /**
     * The minimum size for the Auto Scaling group.
     */
    minSize: pulumi.Input<number>;
    /**
     * The time when recurring future actions will start. Start time is specified by the user following the Unix cron syntax format. And this argument should be set with endTime together.
     */
    recurrence?: pulumi.Input<string>;
    /**
     * ID of a scaling group.
     */
    scalingGroupId: pulumi.Input<string>;
    /**
     * The name of this scaling action.
     */
    scheduleActionName: pulumi.Input<string>;
    /**
     * The time for this action to start, in "YYYY-MM-DDThh:mm:ss+08:00" format (UTC+8).
     */
    startTime: pulumi.Input<string>;
}
