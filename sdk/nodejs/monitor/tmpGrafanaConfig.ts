// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a monitor tmpGrafanaConfig
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 *
 * const config = new pulumi.Config();
 * const availabilityZone = config.get("availabilityZone") || "ap-guangzhou-4";
 * const vpc = new tencentcloud.vpc.Instance("vpc", {cidrBlock: "10.0.0.0/16"});
 * const subnet = new tencentcloud.subnet.Instance("subnet", {
 *     vpcId: vpc.id,
 *     availabilityZone: availabilityZone,
 *     cidrBlock: "10.0.1.0/24",
 * });
 * const fooGrafanaInstance = new tencentcloud.monitor.GrafanaInstance("fooGrafanaInstance", {
 *     instanceName: "tf-grafana",
 *     vpcId: vpc.id,
 *     subnetIds: [subnet.id],
 *     grafanaInitPassword: "1234567890",
 *     enableInternet: false,
 *     isDestroy: true,
 *     tags: {
 *         createdBy: "test",
 *     },
 * });
 * const fooTmpGrafanaConfig = new tencentcloud.monitor.TmpGrafanaConfig("fooTmpGrafanaConfig", {
 *     config: JSON.stringify({
 *         server: {
 *             http_port: 8080,
 *             root_url: "https://cloud-grafana.woa.com/grafana-ffrdnrfa/",
 *             serve_from_sub_path: true,
 *         },
 *     }),
 *     instanceId: fooGrafanaInstance.id,
 * });
 * ```
 *
 * ## Import
 *
 * monitor tmp_grafana_config can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:Monitor/tmpGrafanaConfig:TmpGrafanaConfig tmp_grafana_config tmp_grafana_config_id
 * ```
 */
export class TmpGrafanaConfig extends pulumi.CustomResource {
    /**
     * Get an existing TmpGrafanaConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TmpGrafanaConfigState, opts?: pulumi.CustomResourceOptions): TmpGrafanaConfig {
        return new TmpGrafanaConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Monitor/tmpGrafanaConfig:TmpGrafanaConfig';

    /**
     * Returns true if the given object is an instance of TmpGrafanaConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TmpGrafanaConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TmpGrafanaConfig.__pulumiType;
    }

    /**
     * JSON encoded string.
     */
    public readonly config!: pulumi.Output<string>;
    /**
     * Instance id.
     */
    public readonly instanceId!: pulumi.Output<string>;

    /**
     * Create a TmpGrafanaConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TmpGrafanaConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TmpGrafanaConfigArgs | TmpGrafanaConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TmpGrafanaConfigState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
        } else {
            const args = argsOrState as TmpGrafanaConfigArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TmpGrafanaConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TmpGrafanaConfig resources.
 */
export interface TmpGrafanaConfigState {
    /**
     * JSON encoded string.
     */
    config?: pulumi.Input<string>;
    /**
     * Instance id.
     */
    instanceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TmpGrafanaConfig resource.
 */
export interface TmpGrafanaConfigArgs {
    /**
     * JSON encoded string.
     */
    config: pulumi.Input<string>;
    /**
     * Instance id.
     */
    instanceId: pulumi.Input<string>;
}
