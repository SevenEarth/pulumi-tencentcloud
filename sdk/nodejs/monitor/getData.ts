// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query monitor data. for complex queries, use (https://github.com/tencentyun/tencentcloud-exporter)
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const instances = tencentcloud.Instances.getInstance({});
 * const cvmMonitorData = instances.then(instances => tencentcloud.Monitor.getData({
 *     namespace: "QCE/CVM",
 *     metricName: "CPUUsage",
 *     dimensions: [{
 *         name: "InstanceId",
 *         value: instances.instanceLists?.[0]?.instanceId,
 *     }],
 *     period: 300,
 *     startTime: "2020-04-28T18:45:00+08:00",
 *     endTime: "2020-04-28T19:00:00+08:00",
 * }));
 * const cosMonitorData = tencentcloud.Monitor.getData({
 *     namespace: "QCE/COS",
 *     metricName: "InternetTraffic",
 *     dimensions: [
 *         {
 *             name: "appid",
 *             value: "1258798060",
 *         },
 *         {
 *             name: "bucket",
 *             value: "test-1258798060",
 *         },
 *     ],
 *     period: 300,
 *     startTime: "2020-04-28T18:30:00+08:00",
 *     endTime: "2020-04-28T19:00:00+08:00",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getData(args: GetDataArgs, opts?: pulumi.InvokeOptions): Promise<GetDataResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:Monitor/getData:getData", {
        "dimensions": args.dimensions,
        "endTime": args.endTime,
        "metricName": args.metricName,
        "namespace": args.namespace,
        "period": args.period,
        "resultOutputFile": args.resultOutputFile,
        "startTime": args.startTime,
    }, opts);
}

/**
 * A collection of arguments for invoking getData.
 */
export interface GetDataArgs {
    /**
     * Dimensional composition of instance objects.
     */
    dimensions: inputs.Monitor.GetDataDimension[];
    /**
     * End time for this query, eg:`2018-09-22T20:00:00+08:00`.
     */
    endTime: string;
    /**
     * Metric name, please refer to the documentation of monitor interface of each product.
     */
    metricName: string;
    /**
     * Namespace of each cloud product in monitor system, refer to `data.tencentcloud_monitor_product_namespace`.
     */
    namespace: string;
    /**
     * Statistical period.
     */
    period?: number;
    /**
     * Used to store results.
     */
    resultOutputFile?: string;
    /**
     * Start time for this query, eg:`2018-09-22T19:51:23+08:00`.
     */
    startTime: string;
}

/**
 * A collection of values returned by getData.
 */
export interface GetDataResult {
    readonly dimensions: outputs.Monitor.GetDataDimension[];
    readonly endTime: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A list data point. Each element contains the following attributes:
     */
    readonly lists: outputs.Monitor.GetDataList[];
    readonly metricName: string;
    readonly namespace: string;
    readonly period?: number;
    readonly resultOutputFile?: string;
    readonly startTime: string;
}
/**
 * Use this data source to query monitor data. for complex queries, use (https://github.com/tencentyun/tencentcloud-exporter)
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const instances = tencentcloud.Instances.getInstance({});
 * const cvmMonitorData = instances.then(instances => tencentcloud.Monitor.getData({
 *     namespace: "QCE/CVM",
 *     metricName: "CPUUsage",
 *     dimensions: [{
 *         name: "InstanceId",
 *         value: instances.instanceLists?.[0]?.instanceId,
 *     }],
 *     period: 300,
 *     startTime: "2020-04-28T18:45:00+08:00",
 *     endTime: "2020-04-28T19:00:00+08:00",
 * }));
 * const cosMonitorData = tencentcloud.Monitor.getData({
 *     namespace: "QCE/COS",
 *     metricName: "InternetTraffic",
 *     dimensions: [
 *         {
 *             name: "appid",
 *             value: "1258798060",
 *         },
 *         {
 *             name: "bucket",
 *             value: "test-1258798060",
 *         },
 *     ],
 *     period: 300,
 *     startTime: "2020-04-28T18:30:00+08:00",
 *     endTime: "2020-04-28T19:00:00+08:00",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getDataOutput(args: GetDataOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDataResult> {
    return pulumi.output(args).apply((a: any) => getData(a, opts))
}

/**
 * A collection of arguments for invoking getData.
 */
export interface GetDataOutputArgs {
    /**
     * Dimensional composition of instance objects.
     */
    dimensions: pulumi.Input<pulumi.Input<inputs.Monitor.GetDataDimensionArgs>[]>;
    /**
     * End time for this query, eg:`2018-09-22T20:00:00+08:00`.
     */
    endTime: pulumi.Input<string>;
    /**
     * Metric name, please refer to the documentation of monitor interface of each product.
     */
    metricName: pulumi.Input<string>;
    /**
     * Namespace of each cloud product in monitor system, refer to `data.tencentcloud_monitor_product_namespace`.
     */
    namespace: pulumi.Input<string>;
    /**
     * Statistical period.
     */
    period?: pulumi.Input<number>;
    /**
     * Used to store results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * Start time for this query, eg:`2018-09-22T19:51:23+08:00`.
     */
    startTime: pulumi.Input<string>;
}
