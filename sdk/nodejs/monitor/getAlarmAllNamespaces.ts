// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of monitor alarmAllNamespaces
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const alarmAllNamespaces = pulumi.output(tencentcloud.Monitor.getAlarmAllNamespaces({
 *     ids: ["qaap_tunnel_l4_listeners"],
 *     module: "monitor",
 *     monitorTypes: ["MT_QCE"],
 *     sceneType: "ST_ALARM",
 * }));
 * ```
 */
export function getAlarmAllNamespaces(args: GetAlarmAllNamespacesArgs, opts?: pulumi.InvokeOptions): Promise<GetAlarmAllNamespacesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("tencentcloud:Monitor/getAlarmAllNamespaces:getAlarmAllNamespaces", {
        "ids": args.ids,
        "module": args.module,
        "monitorTypes": args.monitorTypes,
        "resultOutputFile": args.resultOutputFile,
        "sceneType": args.sceneType,
    }, opts);
}

/**
 * A collection of arguments for invoking getAlarmAllNamespaces.
 */
export interface GetAlarmAllNamespacesArgs {
    /**
     * Filter based on the Id of the namespace without filling in the default query for all.
     */
    ids?: string[];
    /**
     * Fixed value, as `monitor`.
     */
    module: string;
    /**
     * Filter based on monitoring type, do not fill in default, check all types MT_QCE=cloud product monitoring.
     */
    monitorTypes?: string[];
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
    /**
     * Currently, only ST_ALARM=alarm type is filtered based on usage scenarios.
     */
    sceneType: string;
}

/**
 * A collection of values returned by getAlarmAllNamespaces.
 */
export interface GetAlarmAllNamespacesResult {
    /**
     * General alarm strategy types (including: application performance monitoring, front-end performance monitoring, cloud dial testing).
     */
    readonly commonNamespaces: outputs.Monitor.GetAlarmAllNamespacesCommonNamespace[];
    /**
     * Other alarm strategy types are currently not supported.
     */
    readonly customNamespacesNews: outputs.Monitor.GetAlarmAllNamespacesCustomNamespacesNews[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    readonly module: string;
    readonly monitorTypes?: string[];
    /**
     * Types of alarm strategies for cloud products.
     */
    readonly qceNamespacesNews: outputs.Monitor.GetAlarmAllNamespacesQceNamespacesNews[];
    readonly resultOutputFile?: string;
    readonly sceneType: string;
}

export function getAlarmAllNamespacesOutput(args: GetAlarmAllNamespacesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAlarmAllNamespacesResult> {
    return pulumi.output(args).apply(a => getAlarmAllNamespaces(a, opts))
}

/**
 * A collection of arguments for invoking getAlarmAllNamespaces.
 */
export interface GetAlarmAllNamespacesOutputArgs {
    /**
     * Filter based on the Id of the namespace without filling in the default query for all.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Fixed value, as `monitor`.
     */
    module: pulumi.Input<string>;
    /**
     * Filter based on monitoring type, do not fill in default, check all types MT_QCE=cloud product monitoring.
     */
    monitorTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * Currently, only ST_ALARM=alarm type is filtered based on usage scenarios.
     */
    sceneType: pulumi.Input<string>;
}
