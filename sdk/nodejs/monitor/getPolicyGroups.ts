// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to query monitor policy groups (There is a lot of data and it is recommended to output to a file)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const groups = pulumi.output(tencentcloud.Monitor.getPolicyGroups({
 *     policyViewNames: [
 *         "REDIS-CLUSTER",
 *         "cvm_device",
 *     ],
 * }));
 * const name = pulumi.output(tencentcloud.Monitor.getPolicyGroups({
 *     name: "test",
 * }));
 * ```
 */
export function getPolicyGroups(args?: GetPolicyGroupsArgs, opts?: pulumi.InvokeOptions): Promise<GetPolicyGroupsResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("tencentcloud:Monitor/getPolicyGroups:getPolicyGroups", {
        "name": args.name,
        "policyViewNames": args.policyViewNames,
        "resultOutputFile": args.resultOutputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getPolicyGroups.
 */
export interface GetPolicyGroupsArgs {
    /**
     * Policy group name for query.
     */
    name?: string;
    /**
     * The policy view for query.
     */
    policyViewNames?: string[];
    /**
     * Used to store results.
     */
    resultOutputFile?: string;
}

/**
 * A collection of values returned by getPolicyGroups.
 */
export interface GetPolicyGroupsResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A list policy groups. Each element contains the following attributes:
     */
    readonly lists: outputs.Monitor.GetPolicyGroupsList[];
    readonly name?: string;
    readonly policyViewNames?: string[];
    readonly resultOutputFile?: string;
}

export function getPolicyGroupsOutput(args?: GetPolicyGroupsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPolicyGroupsResult> {
    return pulumi.output(args).apply(a => getPolicyGroups(a, opts))
}

/**
 * A collection of arguments for invoking getPolicyGroups.
 */
export interface GetPolicyGroupsOutputArgs {
    /**
     * Policy group name for query.
     */
    name?: pulumi.Input<string>;
    /**
     * The policy view for query.
     */
    policyViewNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used to store results.
     */
    resultOutputFile?: pulumi.Input<string>;
}
