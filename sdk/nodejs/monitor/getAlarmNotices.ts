// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to Interlude notification list.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const notices = tencentcloud.Monitor.getAlarmNotices({
 *     groupIds: [],
 *     name: "",
 *     noticeIds: [],
 *     order: "DESC",
 *     ownerUid: 1,
 *     receiverType: "",
 *     userIds: [],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getAlarmNotices(args?: GetAlarmNoticesArgs, opts?: pulumi.InvokeOptions): Promise<GetAlarmNoticesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:Monitor/getAlarmNotices:getAlarmNotices", {
        "groupIds": args.groupIds,
        "name": args.name,
        "noticeIds": args.noticeIds,
        "order": args.order,
        "ownerUid": args.ownerUid,
        "receiverType": args.receiverType,
        "resultOutputFile": args.resultOutputFile,
        "userIds": args.userIds,
    }, opts);
}

/**
 * A collection of arguments for invoking getAlarmNotices.
 */
export interface GetAlarmNoticesArgs {
    /**
     * Receive group list.
     */
    groupIds?: number[];
    /**
     * Alarm notification template name Used for fuzzy search.
     */
    name?: string;
    /**
     * Receive group list.
     */
    noticeIds?: string[];
    /**
     * Sort by update time ASC=forward order DESC=reverse order.
     */
    order?: string;
    /**
     * The primary account uid is used to create a preset notification.
     */
    ownerUid?: number;
    /**
     * To filter alarm notification templates according to recipients, you need to select the notification user type. USER=user GROUP=user group Leave blank = not filter by recipient.
     */
    receiverType?: string;
    /**
     * Used to store results.
     */
    resultOutputFile?: string;
    /**
     * List of recipients.
     */
    userIds?: number[];
}

/**
 * A collection of values returned by getAlarmNotices.
 */
export interface GetAlarmNoticesResult {
    /**
     * Alarm notification template list.
     */
    readonly alarmNotices: outputs.Monitor.GetAlarmNoticesAlarmNotice[];
    /**
     * User group ID list.
     */
    readonly groupIds?: number[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Alarm notification template name.
     */
    readonly name?: string;
    readonly noticeIds?: string[];
    readonly order?: string;
    readonly ownerUid?: number;
    /**
     * Recipient Type USER=User GROUP=User Group.
     */
    readonly receiverType?: string;
    readonly resultOutputFile?: string;
    /**
     * User UID List.
     */
    readonly userIds?: number[];
}
/**
 * Use this data source to Interlude notification list.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const notices = tencentcloud.Monitor.getAlarmNotices({
 *     groupIds: [],
 *     name: "",
 *     noticeIds: [],
 *     order: "DESC",
 *     ownerUid: 1,
 *     receiverType: "",
 *     userIds: [],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getAlarmNoticesOutput(args?: GetAlarmNoticesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAlarmNoticesResult> {
    return pulumi.output(args).apply((a: any) => getAlarmNotices(a, opts))
}

/**
 * A collection of arguments for invoking getAlarmNotices.
 */
export interface GetAlarmNoticesOutputArgs {
    /**
     * Receive group list.
     */
    groupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Alarm notification template name Used for fuzzy search.
     */
    name?: pulumi.Input<string>;
    /**
     * Receive group list.
     */
    noticeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sort by update time ASC=forward order DESC=reverse order.
     */
    order?: pulumi.Input<string>;
    /**
     * The primary account uid is used to create a preset notification.
     */
    ownerUid?: pulumi.Input<number>;
    /**
     * To filter alarm notification templates according to recipients, you need to select the notification user type. USER=user GROUP=user group Leave blank = not filter by recipient.
     */
    receiverType?: pulumi.Input<string>;
    /**
     * Used to store results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * List of recipients.
     */
    userIds?: pulumi.Input<pulumi.Input<number>[]>;
}
