// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to query monitor events(There is a lot of data and it is recommended to output to a file)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const cvmEventData = pulumi.output(tencentcloud.Monitor.getProductEvent({
 *     isAlarmConfig: 0,
 *     productNames: ["cvm"],
 *     startTime: 1588700283,
 * }));
 * ```
 */
export function getProductEvent(args?: GetProductEventArgs, opts?: pulumi.InvokeOptions): Promise<GetProductEventResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("tencentcloud:Monitor/getProductEvent:getProductEvent", {
        "dimensions": args.dimensions,
        "endTime": args.endTime,
        "eventNames": args.eventNames,
        "instanceIds": args.instanceIds,
        "isAlarmConfig": args.isAlarmConfig,
        "productNames": args.productNames,
        "projectIds": args.projectIds,
        "regionLists": args.regionLists,
        "resultOutputFile": args.resultOutputFile,
        "startTime": args.startTime,
        "statuses": args.statuses,
        "types": args.types,
    }, opts);
}

/**
 * A collection of arguments for invoking getProductEvent.
 */
export interface GetProductEventArgs {
    /**
     * Dimensional composition of instance objects.
     */
    dimensions?: inputs.Monitor.GetProductEventDimension[];
    /**
     * End timestamp for this query, eg:`1588232111`. Default start time is `now-3000`.
     */
    endTime?: number;
    /**
     * Event name filtering, such as `guestReboot` indicates that the machine restart.
     */
    eventNames?: string[];
    /**
     * Affect objects, such as `ins-19708ino`.
     */
    instanceIds?: string[];
    /**
     * Alarm status configuration filter, 1means configured, 0(default) means not configured.
     */
    isAlarmConfig?: number;
    /**
     * Product type filtering, such as `cvm` for cloud server.
     */
    productNames?: string[];
    /**
     * Project ID filter.
     */
    projectIds?: string[];
    /**
     * Region filter, such as `gz`.
     */
    regionLists?: string[];
    /**
     * Used to store results.
     */
    resultOutputFile?: string;
    /**
     * Start timestamp for this query, eg:`1588230000`. Default start time is `now-3600`.
     */
    startTime?: number;
    /**
     * Event status filter, value range `-`,`alarm`,`recover`, indicating recovered, unrecovered and stateless.
     */
    statuses?: string[];
    /**
     * Event type filtering, with value range `abnormal`,`statusChange`, indicating state change and abnormal events.
     */
    types?: string[];
}

/**
 * A collection of values returned by getProductEvent.
 */
export interface GetProductEventResult {
    /**
     * A list of event dimensions. Each element contains the following attributes:
     */
    readonly dimensions?: outputs.Monitor.GetProductEventDimension[];
    readonly endTime?: number;
    /**
     * Event short name.
     */
    readonly eventNames?: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The instance ID of this event.
     */
    readonly instanceIds?: string[];
    /**
     * Whether to configure alarm.
     */
    readonly isAlarmConfig?: number;
    /**
     * A list events. Each element contains the following attributes:
     */
    readonly lists: outputs.Monitor.GetProductEventList[];
    /**
     * Product short name.
     */
    readonly productNames?: string[];
    /**
     * Project ID of this instance.
     */
    readonly projectIds?: string[];
    readonly regionLists?: string[];
    readonly resultOutputFile?: string;
    /**
     * The start timestamp of this event.
     */
    readonly startTime?: number;
    /**
     * The status of this event.
     */
    readonly statuses?: string[];
    /**
     * The type of this event.
     */
    readonly types?: string[];
}

export function getProductEventOutput(args?: GetProductEventOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProductEventResult> {
    return pulumi.output(args).apply(a => getProductEvent(a, opts))
}

/**
 * A collection of arguments for invoking getProductEvent.
 */
export interface GetProductEventOutputArgs {
    /**
     * Dimensional composition of instance objects.
     */
    dimensions?: pulumi.Input<pulumi.Input<inputs.Monitor.GetProductEventDimensionArgs>[]>;
    /**
     * End timestamp for this query, eg:`1588232111`. Default start time is `now-3000`.
     */
    endTime?: pulumi.Input<number>;
    /**
     * Event name filtering, such as `guestReboot` indicates that the machine restart.
     */
    eventNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Affect objects, such as `ins-19708ino`.
     */
    instanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Alarm status configuration filter, 1means configured, 0(default) means not configured.
     */
    isAlarmConfig?: pulumi.Input<number>;
    /**
     * Product type filtering, such as `cvm` for cloud server.
     */
    productNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Project ID filter.
     */
    projectIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Region filter, such as `gz`.
     */
    regionLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used to store results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * Start timestamp for this query, eg:`1588230000`. Default start time is `now-3600`.
     */
    startTime?: pulumi.Input<number>;
    /**
     * Event status filter, value range `-`,`alarm`,`recover`, indicating recovered, unrecovered and stateless.
     */
    statuses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Event type filtering, with value range `abnormal`,`statusChange`, indicating state change and abnormal events.
     */
    types?: pulumi.Input<pulumi.Input<string>[]>;
}
