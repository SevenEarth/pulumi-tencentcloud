// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

export class ServerAttachment extends pulumi.CustomResource {
    /**
     * Get an existing ServerAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerAttachmentState, opts?: pulumi.CustomResourceOptions): ServerAttachment {
        return new ServerAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Clb/serverAttachment:ServerAttachment';

    /**
     * Returns true if the given object is an instance of ServerAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerAttachment.__pulumiType;
    }

    /**
     * ID of the CLB.
     */
    public readonly clbId!: pulumi.Output<string>;
    /**
     * ID of the CLB listener.
     */
    public readonly listenerId!: pulumi.Output<string>;
    /**
     * Type of protocol within the listener.
     */
    public /*out*/ readonly protocolType!: pulumi.Output<string>;
    /**
     * ID of the CLB listener rule. Only supports listeners of `HTTPS` and `HTTP` protocol.
     */
    public readonly ruleId!: pulumi.Output<string | undefined>;
    /**
     * Information of the backends to be attached.
     */
    public readonly targets!: pulumi.Output<outputs.Clb.ServerAttachmentTarget[]>;

    /**
     * Create a ServerAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerAttachmentArgs | ServerAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerAttachmentState | undefined;
            resourceInputs["clbId"] = state ? state.clbId : undefined;
            resourceInputs["listenerId"] = state ? state.listenerId : undefined;
            resourceInputs["protocolType"] = state ? state.protocolType : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
        } else {
            const args = argsOrState as ServerAttachmentArgs | undefined;
            if ((!args || args.clbId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clbId'");
            }
            if ((!args || args.listenerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerId'");
            }
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            resourceInputs["clbId"] = args ? args.clbId : undefined;
            resourceInputs["listenerId"] = args ? args.listenerId : undefined;
            resourceInputs["ruleId"] = args ? args.ruleId : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["protocolType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerAttachment resources.
 */
export interface ServerAttachmentState {
    /**
     * ID of the CLB.
     */
    clbId?: pulumi.Input<string>;
    /**
     * ID of the CLB listener.
     */
    listenerId?: pulumi.Input<string>;
    /**
     * Type of protocol within the listener.
     */
    protocolType?: pulumi.Input<string>;
    /**
     * ID of the CLB listener rule. Only supports listeners of `HTTPS` and `HTTP` protocol.
     */
    ruleId?: pulumi.Input<string>;
    /**
     * Information of the backends to be attached.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.Clb.ServerAttachmentTarget>[]>;
}

/**
 * The set of arguments for constructing a ServerAttachment resource.
 */
export interface ServerAttachmentArgs {
    /**
     * ID of the CLB.
     */
    clbId: pulumi.Input<string>;
    /**
     * ID of the CLB listener.
     */
    listenerId: pulumi.Input<string>;
    /**
     * ID of the CLB listener rule. Only supports listeners of `HTTPS` and `HTTP` protocol.
     */
    ruleId?: pulumi.Input<string>;
    /**
     * Information of the backends to be attached.
     */
    targets: pulumi.Input<pulumi.Input<inputs.Clb.ServerAttachmentTarget>[]>;
}
