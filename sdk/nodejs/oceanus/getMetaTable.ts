// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of oceanus metaTable
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const example = pulumi.output(tencentcloud.Oceanus.getMetaTable({
 *     catalog: "_dc",
 *     database: "_db",
 *     table: "tf_table",
 *     workSpaceId: "space-6w8eab6f",
 * }));
 * ```
 */
export function getMetaTable(args: GetMetaTableArgs, opts?: pulumi.InvokeOptions): Promise<GetMetaTableResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("tencentcloud:Oceanus/getMetaTable:getMetaTable", {
        "catalog": args.catalog,
        "database": args.database,
        "resultOutputFile": args.resultOutputFile,
        "table": args.table,
        "workSpaceId": args.workSpaceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getMetaTable.
 */
export interface GetMetaTableArgs {
    /**
     * Catalog name.
     */
    catalog: string;
    /**
     * Database name.
     */
    database: string;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
    /**
     * Table name.
     */
    table: string;
    /**
     * Unique identifier of the space.
     */
    workSpaceId: string;
}

/**
 * A collection of values returned by getMetaTable.
 */
export interface GetMetaTableResult {
    readonly catalog: string;
    /**
     * Scene time.
     */
    readonly createTime: string;
    readonly database: string;
    /**
     * Table creation statement, encoded in Base64.For example,Q1JFQVRFIFRBQkxFIGRhdGFnZW5fc291cmNlX3RhYmxlICggCiAgICBpZCBJTlQsIAogICAgbmFtZSBTVFJJTkcgCikgV0lUSCAoCidjb25uZWN0b3InPSdkYXRhZ2VuJywKJ3Jvd3MtcGVyLXNlY29uZCcgPSAnMScKKTs=.
     */
    readonly ddl: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly resultOutputFile?: string;
    /**
     * Unique identifier of the metadata table.
     */
    readonly serialId: string;
    readonly table: string;
    readonly workSpaceId: string;
}

export function getMetaTableOutput(args: GetMetaTableOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMetaTableResult> {
    return pulumi.output(args).apply(a => getMetaTable(a, opts))
}

/**
 * A collection of arguments for invoking getMetaTable.
 */
export interface GetMetaTableOutputArgs {
    /**
     * Catalog name.
     */
    catalog: pulumi.Input<string>;
    /**
     * Database name.
     */
    database: pulumi.Input<string>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * Table name.
     */
    table: pulumi.Input<string>;
    /**
     * Unique identifier of the space.
     */
    workSpaceId: pulumi.Input<string>;
}
