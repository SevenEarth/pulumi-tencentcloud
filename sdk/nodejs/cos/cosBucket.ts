// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

export class CosBucket extends pulumi.CustomResource {
    /**
     * Get an existing CosBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CosBucketState, opts?: pulumi.CustomResourceOptions): CosBucket {
        return new CosBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cos/cosBucket:CosBucket';

    /**
     * Returns true if the given object is an instance of CosBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CosBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CosBucket.__pulumiType;
    }

    /**
     * The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
     */
    public readonly acl!: pulumi.Output<string | undefined>;
    /**
     * ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check
     * https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
     */
    public readonly aclBody!: pulumi.Output<string | undefined>;
    /**
     * The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * A rule of Cross-Origin Resource Sharing (documented below).
     */
    public readonly corsRules!: pulumi.Output<outputs.Cos.CosBucketCorsRule[] | undefined>;
    /**
     * The URL of this cos bucket.
     */
    public /*out*/ readonly cosBucketUrl!: pulumi.Output<string>;
    /**
     * The server-side encryption algorithm to use. Valid value is `AES256`.
     */
    public readonly encryptionAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * A configuration of object lifecycle management (documented below).
     */
    public readonly lifecycleRules!: pulumi.Output<outputs.Cos.CosBucketLifecycleRule[] | undefined>;
    /**
     * Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be
     * saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role
     * Policy](https://intl.cloud.tencent.com/document/product/436/16920).
     */
    public readonly logEnable!: pulumi.Output<boolean | undefined>;
    /**
     * The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file
     * format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is
     * `true`.
     */
    public readonly logPrefix!: pulumi.Output<string>;
    /**
     * The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is
     * `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
     * User must have full access on this bucket.
     */
    public readonly logTargetBucket!: pulumi.Output<string>;
    /**
     * Indicates whether to create a bucket of multi available zone. NOTE: If set to true, the versioning must enable.
     */
    public readonly multiAz!: pulumi.Output<boolean | undefined>;
    /**
     * Bucket Origin Domain settings.
     */
    public readonly originDomainRules!: pulumi.Output<outputs.Cos.CosBucketOriginDomainRule[] | undefined>;
    /**
     * Bucket Origin-Pull settings.
     */
    public readonly originPullRules!: pulumi.Output<outputs.Cos.CosBucketOriginPullRule[] | undefined>;
    /**
     * Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true
     * can configure this argument.
     */
    public readonly replicaRole!: pulumi.Output<string | undefined>;
    /**
     * List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
     */
    public readonly replicaRules!: pulumi.Output<outputs.Cos.CosBucketReplicaRule[] | undefined>;
    /**
     * The tags of a bucket.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Enable bucket versioning.
     */
    public readonly versioningEnable!: pulumi.Output<boolean | undefined>;
    /**
     * A website object(documented below).
     */
    public readonly website!: pulumi.Output<outputs.Cos.CosBucketWebsite | undefined>;

    /**
     * Create a CosBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CosBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CosBucketArgs | CosBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CosBucketState | undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["aclBody"] = state ? state.aclBody : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["corsRules"] = state ? state.corsRules : undefined;
            resourceInputs["cosBucketUrl"] = state ? state.cosBucketUrl : undefined;
            resourceInputs["encryptionAlgorithm"] = state ? state.encryptionAlgorithm : undefined;
            resourceInputs["lifecycleRules"] = state ? state.lifecycleRules : undefined;
            resourceInputs["logEnable"] = state ? state.logEnable : undefined;
            resourceInputs["logPrefix"] = state ? state.logPrefix : undefined;
            resourceInputs["logTargetBucket"] = state ? state.logTargetBucket : undefined;
            resourceInputs["multiAz"] = state ? state.multiAz : undefined;
            resourceInputs["originDomainRules"] = state ? state.originDomainRules : undefined;
            resourceInputs["originPullRules"] = state ? state.originPullRules : undefined;
            resourceInputs["replicaRole"] = state ? state.replicaRole : undefined;
            resourceInputs["replicaRules"] = state ? state.replicaRules : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["versioningEnable"] = state ? state.versioningEnable : undefined;
            resourceInputs["website"] = state ? state.website : undefined;
        } else {
            const args = argsOrState as CosBucketArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["aclBody"] = args ? args.aclBody : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["corsRules"] = args ? args.corsRules : undefined;
            resourceInputs["encryptionAlgorithm"] = args ? args.encryptionAlgorithm : undefined;
            resourceInputs["lifecycleRules"] = args ? args.lifecycleRules : undefined;
            resourceInputs["logEnable"] = args ? args.logEnable : undefined;
            resourceInputs["logPrefix"] = args ? args.logPrefix : undefined;
            resourceInputs["logTargetBucket"] = args ? args.logTargetBucket : undefined;
            resourceInputs["multiAz"] = args ? args.multiAz : undefined;
            resourceInputs["originDomainRules"] = args ? args.originDomainRules : undefined;
            resourceInputs["originPullRules"] = args ? args.originPullRules : undefined;
            resourceInputs["replicaRole"] = args ? args.replicaRole : undefined;
            resourceInputs["replicaRules"] = args ? args.replicaRules : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["versioningEnable"] = args ? args.versioningEnable : undefined;
            resourceInputs["website"] = args ? args.website : undefined;
            resourceInputs["cosBucketUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CosBucket.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CosBucket resources.
 */
export interface CosBucketState {
    /**
     * The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
     */
    acl?: pulumi.Input<string>;
    /**
     * ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check
     * https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
     */
    aclBody?: pulumi.Input<string>;
    /**
     * The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
     */
    bucket?: pulumi.Input<string>;
    /**
     * A rule of Cross-Origin Resource Sharing (documented below).
     */
    corsRules?: pulumi.Input<pulumi.Input<inputs.Cos.CosBucketCorsRule>[]>;
    /**
     * The URL of this cos bucket.
     */
    cosBucketUrl?: pulumi.Input<string>;
    /**
     * The server-side encryption algorithm to use. Valid value is `AES256`.
     */
    encryptionAlgorithm?: pulumi.Input<string>;
    /**
     * A configuration of object lifecycle management (documented below).
     */
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.Cos.CosBucketLifecycleRule>[]>;
    /**
     * Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be
     * saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role
     * Policy](https://intl.cloud.tencent.com/document/product/436/16920).
     */
    logEnable?: pulumi.Input<boolean>;
    /**
     * The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file
     * format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is
     * `true`.
     */
    logPrefix?: pulumi.Input<string>;
    /**
     * The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is
     * `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
     * User must have full access on this bucket.
     */
    logTargetBucket?: pulumi.Input<string>;
    /**
     * Indicates whether to create a bucket of multi available zone. NOTE: If set to true, the versioning must enable.
     */
    multiAz?: pulumi.Input<boolean>;
    /**
     * Bucket Origin Domain settings.
     */
    originDomainRules?: pulumi.Input<pulumi.Input<inputs.Cos.CosBucketOriginDomainRule>[]>;
    /**
     * Bucket Origin-Pull settings.
     */
    originPullRules?: pulumi.Input<pulumi.Input<inputs.Cos.CosBucketOriginPullRule>[]>;
    /**
     * Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true
     * can configure this argument.
     */
    replicaRole?: pulumi.Input<string>;
    /**
     * List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
     */
    replicaRules?: pulumi.Input<pulumi.Input<inputs.Cos.CosBucketReplicaRule>[]>;
    /**
     * The tags of a bucket.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Enable bucket versioning.
     */
    versioningEnable?: pulumi.Input<boolean>;
    /**
     * A website object(documented below).
     */
    website?: pulumi.Input<inputs.Cos.CosBucketWebsite>;
}

/**
 * The set of arguments for constructing a CosBucket resource.
 */
export interface CosBucketArgs {
    /**
     * The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
     */
    acl?: pulumi.Input<string>;
    /**
     * ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check
     * https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
     */
    aclBody?: pulumi.Input<string>;
    /**
     * The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
     */
    bucket: pulumi.Input<string>;
    /**
     * A rule of Cross-Origin Resource Sharing (documented below).
     */
    corsRules?: pulumi.Input<pulumi.Input<inputs.Cos.CosBucketCorsRule>[]>;
    /**
     * The server-side encryption algorithm to use. Valid value is `AES256`.
     */
    encryptionAlgorithm?: pulumi.Input<string>;
    /**
     * A configuration of object lifecycle management (documented below).
     */
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.Cos.CosBucketLifecycleRule>[]>;
    /**
     * Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be
     * saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role
     * Policy](https://intl.cloud.tencent.com/document/product/436/16920).
     */
    logEnable?: pulumi.Input<boolean>;
    /**
     * The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file
     * format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is
     * `true`.
     */
    logPrefix?: pulumi.Input<string>;
    /**
     * The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is
     * `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
     * User must have full access on this bucket.
     */
    logTargetBucket?: pulumi.Input<string>;
    /**
     * Indicates whether to create a bucket of multi available zone. NOTE: If set to true, the versioning must enable.
     */
    multiAz?: pulumi.Input<boolean>;
    /**
     * Bucket Origin Domain settings.
     */
    originDomainRules?: pulumi.Input<pulumi.Input<inputs.Cos.CosBucketOriginDomainRule>[]>;
    /**
     * Bucket Origin-Pull settings.
     */
    originPullRules?: pulumi.Input<pulumi.Input<inputs.Cos.CosBucketOriginPullRule>[]>;
    /**
     * Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true
     * can configure this argument.
     */
    replicaRole?: pulumi.Input<string>;
    /**
     * List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
     */
    replicaRules?: pulumi.Input<pulumi.Input<inputs.Cos.CosBucketReplicaRule>[]>;
    /**
     * The tags of a bucket.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Enable bucket versioning.
     */
    versioningEnable?: pulumi.Input<boolean>;
    /**
     * A website object(documented below).
     */
    website?: pulumi.Input<inputs.Cos.CosBucketWebsite>;
}
