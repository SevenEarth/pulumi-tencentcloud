// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provide a resource to create a VOD procedure template.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 *
 * const fooAdaptiveDynamicStreamingTemplate = new tencentcloud.vod.AdaptiveDynamicStreamingTemplate("fooAdaptiveDynamicStreamingTemplate", {
 *     format: "HLS",
 *     drmType: "SimpleAES",
 *     disableHigherVideoBitrate: false,
 *     disableHigherVideoResolution: false,
 *     comment: "test",
 *     streamInfos: [
 *         {
 *             video: {
 *                 codec: "libx265",
 *                 fps: 4,
 *                 bitrate: 129,
 *                 resolutionAdaptive: false,
 *                 width: 128,
 *                 height: 128,
 *                 fillType: "stretch",
 *             },
 *             audio: {
 *                 codec: "libmp3lame",
 *                 bitrate: 129,
 *                 sampleRate: 44100,
 *                 audioChannel: "dual",
 *             },
 *             removeAudio: false,
 *         },
 *         {
 *             video: {
 *                 codec: "libx264",
 *                 fps: 4,
 *                 bitrate: 256,
 *             },
 *             audio: {
 *                 codec: "libfdk_aac",
 *                 bitrate: 256,
 *                 sampleRate: 44100,
 *             },
 *             removeAudio: true,
 *         },
 *     ],
 * });
 * const fooSnapshotByTimeOffsetTemplate = new tencentcloud.vod.SnapshotByTimeOffsetTemplate("fooSnapshotByTimeOffsetTemplate", {
 *     width: 130,
 *     height: 128,
 *     resolutionAdaptive: false,
 *     format: "png",
 *     comment: "test",
 *     fillType: "white",
 * });
 * const fooImageSpriteTemplate = new tencentcloud.vod.ImageSpriteTemplate("fooImageSpriteTemplate", {
 *     sampleType: "Percent",
 *     sampleInterval: 10,
 *     rowCount: 3,
 *     columnCount: 3,
 *     comment: "test",
 *     fillType: "stretch",
 *     width: 128,
 *     height: 128,
 *     resolutionAdaptive: false,
 * });
 * const fooProcedureTemplate = new tencentcloud.vod.ProcedureTemplate("fooProcedureTemplate", {
 *     comment: "test",
 *     mediaProcessTask: {
 *         adaptiveDynamicStreamingTaskLists: [{
 *             definition: fooAdaptiveDynamicStreamingTemplate.id,
 *         }],
 *         snapshotByTimeOffsetTaskLists: [{
 *             definition: fooSnapshotByTimeOffsetTemplate.id,
 *             extTimeOffsetLists: ["3.5s"],
 *         }],
 *         imageSpriteTaskLists: [{
 *             definition: fooImageSpriteTemplate.id,
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * VOD procedure template can be imported using the name, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:Vod/procedureTemplate:ProcedureTemplate foo tf-procedure
 * ```
 */
export class ProcedureTemplate extends pulumi.CustomResource {
    /**
     * Get an existing ProcedureTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProcedureTemplateState, opts?: pulumi.CustomResourceOptions): ProcedureTemplate {
        return new ProcedureTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Vod/procedureTemplate:ProcedureTemplate';

    /**
     * Returns true if the given object is an instance of ProcedureTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProcedureTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProcedureTemplate.__pulumiType;
    }

    /**
     * Template description. Length limit: 256 characters.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Creation time of template in ISO date format.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Parameter of video processing task.
     */
    public readonly mediaProcessTask!: pulumi.Output<outputs.Vod.ProcedureTemplateMediaProcessTask | undefined>;
    /**
     * Task flow name (up to 20 characters).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
     */
    public readonly subAppId!: pulumi.Output<number | undefined>;
    /**
     * Last modified time of template in ISO date format.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a ProcedureTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProcedureTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProcedureTemplateArgs | ProcedureTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProcedureTemplateState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["mediaProcessTask"] = state ? state.mediaProcessTask : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["subAppId"] = state ? state.subAppId : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as ProcedureTemplateArgs | undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["mediaProcessTask"] = args ? args.mediaProcessTask : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["subAppId"] = args ? args.subAppId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProcedureTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProcedureTemplate resources.
 */
export interface ProcedureTemplateState {
    /**
     * Template description. Length limit: 256 characters.
     */
    comment?: pulumi.Input<string>;
    /**
     * Creation time of template in ISO date format.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Parameter of video processing task.
     */
    mediaProcessTask?: pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTask>;
    /**
     * Task flow name (up to 20 characters).
     */
    name?: pulumi.Input<string>;
    /**
     * Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
     */
    subAppId?: pulumi.Input<number>;
    /**
     * Last modified time of template in ISO date format.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProcedureTemplate resource.
 */
export interface ProcedureTemplateArgs {
    /**
     * Template description. Length limit: 256 characters.
     */
    comment?: pulumi.Input<string>;
    /**
     * Parameter of video processing task.
     */
    mediaProcessTask?: pulumi.Input<inputs.Vod.ProcedureTemplateMediaProcessTask>;
    /**
     * Task flow name (up to 20 characters).
     */
    name?: pulumi.Input<string>;
    /**
     * Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
     */
    subAppId?: pulumi.Input<number>;
}
