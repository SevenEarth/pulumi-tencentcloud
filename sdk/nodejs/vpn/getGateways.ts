// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of VPN gateways.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const foo = pulumi.output(tencentcloud.Vpn.getGateways({
 *     id: "vpngw-8ccsnclt",
 *     name: "main",
 *     publicIpAddress: "1.1.1.1",
 *     tags: {
 *         test: "tf",
 *     },
 *     vpcId: "vpc-dk8zmwuf",
 *     zone: "ap-guangzhou-3",
 * }));
 * ```
 */
export function getGateways(args?: GetGatewaysArgs, opts?: pulumi.InvokeOptions): Promise<GetGatewaysResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("tencentcloud:Vpn/getGateways:getGateways", {
        "id": args.id,
        "name": args.name,
        "publicIpAddress": args.publicIpAddress,
        "resultOutputFile": args.resultOutputFile,
        "tags": args.tags,
        "vpcId": args.vpcId,
        "zone": args.zone,
    }, opts);
}

/**
 * A collection of arguments for invoking getGateways.
 */
export interface GetGatewaysArgs {
    /**
     * ID of the VPN gateway.
     */
    id?: string;
    /**
     * Name of the VPN gateway. The length of character is limited to 1-60.
     */
    name?: string;
    /**
     * Public ip address of the VPN gateway.
     */
    publicIpAddress?: string;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
    /**
     * Tags of the VPN gateway to be queried.
     */
    tags?: {[key: string]: any};
    /**
     * ID of the VPC.
     */
    vpcId?: string;
    /**
     * Zone of the VPN gateway.
     */
    zone?: string;
}

/**
 * A collection of values returned by getGateways.
 */
export interface GetGatewaysResult {
    /**
     * Information list of the dedicated gateways.
     */
    readonly gatewayLists: outputs.Vpn.GetGatewaysGatewayList[];
    /**
     * ID of the VPN gateway.
     */
    readonly id?: string;
    /**
     * Name of the VPN gateway.
     */
    readonly name?: string;
    /**
     * Public ip of the VPN gateway.
     */
    readonly publicIpAddress?: string;
    readonly resultOutputFile?: string;
    /**
     * A list of tags used to associate different resources.
     */
    readonly tags?: {[key: string]: any};
    /**
     * ID of the VPC.
     */
    readonly vpcId?: string;
    /**
     * Zone of the VPN gateway.
     */
    readonly zone?: string;
}

export function getGatewaysOutput(args?: GetGatewaysOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGatewaysResult> {
    return pulumi.output(args).apply(a => getGateways(a, opts))
}

/**
 * A collection of arguments for invoking getGateways.
 */
export interface GetGatewaysOutputArgs {
    /**
     * ID of the VPN gateway.
     */
    id?: pulumi.Input<string>;
    /**
     * Name of the VPN gateway. The length of character is limited to 1-60.
     */
    name?: pulumi.Input<string>;
    /**
     * Public ip address of the VPN gateway.
     */
    publicIpAddress?: pulumi.Input<string>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * Tags of the VPN gateway to be queried.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * ID of the VPC.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * Zone of the VPN gateway.
     */
    zone?: pulumi.Input<string>;
}
