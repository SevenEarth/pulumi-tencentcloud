// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class FileSystem extends pulumi.CustomResource {
    /**
     * Get an existing FileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileSystemState, opts?: pulumi.CustomResourceOptions): FileSystem {
        return new FileSystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cfs/fileSystem:FileSystem';

    /**
     * Returns true if the given object is an instance of FileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileSystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileSystem.__pulumiType;
    }

    /**
     * ID of a access group.
     */
    public readonly accessGroupId!: pulumi.Output<string>;
    /**
     * The available zone that the file system locates at.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * Create time of the file system.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * IP of mount point.
     */
    public readonly mountIp!: pulumi.Output<string>;
    /**
     * Name of a file system.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * File service protocol. Valid values are `NFS` and `CIFS`. and the default is `NFS`.
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * File service StorageType. Valid values are `SD` and `HP`. and the default is `SD`.
     */
    public readonly storageType!: pulumi.Output<string | undefined>;
    /**
     * ID of a subnet.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * Instance tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * ID of a VPC network.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a FileSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileSystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileSystemArgs | FileSystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileSystemState | undefined;
            resourceInputs["accessGroupId"] = state ? state.accessGroupId : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["mountIp"] = state ? state.mountIp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as FileSystemArgs | undefined;
            if ((!args || args.accessGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessGroupId'");
            }
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["accessGroupId"] = args ? args.accessGroupId : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["mountIp"] = args ? args.mountIp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileSystem.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FileSystem resources.
 */
export interface FileSystemState {
    /**
     * ID of a access group.
     */
    accessGroupId?: pulumi.Input<string>;
    /**
     * The available zone that the file system locates at.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Create time of the file system.
     */
    createTime?: pulumi.Input<string>;
    /**
     * IP of mount point.
     */
    mountIp?: pulumi.Input<string>;
    /**
     * Name of a file system.
     */
    name?: pulumi.Input<string>;
    /**
     * File service protocol. Valid values are `NFS` and `CIFS`. and the default is `NFS`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * File service StorageType. Valid values are `SD` and `HP`. and the default is `SD`.
     */
    storageType?: pulumi.Input<string>;
    /**
     * ID of a subnet.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Instance tags.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * ID of a VPC network.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FileSystem resource.
 */
export interface FileSystemArgs {
    /**
     * ID of a access group.
     */
    accessGroupId: pulumi.Input<string>;
    /**
     * The available zone that the file system locates at.
     */
    availabilityZone: pulumi.Input<string>;
    /**
     * IP of mount point.
     */
    mountIp?: pulumi.Input<string>;
    /**
     * Name of a file system.
     */
    name?: pulumi.Input<string>;
    /**
     * File service protocol. Valid values are `NFS` and `CIFS`. and the default is `NFS`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * File service StorageType. Valid values are `SD` and `HP`. and the default is `SD`.
     */
    storageType?: pulumi.Input<string>;
    /**
     * ID of a subnet.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Instance tags.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * ID of a VPC network.
     */
    vpcId: pulumi.Input<string>;
}
