// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

export class CCPolicyV2 extends pulumi.CustomResource {
    /**
     * Get an existing CCPolicyV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CCPolicyV2State, opts?: pulumi.CustomResourceOptions): CCPolicyV2 {
        return new CCPolicyV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Dayu/cCPolicyV2:CCPolicyV2';

    /**
     * Returns true if the given object is an instance of CCPolicyV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CCPolicyV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CCPolicyV2.__pulumiType;
    }

    /**
     * Bussiness of resource instance. bgpip indicates anti-anti-ip ip; bgp means exclusive package; bgp-multip means shared
     * packet; net indicates anti-anti-ip pro version.
     */
    public readonly business!: pulumi.Output<string>;
    /**
     * Blacklist and whitelist.
     */
    public readonly ccBlackWhiteIps!: pulumi.Output<outputs.Dayu.CCPolicyV2CcBlackWhiteIp[] | undefined>;
    /**
     * Details of the CC region blocking policy list.
     */
    public readonly ccGeoIpPolicys!: pulumi.Output<outputs.Dayu.CCPolicyV2CcGeoIpPolicy[] | undefined>;
    /**
     * CC Precision Protection List.
     */
    public readonly ccPrecisionPolicys!: pulumi.Output<outputs.Dayu.CCPolicyV2CcPrecisionPolicy[] | undefined>;
    /**
     * CC frequency throttling policy.
     */
    public readonly ccPrecisionReqLimits!: pulumi.Output<outputs.Dayu.CCPolicyV2CcPrecisionReqLimit[] | undefined>;
    /**
     * The ID of the resource instance.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * List of protection threshold configurations.
     */
    public readonly thresholds!: pulumi.Output<outputs.Dayu.CCPolicyV2Threshold[] | undefined>;

    /**
     * Create a CCPolicyV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CCPolicyV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CCPolicyV2Args | CCPolicyV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CCPolicyV2State | undefined;
            resourceInputs["business"] = state ? state.business : undefined;
            resourceInputs["ccBlackWhiteIps"] = state ? state.ccBlackWhiteIps : undefined;
            resourceInputs["ccGeoIpPolicys"] = state ? state.ccGeoIpPolicys : undefined;
            resourceInputs["ccPrecisionPolicys"] = state ? state.ccPrecisionPolicys : undefined;
            resourceInputs["ccPrecisionReqLimits"] = state ? state.ccPrecisionReqLimits : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["thresholds"] = state ? state.thresholds : undefined;
        } else {
            const args = argsOrState as CCPolicyV2Args | undefined;
            if ((!args || args.business === undefined) && !opts.urn) {
                throw new Error("Missing required property 'business'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            resourceInputs["business"] = args ? args.business : undefined;
            resourceInputs["ccBlackWhiteIps"] = args ? args.ccBlackWhiteIps : undefined;
            resourceInputs["ccGeoIpPolicys"] = args ? args.ccGeoIpPolicys : undefined;
            resourceInputs["ccPrecisionPolicys"] = args ? args.ccPrecisionPolicys : undefined;
            resourceInputs["ccPrecisionReqLimits"] = args ? args.ccPrecisionReqLimits : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["thresholds"] = args ? args.thresholds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CCPolicyV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CCPolicyV2 resources.
 */
export interface CCPolicyV2State {
    /**
     * Bussiness of resource instance. bgpip indicates anti-anti-ip ip; bgp means exclusive package; bgp-multip means shared
     * packet; net indicates anti-anti-ip pro version.
     */
    business?: pulumi.Input<string>;
    /**
     * Blacklist and whitelist.
     */
    ccBlackWhiteIps?: pulumi.Input<pulumi.Input<inputs.Dayu.CCPolicyV2CcBlackWhiteIp>[]>;
    /**
     * Details of the CC region blocking policy list.
     */
    ccGeoIpPolicys?: pulumi.Input<pulumi.Input<inputs.Dayu.CCPolicyV2CcGeoIpPolicy>[]>;
    /**
     * CC Precision Protection List.
     */
    ccPrecisionPolicys?: pulumi.Input<pulumi.Input<inputs.Dayu.CCPolicyV2CcPrecisionPolicy>[]>;
    /**
     * CC frequency throttling policy.
     */
    ccPrecisionReqLimits?: pulumi.Input<pulumi.Input<inputs.Dayu.CCPolicyV2CcPrecisionReqLimit>[]>;
    /**
     * The ID of the resource instance.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * List of protection threshold configurations.
     */
    thresholds?: pulumi.Input<pulumi.Input<inputs.Dayu.CCPolicyV2Threshold>[]>;
}

/**
 * The set of arguments for constructing a CCPolicyV2 resource.
 */
export interface CCPolicyV2Args {
    /**
     * Bussiness of resource instance. bgpip indicates anti-anti-ip ip; bgp means exclusive package; bgp-multip means shared
     * packet; net indicates anti-anti-ip pro version.
     */
    business: pulumi.Input<string>;
    /**
     * Blacklist and whitelist.
     */
    ccBlackWhiteIps?: pulumi.Input<pulumi.Input<inputs.Dayu.CCPolicyV2CcBlackWhiteIp>[]>;
    /**
     * Details of the CC region blocking policy list.
     */
    ccGeoIpPolicys?: pulumi.Input<pulumi.Input<inputs.Dayu.CCPolicyV2CcGeoIpPolicy>[]>;
    /**
     * CC Precision Protection List.
     */
    ccPrecisionPolicys?: pulumi.Input<pulumi.Input<inputs.Dayu.CCPolicyV2CcPrecisionPolicy>[]>;
    /**
     * CC frequency throttling policy.
     */
    ccPrecisionReqLimits?: pulumi.Input<pulumi.Input<inputs.Dayu.CCPolicyV2CcPrecisionReqLimit>[]>;
    /**
     * The ID of the resource instance.
     */
    resourceId: pulumi.Input<string>;
    /**
     * List of protection threshold configurations.
     */
    thresholds?: pulumi.Input<pulumi.Input<inputs.Dayu.CCPolicyV2Threshold>[]>;
}
