// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export namespace Address {
    export interface GetTemplateGroupsGroupList {
        /**
         * Id of the address template group to query.
         */
        id: string;
        /**
         * Name of the address template group to query.
         */
        name: string;
        /**
         * ID set of the address template.
         */
        templateIds: string[];
    }

    export interface GetTemplatesTemplateList {
        /**
         * Set of the addresses.
         */
        addresses: string[];
        /**
         * ID of the address template to query.
         */
        id: string;
        /**
         * Name of the address template to query.
         */
        name: string;
    }

}

export namespace ApiGateway {
    export interface ApiRequestParameter {
        /**
         * Parameter default value.
         */
        defaultValue?: string;
        /**
         * Parameter description.
         */
        desc?: string;
        /**
         * Parameter name.
         */
        name: string;
        /**
         * Parameter location.
         */
        position: string;
        /**
         * If this parameter required. Default value: `false`.
         */
        required?: boolean;
        /**
         * Parameter type.
         */
        type: string;
    }

    export interface ApiResponseErrorCode {
        /**
         * Custom response configuration error code.
         */
        code: number;
        /**
         * Custom error code conversion.
         */
        convertedCode?: number;
        /**
         * Parameter description.
         */
        desc?: string;
        /**
         * Custom response configuration error message.
         */
        msg: string;
        /**
         * Whether to enable error code conversion. Default value: `false`.
         */
        needConvert?: boolean;
    }

    export interface GetApiAppsApiAppList {
        /**
         * ApiApp description.
         */
        apiAppDesc: string;
        /**
         * Api app ID.
         */
        apiAppId: string;
        /**
         * ApiApp key.
         */
        apiAppKey: string;
        /**
         * Api app name.
         */
        apiAppName: string;
        /**
         * ApiApp secret.
         */
        apiAppSecret: string;
        /**
         * ApiApp create time.
         */
        createdTime: string;
        /**
         * ApiApp modified time.
         */
        modifiedTime: string;
    }

    export interface GetApiDocsApiDocList {
        /**
         * Api Doc ID.
         */
        apiDocId: string;
        /**
         * Api Doc Name.
         */
        apiDocName: string;
        /**
         * Api Doc Status.
         */
        apiDocStatus: string;
    }

    export interface GetApiKeysList {
        /**
         * Created API key.
         */
        accessKeySecret: string;
        /**
         * Created API key ID, this field is exactly the same as ID.
         */
        apiKeyId: string;
        /**
         * Creation time in the format of `YYYY-MM-DDThh:mm:ssZ` according to ISO 8601 standard. UTC time is used.
         */
        createTime: string;
        /**
         * Last modified time in the format of `YYYY-MM-DDThh:mm:ssZ` according to ISO 8601 standard. UTC time is used.
         */
        modifyTime: string;
        /**
         * Key status. Values: `on`, `off`.
         */
        status: string;
    }

    export interface GetApisList {
        /**
         * Custom API description.
         */
        apiDesc: string;
        /**
         * Custom API name.
         */
        apiName: string;
        /**
         * API authentication type. Valid values: `SECRET`, `NONE`. `SECRET` means key pair authentication, `NONE` means no authentication.
         */
        authType: string;
        /**
         * Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
         */
        createTime: string;
        /**
         * Whether to enable CORS.
         */
        enableCors: boolean;
        /**
         * Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
         */
        modifyTime: string;
        /**
         * API frontend request type, such as `HTTP`,`WEBSOCKET`.
         */
        protocol: string;
        /**
         * Request frontend method configuration. Like `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`.
         */
        requestConfigMethod: string;
        /**
         * Request frontend path configuration. Like `/user/getinfo`.
         */
        requestConfigPath: string;
        /**
         * Frontend request parameters.
         */
        requestParameters: outputs.ApiGateway.GetApisListRequestParameter[];
        /**
         * Custom error code configuration. Must keep at least one after set.
         */
        responseErrorCodes: outputs.ApiGateway.GetApisListResponseErrorCode[];
        /**
         * Response failure sample of custom response configuration.
         */
        responseFailExample: string;
        /**
         * Successful response sample of custom response configuration.
         */
        responseSuccessExample: string;
        /**
         * Return type.
         */
        responseType: string;
        /**
         * API backend service request method, such as `GET`. If `serviceConfigType` is `HTTP`, this parameter will be required. The frontend `requestConfigMethod` and backend method `serviceConfigMethod` can be different.
         */
        serviceConfigMethod: string;
        /**
         * Returned information of API backend mocking.
         */
        serviceConfigMockReturnMessage: string;
        /**
         * API backend service path, such as /path. If `serviceConfigType` is `HTTP`, this parameter will be required. The frontend `requestConfigPath` and backend path `serviceConfigPath` can be different.
         */
        serviceConfigPath: string;
        /**
         * Backend type. This parameter takes effect when VPC is enabled. Currently, only `clb` is supported.
         */
        serviceConfigProduct: string;
        /**
         * SCF function name. This parameter takes effect when `serviceConfigType` is `SCF`.
         */
        serviceConfigScfFunctionName: string;
        /**
         * SCF function namespace. This parameter takes effect when  `serviceConfigType` is `SCF`.
         */
        serviceConfigScfFunctionNamespace: string;
        /**
         * SCF function version. This parameter takes effect when `serviceConfigType`  is `SCF`.
         */
        serviceConfigScfFunctionQualifier: string;
        /**
         * API backend service timeout period in seconds.
         */
        serviceConfigTimeout: number;
        /**
         * API backend service type.
         */
        serviceConfigType: string;
        /**
         * API backend service url. This parameter is required when `serviceConfigType` is `HTTP`.
         */
        serviceConfigUrl: string;
        /**
         * Unique VPC ID.
         */
        serviceConfigVpcId: string;
        /**
         * Service ID for query.
         */
        serviceId: string;
    }

    export interface GetApisListRequestParameter {
        /**
         * Parameter default value.
         */
        defaultValue: string;
        /**
         * Parameter description.
         */
        desc: string;
        /**
         * Parameter name.
         */
        name: string;
        /**
         * Parameter location.
         */
        position: string;
        /**
         * If this parameter required.
         */
        required: boolean;
        /**
         * Parameter type.
         */
        type: string;
    }

    export interface GetApisListResponseErrorCode {
        /**
         * Custom response configuration error code.
         */
        code: number;
        /**
         * Custom error code conversion.
         */
        convertedCode: number;
        /**
         * Parameter description.
         */
        desc: string;
        /**
         * Custom response configuration error message.
         */
        msg: string;
        /**
         * Whether to enable error code conversion. Default value: `false`.
         */
        needConvert: boolean;
    }

    export interface GetCustomerDomainsList {
        /**
         * The certificate ID.
         */
        certificateId: string;
        /**
         * Domain name.
         */
        domainName: string;
        /**
         * Whether to use default path mapping. Valid values: `true`, `false`. `true` means to use default path mapping, `false` means to use custom path mapping.
         */
        isDefaultMapping: boolean;
        /**
         * Domain name resolution status. Valid values: `true`, `false`. `true` means normal parsing, `false` means parsing failed.
         */
        isStatusOn: boolean;
        /**
         * Network type.
         */
        netType: string;
        /**
         * Domain name mapping path and environment list.
         */
        pathMappings: outputs.ApiGateway.GetCustomerDomainsListPathMapping[];
        /**
         * Custom domain name agreement type.
         */
        protocol: string;
    }

    export interface GetCustomerDomainsListPathMapping {
        /**
         * Release environment.
         */
        environment: string;
        /**
         * The domain mapping path.
         */
        path: string;
    }

    export interface GetIpStrategiesList {
        /**
         * List of bound API details.
         */
        attachLists: outputs.ApiGateway.GetIpStrategiesListAttachList[];
        /**
         * The number of API bound to the strategy.
         */
        bindApiTotalCount: number;
        /**
         * Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
         */
        createTime: string;
        /**
         * The list of IP.
         */
        ipList: string;
        /**
         * Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
         */
        modifyTime: string;
        /**
         * The service ID to be queried.
         */
        serviceId: string;
        /**
         * The strategy ID.
         */
        strategyId: string;
        /**
         * Name of IP policy.
         */
        strategyName: string;
        /**
         * Type of the strategy.
         */
        strategyType: string;
    }

    export interface GetIpStrategiesListAttachList {
        /**
         * The type of oauth API. This field is valid when the `authType` is `OAUTH`, and the values are `NORMAL` (business API) and `OAUTH` (authorization API).
         */
        apiBusinessType: string;
        /**
         * API interface description.
         */
        apiDesc: string;
        /**
         * The API ID.
         */
        apiId: string;
        /**
         * API name.
         */
        apiName: string;
        /**
         * API type. Valid values: `NORMAL`, `TSF`. `NORMAL` means common API, `TSF` means microservice API.
         */
        apiType: string;
        /**
         * The unique ID of the associated authorization API, which takes effect when the authType is `OAUTH` and `ApiBusinessType` is normal. Identifies the unique ID of the oauth2.0 authorization API bound to the business API.
         */
        authRelationApiId: string;
        /**
         * API authentication type. Valid values: `SECRET`, `NONE`, `OAUTH`. `SECRET` means key pair authentication, `NONE` means no authentication.
         */
        authType: string;
        /**
         * Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
         */
        createTime: string;
        /**
         * API request method.
         */
        method: string;
        /**
         * Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
         */
        modifyTime: string;
        /**
         * OAUTH configuration information. It takes effect when authType is `OAUTH`.
         */
        oauthConfig: {[key: string]: any};
        /**
         * API path.
         */
        path: string;
        /**
         * API protocol.
         */
        protocol: string;
        /**
         * List of business API associated with authorized API.
         */
        relationBusinessApiIds: string[];
        /**
         * The service ID to be queried.
         */
        serviceId: string;
        /**
         * The label information associated with the API.
         */
        tags: string[];
        /**
         * VPC unique ID.
         */
        uniqVpcId: string;
        /**
         * VPC ID.
         */
        vpcId: number;
    }

    export interface GetServicesList {
        /**
         * Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
         */
        createTime: string;
        /**
         * Self-deployed cluster name, which is used to specify the self-deployed cluster where the service is to be created.
         */
        exclusiveSetName: string;
        /**
         * Port number for http access over private network.
         */
        innerHttpPort: number;
        /**
         * Port number for https access over private network.
         */
        innerHttpsPort: number;
        /**
         * Private network access sub-domain name.
         */
        internalSubDomain: string;
        /**
         * IP version number.
         */
        ipVersion: string;
        /**
         * Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
         */
        modifyTime: string;
        /**
         * Network type list, which is used to specify the supported network types. Valid values: `INNER`, `OUTER`. `INNER` indicates access over private network, and `OUTER` indicates access over public network.
         */
        netTypes: string[];
        /**
         * Public network access subdomain name.
         */
        outerSubDomain: string;
        /**
         * Service frontend request type. Valid values: `http`, `https`, `http&https`.
         */
        protocol: string;
        /**
         * Custom service description.
         */
        serviceDesc: string;
        /**
         * Service ID for query.
         */
        serviceId: string;
        /**
         * Service name for query.
         */
        serviceName: string;
        /**
         * A list of attach usage plans. Each element contains the following attributes:
         */
        usagePlanLists: outputs.ApiGateway.GetServicesListUsagePlanList[];
    }

    export interface GetServicesListUsagePlanList {
        /**
         * ID of the API.
         */
        apiId: string;
        /**
         * Binding type.
         */
        bindType: string;
        /**
         * ID of the usage plan.
         */
        usagePlanId: string;
        /**
         * Name of the usage plan.
         */
        usagePlanName: string;
    }

    export interface GetThrottlingApisList {
        /**
         * List of throttling policies bound to API.
         */
        apiEnvironmentStrategies: outputs.ApiGateway.GetThrottlingApisListApiEnvironmentStrategy[];
        /**
         * Unique service ID of API.
         */
        serviceId: string;
    }

    export interface GetThrottlingApisListApiEnvironmentStrategy {
        /**
         * Unique API ID.
         */
        apiId: string;
        /**
         * Custom API name.
         */
        apiName: string;
        /**
         * API method.
         */
        method: string;
        /**
         * API path.
         */
        path: string;
        /**
         * Environment throttling information.
         */
        strategyLists: outputs.ApiGateway.GetThrottlingApisListApiEnvironmentStrategyStrategyList[];
    }

    export interface GetThrottlingApisListApiEnvironmentStrategyStrategyList {
        /**
         * Environment name.
         */
        environmentName: string;
        /**
         * Throttling value.
         */
        quota: number;
    }

    export interface GetThrottlingServicesList {
        /**
         * A list of Throttling policy.
         */
        environments: outputs.ApiGateway.GetThrottlingServicesListEnvironment[];
        /**
         * Service ID for query.
         */
        serviceId: string;
    }

    export interface GetThrottlingServicesListEnvironment {
        /**
         * Environment name.
         */
        environmentName: string;
        /**
         * Release status.
         */
        status: number;
        /**
         * Throttling value.
         */
        strategy: number;
        /**
         * Access service environment URL.
         */
        url: string;
        /**
         * Published version number.
         */
        versionName: string;
    }

    export interface GetUsagePlanEnvironmentsList {
        /**
         * The API ID, this value is empty if attach service.
         */
        apiId: string;
        /**
         * The API name, this value is empty if attach service.
         */
        apiName: string;
        /**
         * Creation time in the format of `YYYY-MM-DDThh:mm:ssZ` according to ISO 8601 standard. UTC time is used.
         */
        createTime: string;
        /**
         * The environment name.
         */
        environment: string;
        /**
         * The API method, this value is empty if attach service.
         */
        method: string;
        /**
         * Last modified time in the format of `YYYY-MM-DDThh:mm:ssZ` according to ISO 8601 standard. UTC time is used.
         */
        modifyTime: string;
        /**
         * The API path, this value is empty if attach service.
         */
        path: string;
        /**
         * The service ID.
         */
        serviceId: string;
        /**
         * The service name.
         */
        serviceName: string;
    }

    export interface GetUsagePlansList {
        /**
         * Creation time in the format of `YYYY-MM-DDThh:mm:ssZ` according to ISO 8601 standard. UTC time is used.
         */
        createTime: string;
        /**
         * Total number of requests allowed. Valid value formats: `-1`, `[1,99999999]`. The default value is -1, which indicates no limit.
         */
        maxRequestNum: number;
        /**
         * Limit of requests per second. Valid values formats: `-1`, `[1,2000]`. The default value is -1, which indicates no limit.
         */
        maxRequestNumPreSec: number;
        /**
         * Last modified time in the format of `YYYY-MM-DDThh:mm:ssZ` according to ISO 8601 standard. UTC time is used.
         */
        modifyTime: string;
        /**
         * Custom usage plan description.
         */
        usagePlanDesc: string;
        /**
         * ID of the usage plan.
         */
        usagePlanId: string;
        /**
         * Name of the usage plan.
         */
        usagePlanName: string;
    }

    export interface ServiceApiList {
        /**
         * Description of the API.
         */
        apiDesc: string;
        /**
         * ID of the API.
         */
        apiId: string;
        /**
         * Name of the API.
         */
        apiName: string;
        /**
         * Method of the API.
         */
        method: string;
        /**
         * Path of the API.
         */
        path: string;
    }

    export interface ServiceUsagePlanList {
        /**
         * ID of the API.
         */
        apiId: string;
        /**
         * Binding type.
         */
        bindType: string;
        /**
         * ID of the usage plan.
         */
        usagePlanId: string;
        /**
         * Name of the usage plan.
         */
        usagePlanName: string;
    }

    export interface UsagePlanAttachList {
        /**
         * The API ID, this value is empty if attach service.
         */
        apiId: string;
        /**
         * The API name, this value is empty if attach service.
         */
        apiName: string;
        /**
         * Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
         */
        createTime: string;
        /**
         * The environment name.
         */
        environment: string;
        /**
         * The API method, this value is empty if attach service.
         */
        method: string;
        /**
         * Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
         */
        modifyTime: string;
        /**
         * The API path, this value is empty if attach service.
         */
        path: string;
        /**
         * The service ID.
         */
        serviceId: string;
        /**
         * The service name.
         */
        serviceName: string;
    }

}

export namespace As {
    export interface GetInstancesFilter {
        /**
         * Fields to be filtered. Valid names: `instance-id`: Filters by instance ID, `auto-scaling-group-id`: Filter by scaling group ID.
         */
        name: string;
        /**
         * Value of the field.
         */
        values: string[];
    }

    export interface GetInstancesInstanceList {
        /**
         * The time when the instance joined the group.
         */
        addTime: string;
        /**
         * Auto scaling group ID.
         */
        autoScalingGroupId: string;
        /**
         * Auto scaling group name.
         */
        autoScalingGroupName: string;
        /**
         * Valid values: `AUTO_CREATION`, `MANUAL_ATTACHING`.
         */
        creationType: string;
        /**
         * Health status, the valid values are HEALTHY and UNHEALTHY.
         */
        healthStatus: string;
        /**
         * Instance ID.
         */
        instanceId: string;
        /**
         * Instance type.
         */
        instanceType: string;
        /**
         * Launch configuration ID.
         */
        launchConfigurationId: string;
        /**
         * Launch configuration name.
         */
        launchConfigurationName: string;
        /**
         * Life cycle state. Please refer to the link for field value details: https://cloud.tencent.com/document/api/377/20453#Instance.
         */
        lifeCycleState: string;
        /**
         * Enable scale in protection.
         */
        protectedFromScaleIn: boolean;
        /**
         * Version ID.
         */
        versionNumber: number;
        /**
         * Available zone.
         */
        zone: string;
    }

    export interface GetScalingConfigsConfigurationList {
        /**
         * Launch configuration ID.
         */
        configurationId: string;
        /**
         * Launch configuration name.
         */
        configurationName: string;
        /**
         * The time when the launch configuration was created.
         */
        createTime: string;
        /**
         * Configurations of data disk.
         */
        dataDisks: outputs.As.GetScalingConfigsConfigurationListDataDisk[];
        /**
         * Policy of cloud disk type.
         */
        diskTypePolicy: string;
        /**
         * Whether to activate cloud monitor service.
         */
        enhancedMonitorService: boolean;
        /**
         * Whether to activate cloud security service.
         */
        enhancedSecurityService: boolean;
        /**
         * ID of available image, for example `img-8toqc6s3`.
         */
        imageId: string;
        /**
         * A tag list associates with an instance.
         */
        instanceTags: {[key: string]: any};
        /**
         * Instance type list of the scaling configuration.
         */
        instanceTypes: string[];
        /**
         * Charge types for network traffic.
         */
        internetChargeType: string;
        /**
         * Max bandwidth of Internet access in Mbps.
         */
        internetMaxBandwidthOut: number;
        /**
         * ID list of login keys.
         */
        keyIds: string[];
        /**
         * ID of the project to which the configuration belongs. Default value is 0.
         */
        projectId: number;
        /**
         * Specify whether to assign an Internet IP address.
         */
        publicIpAssigned: boolean;
        /**
         * Security groups to which the instance belongs.
         */
        securityGroupIds: string[];
        /**
         * Current status of a launch configuration.
         */
        status: string;
        /**
         * System disk size of the scaling configuration in GB.
         */
        systemDiskSize: number;
        /**
         * System disk category of the scaling configuration.
         */
        systemDiskType: string;
        /**
         * Base64-encoded User Data text.
         */
        userData: string;
    }

    export interface GetScalingConfigsConfigurationListDataDisk {
        /**
         * Indicates whether the disk remove after instance terminated.
         */
        deleteWithInstance: boolean;
        /**
         * Volume of disk in GB. Default is `0`.
         */
        diskSize: number;
        /**
         * Type of disk.
         */
        diskType: string;
        /**
         * Data disk snapshot ID.
         */
        snapshotId: string;
    }

    export interface GetScalingGroupsScalingGroupList {
        /**
         * Filter results by launch configuration ID.
         */
        configurationId: string;
        /**
         * The time when the AS group was created.
         */
        createTime: string;
        /**
         * Default cooldown time of scaling group.
         */
        defaultCooldown: number;
        /**
         * The desired number of CVM instances.
         */
        desiredCapacity: number;
        /**
         * A list of application clb ids.
         */
        forwardBalancerIds: outputs.As.GetScalingGroupsScalingGroupListForwardBalancerId[];
        /**
         * Number of instance.
         */
        instanceCount: number;
        /**
         * A list of traditional clb ids which the CVM instances attached to.
         */
        loadBalancerIds: string[];
        /**
         * The maximum number of CVM instances.
         */
        maxSize: number;
        /**
         * The minimum number of CVM instances.
         */
        minSize: number;
        /**
         * Multi zone or subnet strategy, Valid values: PRIORITY and EQUALITY.
         */
        multiZoneSubnetPolicy: string;
        /**
         * ID of the project to which the scaling group belongs. Default value is 0.
         */
        projectId: number;
        /**
         * A retry policy can be used when a creation fails.
         */
        retryPolicy: string;
        /**
         * A specified scaling group ID used to query.
         */
        scalingGroupId: string;
        /**
         * A scaling group name used to query.
         */
        scalingGroupName: string;
        /**
         * Current status of a scaling group.
         */
        status: string;
        /**
         * A list of subnet IDs.
         */
        subnetIds: string[];
        /**
         * Tags used to query.
         */
        tags: {[key: string]: any};
        /**
         * A policy used to select a CVM instance to be terminated from the scaling group.
         */
        terminationPolicies: string[];
        /**
         * ID of the vpc with which the instance is associated.
         */
        vpcId: string;
        /**
         * A list of available zones.
         */
        zones: string[];
    }

    export interface GetScalingGroupsScalingGroupListForwardBalancerId {
        /**
         * Listener ID for application load balancers.
         */
        listenerId: string;
        /**
         * ID of available load balancers.
         */
        loadBalancerId: string;
        /**
         * ID of forwarding rules.
         */
        locationId: string;
        /**
         * Attribute list of target rules.
         */
        targetAttributes: outputs.As.GetScalingGroupsScalingGroupListForwardBalancerIdTargetAttribute[];
    }

    export interface GetScalingGroupsScalingGroupListForwardBalancerIdTargetAttribute {
        /**
         * Port number.
         */
        port: number;
        /**
         * Weight.
         */
        weight: number;
    }

    export interface GetScalingPoliciesScalingPolicyList {
        /**
         * Adjustment type of the scaling rule.
         */
        adjustmentType: string;
        /**
         * Adjustment value of the scaling rule.
         */
        adjustmentValue: number;
        /**
         * Comparison operator.
         */
        comparisonOperator: string;
        /**
         * Retry times.
         */
        continuousTime: number;
        /**
         * Cool down time of the scaling rule.
         */
        cooldown: number;
        /**
         * Name of an indicator.
         */
        metricName: string;
        /**
         * Users need to be notified when an alarm is triggered.
         */
        notificationUserGroupIds: string[];
        /**
         * Time period in second.
         */
        period: number;
        /**
         * Scaling policy name.
         */
        policyName: string;
        /**
         * Scaling group ID.
         */
        scalingGroupId: string;
        /**
         * Statistic types.
         */
        statistic: string;
        /**
         * Alarm threshold.
         */
        threshold: number;
    }

    export interface ScalingConfigDataDisk {
        /**
         * Indicates whether the disk remove after instance terminated. Default is `false`.
         */
        deleteWithInstance?: boolean;
        /**
         * Volume of disk in GB. Default is `0`.
         */
        diskSize?: number;
        /**
         * Types of disk. Valid values: `CLOUD_PREMIUM` and `CLOUD_SSD`. valid when diskTypePolicy is ORIGINAL.
         */
        diskType?: string;
        /**
         * Data disk snapshot ID.
         */
        snapshotId?: string;
    }

    export interface ScalingConfigInstanceNameSettings {
        /**
         * CVM instance name.
         */
        instanceName: string;
        /**
         * Type of CVM instance name. Valid values: `ORIGINAL` and `UNIQUE`. Default is `ORIGINAL`.
         */
        instanceNameStyle?: string;
    }

    export interface ScalingGroupForwardBalancerId {
        /**
         * Listener ID for application load balancers.
         */
        listenerId: string;
        /**
         * ID of available load balancers.
         */
        loadBalancerId: string;
        /**
         * ID of forwarding rules.
         */
        ruleId?: string;
        /**
         * Attribute list of target rules.
         */
        targetAttributes: outputs.As.ScalingGroupForwardBalancerIdTargetAttribute[];
    }

    export interface ScalingGroupForwardBalancerIdTargetAttribute {
        /**
         * Port number.
         */
        port: number;
        /**
         * Weight.
         */
        weight: number;
    }
}

export namespace Audit {
    export interface GetCosRegionsAuditCosRegionList {
        /**
         * Cos region.
         */
        cosRegion: string;
        /**
         * Cos region chinese name.
         */
        cosRegionName: string;
    }

    export interface GetKeyAliasAuditKeyAliasList {
        /**
         * Key alias.
         */
        keyAlias: string;
        /**
         * Key ID.
         */
        keyId: string;
    }

    export interface TrackStorage {
        /**
         * Track Storage name:- when StorageType is `cls`, StorageName is cls topicId- when StorageType is `cos`, StorageName is cos bucket name that does not contain `-APPID`.
         */
        storageName: string;
        /**
         * Storage path prefix.
         */
        storagePrefix: string;
        /**
         * Storage region.
         */
        storageRegion: string;
        /**
         * Track Storage type, optional:- `cos`- `cls`.
         */
        storageType: string;
    }

}

export namespace Audits {
    export interface GetInstanceAuditList {
        /**
         * Indicate whether audit start logging or not.
         */
        auditSwitch: boolean;
        /**
         * Cos bucket name where audit save logs.
         */
        cosBucket: string;
        /**
         * ID of the audit.
         */
        id: string;
        /**
         * Prefix of the log file of the audit.
         */
        logFilePrefix: string;
        /**
         * Name of the audits.
         */
        name: string;
    }

}

export namespace Availability {
    export interface GetRegionsRegion {
        /**
         * The description of the region, like `Guangzhou Region`.
         */
        description: string;
        /**
         * When specified, only the region with the exactly name match will be returned. `default` value means it consistent with the provider region.
         */
        name: string;
        /**
         * The state of the region, indicate availability using `AVAILABLE` and `UNAVAILABLE` values.
         */
        state: string;
    }

    export interface GetZonesByProductZone {
        /**
         * The description of the zone, like `Guangzhou Zone 3`.
         */
        description: string;
        /**
         * An internal id for the zone, like `200003`, usually not so useful.
         */
        id: string;
        /**
         * When specified, only the zone with the exactly name match will be returned.
         */
        name: string;
        /**
         * The state of the zone, indicate availability using `AVAILABLE` and `UNAVAILABLE` values.
         */
        state: string;
    }

}

export namespace Cam {
    export interface GetGroupMembershipsMembershipList {
        /**
         * ID of CAM group to be queried.
         */
        groupId: string;
        /**
         * (**Deprecated**) It has been deprecated from version 1.59.5. Use `userNames` instead. ID set of the CAM group members.
         *
         * @deprecated It has been deprecated from version 1.59.5. Use `user_names` instead.
         */
        userIds: string[];
        /**
         * ID set of the CAM group members.
         */
        userNames: string[];
    }

    export interface GetGroupPolicyAttachmentsGroupPolicyAttachmentList {
        /**
         * Mode of creation of the CAM user policy attachment. 1 means the cam policy attachment is created by production, and the others indicate syntax strategy ways.
         */
        createMode: number;
        /**
         * Create time of the CAM group policy attachment.
         */
        createTime: string;
        /**
         * ID of the attached CAM group to be queried.
         */
        groupId: string;
        /**
         * ID of CAM policy to be queried.
         */
        policyId: string;
        /**
         * Name of the policy.
         */
        policyName: string;
        /**
         * Type of the policy strategy. 'User' means customer strategy and 'QCS' means preset strategy.
         */
        policyType: string;
    }

    export interface GetGroupsGroupList {
        /**
         * Create time of the CAM group.
         */
        createTime: string;
        /**
         * ID of CAM group to be queried.
         */
        groupId: string;
        /**
         * Name of the CAM group to be queried.
         */
        name: string;
        /**
         * Description of the cam group to be queried.
         */
        remark: string;
    }

    export interface GetPoliciesPolicyList {
        /**
         * Number of attached users.
         */
        attachments: number;
        /**
         * Mode of creation of policy strategy. Valid values: `1`, `2`. `1` means policy was created with console, and `2` means it was created by strategies.
         */
        createMode: number;
        /**
         * Create time of the CAM policy.
         */
        createTime: string;
        /**
         * The description of the CAM policy.
         */
        description: string;
        /**
         * Name of the CAM policy to be queried.
         */
        name: string;
        /**
         * ID of CAM policy to be queried.
         */
        policyId: string;
        /**
         * Name of attached products.
         */
        serviceType: string;
        /**
         * Type of the policy strategy. Valid values: `1`, `2`. `1` means customer strategy and `2` means preset strategy.
         */
        type: number;
    }

    export interface GetRolePolicyAttachmentsRolePolicyAttachmentList {
        /**
         * Mode of Creation of the CAM user policy attachment. `1` means the cam policy attachment is created by production, and the others indicate syntax strategy ways.
         */
        createMode: number;
        /**
         * Create time of the CAM role policy attachment.
         */
        createTime: string;
        /**
         * ID of CAM policy to be queried.
         */
        policyId: string;
        /**
         * Name of the policy.
         */
        policyName: string;
        /**
         * Type of the policy strategy. Valid values are 'User', 'QCS'. 'User' means customer strategy and 'QCS' means preset strategy.
         */
        policyType: string;
        /**
         * ID of the attached CAM role to be queried.
         */
        roleId: string;
    }

    export interface GetRolesRoleList {
        /**
         * Indicate whether the CAM role can be login or not.
         */
        consoleLogin: boolean;
        /**
         * The create time of the CAM role.
         */
        createTime: string;
        /**
         * The description of the CAM role to be queried.
         */
        description: string;
        /**
         * Policy document of CAM role.
         */
        document: string;
        /**
         * Name of the CAM policy to be queried.
         */
        name: string;
        /**
         * ID of the CAM role to be queried.
         */
        roleId: string;
        /**
         * The last update time of the CAM role.
         */
        updateTime: string;
    }

    export interface GetSamlProvidersProviderList {
        /**
         * Create time of the CAM SAML provider.
         */
        createTime: string;
        /**
         * The description of the CAM SAML provider.
         */
        description: string;
        /**
         * The last modify time of the CAM SAML provider.
         */
        modifyTime: string;
        /**
         * Name of the CAM SAML provider to be queried.
         */
        name: string;
    }

    export interface GetUserPolicyAttachmentsUserPolicyAttachmentList {
        /**
         * Mode of Creation of the CAM user policy attachment. `1` means the CAM policy attachment is created by production, and the others indicate syntax strategy ways.
         */
        createMode: number;
        /**
         * The create time of the CAM user policy attachment.
         */
        createTime: string;
        /**
         * ID of CAM policy to be queried.
         */
        policyId: string;
        /**
         * The name of the policy.
         */
        policyName: string;
        /**
         * Type of the policy strategy. 'User' means customer strategy and 'QCS' means preset strategy.
         */
        policyType: string;
        /**
         * It has been deprecated from version 1.59.6. Use `userName` instead. ID of the attached CAM user to be queried.
         *
         * @deprecated It has been deprecated from version 1.59.6. Use `user_name` instead.
         */
        userId: string;
        /**
         * Name of the attached CAM user as unique key to be queried.
         */
        userName: string;
    }

    export interface GetUsersUserList {
        /**
         * Indicate whether the user can login in.
         */
        consoleLogin?: boolean;
        /**
         * Country code of the CAM user to be queried.
         */
        countryCode: string;
        /**
         * Email of the CAM user to be queried.
         */
        email: string;
        /**
         * Name of CAM user to be queried.
         */
        name: string;
        /**
         * Phone num of the CAM user to be queried.
         */
        phoneNum: string;
        /**
         * Remark of the CAM user to be queried.
         */
        remark: string;
        /**
         * Uid of the CAM user to be queried.
         */
        uid: number;
        /**
         * Uin of the CAM user to be queried.
         */
        uin: number;
        /**
         * ID of CAM user. Its value equals to `name` argument.
         */
        userId: string;
    }

}

export namespace Cat {
    export interface GetNodeNodeDefine {
        /**
         * City.
         */
        city: string;
        /**
         * Node ID.
         */
        code: string;
        /**
         * If the node type is base, it is an availability dial test point; if it is blank, it is an advanced dial test point.
         */
        codeType: string;
        /**
         * District.
         */
        district: string;
        /**
         * IP type:1 = IPv4,2 = IPv6.
         */
        ipType: number;
        /**
         * Node area:1=Chinese Mainland,2=Hong Kong, Macao and Taiwan,3=Overseas.
         */
        location: number;
        /**
         * Node name.
         */
        name: string;
        /**
         * Network service provider.
         */
        netService: string;
        /**
         * Node status: 1=running, 2=offline.
         */
        nodeDefineStatus: number;
        /**
         * Node Type;1 = IDC,2 = LastMile,3 = Mobile.
         */
        type: number;
    }

    export interface GetProbeDataDetailedSingleDataDefine {
        /**
         * Fields.
         */
        fields: outputs.Cat.GetProbeDataDetailedSingleDataDefineField[];
        /**
         * Labels.
         */
        labels: outputs.Cat.GetProbeDataDetailedSingleDataDefineLabel[];
        /**
         * Probe time.
         */
        probeTime: number;
    }

    export interface GetProbeDataDetailedSingleDataDefineField {
        /**
         * ID.
         */
        id: number;
        /**
         * Custom Field Name/Description.
         */
        name: string;
        /**
         * Value.
         */
        value: number;
    }

    export interface GetProbeDataDetailedSingleDataDefineLabel {
        /**
         * ID.
         */
        id: number;
        /**
         * Custom Field Name/Description.
         */
        name: string;
        /**
         * Value.
         */
        value: string;
    }

    export interface TaskSetBatchTasks {
        /**
         * Task name.
         */
        name: string;
        /**
         * Target address.
         */
        targetAddress: string;
    }

}

export namespace Cbs {
    export interface GetSnapshotPoliciesSnapshotPolicyList {
        /**
         * Storage IDs that the snapshot policy attached.
         */
        attachedStorageIds: string[];
        /**
         * Create time of the snapshot policy.
         */
        createTime: string;
        /**
         * Trigger hours of periodic snapshot.
         */
        repeatHours: number[];
        /**
         * Trigger days of periodic snapshot.
         */
        repeatWeekdays: number[];
        /**
         * Retention days of the snapshot.
         */
        retentionDays: number;
        /**
         * ID of the snapshot policy to be queried.
         */
        snapshotPolicyId: string;
        /**
         * Name of the snapshot policy to be queried.
         */
        snapshotPolicyName: string;
        /**
         * Status of the snapshot policy.
         */
        status: string;
    }

    export interface GetSnapshotsSnapshotList {
        /**
         * The available zone that the CBS instance locates at.
         */
        availabilityZone: string;
        /**
         * Creation time of snapshot.
         */
        createTime: string;
        /**
         * Indicates whether the snapshot is encrypted.
         */
        encrypt: boolean;
        /**
         * Snapshot creation progress percentage.
         */
        percent: number;
        /**
         * ID of the project within the snapshot.
         */
        projectId: number;
        /**
         * ID of the snapshot to be queried.
         */
        snapshotId: string;
        /**
         * Name of the snapshot to be queried.
         */
        snapshotName: string;
        /**
         * ID of the the CBS which this snapshot created from.
         */
        storageId: string;
        /**
         * Volume of storage which this snapshot created from.
         */
        storageSize: number;
        /**
         * Types of CBS which this snapshot created from, and available values include SYSTEM_DISK and DATA_DISK.
         */
        storageUsage: string;
    }

    export interface GetStoragesSetStorageList {
        /**
         * Indicates whether the CBS is mounted the CVM.
         */
        attached: boolean;
        /**
         * The available zone that the CBS instance locates at.
         */
        availabilityZone: string;
        /**
         * List filter by disk charge type (`POSTPAID_BY_HOUR` | `PREPAID`).
         */
        chargeType: string;
        /**
         * Creation time of CBS.
         */
        createTime: string;
        /**
         * Indicates whether CBS is encrypted.
         */
        encrypt: boolean;
        /**
         * ID of the CVM instance that be mounted by this CBS.
         */
        instanceId: string;
        /**
         * The way that CBS instance will be renew automatically or not when it reach the end of the prepaid tenancy.
         */
        prepaidRenewFlag: string;
        /**
         * ID of the project with which the CBS is associated.
         */
        projectId: number;
        /**
         * Status of CBS.
         */
        status: string;
        /**
         * ID of the CBS to be queried.
         */
        storageId: string;
        /**
         * Name of the CBS to be queried.
         */
        storageName: string;
        /**
         * Volume of CBS.
         */
        storageSize: number;
        /**
         * Filter by cloud disk media type (`CLOUD_BASIC`: HDD cloud disk | `CLOUD_PREMIUM`: Premium Cloud Storage | `CLOUD_SSD`: SSD cloud disk).
         */
        storageType: string;
        /**
         * Filter by cloud disk type (`SYSTEM_DISK`: system disk | `DATA_DISK`: data disk).
         */
        storageUsage: string;
        /**
         * The available tags within this CBS.
         */
        tags: {[key: string]: any};
        /**
         * Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
         */
        throughputPerformance: number;
    }

    export interface GetStoragesStorageList {
        /**
         * Indicates whether the CBS is mounted the CVM.
         */
        attached: boolean;
        /**
         * The available zone that the CBS instance locates at.
         */
        availabilityZone: string;
        /**
         * List filter by disk charge type (`POSTPAID_BY_HOUR` | `PREPAID`).
         */
        chargeType: string;
        /**
         * Creation time of CBS.
         */
        createTime: string;
        /**
         * Indicates whether CBS is encrypted.
         */
        encrypt: boolean;
        /**
         * ID of the CVM instance that be mounted by this CBS.
         */
        instanceId: string;
        /**
         * The way that CBS instance will be renew automatically or not when it reach the end of the prepaid tenancy.
         */
        prepaidRenewFlag: string;
        /**
         * ID of the project with which the CBS is associated.
         */
        projectId: number;
        /**
         * Status of CBS.
         */
        status: string;
        /**
         * ID of the CBS to be queried.
         */
        storageId: string;
        /**
         * Name of the CBS to be queried.
         */
        storageName: string;
        /**
         * Volume of CBS.
         */
        storageSize: number;
        /**
         * Filter by cloud disk media type (`CLOUD_BASIC`: HDD cloud disk | `CLOUD_PREMIUM`: Premium Cloud Storage | `CLOUD_SSD`: SSD cloud disk).
         */
        storageType: string;
        /**
         * Filter by cloud disk type (`SYSTEM_DISK`: system disk | `DATA_DISK`: data disk).
         */
        storageUsage: string;
        /**
         * The available tags within this CBS.
         */
        tags: {[key: string]: any};
        /**
         * Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
         */
        throughputPerformance: number;
    }

}

export namespace Ccn {
    export interface GetBandwidthLimitsLimit {
        /**
         * Limitation of bandwidth.
         */
        bandwidthLimit: number;
        /**
         * Destination area restriction.
         */
        dstRegion: string;
        /**
         * Limitation of region.
         */
        region: string;
    }

    export interface GetCrossBorderFlowMonitorCrossBorderFlowMonitorData {
        /**
         * in bandwidth, `bps`.
         */
        inBandwidths: number[];
        /**
         * in pkg, `pps`.
         */
        inPkgs: number[];
        /**
         * out bandwidth, `bps`.
         */
        outBandwidths: number[];
        /**
         * out pkg, `pps`.
         */
        outPkgs: number[];
    }

    export interface GetCrossBorderRegionBandwidthLimitsCcnBandwidthSet {
        /**
         * ccn id.
         */
        ccnId: string;
        /**
         * bandwidth limit of cross region.
         */
        ccnRegionBandwidthLimits: outputs.Ccn.GetCrossBorderRegionBandwidthLimitsCcnBandwidthSetCcnRegionBandwidthLimit[];
        /**
         * create time.
         */
        createdTime: string;
        /**
         * expired time.
         */
        expiredTime: string;
        /**
         * `POSTPAID` or `PREPAID`.
         */
        instanceChargeType: string;
        /**
         * if cross region.
         */
        isCrossBorder: boolean;
        /**
         * `true` means locked.
         */
        isSecurityLock: boolean;
        /**
         * market id.
         */
        marketId: string;
        /**
         * Id of RegionFlowControl.
         */
        regionFlowControlId: string;
        /**
         * renew flag.
         */
        renewFlag: string;
        /**
         * update time.
         */
        updateTime: string;
        /**
         * user account id.
         */
        userAccountId: string;
    }

    export interface GetCrossBorderRegionBandwidthLimitsCcnBandwidthSetCcnRegionBandwidthLimit {
        /**
         * bandwidth list(Mbps).
         */
        bandwidthLimit: number;
        /**
         * destination region, such as.
         */
        destinationRegion: string;
        /**
         * source region, such as &#39;ap-shanghai&#39;.
         */
        sourceRegion: string;
    }

    export interface GetCrossBorderRegionBandwidthLimitsFilter {
        /**
         * attribute name.
         */
        name: string;
        /**
         * Value of the field.
         */
        values: string[];
    }

    export interface GetInstancesInstanceList {
        /**
         * Information list of instance is attached.
         */
        attachmentLists: outputs.Ccn.GetInstancesInstanceListAttachmentList[];
        /**
         * The speed limit type.
         */
        bandwidthLimitType: string;
        /**
         * ID of the CCN to be queried.
         */
        ccnId: string;
        /**
         * Billing mode.
         */
        chargeType: string;
        /**
         * Creation time of resource.
         */
        createTime: string;
        /**
         * Description of the CCN.
         */
        description: string;
        /**
         * Name of the CCN to be queried.
         */
        name: string;
        /**
         * Service quality of CCN, and the available value include 'PT', 'AU', 'AG'. The default is 'AU'.
         */
        qos: string;
        /**
         * States of instance. The available value include 'ISOLATED'(arrears) and 'AVAILABLE'.
         */
        state: string;
    }

    export interface GetInstancesInstanceListAttachmentList {
        /**
         * Time of attaching.
         */
        attachedTime: string;
        /**
         * A network address block of the instance that is attached.
         */
        cidrBlocks: string[];
        /**
         * ID of instance is attached.
         */
        instanceId: string;
        /**
         * The region that the instance locates at.
         */
        instanceRegion: string;
        /**
         * Type of attached instance network, and available values include VPC, DIRECTCONNECT, BMVPC and VPNGW.
         */
        instanceType: string;
        /**
         * States of instance. The available value include 'ISOLATED'(arrears) and 'AVAILABLE'.
         */
        state: string;
    }

    export interface InstancesAcceptAttachInstance {
        /**
         * Description.
         */
        description?: string;
        /**
         * Attachment Instance ID.
         */
        instanceId: string;
        /**
         * Instance Region.
         */
        instanceRegion: string;
        /**
         * InstanceType: `VPC`, `DIRECTCONNECT`, `BMVPC`, `VPNGW`.
         */
        instanceType?: string;
        /**
         * ID of the routing table associated with the instance. Note: This field may return null, indicating that no valid value can be obtained.
         */
        routeTableId?: string;
    }

    export interface InstancesResetAttachInstance {
        /**
         * Description.
         */
        description?: string;
        /**
         * Attachment Instance ID.
         */
        instanceId: string;
        /**
         * Instance Region.
         */
        instanceRegion: string;
        /**
         * InstanceType: `VPC`, `DIRECTCONNECT`, `BMVPC`, `VPNGW`.
         */
        instanceType?: string;
        /**
         * ID of the routing table associated with the instance. Note: This field may return null, indicating that no valid value can be obtained.
         */
        routeTableId?: string;
    }
}

export namespace Cdh {
    export interface GetInstancesCdhInstanceList {
        /**
         * The available zone that the CDH instance locates at.
         */
        availabilityZone: string;
        /**
         * Cage ID of the CDH instance. This parameter is only valid for CDH instances in the cages of finance availability zones.
         */
        cageId: string;
        /**
         * The charge type of the CDH instance.
         */
        chargeType: string;
        /**
         * Creation time of the CDH instance.
         */
        createTime: string;
        /**
         * Id of CVM instances that have been created on the CDH instance.
         */
        cvmInstanceIds: string[];
        /**
         * Expired time of the CDH instance.
         */
        expiredTime: string;
        /**
         * ID of the CDH instances to be queried.
         */
        hostId: string;
        /**
         * Name of the CDH instances to be queried.
         */
        hostName: string;
        /**
         * An information list of host resource. Each element contains the following attributes:
         */
        hostResources: outputs.Cdh.GetInstancesCdhInstanceListHostResource[];
        /**
         * State of the CDH instances to be queried. Valid values: `PENDING`, `LAUNCH_FAILURE`, `RUNNING`, `EXPIRED`.
         */
        hostState: string;
        /**
         * Type of the CDH instance.
         */
        hostType: string;
        /**
         * Auto renewal flag.
         */
        prepaidRenewFlag: string;
        /**
         * The project CDH belongs to.
         */
        projectId: number;
    }

    export interface GetInstancesCdhInstanceListHostResource {
        /**
         * The number of available CPU cores of the instance.
         */
        cpuAvailableNum: number;
        /**
         * The number of total CPU cores of the instance.
         */
        cpuTotalNum: number;
        /**
         * Instance disk available capacity, unit in GB.
         */
        diskAvailableSize: number;
        /**
         * Instance disk total capacity, unit in GB.
         */
        diskTotalSize: number;
        /**
         * Type of the disk.
         */
        diskType: string;
        /**
         * Instance memory available capacity, unit in GB.
         */
        memoryAvailableSize: number;
        /**
         * Instance memory total capacity, unit in GB.
         */
        memoryTotalSize: number;
    }

    export interface InstanceHostResource {
        /**
         * The number of available CPU cores of the instance.
         */
        cpuAvailableNum: number;
        /**
         * The number of total CPU cores of the instance.
         */
        cpuTotalNum: number;
        /**
         * Instance disk available capacity, unit in GB.
         */
        diskAvailableSize: number;
        /**
         * Instance disk total capacity, unit in GB.
         */
        diskTotalSize: number;
        /**
         * Type of the disk.
         */
        diskType: string;
        /**
         * Instance memory available capacity, unit in GB.
         */
        memoryAvailableSize: number;
        /**
         * Instance memory total capacity, unit in GB.
         */
        memoryTotalSize: number;
    }

}

export namespace Cdn {
    export interface DomainAuthentication {
        /**
         * Authentication switching, available values: `on`, `off`.
         */
        switch?: string;
        /**
         * Timestamp hotlink protection mode A configuration.
         */
        typeA?: outputs.Cdn.DomainAuthenticationTypeA;
        /**
         * Timestamp hotlink protection mode B configuration. NOTE: according to upgrading of TencentCloud Platform, TypeB is unavailable for now.
         */
        typeB?: outputs.Cdn.DomainAuthenticationTypeB;
        /**
         * Timestamp hotlink protection mode C configuration.
         */
        typeC?: outputs.Cdn.DomainAuthenticationTypeC;
        /**
         * Timestamp hotlink protection mode D configuration.
         */
        typeD?: outputs.Cdn.DomainAuthenticationTypeD;
    }

    export interface DomainAuthenticationTypeA {
        /**
         * Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
         */
        backupSecretKey?: string;
        /**
         * Signature expiration time in second. The maximum value is 630720000.
         */
        expireTime: number;
        /**
         * File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
         */
        fileExtensions: string[];
        /**
         * Available values: `whitelist` - all types apart from `fileExtensions` are authenticated, `blacklist`: - only the types in the `fileExtensions` are authenticated.
         */
        filterType: string;
        /**
         * The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
         */
        secretKey: string;
        /**
         * Signature parameter name. Only upper and lower-case letters, digits, and underscores (_) are allowed. It cannot start with a digit. Length limit: 1-100 characters.
         */
        signParam: string;
    }

    export interface DomainAuthenticationTypeB {
        /**
         * Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
         */
        backupSecretKey?: string;
        /**
         * Signature expiration time in second. The maximum value is 630720000.
         */
        expireTime: number;
        /**
         * File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
         */
        fileExtensions: string[];
        /**
         * Available values: `whitelist` - all types apart from `fileExtensions` are authenticated, `blacklist`: - only the types in the `fileExtensions` are authenticated.
         */
        filterType: string;
        /**
         * The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
         */
        secretKey: string;
    }

    export interface DomainAuthenticationTypeC {
        /**
         * Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
         */
        backupSecretKey?: string;
        /**
         * Signature expiration time in second. The maximum value is 630720000.
         */
        expireTime: number;
        /**
         * File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
         */
        fileExtensions: string[];
        /**
         * Available values: `whitelist` - all types apart from `fileExtensions` are authenticated, `blacklist`: - only the types in the `fileExtensions` are authenticated.
         */
        filterType: string;
        /**
         * The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
         */
        secretKey: string;
        /**
         * Timestamp formation, available values: `dec`, `hex`.
         */
        timeFormat?: string;
    }

    export interface DomainAuthenticationTypeD {
        /**
         * Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
         */
        backupSecretKey?: string;
        /**
         * Signature expiration time in second. The maximum value is 630720000.
         */
        expireTime: number;
        /**
         * File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
         */
        fileExtensions: string[];
        /**
         * Available values: `whitelist` - all types apart from `fileExtensions` are authenticated, `blacklist`: - only the types in the `fileExtensions` are authenticated.
         */
        filterType: string;
        /**
         * The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
         */
        secretKey: string;
        /**
         * Timestamp formation, available values: `dec`, `hex`.
         */
        timeFormat?: string;
        /**
         * Timestamp parameter name. Only upper and lower-case letters, digits, and underscores (_) are allowed. It cannot start with a digit. Length limit: 1-100 characters.
         */
        timeParam?: string;
    }

    export interface DomainAwsPrivateAccess {
        /**
         * Access ID.
         */
        accessKey?: string;
        /**
         * Bucket.
         */
        bucket?: string;
        /**
         * Region.
         */
        region?: string;
        /**
         * Key.
         */
        secretKey?: string;
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
    }

    export interface DomainBandWidthAlert {
        /**
         * Alert percentage.
         */
        alertPercentage?: number;
        /**
         * Switch alert.
         */
        alertSwitch?: string;
        /**
         * threshold of bps.
         */
        bpsThreshold?: number;
        /**
         * Counter measure.
         */
        counterMeasure?: string;
        lastTriggerTime: string;
        lastTriggerTimeOverseas: string;
        /**
         * Metric.
         */
        metric?: string;
        /**
         * Specify statistic item configuration.
         */
        statisticItem?: outputs.Cdn.DomainBandWidthAlertStatisticItem;
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
    }

    export interface DomainBandWidthAlertStatisticItem {
        /**
         * Alert percentage.
         */
        alertPercentage?: number;
        /**
         * Switch alert.
         */
        alertSwitch?: string;
        /**
         * threshold of bps.
         */
        bpsThreshold?: number;
        /**
         * Counter measure, values: `RETURN_404`, `RESOLVE_DNS_TO_ORIGIN`.
         */
        counterMeasure?: string;
        /**
         * Cycle of checking in minutes, values `60`, `1440`.
         */
        cycle?: number;
        /**
         * Metric.
         */
        metric?: string;
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
        /**
         * Type of statistic item.
         */
        type?: string;
        /**
         * Time of auto unblock.
         */
        unblockTime?: number;
    }

    export interface DomainCacheKey {
        /**
         * Whether to enable full-path cache, values `on` (DEFAULT ON), `off`.
         */
        fullUrlCache?: string;
        /**
         * Specifies whether the cache key is case sensitive.
         */
        ignoreCase?: string;
        /**
         * Path-specific cache key configuration.
         */
        keyRules?: outputs.Cdn.DomainCacheKeyKeyRule[];
        /**
         * Request parameter contained in CacheKey.
         */
        queryString?: outputs.Cdn.DomainCacheKeyQueryString;
    }

    export interface DomainCacheKeyKeyRule {
        /**
         * Whether to enable full-path cache, values `on` (DEFAULT ON), `off`.
         */
        fullUrlCache?: string;
        /**
         * Whether caches are case insensitive.
         */
        ignoreCase?: string;
        /**
         * Request parameter contained in CacheKey.
         */
        queryString: outputs.Cdn.DomainCacheKeyKeyRuleQueryString;
        /**
         * List of rule paths for each `keyRules`: `/` for `index`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
         */
        rulePaths: string[];
        /**
         * Specify rule tag, default value is `user`.
         */
        ruleTag?: string;
        /**
         * Rule type, available: `file`, `directory`, `path`, `index`.
         */
        ruleType: string;
    }

    export interface DomainCacheKeyKeyRuleQueryString {
        /**
         * Specify key rule QS action, values: `includeCustom`, `excludeCustom`.
         */
        action?: string;
        /**
         * Whether to use QueryString as part of CacheKey, values `on`, `off` (Default).
         */
        switch?: string;
        /**
         * Array of included/excluded query strings (separated by `;`).
         */
        value?: string;
    }

    export interface DomainCacheKeyQueryString {
        /**
         * Specify key rule QS action, values: `includeCustom`, `excludeCustom`.
         */
        action: string;
        /**
         * Whether to sort again, values `on`, `off` (Default).
         */
        reorder?: string;
        /**
         * Whether to use QueryString as part of CacheKey, values `on`, `off` (Default).
         */
        switch?: string;
        /**
         * Array of included/excluded query strings (separated by `;`).
         */
        value?: string;
    }

    export interface DomainCompression {
        /**
         * List of compression rules.
         */
        compressionRules?: outputs.Cdn.DomainCompressionCompressionRule[];
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
    }

    export interface DomainCompressionCompressionRule {
        /**
         * List of algorithms, available: `gzip` and `brotli`.
         */
        algorithms: string[];
        /**
         * Must be set as true, enables compression.
         */
        compress: boolean;
        /**
         * List of file extensions like `jpg`, `txt`.
         */
        fileExtensions?: string[];
        /**
         * The maximum file size to trigger compression (in bytes).
         */
        maxLength: number;
        /**
         * The minimum file size to trigger compression (in bytes).
         */
        minLength: number;
        /**
         * List of rule paths for each `ruleType`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
         */
        rulePaths?: string[];
        /**
         * Rule type, available: `all`, `file`, `directory`, `path`, `contentType`.
         */
        ruleType?: string;
    }

    export interface DomainDownstreamCapping {
        /**
         * List of capping rule.
         */
        cappingRules?: outputs.Cdn.DomainDownstreamCappingCappingRule[];
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
    }

    export interface DomainDownstreamCappingCappingRule {
        /**
         * Capping rule kbps threshold.
         */
        kbpsThreshold: number;
        /**
         * List of capping rule path.
         */
        rulePaths: string[];
        /**
         * Capping rule type.
         */
        ruleType: string;
    }

    export interface DomainErrorPage {
        /**
         * List of error page rule.
         */
        pageRules?: outputs.Cdn.DomainErrorPagePageRule[];
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
    }

    export interface DomainErrorPagePageRule {
        /**
         * Redirect code of error page rules.
         */
        redirectCode: number;
        /**
         * Redirect url of error page rules.
         */
        redirectUrl: string;
        /**
         * Status code of error page rules.
         */
        statusCode: number;
    }

    export interface DomainHttpsConfig {
        /**
         * Client certificate configuration information.
         */
        clientCertificateConfig?: outputs.Cdn.DomainHttpsConfigClientCertificateConfig;
        /**
         * Configuration of forced HTTP or HTTPS redirects.
         */
        forceRedirect: outputs.Cdn.DomainHttpsConfigForceRedirect;
        /**
         * HTTP2 configuration switch. Valid values are `on` and `off`. and default value is `off`.
         */
        http2Switch?: string;
        /**
         * HTTPS configuration switch. Valid values are `on` and `off`.
         */
        httpsSwitch: string;
        /**
         * OCSP configuration switch. Valid values are `on` and `off`. and default value is `off`.
         */
        ocspStaplingSwitch?: string;
        /**
         * Server certificate configuration information.
         */
        serverCertificateConfig?: outputs.Cdn.DomainHttpsConfigServerCertificateConfig;
        /**
         * Spdy configuration switch. Valid values are `on` and `off`. and default value is `off`. This parameter is for white-list customer.
         */
        spdySwitch?: string;
        /**
         * Tls version settings, only support some Advanced domain names, support settings TLSv1, TLSV1.1, TLSV1.2, TLSv1.3, when modifying must open consecutive versions.
         */
        tlsVersions: string[];
        /**
         * Client certificate authentication feature. Valid values are `on` and `off`. and default value is `off`.
         */
        verifyClient?: string;
    }

    export interface DomainHttpsConfigClientCertificateConfig {
        /**
         * Client Certificate PEM format, requires Base64 encoding.
         */
        certificateContent: string;
        certificateName: string;
        deployTime: string;
        /**
         * Signature expiration time in second. The maximum value is 630720000.
         */
        expireTime: string;
    }

    export interface DomainHttpsConfigForceRedirect {
        /**
         * Whether to return the newly added header during force redirection. Values: `on`, `off`.
         */
        carryHeaders?: string;
        /**
         * Forced redirect status code. Valid values are `301` and `302`. When `switch` setting `off`, this property does not need to be set or set to `302`. Default value is `302`.
         */
        redirectStatusCode?: number;
        /**
         * Forced redirect type. Valid values are `http` and `https`. `http` means a forced redirect from HTTPS to HTTP, `https` means a forced redirect from HTTP to HTTPS. When `switch` setting `off`, this property does not need to be set or set to `http`. Default value is `http`.
         */
        redirectType?: string;
        /**
         * Forced redirect configuration switch. Valid values are `on` and `off`. Default value is `off`.
         */
        switch?: string;
    }

    export interface DomainHttpsConfigServerCertificateConfig {
        /**
         * Server certificate information. This is required when uploading an external certificate, which should contain the complete certificate chain.
         */
        certificateContent?: string;
        /**
         * Server certificate ID.
         */
        certificateId?: string;
        certificateName: string;
        deployTime: string;
        /**
         * Signature expiration time in second. The maximum value is 630720000.
         */
        expireTime: string;
        /**
         * Certificate remarks.
         */
        message?: string;
        /**
         * Server key information. This is required when uploading an external certificate.
         */
        privateKey?: string;
    }

    export interface DomainHwPrivateAccess {
        /**
         * Access ID.
         */
        accessKey?: string;
        /**
         * Bucket.
         */
        bucket?: string;
        /**
         * Key.
         */
        secretKey?: string;
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
    }

    export interface DomainIpFilter {
        /**
         * Ip filter rules, This feature is only available to selected beta customers.
         */
        filterRules?: outputs.Cdn.DomainIpFilterFilterRule[];
        /**
         * IP `blacklist`/`whitelist` type.
         */
        filterType?: string;
        /**
         * Ip filter list, Supports IPs in X.X.X.X format, or /8, /16, /24 format IP ranges. Up to 50 allowlists or blocklists can be entered.
         */
        filters?: string[];
        /**
         * Return code, available values: 400-499.
         */
        returnCode?: number;
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
    }

    export interface DomainIpFilterFilterRule {
        /**
         * Ip filter `blacklist`/`whitelist` type of filter rules.
         */
        filterType: string;
        /**
         * Ip filter rule list, supports IPs in X.X.X.X format, or /8, /16, /24 format IP ranges. Up to 50 allowlists or blocklists can be entered.
         */
        filters: string[];
        /**
         * Content list for each `ruleType`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
         */
        rulePaths: string[];
        /**
         * Ip filter rule type of filter rules, available: `all`, `file`, `directory`, `path`.
         */
        ruleType: string;
    }

    export interface DomainIpFreqLimit {
        /**
         * Sets the limited number of requests per second, 514 will be returned for requests that exceed the limit.
         */
        qps?: number;
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
    }

    export interface DomainMaxAge {
        /**
         * List of Max Age rule configuration.
         */
        maxAgeRules?: outputs.Cdn.DomainMaxAgeMaxAgeRule[];
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
    }

    export interface DomainMaxAgeMaxAgeRule {
        /**
         * Whether to follow origin, values: `on`/`off`, if set to `on`, the `maxAgeTime` will be ignored.
         */
        followOrigin?: string;
        /**
         * List of rule paths for each `maxAgeType`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
         */
        maxAgeContents: string[];
        /**
         * Max Age time in seconds, this can set to `0` that stands for no cache.
         */
        maxAgeTime: number;
        /**
         * The following types are supported: `all`: all documents take effect, `file`: the specified file suffix takes effect, `directory`: the specified path takes effect, `path`: specify the absolute path to take effect, `index`: home page.
         */
        maxAgeType: string;
    }

    export interface DomainOrigin {
        /**
         * Backup origin server list. Valid values can be ip or domain name. When modifying the backup origin server, you need to enter the corresponding `backupOriginType`.
         */
        backupOriginLists?: string[];
        /**
         * Backup origin server type, which supports the following types: `domain`: domain name type, `ip`: IP list used as origin server.
         */
        backupOriginType?: string;
        /**
         * Host header used when accessing the backup origin server. If left empty, the ServerName of master origin server will be used by default.
         */
        backupServerName?: string;
        /**
         * When OriginType is COS, you can specify if access to private buckets is allowed. Valid values are `on` and `off`. and default value is `off`.
         */
        cosPrivateAccess?: string;
        /**
         * Master origin server list. Valid values can be ip or domain name. When modifying the origin server, you need to enter the corresponding `originType`.
         */
        originLists: string[];
        /**
         * Origin-pull protocol configuration. `http`: forced HTTP origin-pull, `follow`: protocol follow origin-pull, `https`: forced HTTPS origin-pull. This only supports origin server port 443 for origin-pull.
         */
        originPullProtocol?: string;
        /**
         * Master origin server type. The following types are supported: `domain`: domain name type, `cos`: COS origin, `ip`: IP list used as origin server, `ipv6`: origin server list is a single IPv6 address, `ipIpv6`: origin server list is multiple IPv4 addresses and an IPv6 address.
         */
        originType: string;
        /**
         * Host header used when accessing the master origin server. If left empty, the acceleration domain name will be used by default.
         */
        serverName: string;
    }

    export interface DomainOriginPullOptimization {
        /**
         * Optimization type, values: `OVToCN` - Overseas to CN, `CNToOV` CN to Overseas.
         */
        optimizationType?: string;
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
    }

    export interface DomainOriginPullTimeout {
        /**
         * The origin-pull connection timeout (in seconds). Valid range: 5-60.
         */
        connectTimeout: number;
        /**
         * The origin-pull receipt timeout (in seconds). Valid range: 10-60.
         */
        receiveTimeout: number;
    }

    export interface DomainOssPrivateAccess {
        /**
         * Access ID.
         */
        accessKey?: string;
        /**
         * Bucket.
         */
        bucket?: string;
        /**
         * Region.
         */
        region?: string;
        /**
         * Key.
         */
        secretKey?: string;
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
    }

    export interface DomainPostMaxSize {
        /**
         * Maximum size in MB, value range is `[1, 200]`.
         */
        maxSize?: number;
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
    }

    export interface DomainQnPrivateAccess {
        /**
         * Access ID.
         */
        accessKey?: string;
        /**
         * Key.
         */
        secretKey?: string;
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
    }

    export interface DomainReferer {
        /**
         * List of referer rules.
         */
        refererRules?: outputs.Cdn.DomainRefererRefererRule[];
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
    }

    export interface DomainRefererRefererRule {
        /**
         * Whether to allow emptpy.
         */
        allowEmpty: boolean;
        /**
         * Referer type.
         */
        refererType: string;
        /**
         * Referer list.
         */
        referers: string[];
        /**
         * Referer rule path list.
         */
        rulePaths: string[];
        /**
         * Referer rule type.
         */
        ruleType: string;
    }

    export interface DomainRequestHeader {
        /**
         * Custom request header configuration rules.
         */
        headerRules?: outputs.Cdn.DomainRequestHeaderHeaderRule[];
        /**
         * Custom request header configuration switch. Valid values are `on` and `off`. and default value is `off`.
         */
        switch?: string;
    }

    export interface DomainRequestHeaderHeaderRule {
        /**
         * Response header mode.
         */
        headerMode: string;
        /**
         * response header name of rule.
         */
        headerName: string;
        /**
         * response header value of rule.
         */
        headerValue: string;
        /**
         * response rule paths of rule.
         */
        rulePaths: string[];
        /**
         * response rule type of rule.
         */
        ruleType: string;
    }

    export interface DomainResponseHeader {
        /**
         * List of response header rule.
         */
        headerRules?: outputs.Cdn.DomainResponseHeaderHeaderRule[];
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
    }

    export interface DomainResponseHeaderHeaderRule {
        /**
         * Response header mode.
         */
        headerMode: string;
        /**
         * response header name of rule.
         */
        headerName: string;
        /**
         * response header value of rule.
         */
        headerValue: string;
        /**
         * response rule paths of rule.
         */
        rulePaths: string[];
        /**
         * response rule type of rule.
         */
        ruleType: string;
    }

    export interface DomainRuleCach {
        /**
         * Cache expiration time setting, the unit is second, the maximum can be set to 365 days.
         */
        cacheTime: number;
        /**
         * Advanced cache expiration configuration. When it is turned on, it will compare the max-age value returned by the origin site with the cache expiration time set in CacheRules, and take the minimum value to cache at the node. Valid values are `on` and `off`. Default value is `off`.
         */
        compareMaxAge?: string;
        /**
         * Follow the source station configuration switch. Valid values are `on` and `off`.
         */
        followOriginSwitch?: string;
        /**
         * Specify whether to enable heuristic cache, only available while `followOriginSwitch` enabled, values: `on`, `off` (Default).
         */
        heuristicCacheSwitch?: string;
        /**
         * Specify heuristic cache time in second, only available while `followOriginSwitch` and `heuristicCacheSwitch` enabled.
         */
        heuristicCacheTime?: number;
        /**
         * Force caching. After opening, the no-store and no-cache resources returned by the origin site will also be cached in accordance with the CacheRules rules. Valid values are `on` and `off`. Default value is `off`.
         */
        ignoreCacheControl?: string;
        /**
         * Ignore the Set-Cookie header of the origin site. Valid values are `on` and `off`. Default value is `off`. This parameter is for white-list customer.
         */
        ignoreSetCookie?: string;
        /**
         * Cache configuration switch. Valid values are `on` and `off`.
         */
        noCacheSwitch?: string;
        /**
         * Always check back to origin. Valid values are `on` and `off`. Default value is `off`.
         */
        reValidate?: string;
        /**
         * Matching content under the corresponding type of CacheType: `all`: fill *, `file`: fill in the suffix name, such as jpg, txt, `directory`: fill in the path, such as /xxx/test, `path`: fill in the absolute path, such as /xxx/test.html, `index`: fill /.
         */
        rulePaths: string[];
        /**
         * Rule type. The following types are supported: `all`: all documents take effect, `file`: the specified file suffix takes effect, `directory`: the specified path takes effect, `path`: specify the absolute path to take effect, `index`: home page.
         */
        ruleType?: string;
        /**
         * Cache configuration switch. Valid values are `on` and `off`.
         */
        switch?: string;
    }

    export interface DomainStatusCodeCache {
        /**
         * List of cache rule.
         */
        cacheRules?: outputs.Cdn.DomainStatusCodeCacheCacheRule[];
        /**
         * Configuration switch, available values: `on`, `off` (default).
         */
        switch: string;
    }

    export interface DomainStatusCodeCacheCacheRule {
        /**
         * Status code cache expiration time (in seconds).
         */
        cacheTime: number;
        /**
         * Code of status cache. available values: `403`, `404`.
         */
        statusCode: string;
    }

    export interface GetDomainsDomainList {
        /**
         * Acceleration region.
         */
        area: string;
        /**
         * CNAME address of domain name.
         */
        cname: string;
        /**
         * Domain name creation time.
         */
        createTime: string;
        /**
         * Acceleration domain name.
         */
        domain: string;
        /**
         * Whether to enable full-path cache.
         */
        fullUrlCache: boolean;
        /**
         * HTTPS acceleration configuration. It's a list and consist of at most one item.
         */
        httpsConfigs: outputs.Cdn.GetDomainsDomainListHttpsConfig[];
        /**
         * Domain name ID.
         */
        id: string;
        /**
         * Origin server configuration.
         */
        origins: outputs.Cdn.GetDomainsDomainListOrigin[];
        /**
         * The project CDN belongs to.
         */
        projectId: number;
        /**
         * Sharding back to source configuration switch.
         */
        rangeOriginSwitch: string;
        /**
         * Request header configuration.
         */
        requestHeaders: outputs.Cdn.GetDomainsDomainListRequestHeader[];
        /**
         * Advanced path cache configuration.
         */
        ruleCaches: outputs.Cdn.GetDomainsDomainListRuleCach[];
        /**
         * Service type of acceleration domain name. The available value include `web`, `download` and `media`.
         */
        serviceType: string;
        /**
         * Acceleration service status.
         */
        status: string;
        /**
         * Tags of cdn domain.
         */
        tags: {[key: string]: any};
        /**
         * Last modified time of domain name.
         */
        updateTime: string;
    }

    export interface GetDomainsDomainListHttpsConfig {
        /**
         * HTTP2 configuration switch.
         */
        http2Switch: string;
        /**
         * HTTPS configuration. Valid values: `on`, `off` and `processing`.
         */
        httpsSwitch: string;
        /**
         * OCSP configuration switch.
         */
        ocspStaplingSwitch: string;
        /**
         * Spdy configuration switch.
         */
        spdySwitch: string;
        /**
         * Client certificate authentication feature.
         */
        verifyClient: string;
    }

    export interface GetDomainsDomainListOrigin {
        /**
         * Backup origin server list.
         */
        backupOriginLists: string[];
        /**
         * Backup origin server type.
         */
        backupOriginType: string;
        /**
         * Host header used when accessing the backup origin server. If left empty, the ServerName of master origin server will be used by default.
         */
        backupServerName: string;
        /**
         * When OriginType is COS, you can specify if access to private buckets is allowed.
         */
        cosPrivateAccess: string;
        /**
         * Master origin server list.
         */
        originLists: string[];
        /**
         * Origin-pull protocol configuration. Valid values: `http`, `https` and `follow`.
         */
        originPullProtocol: string;
        /**
         * Master origin server type.
         */
        originType: string;
        /**
         * Host header used when accessing the master origin server. If left empty, the acceleration domain name will be used by default.
         */
        serverName: string;
    }

    export interface GetDomainsDomainListRequestHeader {
        /**
         * Custom request header configuration rules.
         */
        headerRules: outputs.Cdn.GetDomainsDomainListRequestHeaderHeaderRule[];
        /**
         * Cache configuration switch.
         */
        switch: string;
    }

    export interface GetDomainsDomainListRequestHeaderHeaderRule {
        /**
         * Http header setting method.
         */
        headerMode: string;
        /**
         * Http header name.
         */
        headerName: string;
        /**
         * Http header value.
         */
        headerValue: string;
        /**
         * Rule paths.
         */
        rulePaths: string[];
        /**
         * Rule type.
         */
        ruleType: string;
    }

    export interface GetDomainsDomainListRuleCach {
        cacheTime: number;
        compareMaxAge?: string;
        /**
         * Follow the source station configuration switch.
         */
        followOriginSwitch: string;
        ignoreCacheControl?: string;
        /**
         * Ignore the Set-Cookie header of the origin site.
         */
        ignoreSetCookie: string;
        /**
         * Cache configuration switch.
         */
        noCacheSwitch: string;
        /**
         * Always check back to origin.
         */
        reValidate: string;
        /**
         * Rule paths.
         */
        rulePaths: string[];
        /**
         * Rule type.
         */
        ruleType: string;
        /**
         * Cache configuration switch.
         */
        switch: string;
    }

    export interface UrlPurgePurgeHistory {
        /**
         * Purge task create time.
         */
        createTime: string;
        /**
         * Purge flush type of `flush` or `delete`.
         */
        flushType: string;
        /**
         * Purge category in of `url` or `path`.
         */
        purgeType: string;
        /**
         * Purge status of `fail`, `done`, `process`.
         */
        status: string;
        /**
         * Task id of last operation.
         */
        taskId: string;
        /**
         * Purge url.
         */
        url: string;
    }

    export interface UrlPushPushHistory {
        /**
         * Specify push area. NOTE: only push same area cache contents.
         */
        area: string;
        /**
         * Push task create time.
         */
        createTime: string;
        /**
         * Push progress in percent.
         */
        percent: number;
        /**
         * Push status of `fail`, `done`, `process` or `invalid` (4xx, 5xx response).
         */
        status: string;
        /**
         * Push task id.
         */
        taskId: string;
        /**
         * Push task update time.
         */
        updateTime: string;
        /**
         * Push url.
         */
        url: string;
    }

}

export namespace Cfs {
    export interface GetAccessGroupsAccessGroupList {
        /**
         * A specified access group ID used to query.
         */
        accessGroupId: string;
        /**
         * Creation time of the access group.
         */
        createTime: string;
        /**
         * Description of the access group.
         */
        description: string;
        /**
         * A access group Name used to query.
         */
        name: string;
    }

    export interface GetAccessRulesAccessRuleList {
        /**
         * A specified access rule ID used to query.
         */
        accessRuleId: string;
        /**
         * Allowed IP of the access rule.
         */
        authClientIp: string;
        /**
         * The priority level of access rule.
         */
        priority: number;
        /**
         * Read and write permissions.
         */
        rwPermission: string;
        /**
         * The permissions of accessing users.
         */
        userPermission: string;
    }

    export interface GetAvailableZoneRegionZone {
        /**
         * Region name, such as `ap-beijing`.
         */
        region: string;
        /**
         * Region chinese name, such as `Guangzhou`.
         */
        regionCnName: string;
        /**
         * Region name, such as `bj`.
         */
        regionName: string;
        /**
         * Region availability. If a region has at least one AZ where resources are purchasable, this value will be AVAILABLE; otherwise, it will be UNAVAILABLE.
         */
        regionStatus: string;
        /**
         * Array of AZs.
         */
        zones: outputs.Cfs.GetAvailableZoneRegionZoneZone[];
    }

    export interface GetAvailableZoneRegionZoneZone {
        /**
         * Array of classes.
         */
        types: outputs.Cfs.GetAvailableZoneRegionZoneZoneType[];
        /**
         * AZ name.
         */
        zone: string;
        /**
         * Chinese name of an AZ.
         */
        zoneCnName: string;
        /**
         * AZ ID.
         */
        zoneId: number;
        /**
         * Chinese and English names of an AZ.
         */
        zoneName: string;
    }

    export interface GetAvailableZoneRegionZoneZoneType {
        /**
         * Indicates whether prepaid is supported. true: yes; false: no.
         */
        prepayment: boolean;
        /**
         * Protocol and sale details.
         */
        protocols: outputs.Cfs.GetAvailableZoneRegionZoneZoneTypeProtocol[];
        /**
         * Storage class. Valid values: SD (standard storage) and HP (high-performance storage).
         */
        type: string;
    }

    export interface GetAvailableZoneRegionZoneZoneTypeProtocol {
        /**
         * Protocol type. Valid values: NFS, CIFS.
         */
        protocol: string;
        /**
         * Sale status. Valid values: saleOut (sold out), saling (purchasable), noSaling (non-purchasable).
         */
        saleStatus: string;
    }

    export interface GetFileSystemClientsClientList {
        /**
         * IP address of the file system.
         */
        cfsVip: string;
        /**
         * Client IP.
         */
        clientIp: string;
        /**
         * Path in which the file system is mounted to the client.
         */
        mountDirectory: string;
        /**
         * File system VPCID.
         */
        vpcId: string;
        /**
         * Name of the availability zone, e.g. ap-beijing-1. For more information, see regions and availability zones in the Overview document.
         */
        zone: string;
        /**
         * AZ name.
         */
        zoneName: string;
    }

    export interface GetFileSystemsFileSystemList {
        /**
         * ID of the access group.
         */
        accessGroupId: string;
        /**
         * The available zone that the file system locates at.
         */
        availabilityZone: string;
        /**
         * Creation time of the file system.
         */
        createTime: string;
        /**
         * A specified file system ID used to query.
         */
        fileSystemId: string;
        /**
         * Mount root-directory.
         */
        fsId: string;
        /**
         * IP of the file system.
         */
        mountIp: string;
        /**
         * A file system name used to query.
         */
        name: string;
        /**
         * Protocol of the file system.
         */
        protocol: string;
        /**
         * Size limit of the file system.
         */
        sizeLimit: number;
        /**
         * Size used of the file system.
         */
        sizeUsed: number;
        /**
         * Status of the file system.
         */
        status: string;
        /**
         * Storage type of the file system.
         */
        storageType: string;
    }

    export interface GetMountTargetsMountTarget {
        /**
         * CCN instance ID used by CFS Turbo.
         */
        ccnId: string;
        /**
         * CCN IP range used by CFS Turbo.
         */
        cidrBlock: string;
        /**
         * File system ID.
         */
        fileSystemId: string;
        /**
         * Mount root-directory.
         */
        fsId: string;
        /**
         * Mount target IP.
         */
        ipAddress: string;
        /**
         * Mount target status.
         */
        lifeCycleState: string;
        /**
         * Mount target ID.
         */
        mountTargetId: string;
        /**
         * Network type.
         */
        networkInterface: string;
        /**
         * Subnet ID.
         */
        subnetId: string;
        /**
         * Subnet name.
         */
        subnetName: string;
        /**
         * VPC ID.
         */
        vpcId: string;
        /**
         * VPC name.
         */
        vpcName: string;
    }

}

export namespace Chdfs {
    export interface AccessRuleAccessRule {
        /**
         * rule access mode, 1: read only, 2: read &amp; wirte.
         */
        accessMode?: number;
        accessRuleId: number;
        /**
         * rule address, IP OR IP SEG.
         */
        address?: string;
        createTime: string;
        /**
         * rule priority, range 1 - 100, value less higher priority.
         */
        priority?: number;
    }

    export interface GetAccessGroupsAccessGroup {
        /**
         * access group id.
         */
        accessGroupId: string;
        /**
         * access group name.
         */
        accessGroupName: string;
        /**
         * create time.
         */
        createTime: string;
        /**
         * access group description.
         */
        description: string;
        /**
         * get groups belongs to the vpc id, must set but only can use one of VpcId and OwnerUin to get the groups.
         */
        vpcId: string;
        /**
         * vpc network type(1:CVM, 2:BM 1.0).
         */
        vpcType: number;
    }

    export interface GetMountPointsMountPoint {
        /**
         * associated group ids.
         */
        accessGroupIds: string[];
        /**
         * create time.
         */
        createTime: string;
        /**
         * get mount points belongs to file system id, only can use one of the AccessGroupId,FileSystemId,OwnerUin parameters.
         */
        fileSystemId: string;
        /**
         * mount point id.
         */
        mountPointId: string;
        /**
         * mount point name.
         */
        mountPointName: string;
        /**
         * mount point status.
         */
        status: number;
    }

    export interface LifeCycleRuleLifeCycleRule {
        createTime: string;
        lifeCycleRuleId: number;
        /**
         * rule name.
         */
        lifeCycleRuleName?: string;
        /**
         * rule op path.
         */
        path?: string;
        /**
         * rule status, 1:open, 2:close.
         */
        status?: number;
        /**
         * life cycle rule transition list.
         */
        transitions?: outputs.Chdfs.LifeCycleRuleLifeCycleRuleTransition[];
    }

    export interface LifeCycleRuleLifeCycleRuleTransition {
        /**
         * trigger days(n day).
         */
        days: number;
        /**
         * transition type, 1: archive, 2: delete, 3: low rate.
         */
        type: number;
    }

}

export namespace Ci {
    export interface MediaAnimationTemplateContainer {
        /**
         * Package format.
         */
        format: string;
    }

    export interface MediaAnimationTemplateTimeInterval {
        /**
         * duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
         */
        duration?: string;
        /**
         * Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
         */
        start?: string;
    }

    export interface MediaAnimationTemplateVideo {
        /**
         * Animation per second frame number, Priority: AnimateFramesPerSecond &gt; AnimateOnlyKeepKeyFrame &gt; AnimateTimeIntervalOfFrame.
         */
        animateFramesPerSecond?: string;
        /**
         * GIFs are kept only Keyframe, Priority: AnimateFramesPerSecond &gt; AnimateOnlyKeepKeyFrame &gt; AnimateTimeIntervalOfFrame.
         */
        animateOnlyKeepKeyFrame?: string;
        /**
         * Animation frame extraction every time, (0, video duration], Animation frame extraction time interval, If TimeInterval.Duration is set, it is less than this value.
         */
        animateTimeIntervalOfFrame?: string;
        /**
         * Codec format `gif`, `webp`.
         */
        codec: string;
        /**
         * Frame rate, value range: (0, 60], Unit: fps.
         */
        fps?: string;
        /**
         * High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
         */
        height?: string;
        /**
         * Set relative quality, [1, 100), webp image quality setting takes effect, gif has no quality parameter.
         */
        quality?: string;
        /**
         * width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
         */
        width?: string;
    }

    export interface MediaConcatTemplateConcatTemplate {
        /**
         * audio parameters, the target file does not require Audio information, need to set Audio.Remove to true.
         */
        audio?: outputs.Ci.MediaConcatTemplateConcatTemplateAudio;
        /**
         * mixing parameters.
         */
        audioMixes?: outputs.Ci.MediaConcatTemplateConcatTemplateAudioMix[];
        /**
         * Package format.
         */
        concatFragments: outputs.Ci.MediaConcatTemplateConcatTemplateConcatFragment[];
        /**
         * Only splicing without transcoding.
         */
        container: outputs.Ci.MediaConcatTemplateConcatTemplateContainer;
        /**
         * video information, do not upload Video, which is equivalent to deleting video information.
         */
        video?: outputs.Ci.MediaConcatTemplateConcatTemplateVideo;
    }

    export interface MediaConcatTemplateConcatTemplateAudio {
        /**
         * Original audio bit rate, unit: Kbps, Value range: [8, 1000].
         */
        bitrate?: string;
        /**
         * number of channels- When Codec is set to aac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2.
         */
        channels?: string;
        /**
         * Codec format, value aac, mp3.
         */
        codec: string;
        /**
         * Sampling Rate- Unit: Hz- Optional 11025, 22050, 32000, 44100, 48000, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below.
         */
        samplerate?: string;
    }

    export interface MediaConcatTemplateConcatTemplateAudioMix {
        /**
         * The media address of the audio track that needs to be mixed.
         */
        audioSource: string;
        /**
         * Mix Fade Configuration.
         */
        effectConfig?: outputs.Ci.MediaConcatTemplateConcatTemplateAudioMixEffectConfig;
        /**
         * Mixing mode Repeat: background sound loop, Once: The background sound is played once.
         */
        mixMode?: string;
        /**
         * Whether to replace the original audio of the Input media file with the mixed audio track media.
         */
        replace?: string;
    }

    export interface MediaConcatTemplateConcatTemplateAudioMixEffectConfig {
        /**
         * bgm transition fade-in duration, support floating point numbers.
         */
        bgmFadeTime?: string;
        /**
         * Enable bgm conversion fade in.
         */
        enableBgmFade?: string;
        /**
         * enable fade out.
         */
        enableEndFadeout?: string;
        /**
         * enable fade in.
         */
        enableStartFadein?: string;
        /**
         * fade out time, greater than 0, support floating point numbers.
         */
        endFadeoutTime: string;
        /**
         * Fade in duration, greater than 0, support floating point numbers.
         */
        startFadeinTime?: string;
    }

    export interface MediaConcatTemplateConcatTemplateConcatFragment {
        /**
         * node type, `start`, `end`.
         */
        mode: string;
        /**
         * Splicing object address.
         */
        url: string;
    }

    export interface MediaConcatTemplateConcatTemplateContainer {
        /**
         * Container format: mp4, flv, hls, ts, mp3, aac.
         */
        format: string;
    }

    export interface MediaConcatTemplateConcatTemplateVideo {
        /**
         * Original audio bit rate, unit: Kbps, Value range: [8, 1000].
         */
        bitrate?: string;
        /**
         * Codec format `H.264`.
         */
        codec: string;
        /**
         * Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
         */
        crf?: string;
        /**
         * Frame rate, value range: (0, 60], Unit: fps.
         */
        fps?: string;
        /**
         * High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
         */
        height?: string;
        /**
         * Whether to delete the source audio stream, the value is true, false.
         */
        remove: string;
        /**
         * Rotation angle, Value range: [0, 360), Unit: degree.
         */
        rotate?: string;
        /**
         * width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
         */
        width?: string;
    }

    export interface MediaPicProcessTemplatePicProcess {
        /**
         * Whether to return the original image information.
         */
        isPicInfo?: string;
        /**
         * Image processing rules, 1: basic image processing, please refer to the basic image processing document, 2: image compression, please refer to the image compression document, 3: blind watermark, please refer to the blind watermark document.
         */
        processRule: string;
    }

    export interface MediaSmartCoverTemplateSmartCover {
        /**
         * Number of screenshots, [1,10].
         */
        count?: string;
        /**
         * cover deduplication, true/false.
         */
        deleteDuplicates?: string;
        /**
         * Image Format, value jpg, png, webp.
         */
        format: string;
        /**
         * Height, value range: [128, 4096], unit: px, if only Height is set, Width is calculated according to the original video ratio.
         */
        height?: string;
        /**
         * Width, value range: [128, 4096], unit: px, if only Width is set, Height is calculated according to the original ratio of the video.
         */
        width?: string;
    }

    export interface MediaSnapshotTemplateSnapshot {
        /**
         * Screenshot black screen detection parameters, Valid when IsCheckBlack=true, Value reference range [30, 100], indicating the proportion of black pixels, the smaller the value, the smaller the proportion of black pixels, Start&gt;0, the parameter setting is invalid, no filter black screen, Start =0 parameter is valid, the start time of the frame capture is the first frame non-black screen start.
         */
        blackLevel: string;
        /**
         * Screenshot image processing parameters, for example: imageMogr2/format/png.
         */
        ciParam: string;
        /**
         * Number of screenshots, range (0 10000].
         */
        count: string;
        /**
         * high, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video.
         */
        height: string;
        /**
         * Whether to enable black screen detection true/false.
         */
        isCheckBlack: string;
        /**
         * Whether to check the number of screenshots forcibly, when using custom interval mode to take screenshots, the video time is not long enough to capture Count screenshots, you can switch to average screenshot mode to capture Count screenshots.
         */
        isCheckCount: string;
        /**
         * Screenshot mode, value range: {Interval, Average, KeyFrame}- Interval means interval mode Average means average mode- KeyFrame represents the key frame mode- Interval mode: Start, TimeInterval, The Count parameter takes effect. When Count is set and TimeInterval is not set, Indicates to capture all frames, a total of Count pictures- Average mode: Start, the Count parameter takes effect. express.
         */
        mode: string;
        /**
         * Screenshot black screen detection parameters, Valid when IsCheckBlack=true, The threshold for judging whether a pixel is a black point, value range: [0, 255].
         */
        pixelBlackThreshold: string;
        /**
         * Screenshot output mode parameters, Value range: {OnlySnapshot, OnlySprite, SnapshotAndSprite}, OnlySnapshot means output only screenshot mode OnlySprite means only output sprite mode SnapshotAndSprite means output screenshot and sprite mode.
         */
        snapshotOutMode: string;
        /**
         * Screenshot output configuration.
         */
        spriteSnapshotConfig: outputs.Ci.MediaSnapshotTemplateSnapshotSpriteSnapshotConfig;
        /**
         * Starting time, [0 video duration] in seconds, Support float format, the execution accuracy is accurate to milliseconds.
         */
        start: string;
        /**
         * Screenshot time interval, (0 3600], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
         */
        timeInterval: string;
        /**
         * wide, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video.
         */
        width: string;
    }

    export interface MediaSnapshotTemplateSnapshotSpriteSnapshotConfig {
        /**
         * Single image height Value range: [8, 4096], Unit: px.
         */
        cellHeight: string;
        /**
         * Single image width Value range: [8, 4096], Unit: px.
         */
        cellWidth: string;
        /**
         * See `https://www.ffmpeg.org/ffmpeg-utils.html#color-syntax` for details on supported colors.
         */
        color: string;
        /**
         * Number of screenshot columns, value range: [1, 10000].
         */
        columns: string;
        /**
         * Number of screenshot lines, value range: [1, 10000].
         */
        lines: string;
        /**
         * screenshot margin size, Value range: [8, 4096], Unit: px.
         */
        margin: string;
        /**
         * screenshot padding size, Value range: [8, 4096], Unit: px.
         */
        padding: string;
    }

    export interface MediaSpeechRecognitionTemplateSpeechRecognition {
        /**
         * Number of voice channels: 1 means mono. EngineModelType supports only mono for non-telephone scenarios, and 2 means dual channels (only 8kZh engine model supports dual channels, which should correspond to both sides of the call).
         */
        channelNum: string;
        /**
         * Whether to perform intelligent conversion of Arabic numerals (currently supports Mandarin Chinese engine): 0 means no conversion, directly output Chinese numbers, 1 means intelligently convert to Arabic numerals according to the scene, 3 means enable math-related digital conversion, the default value is 0.
         */
        convertNumMode?: string;
        /**
         * Engine model type, divided into phone scene and non-phone scene, phone scene: 8k_zh: phone 8k Chinese Mandarin general (can be used for dual-channel audio), 8k_zh_s: phone 8k Chinese Mandarin speaker separation (only for monophonic audio), 8k_en: Telephone 8k English; non-telephone scene: 16k_zh: 16k Mandarin Chinese, 16k_zh_video: 16k audio and video field, 16k_en: 16k English, 16k_ca: 16k Cantonese, 16k_ja: 16k Japanese, 16k_zh_edu: Chinese education, 16k_en_edu: English education, 16k_zh_medical: medical, 16k_th: Thai, 16k_zh_dialect: multi-dialect, supports 23 dialects.
         */
        engineModelType: string;
        /**
         * Whether to filter dirty words (currently supports Mandarin Chinese engine): 0 means not to filter dirty words, 1 means to filter dirty words, 2 means to replace dirty words with *, the default value is 0.
         */
        filterDirty?: string;
        /**
         * Whether to pass modal particles (currently supports Mandarin Chinese engine): 0 means not to filter modal particles, 1 means partial filtering, 2 means strict filtering, and the default value is 0.
         */
        filterModal?: string;
        /**
         * Whether to filter punctuation (currently supports Mandarin Chinese engine): 0 means no filtering, 1 means filtering end-of-sentence punctuation, 2 means filtering all punctuation, the default value is 0.
         */
        filterPunc?: string;
        /**
         * Output file type, optional txt, srt. The default is txt.
         */
        outputFileType?: string;
        /**
         * Recognition result return form: 0 means the recognition result text (including segmented time stamps), 1 is the detailed recognition result at the word level granularity, without punctuation, and includes the speech rate value (a list of word time stamps, generally used to generate subtitle scenes), 2 Detailed recognition results at word-level granularity (including punctuation and speech rate values)..
         */
        resTextFormat?: string;
        /**
         * Whether to enable speaker separation: 0 means not enabled, 1 means enabled (only supports 8k_zh, 16k_zh, 16k_zh_video, monophonic audio), the default value is 0, Note: 8K telephony scenarios suggest using dual-channel to distinguish between the two parties, set ChannelNum=2 is enough, no need to enable speaker separation.
         */
        speakerDiarization?: string;
        /**
         * The number of speakers to be separated (need to be used in conjunction with enabling speaker separation), value range: 0-10, 0 means automatic separation (currently only supports <= 6 people), 1-10 represents the number of specified speakers to be separated. The default value is 0.
         */
        speakerNumber?: string;
    }

    export interface MediaTranscodeProTemplateAudio {
        /**
         * Codec format, value aac, mp3, flac, amr, Vorbis, opus, pcm_s16le.
         */
        codec: string;
        /**
         * Whether to delete the source audio stream, the value is true, false.
         */
        remove?: string;
    }

    export interface MediaTranscodeProTemplateContainer {
        /**
         * Fragment configuration, valid when format is hls and dash.
         */
        clipConfig?: outputs.Ci.MediaTranscodeProTemplateContainerClipConfig;
        /**
         * Package format.
         */
        format: string;
    }

    export interface MediaTranscodeProTemplateContainerClipConfig {
        /**
         * Fragmentation duration, default 5s.
         */
        duration?: string;
    }

    export interface MediaTranscodeProTemplateTimeInterval {
        /**
         * duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
         */
        duration?: string;
        /**
         * Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
         */
        start?: string;
    }

    export interface MediaTranscodeProTemplateTransConfig {
        /**
         * Resolution adjustment method, value scale, crop, pad, none, When the aspect ratio of the output video is different from the original video, adjust the resolution accordingly according to this parameter.
         */
        adjDarMethod?: string;
        /**
         * Audio bit rate adjustment mode, value 0, 1; when the output audio bit rate is greater than the original audio bit rate, 0 means use the original audio bit rate; 1 means return transcoding failed, Take effect when IsCheckAudioBitrate is true.
         */
        audioBitrateAdjMethod?: string;
        /**
         * Whether to delete the MetaData information in the file, true, false, When false, keep source file information.
         */
        deleteMetadata?: string;
        /**
         * Whether to check the audio code rate, true, false, When false, transcode according to configuration parameters.
         */
        isCheckAudioBitrate?: string;
        /**
         * Whether to check the resolution, when it is false, transcode according to the configuration parameters.
         */
        isCheckReso?: string;
        /**
         * Whether to check the video code rate, when it is false, transcode according to the configuration parameters.
         */
        isCheckVideoBitrate?: string;
        /**
         * Whether to enable HDR to SDR true, false.
         */
        isHdr2Sdr?: string;
        /**
         * Resolution adjustment mode, value 0, 1; 0 means use the original video resolution; 1 means return transcoding failed, Take effect when IsCheckReso is true.
         */
        resoAdjMethod?: string;
        /**
         * Video bit rate adjustment method, value 0, 1; when the output video bit rate is greater than the original video bit rate, 0 means use the original video bit rate; 1 means return transcoding failed, Take effect when IsCheckVideoBitrate is true.
         */
        videoBitrateAdjMethod?: string;
    }

    export interface MediaTranscodeProTemplateVideo {
        /**
         * Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
         */
        bitrate?: string;
        /**
         * Codec format, default value: `H.264`, when format is WebM, it is VP8, value range: `H.264`, `H.265`, `VP8`, `VP9`, `AV1`.
         */
        codec?: string;
        /**
         * Frame rate, value range: (0, 60], Unit: fps.
         */
        fps?: string;
        /**
         * High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
         */
        height?: string;
        /**
         * field pattern.
         */
        interlaced?: string;
        /**
         * encoding level, Support baseline, main, high, auto- When Pixfmt is auto, this parameter can only be set to auto, when it is set to other options, the parameter value will be set to auto- baseline: suitable for mobile devices- main: suitable for standard resolution devices- high: suitable for high-resolution devices- Only H.264 supports this parameter.
         */
        profile?: string;
        /**
         * Rotation angle, Value range: [0, 360), Unit: degree.
         */
        rotate?: string;
        /**
         * width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
         */
        width?: string;
    }

    export interface MediaTranscodeTemplateAudio {
        /**
         * Original audio bit rate, unit: Kbps, Value range: [8, 1000].
         */
        bitrate?: string;
        /**
         * number of channels- When Codec is set to aac/flac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3/opus, support 1, 2- When Codec is set to Vorbis, only 2 is supported- When Codec is set to amr, only 1 is supported- When Codec is set to pcm_s16le, only 1 and 2 are supported- When the encapsulation format is dash, 8 is not supported.
         */
        channels?: string;
        /**
         * Codec format, value aac, mp3, flac, amr, Vorbis, opus, pcm_s16le.
         */
        codec?: string;
        /**
         * Keep dual audio tracks, the value is true, false. This parameter is invalid when Video.Codec is H.265.
         */
        keepTwoTracks?: string;
        /**
         * Whether to delete the source audio stream, the value is true, false.
         */
        remove?: string;
        /**
         * Sampling bit width- When Codec is set to aac, support fltp- When Codec is set to mp3, fltp, s16p, s32p are supported- When Codec is set to flac, s16, s32, s16p, s32p are supported- When Codec is set to amr, support s16, s16p- When Codec is set to opus, support s16- When Codec is set to pcm_s16le, support s16- When Codec is set to Vorbis, support fltp- This parameter is invalid when Video.Codec is H.265.
         */
        sampleFormat?: string;
        /**
         * Sampling Rate- Unit: Hz- Optional 8000, 11025, 12000, 16000, 22050, 24000, 32000, 44100, 48000, 88200, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below- When Codec is set to amr, only 8000 is supported- When Codec is set to opus, it supports 8000, 16000, 24000, 48000.
         */
        samplerate?: string;
        /**
         * Convert track, the value is true, false. This parameter is invalid when Video.Codec is H.265.
         */
        switchTrack?: string;
    }

    export interface MediaTranscodeTemplateAudioMix {
        /**
         * The media address of the audio track that needs to be mixed.
         */
        audioSource: string;
        /**
         * Mix Fade Configuration.
         */
        effectConfig?: outputs.Ci.MediaTranscodeTemplateAudioMixEffectConfig;
        /**
         * Mixing mode Repeat: background sound loop, Once: The background sound is played once.
         */
        mixMode?: string;
        /**
         * Whether to replace the original audio of the Input media file with the mixed audio track media.
         */
        replace?: string;
    }

    export interface MediaTranscodeTemplateAudioMixEffectConfig {
        /**
         * bgm transition fade-in duration, support floating point numbers.
         */
        bgmFadeTime?: string;
        /**
         * Enable bgm conversion fade in.
         */
        enableBgmFade?: string;
        /**
         * enable fade out.
         */
        enableEndFadeout?: string;
        /**
         * enable fade in.
         */
        enableStartFadein?: string;
        /**
         * fade out time, greater than 0, support floating point numbers.
         */
        endFadeoutTime?: string;
        /**
         * Fade in duration, greater than 0, support floating point numbers.
         */
        startFadeinTime?: string;
    }

    export interface MediaTranscodeTemplateContainer {
        /**
         * Fragment configuration, valid when format is hls and dash.
         */
        clipConfig?: outputs.Ci.MediaTranscodeTemplateContainerClipConfig;
        /**
         * Package format.
         */
        format: string;
    }

    export interface MediaTranscodeTemplateContainerClipConfig {
        /**
         * Fragmentation duration, default 5s.
         */
        duration?: string;
    }

    export interface MediaTranscodeTemplateTimeInterval {
        /**
         * duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
         */
        duration?: string;
        /**
         * Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
         */
        start?: string;
    }

    export interface MediaTranscodeTemplateTransConfig {
        /**
         * Resolution adjustment method, value scale, crop, pad, none, When the aspect ratio of the output video is different from the original video, adjust the resolution accordingly according to this parameter.
         */
        adjDarMethod?: string;
        /**
         * Audio bit rate adjustment mode, value 0, 1; when the output audio bit rate is greater than the original audio bit rate, 0 means use the original audio bit rate; 1 means return transcoding failed, Take effect when IsCheckAudioBitrate is true.
         */
        audioBitrateAdjMethod?: string;
        /**
         * Whether to delete the MetaData information in the file, true, false, When false, keep source file information.
         */
        deleteMetadata?: string;
        /**
         * hls encryption configuration.
         */
        hlsEncrypt?: outputs.Ci.MediaTranscodeTemplateTransConfigHlsEncrypt;
        /**
         * Whether to check the audio code rate, true, false, When false, transcode according to configuration parameters.
         */
        isCheckAudioBitrate?: string;
        /**
         * Whether to check the resolution, when it is false, transcode according to the configuration parameters.
         */
        isCheckReso?: string;
        /**
         * Whether to check the video code rate, when it is false, transcode according to the configuration parameters.
         */
        isCheckVideoBitrate?: string;
        /**
         * Whether to enable HDR to SDR true, false.
         */
        isHdr2Sdr?: string;
        /**
         * Resolution adjustment mode, value 0, 1; 0 means use the original video resolution; 1 means return transcoding failed, Take effect when IsCheckReso is true.
         */
        resoAdjMethod?: string;
        /**
         * Video bit rate adjustment method, value 0, 1; when the output video bit rate is greater than the original video bit rate, 0 means use the original video bit rate; 1 means return transcoding failed, Take effect when IsCheckVideoBitrate is true.
         */
        videoBitrateAdjMethod?: string;
    }

    export interface MediaTranscodeTemplateTransConfigHlsEncrypt {
        /**
         * Whether to enable HLS encryption, support encryption when Container.Format is hls.
         */
        isHlsEncrypt?: string;
        /**
         * HLS encrypted key, this parameter is only meaningful when IsHlsEncrypt is true.
         */
        uriKey?: string;
    }

    export interface MediaTranscodeTemplateVideo {
        /**
         * Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
         */
        bitrate?: string;
        /**
         * buffer size, Value range: [1000, 128000], Unit: Kb, This parameter is not supported when Codec is VP8/VP9.
         */
        bufsize?: string;
        /**
         * Codec format, default value: `H.264`, when format is WebM, it is VP8, value range: `H.264`, `H.265`, `VP8`, `VP9`, `AV1`.
         */
        codec?: string;
        /**
         * Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
         */
        crf?: string;
        /**
         * Frame rate, value range: (0, 60], Unit: fps.
         */
        fps?: string;
        /**
         * The maximum number of frames between key frames, value range: [1, 100000].
         */
        gop?: string;
        /**
         * High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
         */
        height?: string;
        /**
         * Adaptive length,true, false, This parameter is not supported when Codec is VP8/VP9/AV1.
         */
        longShortMode?: string;
        /**
         * Peak video bit rate, Value range: [10, 50000], Unit: Kbps, This parameter is not supported when Codec is VP8/VP9.
         */
        maxrate?: string;
        /**
         * video color format, H.264 support: yuv420p, yuv422p, yuv444p, yuvj420p, yuvj422p, yuvj444p, auto, H.265 support: yuv420p, yuv420p10le, auto, This parameter is not supported when Codec is VP8/VP9/AV1.
         */
        pixfmt?: string;
        /**
         * Video Algorithm Presets- H.264 supports this parameter, the values are veryfast, fast, medium, slow, slower- VP8 supports this parameter, the value is good, realtime- AV1 supports this parameter, the value is 5 (recommended value), 4- H.265 and VP9 do not support this parameter.
         */
        preset?: string;
        /**
         * encoding level, Support baseline, main, high, auto- When Pixfmt is auto, this parameter can only be set to auto, when it is set to other options, the parameter value will be set to auto- baseline: suitable for mobile devices- main: suitable for standard resolution devices- high: suitable for high-resolution devices- Only H.264 supports this parameter.
         */
        profile?: string;
        /**
         * Whether to delete the video stream, true, false.
         */
        remove?: string;
        /**
         * Rotation angle, Value range: [0, 360), Unit: degree.
         */
        rotate?: string;
        /**
         * width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
         */
        width?: string;
    }

    export interface MediaVideoMontageTemplateAudio {
        /**
         * Original audio bit rate, unit: Kbps, Value range: [8, 1000].
         */
        bitrate?: string;
        /**
         * number of channels- When Codec is set to aac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2.
         */
        channels?: string;
        /**
         * Codec format, value aac, mp3.
         */
        codec: string;
        /**
         * Whether to delete the source audio stream, the value is true, false.
         */
        remove?: string;
        /**
         * Sampling Rate- Unit: Hz- Optional 11025, 22050, 32000, 44100, 48000, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below.
         */
        samplerate?: string;
    }

    export interface MediaVideoMontageTemplateAudioMix {
        /**
         * The media address of the audio track that needs to be mixed.
         */
        audioSource: string;
        /**
         * Mix Fade Configuration.
         */
        effectConfig?: outputs.Ci.MediaVideoMontageTemplateAudioMixEffectConfig;
        /**
         * Mixing mode Repeat: background sound loop, Once: The background sound is played once.
         */
        mixMode?: string;
        /**
         * Whether to replace the original audio of the Input media file with the mixed audio track media.
         */
        replace?: string;
    }

    export interface MediaVideoMontageTemplateAudioMixEffectConfig {
        /**
         * bgm transition fade-in duration, support floating point numbers.
         */
        bgmFadeTime?: string;
        /**
         * Enable bgm conversion fade in.
         */
        enableBgmFade?: string;
        /**
         * enable fade out.
         */
        enableEndFadeout?: string;
        /**
         * enable fade in.
         */
        enableStartFadein?: string;
        /**
         * fade out time, greater than 0, support floating point numbers.
         */
        endFadeoutTime?: string;
        /**
         * Fade in duration, greater than 0, support floating point numbers.
         */
        startFadeinTime?: string;
    }

    export interface MediaVideoMontageTemplateContainer {
        /**
         * Container format: mp4, flv, hls, ts, mkv.
         */
        format: string;
    }

    export interface MediaVideoMontageTemplateVideo {
        /**
         * Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
         */
        bitrate?: string;
        /**
         * Codec format `H.264`.
         */
        codec: string;
        /**
         * Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
         */
        crf?: string;
        /**
         * Frame rate, value range: (0, 60], Unit: fps.
         */
        fps?: string;
        /**
         * High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
         */
        height?: string;
        /**
         * Whether to delete the source audio stream, the value is true, false.
         */
        remove?: string;
        /**
         * width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
         */
        width?: string;
    }

    export interface MediaVideoProcessTemplateColorEnhance {
        /**
         * Contrast, value range: [0, 100], empty string (indicates automatic analysis).
         */
        contrast?: string;
        /**
         * colorcorrection, value range: [0, 100], empty string (indicating automatic analysis).
         */
        correction?: string;
        /**
         * Whether color enhancement is turned on.
         */
        enable?: string;
        /**
         * Saturation, value range: [0, 100], empty string (indicating automatic analysis).
         */
        saturation?: string;
    }

    export interface MediaVideoProcessTemplateMsSharpen {
        /**
         * Whether detail enhancement is enabled.
         */
        enable?: string;
        /**
         * Enhancement level, value range: [0, 10], empty string (indicates automatic analysis).
         */
        sharpenLevel?: string;
    }

    export interface MediaVoiceSeparateTemplateAudioConfig {
        /**
         * Original audio bit rate, unit: Kbps, Value range: [8, 1000].
         */
        bitrate?: string;
        /**
         * number of channels- When Codec is set to aac/flac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2- When Codec is set to amr, only 1 is supported.
         */
        channels?: string;
        /**
         * Codec format, value aac, mp3, flac, amr.
         */
        codec: string;
        /**
         * Sampling Rate- 1: Unit: Hz- 2: Optional 8000, 11025, 22050, 32000, 44100, 48000, 96000- 3: When Codec is set to aac/flac, 8000 is not supported- 4: When Codec is set to mp3, 8000 and 96000 are not supported- 5: When Codec is set to amr, only 8000 is supported.
         */
        samplerate?: string;
    }

    export interface MediaWatermarkTemplateWatermark {
        /**
         * Horizontal offset, 1: In the picture watermark, if Background is true, when locMode is Relativity, it is %, value range: [-300 0]; when locMode is Absolute, it is px, value range: [-4096 0] ], 2: In the picture watermark, if Background is false, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 3: In text watermark, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 4: When Pos is Top, Bottom and Center, the parameter is invalid.
         */
        dx: string;
        /**
         * Vertical offset, 1: In the picture watermark, if Background is true, when locMode is Relativity, it is %, value range: [-300 0]; when locMode is Absolute, it is px, value range: [-4096 0] ],2: In the picture watermark, if Background is false, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096],3: In text watermark, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 4: When Pos is Left, Right and Center, the parameter is invalid.
         */
        dy: string;
        /**
         * Watermark end time, 1: [0 video duration], 2: unit is second, 3: support float format, execution accuracy is accurate to milliseconds.
         */
        endTime?: string;
        /**
         * Image watermark node.
         */
        image?: outputs.Ci.MediaWatermarkTemplateWatermarkImage;
        /**
         * Offset method, Relativity: proportional, Absolute: fixed position.
         */
        locMode: string;
        /**
         * Reference position, TopRight, TopLeft, BottomRight, BottomLeft, Left, Right, Top, Bottom, Center.
         */
        pos: string;
        /**
         * Watermark start time, 1: [0 video duration], 2: unit is second, 3: support float format, execution accuracy is accurate to milliseconds.
         */
        startTime?: string;
        /**
         * Text Watermark Node.
         */
        text?: outputs.Ci.MediaWatermarkTemplateWatermarkText;
        /**
         * Watermark type, Text: text watermark, Image: image watermark.
         */
        type: string;
    }

    export interface MediaWatermarkTemplateWatermarkImage {
        /**
         * Whether the background image.
         */
        background: string;
        /**
         * High, 1: When the Mode is Original, it does not support setting the width of the watermark image, 2: When the Mode is Proportion, the unit is %, the value range of the background image: [100 300]; the value range of the foreground image: [1 100], relative to Video width, up to 4096px, 3: When Mode is Fixed, the unit is px, value range: [8, 4096], 4: If only Width is set, Height is calculated according to the proportion of the watermark image.
         */
        height?: string;
        /**
         * Size mode, Original: original size, Proportion: proportional, Fixed: fixed size.
         */
        mode: string;
        /**
         * Transparency, value range: [1 100], unit %.
         */
        transparency: string;
        /**
         * Address of watermark map (pass in after Urlencode is required).
         */
        url: string;
        /**
         * Width, 1: When the Mode is Original, it does not support setting the width of the watermark image, 2: When the Mode is Proportion, the unit is %, the value range of the background image: [100 300]; the value range of the foreground image: [1 100], relative to Video width, up to 4096px, 3: When Mode is Fixed, the unit is px, value range: [8, 4096], 4: If only Width is set, Height is calculated according to the proportion of the watermark image.
         */
        width?: string;
    }

    export interface MediaWatermarkTemplateWatermarkText {
        /**
         * Font color, format: 0xRRGGBB.
         */
        fontColor: string;
        /**
         * Font size, value range: [5 100], unit px.
         */
        fontSize: string;
        /**
         * font type.
         */
        fontType: string;
        /**
         * Watermark content, the length does not exceed 64 characters, only supports Chinese, English, numbers, _, - and *.
         */
        text: string;
        /**
         * Transparency, value range: [1 100], unit %.
         */
        transparency: string;
    }

}

export namespace Ckafka {
    export interface ConnectResourceClickhouseConnectParam {
        /**
         * Whether to update to the associated Datahub task, default: false.
         */
        isUpdate?: boolean;
        /**
         * Password for Clickhouse connection source.
         */
        password: string;
        /**
         * Clickhouse connection port.
         */
        port: number;
        /**
         * Instance resources for Click House connection sources.
         */
        resource: string;
        /**
         * Whether the Clickhouse connection source is a self-built cluster.
         */
        selfBuilt: boolean;
        /**
         * Instance VIP of the ClickHouse connection source, when it is a Tencent Cloud instance, it is required.
         */
        serviceVip?: string;
        /**
         * The vpc Id of the source of the ClickHouse connection, when it is a Tencent Cloud instance, it is required.
         */
        uniqVpcId?: string;
        /**
         * The username of the clickhouse connection source.
         */
        userName: string;
    }

    export interface ConnectResourceDorisConnectParam {
        /**
         * Doris http CLB port, Usually mapped to port 8040 of be.
         */
        bePort?: number;
        /**
         * Whether to update to the associated Datahub task, default: false.
         */
        isUpdate?: boolean;
        /**
         * Doris  password.
         */
        password: string;
        /**
         * Doris jdbc CLB port, Usually mapped to port 9030 of fe.
         */
        port: number;
        /**
         * Doris  instanceId.
         */
        resource: string;
        /**
         * Doris Whether the connection source is a self-built cluster, default: false.
         */
        selfBuilt?: boolean;
        /**
         * Doris vip, When it is a Tencent Cloud instance, it is required.
         */
        serviceVip?: string;
        /**
         * Doris vpcId, When it is a Tencent Cloud instance, it is required.
         */
        uniqVpcId?: string;
        /**
         * Doris  The username of the connection source.
         */
        userName: string;
    }

    export interface ConnectResourceDtsConnectParam {
        /**
         * Id of the Dts consumption group.
         */
        groupId: string;
        /**
         * Whether to update to the associated Datahub task, default: false.
         */
        isUpdate?: boolean;
        /**
         * The password of the Dts consumption group.
         */
        password: string;
        /**
         * Dts port.
         */
        port: number;
        /**
         * Dts instance Id.
         */
        resource: string;
        /**
         * Topic subscribed by Dts.
         */
        topic: string;
        /**
         * The account number of the Dts consumption group.
         */
        userName: string;
    }

    export interface ConnectResourceEsConnectParam {
        /**
         * Whether to update to the associated Datahub task, default: false.
         */
        isUpdate?: boolean;
        /**
         * Es The password of the connection source.
         */
        password: string;
        /**
         * Es port.
         */
        port: number;
        /**
         * Instance resource of Es connection source.
         */
        resource: string;
        /**
         * Whether the Es connection source is a self-built cluster.
         */
        selfBuilt: boolean;
        /**
         * The instance vip of the Es connection source, when it is a Tencent Cloud instance, it is required.
         */
        serviceVip?: string;
        /**
         * The vpc Id of the Es connection source, when it is a Tencent Cloud instance, it is required.
         */
        uniqVpcId?: string;
        /**
         * Es The username of the connection source.
         */
        userName: string;
    }

    export interface ConnectResourceKafkaConnectParam {
        /**
         * Kafka broker ip, Mandatory when self-built.
         */
        brokerAddress?: string;
        /**
         * Whether to update to the associated Dip task, default: false.
         */
        isUpdate?: boolean;
        /**
         * CKafka instanceId region, Required when crossing regions.
         */
        region?: string;
        /**
         * Kafka instanceId, When it is a Tencent Cloud instance, it is required.
         */
        resource?: string;
        /**
         * Whether it is a self-built cluster, default: false.
         */
        selfBuilt?: boolean;
    }

    export interface ConnectResourceMariadbConnectParam {
        /**
         * Whether to update to the associated Datahub task, default: false.
         */
        isUpdate?: boolean;
        /**
         * MariaDB password.
         */
        password: string;
        /**
         * MariaDB port.
         */
        port: number;
        /**
         * MariaDB instanceId.
         */
        resource: string;
        /**
         * The instance vip of the Maria DB connection source, when it is a Tencent Cloud instance, it is required.
         */
        serviceVip?: string;
        /**
         * MariaDB vpcId, When it is a Tencent Cloud instance, it is required.
         */
        uniqVpcId?: string;
        /**
         * MariaDB The username of the connection source.
         */
        userName: string;
    }

    export interface ConnectResourceMongodbConnectParam {
        /**
         * Whether to update to the associated Datahub task, default: false.
         */
        isUpdate?: boolean;
        /**
         * Password for the source of the Mongo DB connection.
         */
        password: string;
        /**
         * MongoDB port.
         */
        port: number;
        /**
         * Instance resource of Mongo DB connection source.
         */
        resource: string;
        /**
         * Whether the Mongo DB connection source is a self-built cluster.
         */
        selfBuilt: boolean;
        /**
         * The instance VIP of the Mongo DB connection source, when it is a Tencent Cloud instance, it is required.
         */
        serviceVip?: string;
        /**
         * The vpc Id of the Mongo DB connection source, which is required when it is a Tencent Cloud instance.
         */
        uniqVpcId?: string;
        /**
         * The username of the Mongo DB connection source.
         */
        userName: string;
    }

    export interface ConnectResourceMysqlConnectParam {
        /**
         * Required when type is TDSQL C_MYSQL.
         */
        clusterId?: string;
        /**
         * Whether to update to the associated Datahub task, default: false.
         */
        isUpdate?: boolean;
        /**
         * Mysql connection source password.
         */
        password: string;
        /**
         * MySQL port.
         */
        port: number;
        /**
         * Instance resource of My SQL connection source.
         */
        resource: string;
        /**
         * Mysql Whether the connection source is a self-built cluster, default: false.
         */
        selfBuilt?: boolean;
        /**
         * The instance vip of the MySQL connection source, when it is a Tencent Cloud instance, it is required.
         */
        serviceVip?: string;
        /**
         * The vpc Id of the My SQL connection source, when it is a Tencent Cloud instance, it is required.
         */
        uniqVpcId?: string;
        /**
         * Username of Mysql connection source.
         */
        userName: string;
    }

    export interface ConnectResourcePostgresqlConnectParam {
        /**
         * Required when type is TDSQL C_POSTGRESQL.
         */
        clusterId?: string;
        /**
         * Whether to update to the associated Datahub task, default: false.
         */
        isUpdate?: boolean;
        /**
         * PostgreSQL password.
         */
        password: string;
        /**
         * PostgreSQL port.
         */
        port: number;
        /**
         * PostgreSQL instanceId.
         */
        resource: string;
        /**
         * PostgreSQL Whether the connection source is a self-built cluster, default: false.
         */
        selfBuilt?: boolean;
        /**
         * The instance VIP of the Postgresql connection source, when it is a Tencent Cloud instance, it is required.
         */
        serviceVip?: string;
        /**
         * The instance vpcId of the Postgresql connection source, when it is a Tencent Cloud instance, it is required.
         */
        uniqVpcId?: string;
        /**
         * PostgreSQL The username of the connection source.
         */
        userName: string;
    }

    export interface ConnectResourceSqlserverConnectParam {
        /**
         * Whether to update to the associated Dip task, default: false.
         */
        isUpdate?: boolean;
        /**
         * SQLServer password.
         */
        password: string;
        /**
         * SQLServer port.
         */
        port: number;
        /**
         * SQLServer instanceId.
         */
        resource: string;
        /**
         * SQLServer instance vip, When it is a Tencent Cloud instance, it is required.
         */
        serviceVip?: string;
        /**
         * SQLServer vpcId, When it is a Tencent Cloud instance, it is required.
         */
        uniqVpcId?: string;
        /**
         * SQLServer The username of the connection source.
         */
        userName: string;
    }

    export interface GetAclsAclList {
        /**
         * Host substr used for querying.
         */
        host: string;
        /**
         * ACL operation mode.
         */
        operationType: string;
        /**
         * ACL permission type, valid values are `UNKNOWN`, `ANY`, `DENY`, `ALLOW`, and `ALLOW` by default. Currently, CKafka supports `ALLOW` (equivalent to allow list), and other fields will be used for future ACLs compatible with open-source Kafka.
         */
        permissionType: string;
        /**
         * User which can access. `*` means that any user can access.
         */
        principal: string;
        /**
         * ACL resource name, which is related to `resourceType`. For example, if `resourceType` is `TOPIC`, this field indicates the topic name; if `resourceType` is `GROUP`, this field indicates the group name.
         */
        resourceName: string;
        /**
         * ACL resource type. Valid values are `UNKNOWN`, `ANY`, `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`. Currently, only `TOPIC` is available, and other fields will be used for future ACLs compatible with open-source Kafka.
         */
        resourceType: string;
    }

    export interface GetInstancesFilter {
        /**
         * The field that needs to be filtered.
         */
        name: string;
        /**
         * The filtered value of the field.
         */
        values: string[];
    }

    export interface GetInstancesInstanceList {
        /**
         * Instance bandwidth, in Mbps.
         */
        bandwidth: number;
        /**
         * The time when the instance was created.
         */
        createTime: number;
        /**
         * ckafka sale type. Note: This field may return null, indicating that a valid value could not be retrieved.
         */
        cvm: number;
        /**
         * The storage size of the instance, in GB.
         */
        diskSize: number;
        /**
         * Disk Type. Note: This field may return null, indicating that a valid value could not be retrieved.
         */
        diskType: string;
        /**
         * The instance expiration time.
         */
        expireTime: number;
        /**
         * Instance status int: 1 indicates health, 2 indicates alarm, and 3 indicates abnormal instance status.
         */
        healthy: number;
        /**
         * Instance status information.
         */
        healthyMessage: string;
        /**
         * The instance ID.
         */
        instanceId: string;
        /**
         * The instance name.
         */
        instanceName: string;
        /**
         * ckafka instance type. Note: This field may return null, indicating that a valid value could not be retrieved.
         */
        instanceType: string;
        /**
         * Whether it is an internal customer. A value of 1 indicates an internal customer.
         */
        isInternal: number;
        /**
         * The maximum number of Partitions for the current specifications. Note: This field may return null, indicating that a valid value could not be retrieved.
         */
        maxPartitionNumber: number;
        /**
         * The maximum number of topics in the current specifications. Note: This field may return null, indicating that a valid value could not be retrieved..
         */
        maxTopicNumber: number;
        /**
         * The current number of instances. Note: This field may return null, indicating that a valid value could not be retrieved..
         */
        partitionNumber: number;
        /**
         * The Internet bandwidth value. Note: This field may return null, indicating that a valid value could not be retrieved..
         */
        publicNetwork: number;
        /**
         * The type of Internet bandwidth. Note: This field may return null, indicating that a valid value could not be retrieved..
         */
        publicNetworkChargeType: string;
        /**
         * Schedule the upgrade configuration time. Note: This field may return null, indicating that a valid value could not be retrieved..
         */
        rebalanceTime: string;
        /**
         * Whether the instance is renewed, the int enumeration value: 1 indicates auto-renewal, and 2 indicates that it is not automatically renewed.
         */
        renewFlag: number;
        /**
         * (Filter Criteria) The status of the instance. 0: Create, 1: Run, 2: Delete, do not fill the default return all.
         */
        status: number;
        /**
         * Subnet id.
         */
        subnetId: string;
        /**
         * Tag information.
         */
        tags: outputs.Ckafka.GetInstancesInstanceListTag[];
        /**
         * The number of topics.
         */
        topicNum: number;
        /**
         * Kafka version information. Note: This field may return null, indicating that a valid value could not be retrieved.
         */
        version: string;
        /**
         * Virtual IP.
         */
        vip: string;
        /**
         * Virtual IP entities.
         */
        vipList: outputs.Ckafka.GetInstancesInstanceListVipList;
        /**
         * VpcId, if empty, indicates that it is the underlying network.
         */
        vpcId: string;
        /**
         * Virtual PORT.
         */
        vport: string;
        /**
         * Availability Zone ID.
         */
        zoneId: number;
        /**
         * Across Availability Zones. Note: This field may return null, indicating that a valid value could not be retrieved.
         */
        zoneIds: number[];
    }

    export interface GetInstancesInstanceListTag {
        /**
         * Matches the tag key value.
         */
        tagKey: string;
        /**
         * Tag Value.
         */
        tagValue: string;
    }

    export interface GetInstancesInstanceListVipList {
        /**
         * Virtual IP.
         */
        vip: string;
        /**
         * Virtual PORT.
         */
        vport: string;
    }

    export interface GetTopicsInstanceList {
        /**
         * Clear log policy, log clear mode. `delete`: logs are deleted according to the storage time, `compact`: logs are compressed according to the key, `compact, delete`: logs are compressed according to the key and will be deleted according to the storage time.
         */
        cleanUpPolicy: string;
        /**
         * Create time of the CKafka topic.
         */
        createTime: string;
        /**
         * Whether to open the IP Whitelist. `true`: open, `false`: close.
         */
        enableWhiteList: boolean;
        /**
         * Data backup cos bucket: the bucket address that is dumped to cos.
         */
        forwardCosBucket: string;
        /**
         * Periodic frequency of data backup to cos.
         */
        forwardInterval: number;
        /**
         * Data backup cos status. `1`: do not open data backup, `0`: open data backup.
         */
        forwardStatus: number;
        /**
         * IP Whitelist count.
         */
        ipWhiteListCount: number;
        /**
         * Max message bytes.
         */
        maxMessageBytes: number;
        /**
         * CKafka topic note description.
         */
        note: string;
        /**
         * The number of partition.
         */
        partitionNum: number;
        /**
         * The number of replica.
         */
        replicaNum: number;
        /**
         * Message can be selected. Retention time(unit ms).
         */
        retention: number;
        /**
         * Segment scrolling time, in ms.
         */
        segment: number;
        /**
         * Number of bytes rolled by shard.
         */
        segmentBytes: number;
        /**
         * Min number of sync replicas.
         */
        syncReplicaMinNum: number;
        /**
         * ID of the CKafka topic.
         */
        topicId: string;
        /**
         * Name of the CKafka topic. It must start with a letter, the rest can contain letters, numbers and dashes(-). The length range is from 1 to 64.
         */
        topicName: string;
        /**
         * Whether to allow unsynchronized replicas to be selected as leader, default is `false`, `true: `allowed, `false`: not allowed.
         */
        uncleanLeaderElectionEnable: boolean;
    }

    export interface GetUsersUserList {
        /**
         * Account name used when query ckafka users' infos. Could be a substr of user name.
         */
        accountName: string;
        /**
         * Creation time of the account.
         */
        createTime: string;
        /**
         * The last update time of the account.
         */
        updateTime: string;
    }

    export interface InstanceConfig {
        /**
         * Automatic creation. true: enabled, false: not enabled.
         */
        autoCreateTopicEnable: boolean;
        /**
         * If auto.create.topic.enable is set to true and this value is not set, 3 will be used by default.
         */
        defaultNumPartitions: number;
        /**
         * If auto.create.topic.enable is set to true but this value is not set, 2 will be used by default.
         */
        defaultReplicationFactor: number;
    }

    export interface InstanceDynamicRetentionConfig {
        /**
         * Minimum retention time, in minutes.
         */
        bottomRetention: number;
        /**
         * Disk quota threshold (in percentage) for triggering the message retention time change event.
         */
        diskQuotaPercentage: number;
        /**
         * Whether the dynamic message retention time configuration is enabled. 0: disabled; 1: enabled.
         */
        enable: number;
        /**
         * Percentage by which the message retention time is shortened each time.
         */
        stepForwardPercentage: number;
    }

    export interface InstanceTag {
        /**
         * Tag key.
         */
        key: string;
        /**
         * Tag value.
         */
        value: string;
    }
}

export namespace Clb {
    export interface AttachmentTarget {
        /**
         * Eni IP address of the backend server, conflict with `instanceId` but must specify one of them.
         */
        eniIp?: string;
        /**
         * CVM Instance Id of the backend server, conflict with `eniIp` but must specify one of them.
         */
        instanceId?: string;
        /**
         * Port of the backend server. Valid value ranges: (0~65535).
         */
        port: number;
        /**
         * Forwarding weight of the backend service. Valid value ranges: (0~100). defaults to `10`.
         */
        weight?: number;
    }

    export interface FunctionTargetsAttachmentFunctionTargets {
        /**
         * Information about cloud functions.Note: This field may return null, indicating that no valid value can be obtained.
         */
        function: outputs.Clb.FunctionTargetsAttachmentFunctionTargetsFunction;
        /**
         * Weight. The default is `10`.
         */
        weight?: number;
    }

    export interface FunctionTargetsAttachmentFunctionTargetsFunction {
        /**
         * The name of function.
         */
        functionName: string;
        /**
         * The namespace of function.
         */
        functionNamespace: string;
        /**
         * The version name or alias of the function.
         */
        functionQualifier: string;
        /**
         * Identifies the type of FunctionQualifier parameter, possible values: VERSION, ALIAS.Note: This field may return null, indicating that no valid value can be obtained.
         */
        functionQualifierType?: string;
    }

    export interface GetAttachmentsAttachmentList {
        /**
         * ID of the CLB to be queried.
         */
        clbId: string;
        /**
         * ID of the CLB listener to be queried.
         */
        listenerId: string;
        /**
         * Type of protocol within the listener, and available values include `TCP`, `UDP`, `HTTP`, `HTTPS` and `TCP_SSL`. NOTES: `TCP_SSL` is testing internally, please apply if you need to use.
         */
        protocolType: string;
        /**
         * ID of the CLB listener rule. If the protocol of listener is `HTTP`/`HTTPS`, this para is required.
         */
        ruleId: string;
        /**
         * Information of the backends to be attached.
         */
        targets: outputs.Clb.GetAttachmentsAttachmentListTarget[];
    }

    export interface GetAttachmentsAttachmentListTarget {
        /**
         * Id of the backend server.
         */
        instanceId: string;
        /**
         * Port of the backend server.
         */
        port: number;
        /**
         * Forwarding weight of the backend service, the range of [0, 100], defaults to `10`.
         */
        weight: number;
    }

    export interface GetInstancesClbList {
        /**
         * IP version, only applicable to open CLB. Valid values are `IPV4`, `IPV6` and `IPv6FullChain`.
         */
        addressIpVersion: string;
        /**
         * ID of the CLB to be queried.
         */
        clbId: string;
        /**
         * Name of the CLB to be queried.
         */
        clbName: string;
        /**
         * The virtual service address table of the CLB.
         */
        clbVips: string[];
        /**
         * Create time of the CLB.
         */
        createTime: string;
        /**
         * Max bandwidth out, only applicable to open CLB. Valid value ranges is [1, 2048]. Unit is MB.
         */
        internetBandwidthMaxOut: number;
        /**
         * Internet charge type, only applicable to open CLB. Valid values are `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
         */
        internetChargeType: string;
        /**
         * Whether this available zone is local zone, This field maybe null, means cannot get a valid value.
         */
        localZone: boolean;
        /**
         * Type of CLB instance, and available values include `OPEN` and `INTERNAL`.
         */
        networkType: string;
        /**
         * Project ID of the CLB.
         */
        projectId: number;
        /**
         * ID set of the security groups.
         */
        securityGroups: string[];
        /**
         * The status of CLB.
         */
        status: number;
        /**
         * Latest state transition time of CLB.
         */
        statusTime: string;
        /**
         * ID of the subnet.
         */
        subnetId: string;
        /**
         * The available tags within this CLB.
         */
        tags: {[key: string]: any};
        /**
         * Region information of backend service are attached the CLB.
         */
        targetRegionInfoRegion: string;
        /**
         * VpcId information of backend service are attached the CLB.
         */
        targetRegionInfoVpcId: string;
        /**
         * Network operator, only applicable to open CLB. Valid values are `CMCC`(China Mobile), `CTCC`(Telecom), `CUCC`(China Unicom) and `BGP`. If this ISP is specified, network billing method can only use the bandwidth package billing (BANDWIDTH_PACKAGE).
         */
        vipIsp: string;
        /**
         * ID of the VPC.
         */
        vpcId: string;
        /**
         * Available zone unique id(string representation), This field maybe null, means cannot get a valid value.
         */
        zone: string;
        /**
         * Available zone unique id(numerical representation), This field maybe null, means cannot get a valid value.
         */
        zoneId: number;
        /**
         * Available zone name, This field maybe null, means cannot get a valid value.
         */
        zoneName: string;
        /**
         * Region that this available zone belong to, This field maybe null, means cannot get a valid value.
         */
        zoneRegion: string;
    }

    export interface GetListenerRulesRuleList {
        /**
         * ID of the client certificate. NOTES: Only supports listeners of 'HTTPS' and 'TCP_SSL' protocol.
         */
        certificateCaId: string;
        /**
         * ID of the server certificate. NOTES: Only supports listeners of 'HTTPS'  and 'TCP_SSL' protocol.
         */
        certificateId: string;
        /**
         * Type of SSL Mode, and available values inclue 'UNIDIRECTIONAL', 'MUTUAL'.NOTES: Only supports listeners of 'HTTPS'  and 'TCP_SSL' protocol.
         */
        certificateSslMode: string;
        /**
         * ID of the CLB to be queried.
         */
        clbId: string;
        /**
         * Domain name of the forwarding rule to be queried.
         */
        domain?: string;
        /**
         * Health threshold of health check, and the default is `3`. If a success result is returned for the health check three consecutive times, the CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
         */
        healthCheckHealthNum: number;
        /**
         * HTTP Status Code. The default is 31 and value range is 1-31. 1 means the return value '1xx' is health. 2 means the return value '2xx' is health. 4 means the return value '3xx' is health. 8 means the return value 4xx is health. 16 means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values. NOTES: The 'HTTP' health check of the 'TCP' listener only supports specifying one health check status code. NOTES: Only supports listeners of 'HTTP' and 'HTTPS' protocol.
         */
        healthCheckHttpCode: number;
        /**
         * Domain name of health check. NOTES: Only supports listeners of 'HTTPS' and 'HTTP' protocol.
         */
        healthCheckHttpDomain: string;
        /**
         * Methods of health check. NOTES: Only supports listeners of 'HTTPS' and 'HTTP' protocol. The default is 'HEAD', the available value include 'HEAD' and 'GET'.
         */
        healthCheckHttpMethod: string;
        /**
         * Path of health check. NOTES: Only supports listeners of 'HTTPS' and 'HTTP' protocol.
         */
        healthCheckHttpPath: string;
        /**
         * Interval time of health check. The value range is 5-300 sec, and the default is `5` sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
         */
        healthCheckIntervalTime: number;
        /**
         * Indicates whether health check is enabled.
         */
        healthCheckSwitch: boolean;
        /**
         * Unhealth threshold of health check, and the default is `3`. If a success result is returned for the health check three consecutive times, the CVM is identified as unhealthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
         */
        healthCheckUnhealthNum: number;
        /**
         * Indicate to set HTTP2 protocol or not.
         */
        http2Switch: boolean;
        /**
         * ID of the CLB listener to be queried.
         */
        listenerId: string;
        /**
         * ID of the forwarding rule to be queried.
         */
        ruleId: string;
        /**
         * Scheduling method of the forwarding rule of thr CLB listener, and available values include `WRR`, `IP HASH` and `LEAST_CONN`. The default is `WRR`.
         */
        scheduler: string;
        /**
         * Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as 'WRR'. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
         */
        sessionExpireTime: number;
        /**
         * Url of the forwarding rule to be queried.
         */
        url?: string;
    }

    export interface GetListenersListenerList {
        /**
         * Id of the client certificate. It must be set when SSLMode is `mutual`. NOTES: only supported by listeners of `HTTPS` and `TCP_SSL` protocol.
         */
        certificateCaId: string;
        /**
         * Id of the server certificate. It must be set when protocol is `HTTPS` or `TCP_SSL`. NOTES: only supported by listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
         */
        certificateId: string;
        /**
         * Type of certificate, and available values inclue `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
         */
        certificateSslMode: string;
        /**
         * Id of the CLB to be queried.
         */
        clbId: string;
        /**
         * Health check protocol.
         */
        healthCheckContextType: string;
        /**
         * Health threshold of health check, and the default is `3`. If a success result is returned for the health check three consecutive times, the CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
         */
        healthCheckHealthNum: number;
        /**
         * HTTP health check code of TCP listener.
         */
        healthCheckHttpCode: number;
        /**
         * HTTP health check domain of TCP listener.
         */
        healthCheckHttpDomain: string;
        /**
         * HTTP health check method of TCP listener.
         */
        healthCheckHttpMethod: string;
        /**
         * HTTP health check path of TCP listener.
         */
        healthCheckHttpPath: string;
        /**
         * The HTTP version of the backend service.
         */
        healthCheckHttpVersion: string;
        /**
         * Interval time of health check. The value range is 5-300 sec, and the default is `5` sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
         */
        healthCheckIntervalTime: number;
        /**
         * The health check port is the port of the backend service.
         */
        healthCheckPort: number;
        /**
         * It represents the result returned by the health check.
         */
        healthCheckRecvContext: string;
        /**
         * It represents the content of the request sent by the health check.
         */
        healthCheckSendContext: string;
        /**
         * Indicates whether health check is enabled.
         */
        healthCheckSwitch: boolean;
        /**
         * Response timeout of health check. The value range is 2-60 sec, and the default is `2` sec. Response timeout needs to be less than check interval. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration.
         */
        healthCheckTimeOut: number;
        /**
         * Protocol used for health check.
         */
        healthCheckType: string;
        /**
         * Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check three consecutive times, the CVM is identified as unhealthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
         */
        healthCheckUnhealthNum: number;
        /**
         * Id of the listener to be queried.
         */
        listenerId: string;
        /**
         * Name of the CLB listener.
         */
        listenerName: string;
        /**
         * Port of the CLB listener.
         */
        port: number;
        /**
         * Type of protocol within the listener, and available values are `TCP`, `UDP`, `HTTP`, `HTTPS` and `TCP_SSL`.
         */
        protocol: string;
        /**
         * Scheduling method of the CLB listener, and available values are `WRR` and `LEAST_CONN`. The default is `WRR`. NOTES: The listener of 'HTTP' and `HTTPS` protocol additionally supports the `IP HASH` method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
         */
        scheduler: string;
        /**
         * Time of session persistence within the CLB listener. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
         */
        sessionExpireTime: number;
        /**
         * Indicates whether SNI is enabled. NOTES: Only supported by `HTTPS` protocol.
         */
        sniSwitch: boolean;
    }

    export interface GetRedirectionsRedirectionList {
        /**
         * ID of the CLB to be queried.
         */
        clbId: string;
        /**
         * ID of source listener to be queried.
         */
        sourceListenerId: string;
        /**
         * Rule ID of source listener to be queried.
         */
        sourceRuleId: string;
        /**
         * ID of target listener to be queried.
         */
        targetListenerId: string;
        /**
         * Rule ID of target listener to be queried.
         */
        targetRuleId: string;
    }

    export interface GetTargetGroupsList {
        /**
         * List of associated rules.
         */
        associatedRuleLists: outputs.Clb.GetTargetGroupsListAssociatedRuleList[];
        /**
         * Creation time of the target group.
         */
        createTime: string;
        /**
         * Port of target group.
         */
        port: number;
        /**
         * ID of Target group. Mutually exclusive with `vpcId` and `targetGroupName`. `targetGroupId` is preferred.
         */
        targetGroupId: string;
        /**
         * List of backend servers bound to the target group.
         */
        targetGroupInstanceLists: outputs.Clb.GetTargetGroupsListTargetGroupInstanceList[];
        /**
         * Name of target group. Mutually exclusive with `targetGroupId`. `targetGroupId` is preferred.
         */
        targetGroupName: string;
        /**
         * Modification time of the target group.
         */
        updateTime: string;
        /**
         * Target group VPC ID. Mutually exclusive with `targetGroupId`. `targetGroupId` is preferred.
         */
        vpcId: string;
    }

    export interface GetTargetGroupsListAssociatedRuleList {
        /**
         * Forwarding rule domain.
         */
        domain: string;
        /**
         * Listener ID.
         */
        listenerId: string;
        /**
         * Listener name.
         */
        listenerName: string;
        /**
         * Listener port.
         */
        listenerPort: number;
        /**
         * Load balance ID.
         */
        loadBalancerId: string;
        /**
         * Load balance name.
         */
        loadBalancerName: string;
        /**
         * Forwarding rule ID.
         */
        locationId: string;
        /**
         * Listener protocol type.
         */
        protocol: string;
        /**
         * Forwarding rule URL.
         */
        url: string;
    }

    export interface GetTargetGroupsListTargetGroupInstanceList {
        /**
         * ID of Elastic Network Interface.
         */
        eniId: string;
        /**
         * ID of backend service.
         */
        instanceId: string;
        /**
         * The instance name of the backend service.
         */
        instanceName: string;
        /**
         * Intranet IP list of back-end services.
         */
        privateIpAddresses: any[];
        /**
         * List of external network IP of back-end services.
         */
        publicIpAddresses: any[];
        /**
         * The time the backend service was bound.
         */
        registeredTime: string;
        /**
         * Port of backend service.
         */
        serverPort: number;
        /**
         * Type of backend service.
         */
        serverType: string;
        /**
         * Forwarding weight of back-end services.
         */
        weight: number;
    }

    export interface InstanceSnatIp {
        /**
         * Snat IP address, If set to empty will auto allocated.
         */
        ip?: string;
        /**
         * Snat subnet ID.
         */
        subnetId: string;
    }

    export interface SnatIpIp {
        /**
         * Snat IP.
         */
        ip: string;
        /**
         * Subnet ID.
         */
        subnetId: string;
    }

    export interface TargetGroupTargetGroupInstance {
        /**
         * The internal ip of target group instance.
         */
        bindIp: string;
        /**
         * The new port of target group instance.
         */
        newPort?: number;
        /**
         * The port of target group instance.
         */
        port: number;
        /**
         * The weight of target group instance.
         */
        weight?: number;
    }
}

export namespace Cls {
    export interface ConfigExcludePath {
        /**
         * Type. Valid values: File, Path.
         */
        type?: string;
        /**
         * Specific content corresponding to Type.
         */
        value?: string;
    }

    export interface ConfigExtraContainerFile {
        /**
         * Container name.
         */
        container: string;
        /**
         * Pod label to be excluded.
         */
        excludeLabels?: string[];
        /**
         * Namespaces to be excluded, separated by separators, such as A, B.
         */
        excludeNamespace?: string;
        /**
         * log name.
         */
        filePattern: string;
        /**
         * Pod label info.
         */
        includeLabels?: string[];
        /**
         * Log Path.
         */
        logPath: string;
        /**
         * Namespace. There can be multiple namespaces, separated by separators, such as A, B.
         */
        namespace: string;
        /**
         * Workload info.
         */
        workload?: outputs.Cls.ConfigExtraContainerFileWorkload;
    }

    export interface ConfigExtraContainerFileWorkload {
        /**
         * container name.
         */
        container?: string;
        /**
         * workload type.
         */
        kind: string;
        /**
         * workload name.
         */
        name: string;
        /**
         * namespace.
         */
        namespace?: string;
    }

    export interface ConfigExtraContainerStdout {
        /**
         * Is all containers.
         */
        allContainers: boolean;
        /**
         * Pod label to be excluded.
         */
        excludeLabels?: string[];
        /**
         * Namespaces to be excluded, separated by separators, such as A, B.
         */
        excludeNamespace?: string;
        /**
         * Pod label info.
         */
        includeLabels?: string[];
        /**
         * Namespace. There can be multiple namespaces, separated by separators, such as A, B.
         */
        namespace?: string;
        /**
         * Workload info.
         */
        workloads?: outputs.Cls.ConfigExtraContainerStdoutWorkload[];
    }

    export interface ConfigExtraContainerStdoutWorkload {
        /**
         * container name.
         */
        container?: string;
        /**
         * workload type.
         */
        kind: string;
        /**
         * workload name.
         */
        name: string;
        /**
         * namespace.
         */
        namespace?: string;
    }

    export interface ConfigExtraExcludePath {
        /**
         * Type. Valid values: File, Path.
         */
        type?: string;
        /**
         * Specific content corresponding to Type.
         */
        value?: string;
    }

    export interface ConfigExtraExtractRule {
        /**
         * Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
         */
        backtracking?: number;
        /**
         * First-Line matching rule, which is valid only if logType is multilineLog or fullregex_log.
         */
        beginRegex?: string;
        /**
         * Delimiter for delimited log, which is valid only if logType is delimiter_log.
         */
        delimiter?: string;
        /**
         * Log keys to be filtered and the corresponding regex.
         */
        filterKeyRegexes?: outputs.Cls.ConfigExtraExtractRuleFilterKeyRegex[];
        /**
         * Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if logType is delimiter_log. jsonLog logs use the key of JSON itself.
         */
        keys?: string[];
        /**
         * Full log matching rule, which is valid only if logType is fullregex_log.
         */
        logRegex?: string;
        /**
         * Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
         */
        timeFormat?: string;
        /**
         * Time field key name. timeKey and timeFormat must appear in pair.
         */
        timeKey?: string;
        /**
         * Unmatched log key.
         */
        unMatchLogKey?: string;
        /**
         * Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
         */
        unMatchUpLoadSwitch?: boolean;
    }

    export interface ConfigExtraExtractRuleFilterKeyRegex {
        /**
         * Log key to be filtered.
         */
        key?: string;
        /**
         * Filter rule regex corresponding to key.
         */
        regex?: string;
    }

    export interface ConfigExtraHostFile {
        /**
         * Metadata info.
         */
        customLabels?: string[];
        /**
         * Log file name.
         */
        filePattern: string;
        /**
         * Log file dir.
         */
        logPath: string;
    }

    export interface ConfigExtractRule {
        /**
         * Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
         */
        backtracking?: number;
        /**
         * First-Line matching rule, which is valid only if logType is multilineLog or fullregex_log.
         */
        beginRegex?: string;
        /**
         * Delimiter for delimited log, which is valid only if logType is delimiter_log.
         */
        delimiter?: string;
        /**
         * Log keys to be filtered and the corresponding regex.
         */
        filterKeyRegexes?: outputs.Cls.ConfigExtractRuleFilterKeyRegex[];
        /**
         * Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if logType is delimiter_log. jsonLog logs use the key of JSON itself.
         */
        keys?: string[];
        /**
         * Full log matching rule, which is valid only if logType is fullregex_log.
         */
        logRegex?: string;
        /**
         * Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
         */
        timeFormat?: string;
        /**
         * Time field key name. timeKey and timeFormat must appear in pair.
         */
        timeKey?: string;
        /**
         * Unmatched log key.
         */
        unMatchLogKey?: string;
        /**
         * Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
         */
        unMatchUpLoadSwitch?: boolean;
    }

    export interface ConfigExtractRuleFilterKeyRegex {
        /**
         * Log key to be filtered.
         */
        key?: string;
        /**
         * Filter rule regex corresponding to key.
         */
        regex?: string;
    }

    export interface CosShipperCompress {
        /**
         * Compression format. Valid values: gzip, lzop, none (no compression).
         */
        format: string;
    }

    export interface CosShipperContent {
        /**
         * CSV format content description.Note: this field may return null, indicating that no valid values can be obtained.
         */
        csv?: outputs.Cls.CosShipperContentCsv;
        /**
         * Content format. Valid values: json, csv.
         */
        format: string;
        /**
         * JSON format content description.Note: this field may return null, indicating that no valid values can be obtained.
         */
        json?: outputs.Cls.CosShipperContentJson;
    }

    export interface CosShipperContentCsv {
        /**
         * Field delimiter.
         */
        delimiter: string;
        /**
         * Field delimiter.
         */
        escapeChar: string;
        /**
         * Names of keys.Note: this field may return null, indicating that no valid values can be obtained.
         */
        keys: string[];
        /**
         * Content used to populate non-existing fields.
         */
        nonExistingField: string;
        /**
         * Whether to print key on the first row of the CSV file.
         */
        printKey: boolean;
    }

    export interface CosShipperContentJson {
        /**
         * Enablement flag.
         */
        enableTag: boolean;
        /**
         * Metadata information list
         * Note: this field may return null, indicating that no valid values can be obtained..
         */
        metaFields: string[];
    }

    export interface CosShipperFilterRule {
        /**
         * Filter rule key.
         */
        key: string;
        /**
         * Filter rule.
         */
        regex: string;
        /**
         * Filter rule value.
         */
        value: string;
    }

    export interface IndexRule {
        /**
         * Full-Text index configuration.
         */
        fullText?: outputs.Cls.IndexRuleFullText;
        /**
         * Key-Value index configuration.
         */
        keyValue?: outputs.Cls.IndexRuleKeyValue;
        /**
         * Metafield index configuration.
         */
        tag?: outputs.Cls.IndexRuleTag;
    }

    export interface IndexRuleFullText {
        /**
         * Case sensitivity.
         */
        caseSensitive: boolean;
        /**
         * Whether Chinese characters are contained.
         */
        containZH: boolean;
        /**
         * Full-Text index delimiter. Each character in the string represents a delimiter.
         */
        tokenizer: string;
    }

    export interface IndexRuleKeyValue {
        /**
         * Case sensitivity.
         */
        caseSensitive: boolean;
        /**
         * Key-Value pair information of the index to be created. Up to 100 key-value pairs can be configured.
         */
        keyValues?: outputs.Cls.IndexRuleKeyValueKeyValue[];
    }

    export interface IndexRuleKeyValueKeyValue {
        /**
         * When a key value or metafield index needs to be configured for a field, the metafield Key does not need to be prefixed with __TAG__. and is consistent with the one when logs are uploaded. __TAG__. will be prefixed automatically for display in the console..
         */
        key: string;
        /**
         * Field index description information.
         */
        value?: outputs.Cls.IndexRuleKeyValueKeyValueValue;
    }

    export interface IndexRuleKeyValueKeyValueValue {
        /**
         * Whether Chinese characters are contained.
         */
        containZH?: boolean;
        /**
         * Whether the analysis feature is enabled for the field.
         */
        sqlFlag?: boolean;
        /**
         * Field delimiter, which is meaningful only if the field type is text. Each character in the entered string represents a delimiter.
         */
        tokenizer?: string;
        /**
         * Field type. Valid values: long, text, double.
         */
        type: string;
    }

    export interface IndexRuleTag {
        /**
         * Case sensitivity.
         */
        caseSensitive: boolean;
        /**
         * Key-Value pair information of the index to be created. Up to 100 key-value pairs can be configured.
         */
        keyValues?: outputs.Cls.IndexRuleTagKeyValue[];
    }

    export interface IndexRuleTagKeyValue {
        /**
         * When a key value or metafield index needs to be configured for a field, the metafield Key does not need to be prefixed with __TAG__. and is consistent with the one when logs are uploaded. __TAG__. will be prefixed automatically for display in the console..
         */
        key: string;
        /**
         * Field index description information.
         */
        value?: outputs.Cls.IndexRuleTagKeyValueValue;
    }

    export interface IndexRuleTagKeyValueValue {
        /**
         * Whether Chinese characters are contained.
         */
        containZH?: boolean;
        /**
         * Whether the analysis feature is enabled for the field.
         */
        sqlFlag?: boolean;
        /**
         * Field delimiter, which is meaningful only if the field type is text. Each character in the entered string represents a delimiter.
         */
        tokenizer?: string;
        /**
         * Field type. Valid values: long, text, double.
         */
        type: string;
    }

    export interface MachineGroupMachineGroupType {
        /**
         * Machine group type. Valid values: ip: the IP addresses of collection machines are stored in Values of the machine group; label: the tags of the machines are stored in Values of the machine group.
         */
        type: string;
        /**
         * Machine description list.
         */
        values: string[];
    }

}

export namespace Cos {
    export interface BucketCorsRule {
        /**
         * Specifies which headers are allowed.
         */
        allowedHeaders: string[];
        /**
         * Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
         */
        allowedMethods: string[];
        /**
         * Specifies which origins are allowed.
         */
        allowedOrigins: string[];
        /**
         * Specifies expose header in the response.
         */
        exposeHeaders?: string[];
        /**
         * Specifies time in seconds that browser can cache the response for a preflight request.
         */
        maxAgeSeconds?: number;
    }

    export interface BucketDomainCertificateAttachmentDomainCertificate {
        /**
         * Certificate info.
         */
        certificate: outputs.Cos.BucketDomainCertificateAttachmentDomainCertificateCertificate;
        /**
         * The name of domain.
         */
        domain: string;
    }

    export interface BucketDomainCertificateAttachmentDomainCertificateCertificate {
        /**
         * Certificate type.
         */
        certType: string;
        /**
         * Custom certificate.
         */
        customCert: outputs.Cos.BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert;
    }

    export interface BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert {
        /**
         * Public key of certificate.
         */
        cert: string;
        /**
         * Private key of certificate.
         */
        privateKey: string;
    }

    export interface BucketLifecycleRule {
        /**
         * Specifies a period in the object's expire (documented below).
         */
        expiration?: outputs.Cos.BucketLifecycleRuleExpiration;
        /**
         * Object key prefix identifying one or more objects to which the rule applies.
         */
        filterPrefix: string;
        /**
         * A unique identifier for the rule. It can be up to 255 characters.
         */
        id?: string;
        /**
         * Specifies when non current object versions shall expire.
         */
        nonCurrentExpiration?: outputs.Cos.BucketLifecycleRuleNonCurrentExpiration;
        /**
         * Specifies a period in the non current object's transitions.
         */
        nonCurrentTransitions?: outputs.Cos.BucketLifecycleRuleNonCurrentTransition[];
        /**
         * Specifies a period in the object's transitions (documented below).
         */
        transitions?: outputs.Cos.BucketLifecycleRuleTransition[];
    }

    export interface BucketLifecycleRuleExpiration {
        /**
         * Specifies the date after which you want the corresponding action to take effect.
         */
        date?: string;
        /**
         * Specifies the number of days after object creation when the specific rule action takes effect.
         */
        days?: number;
        /**
         * Indicates whether the delete marker of an expired object will be removed.
         */
        deleteMarker?: boolean;
    }

    export interface BucketLifecycleRuleNonCurrentExpiration {
        /**
         * Number of days after non current object creation when the specific rule action takes effect. The maximum value is 3650.
         */
        nonCurrentDays?: number;
    }

    export interface BucketLifecycleRuleNonCurrentTransition {
        /**
         * Number of days after non current object creation when the specific rule action takes effect.
         */
        nonCurrentDays?: number;
        /**
         * Specifies the storage class to which you want the non current object to transition. Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
         */
        storageClass: string;
    }

    export interface BucketLifecycleRuleTransition {
        /**
         * Specifies the date after which you want the corresponding action to take effect.
         */
        date?: string;
        /**
         * Specifies the number of days after object creation when the specific rule action takes effect.
         */
        days?: number;
        /**
         * Specifies the storage class to which you want the object to transition. Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
         */
        storageClass: string;
    }

    export interface BucketOriginDomainRule {
        /**
         * Specify domain host.
         */
        domain: string;
        /**
         * Domain status, default: `ENABLED`.
         */
        status?: string;
        /**
         * Specify origin domain type, available values: `REST`, `WEBSITE`, `ACCELERATE`, default: `REST`.
         */
        type?: string;
    }

    export interface BucketOriginPullRule {
        /**
         * Specifies the custom headers that you can add for COS to access your origin server.
         */
        customHttpHeaders?: {[key: string]: any};
        /**
         * Specifies the pass through headers when accessing the origin server.
         */
        followHttpHeaders?: string[];
        /**
         * Specifies whether to pass through COS request query string when accessing the origin server.
         */
        followQueryString?: boolean;
        /**
         * Specifies whether to follow 3XX redirect to another origin server to pull data from.
         */
        followRedirection?: boolean;
        /**
         * Allows only a domain name or IP address. You can optionally append a port number to the address.
         */
        host: string;
        /**
         * Triggers the origin-pull rule when the requested file name matches this prefix.
         */
        prefix?: string;
        /**
         * Priority of origin-pull rules, do not set the same value for multiple rules.
         */
        priority: number;
        /**
         * the protocol used for COS to access the specified origin server. The available value include `HTTP`, `HTTPS` and `FOLLOW`.
         */
        protocol?: string;
        /**
         * If `true`, COS will not return 3XX status code when pulling data from an origin server. Current available zone: ap-beijing, ap-shanghai, ap-singapore, ap-mumbai.
         */
        syncBackToSource?: boolean;
    }

    export interface BucketReplicaRule {
        /**
         * Destination bucket identifier, format: `qcs::cos:<region>::<bucketname-appid>`. NOTE: destination bucket must enable versioning.
         */
        destinationBucket: string;
        /**
         * Storage class of destination, available values: `STANDARD`, `INTELLIGENT_TIERING`, `STANDARD_IA`. default is following current class of destination.
         */
        destinationStorageClass?: string;
        /**
         * Name of a specific rule.
         */
        id?: string;
        /**
         * Prefix matching policy. Policies cannot overlap; otherwise, an error will be returned. To match the root directory, leave this parameter empty.
         */
        prefix?: string;
        /**
         * Status identifier, available values: `Enabled`, `Disabled`.
         */
        status: string;
    }

    export interface BucketWebsite {
        endpoint: string;
        /**
         * An absolute path to the document to return in case of a 4XX error.
         */
        errorDocument?: string;
        /**
         * COS returns this index document when requests are made to the root domain or any of the subfolders.
         */
        indexDocument?: string;
    }

    export interface GetBucketsBucketList {
        /**
         * Bucket access control configurations.
         */
        acl: string;
        /**
         * Bucket verbose acl configurations.
         */
        aclBody: string;
        /**
         * Bucket name, the format likes `<bucket>-<appid>`.
         */
        bucket: string;
        /**
         * A list of CORS rule configurations.
         */
        corsRules: outputs.Cos.GetBucketsBucketListCorsRule[];
        /**
         * The URL of this cos bucket.
         */
        cosBucketUrl: string;
        /**
         * The lifecycle configuration of a bucket.
         */
        lifecycleRules: outputs.Cos.GetBucketsBucketListLifecycleRule[];
        /**
         * Bucket origin domain rules.
         */
        originDomainRules: outputs.Cos.GetBucketsBucketListOriginDomainRule[];
        /**
         * Bucket Origin-Pull rules.
         */
        originPullRules: outputs.Cos.GetBucketsBucketListOriginPullRule[];
        /**
         * Tags to filter bucket.
         */
        tags: {[key: string]: any};
        /**
         * A list of one element containing configuration parameters used when the bucket is used as a website.
         */
        websites: outputs.Cos.GetBucketsBucketListWebsite[];
    }

    export interface GetBucketsBucketListCorsRule {
        /**
         * Specifies which headers are allowed.
         */
        allowedHeaders: string[];
        /**
         * Specifies which methods are allowed. Can be GET, PUT, POST, DELETE or HEAD.
         */
        allowedMethods: string[];
        /**
         * Specifies which origins are allowed.
         */
        allowedOrigins: string[];
        /**
         * Specifies expose header in the response.
         */
        exposeHeaders: string[];
        /**
         * Specifies time in seconds that browser can cache the response for a preflight request.
         */
        maxAgeSeconds: number;
    }

    export interface GetBucketsBucketListLifecycleRule {
        /**
         * Specifies a period in the object's expire.
         */
        expirations: outputs.Cos.GetBucketsBucketListLifecycleRuleExpiration[];
        /**
         * Object key prefix identifying one or more objects to which the rule applies.
         */
        filterPrefix: string;
        /**
         * Specifies when non current object versions shall expire.
         */
        nonCurrentExpirations: outputs.Cos.GetBucketsBucketListLifecycleRuleNonCurrentExpiration[];
        /**
         * Specifies when to transition objects of non current versions and the target storage class.
         */
        nonCurrentTransitions: outputs.Cos.GetBucketsBucketListLifecycleRuleNonCurrentTransition[];
        /**
         * Specifies a period in the object's transitions.
         */
        transitions: outputs.Cos.GetBucketsBucketListLifecycleRuleTransition[];
    }

    export interface GetBucketsBucketListLifecycleRuleExpiration {
        /**
         * Specifies the date after which you want the corresponding action to take effect.
         */
        date: string;
        /**
         * Specifies the number of days after object creation when the specific rule action takes effect.
         */
        days: number;
    }

    export interface GetBucketsBucketListLifecycleRuleNonCurrentExpiration {
        /**
         * Number of days after non current object creation when the specific rule action takes effect.
         */
        nonCurrentDays: number;
    }

    export interface GetBucketsBucketListLifecycleRuleNonCurrentTransition {
        /**
         * Number of days after non current object creation when the specific rule action takes effect.
         */
        nonCurrentDays: number;
        /**
         * Specifies the storage class to which you want the object to transition. Available values include STANDARD, STANDARD_IA and ARCHIVE.
         */
        storageClass: string;
    }

    export interface GetBucketsBucketListLifecycleRuleTransition {
        /**
         * Specifies the date after which you want the corresponding action to take effect.
         */
        date: string;
        /**
         * Specifies the number of days after object creation when the specific rule action takes effect.
         */
        days: number;
        /**
         * Specifies the storage class to which you want the object to transition. Available values include STANDARD, STANDARD_IA and ARCHIVE.
         */
        storageClass: string;
    }

    export interface GetBucketsBucketListOriginDomainRule {
        domain: string;
        status?: string;
        type?: string;
    }

    export interface GetBucketsBucketListOriginPullRule {
        customHttpHeaders?: {[key: string]: any};
        followHttpHeaders?: string[];
        followQueryString?: boolean;
        followRedirection?: boolean;
        host: string;
        prefix?: string;
        priority: number;
        protocol?: string;
        syncBackToSource?: boolean;
    }

    export interface GetBucketsBucketListWebsite {
        /**
         * An absolute path to the document to return in case of a 4XX error.
         */
        errorDocument: string;
        /**
         * COS returns this index document when requests are made to the root domain or any of the subfolders.
         */
        indexDocument: string;
    }

}

export namespace Css {
    export interface GetDomainsDomainList {
        /**
         * Is there a CName to the fixed rule domain name: 0: No. 1: Yes.
         */
        bCName: number;
        /**
         * add time.Note: This field is Beijing time (UTC+8 time zone).
         */
        createTime: string;
        /**
         * The cname information used by the current client.
         */
        currentCName: string;
        /**
         * 0 normal live broadcast 1 slow live broadcast default 0.
         */
        isDelayLive: number;
        /**
         * 0: Standard live broadcast. 1: Mini program live broadcast. Note: This field may return null, indicating that no valid value can be obtained.
         */
        isMiniProgramLive: number;
        /**
         * Live domain name.
         */
        name: string;
        /**
         * Playing area, this parameter is meaningful only when DomainType=1. 1: Domestic.2: Global.3: Overseas.
         */
        playType: number;
        /**
         * Failure parameter, can be ignored. Note: This field is Beijing time (UTC+8 time zone).
         */
        rentExpireTime: string;
        /**
         * invalid parameter, can be ignored.
         */
        rentTag: number;
        /**
         * Domain Status: 0: disable. 1: Enabled.
         */
        status: number;
        /**
         * The domain name corresponding to the cname.
         */
        targetDomain: string;
        /**
         * Domain Type: 0: push stream. 1: Play.
         */
        type: number;
    }

    export interface PlayDomainCertAttachmentDomainInfo {
        /**
         * domain name.
         */
        domainName: string;
        /**
         * Whether to enable the https rule for the domain name. 1: enable, 0: disabled, -1: remain unchanged.
         */
        status: number;
    }

    export interface PullStreamTaskWatermarkList {
        /**
         * pic height.
         */
        height: number;
        /**
         * position type, 0:left top, 1:right top, 2:right bot, 3: left bot.
         */
        location: number;
        /**
         * watermark picture url.
         */
        pictureUrl: string;
        /**
         * pic width.
         */
        width: number;
        /**
         * x position.
         */
        xPosition: number;
        /**
         * y position.
         */
        yPosition: number;
    }

}

export namespace Cvm {
    export interface ChcConfigBmcVirtualPrivateCloud {
        /**
         * Whether to use a CVM instance as a public gateway. The public gateway is only available when the instance has a public IP and resides in a VPC. Valid values:&lt;br&gt;&lt;li&gt;TRUE: yes;&lt;br&gt;&lt;li&gt;FALSE: no&lt;br&gt;&lt;br&gt;Default: FALSE.
         */
        asVpcGateway?: boolean;
        /**
         * Number of IPv6 addresses randomly generated for the ENI.
         */
        ipv6AddressCount: number;
        /**
         * Array of VPC subnet IPs. You can use this parameter when creating instances or modifying VPC attributes of instances. Currently you can specify multiple IPs in one subnet only when creating multiple instances at the same time.
         */
        privateIpAddresses: string[];
        /**
         * VPC subnet ID in the format subnet-xxx. To obtain valid subnet IDs, you can log in to the [console](https://console.tencentcloud.com/vpc/vpc?rid=1) or call DescribeSubnets and look for the unSubnetId fields in the response. If you specify DEFAULT for both SubnetId and VpcId when creating an instance, the default VPC will be used.
         */
        subnetId: string;
        /**
         * VPC ID in the format of vpc-xxx. To obtain valid VPC IDs, you can log in to the [console](https://console.tencentcloud.com/vpc/vpc?rid=1) or call the DescribeVpcEx API and look for the unVpcId fields in the response. If you specify DEFAULT for both VpcId and SubnetId when creating an instance, the default VPC will be used.
         */
        vpcId: string;
    }

    export interface ChcConfigDeployVirtualPrivateCloud {
        /**
         * Whether to use a CVM instance as a public gateway. The public gateway is only available when the instance has a public IP and resides in a VPC. Valid values:&lt;br&gt;&lt;li&gt;TRUE: yes;&lt;br&gt;&lt;li&gt;FALSE: no&lt;br&gt;&lt;br&gt;Default: FALSE.
         */
        asVpcGateway?: boolean;
        /**
         * Number of IPv6 addresses randomly generated for the ENI.
         */
        ipv6AddressCount: number;
        /**
         * Array of VPC subnet IPs. You can use this parameter when creating instances or modifying VPC attributes of instances. Currently you can specify multiple IPs in one subnet only when creating multiple instances at the same time.
         */
        privateIpAddresses: string[];
        /**
         * VPC subnet ID in the format subnet-xxx. To obtain valid subnet IDs, you can log in to the [console](https://console.tencentcloud.com/vpc/vpc?rid=1) or call DescribeSubnets and look for the unSubnetId fields in the response. If you specify DEFAULT for both SubnetId and VpcId when creating an instance, the default VPC will be used.
         */
        subnetId: string;
        /**
         * VPC ID in the format of vpc-xxx. To obtain valid VPC IDs, you can log in to the [console](https://console.tencentcloud.com/vpc/vpc?rid=1) or call the DescribeVpcEx API and look for the unVpcId fields in the response. If you specify DEFAULT for both VpcId and SubnetId when creating an instance, the default VPC will be used.
         */
        vpcId: string;
    }

    export interface GetChcDeniedActionsChcHostDeniedActionSet {
        /**
         * CHC instance ID.
         */
        chcId: string;
        /**
         * Actions not allowed for the current CHC instance.
         */
        denyActions: string[];
        /**
         * CHC instance status.
         */
        state: string;
    }

    export interface GetChcHostsChcHostSet {
        /**
         * Out-of-band network IPNote: This field may return null, indicating that no valid values can be obtained.
         */
        bmcIp: string;
        /**
         * MAC address assigned under the out-of-band networkNote: This field may return null, indicating that no valid values can be obtained.
         */
        bmcMac: string;
        /**
         * Out-of-band network security group IDNote: This field may return null, indicating that no valid values can be obtained.
         */
        bmcSecurityGroupIds: string[];
        /**
         * Out-of-band networkNote: This field may return null, indicating that no valid values can be obtained.
         */
        bmcVirtualPrivateClouds: outputs.Cvm.GetChcHostsChcHostSetBmcVirtualPrivateCloud[];
        /**
         * CHC host ID.
         */
        chcId: string;
        /**
         * CPU cores of the CHC hostNote: This field may return null, indicating that no valid values can be obtained.
         */
        cpu: number;
        /**
         * Server creation time.
         */
        createdTime: string;
        /**
         * ID of the associated CVMNote: This field may return null, indicating that no valid values can be obtained.
         */
        cvmInstanceId: string;
        /**
         * Deployment network IPNote: This field may return null, indicating that no valid values can be obtained.
         */
        deployIp: string;
        /**
         * MAC address assigned under the deployment networkNote: This field may return null, indicating that no valid values can be obtained.
         */
        deployMac: string;
        /**
         * Deployment network security group IDNote: This field may return null, indicating that no valid values can be obtained.
         */
        deploySecurityGroupIds: string[];
        /**
         * Deployment networkNote: This field may return null, indicating that no valid values can be obtained.
         */
        deployVirtualPrivateClouds: outputs.Cvm.GetChcHostsChcHostSetDeployVirtualPrivateCloud[];
        /**
         * Device typeNote: This field may return null, indicating that no valid values can be obtained.
         */
        deviceType: string;
        /**
         * Disk capacity of the CHC hostNote: This field may return null, indicating that no valid values can be obtained.
         */
        disk: string;
        /**
         * Instance hardware description, including CPU cores, memory capacity and disk capacity.Note: This field may return null, indicating that no valid values can be obtained.
         */
        hardwareDescription: string;
        /**
         * Instance name.
         */
        instanceName: string;
        /**
         * CHC host status&lt;br/&gt;&lt;ul&gt;&lt;li&gt;REGISTERED: The CHC host is registered, but the out-of-band network and deployment network are not configured.&lt;/li&gt;&lt;li&gt;VPC_READY: The out-of-band network and deployment network are configured.&lt;/li&gt;&lt;li&gt;PREPARED: It&#39;s ready and can be associated with a CVM.&lt;/li&gt;&lt;li&gt;ONLINE: It&#39;s already associated with a CVM.&lt;/li&gt;&lt;/ul&gt;.
         */
        instanceState: string;
        /**
         * Memory capacity of the CHC host (unit: GB)Note: This field may return null, indicating that no valid values can be obtained.
         */
        memory: number;
        /**
         * Availability zone.
         */
        placements: outputs.Cvm.GetChcHostsChcHostSetPlacement[];
        /**
         * Server serial number.
         */
        serialNumber: string;
        /**
         * Management typeHOSTING: HostingTENANT: LeasingNote: This field may return null, indicating that no valid values can be obtained.
         */
        tenantType: string;
    }

    export interface GetChcHostsChcHostSetBmcVirtualPrivateCloud {
        /**
         * Whether to use a CVM instance as a public gateway. The public gateway is only available when the instance has a public IP and resides in a VPC. Valid values:&lt;br&gt;&lt;li&gt;TRUE: yes;&lt;br&gt;&lt;li&gt;FALSE: no&lt;br&gt;&lt;br&gt;Default: FALSE.
         */
        asVpcGateway: boolean;
        /**
         * Number of IPv6 addresses randomly generated for the ENI.
         */
        ipv6AddressCount: number;
        /**
         * Array of VPC subnet IPs. You can use this parameter when creating instances or modifying VPC attributes of instances. Currently you can specify multiple IPs in one subnet only when creating multiple instances at the same time.
         */
        privateIpAddresses: string[];
        /**
         * VPC subnet ID in the format subnet-xxx. To obtain valid subnet IDs, you can log in to the [console](https://console.tencentcloud.com/vpc/vpc?rid=1) or call DescribeSubnets and look for the unSubnetId fields in the response. If you specify DEFAULT for both SubnetId and VpcId when creating an instance, the default VPC will be used.
         */
        subnetId: string;
        /**
         * VPC ID in the format of vpc-xxx. To obtain valid VPC IDs, you can log in to the [console](https://console.tencentcloud.com/vpc/vpc?rid=1) or call the DescribeVpcEx API and look for the unVpcId fields in the response. If you specify DEFAULT for both VpcId and SubnetId when creating an instance, the default VPC will be used.
         */
        vpcId: string;
    }

    export interface GetChcHostsChcHostSetDeployVirtualPrivateCloud {
        /**
         * Whether to use a CVM instance as a public gateway. The public gateway is only available when the instance has a public IP and resides in a VPC. Valid values:&lt;br&gt;&lt;li&gt;TRUE: yes;&lt;br&gt;&lt;li&gt;FALSE: no&lt;br&gt;&lt;br&gt;Default: FALSE.
         */
        asVpcGateway: boolean;
        /**
         * Number of IPv6 addresses randomly generated for the ENI.
         */
        ipv6AddressCount: number;
        /**
         * Array of VPC subnet IPs. You can use this parameter when creating instances or modifying VPC attributes of instances. Currently you can specify multiple IPs in one subnet only when creating multiple instances at the same time.
         */
        privateIpAddresses: string[];
        /**
         * VPC subnet ID in the format subnet-xxx. To obtain valid subnet IDs, you can log in to the [console](https://console.tencentcloud.com/vpc/vpc?rid=1) or call DescribeSubnets and look for the unSubnetId fields in the response. If you specify DEFAULT for both SubnetId and VpcId when creating an instance, the default VPC will be used.
         */
        subnetId: string;
        /**
         * VPC ID in the format of vpc-xxx. To obtain valid VPC IDs, you can log in to the [console](https://console.tencentcloud.com/vpc/vpc?rid=1) or call the DescribeVpcEx API and look for the unVpcId fields in the response. If you specify DEFAULT for both VpcId and SubnetId when creating an instance, the default VPC will be used.
         */
        vpcId: string;
    }

    export interface GetChcHostsChcHostSetPlacement {
        /**
         * The ID of the CDH to which the instance belongs, only used as an output parameter.
         */
        hostId: string;
        /**
         * ID list of CDHs from which the instance can be created. If you have purchased CDHs and specify this parameter, the instances you purchase will be randomly deployed on the CDHs.
         */
        hostIds: string[];
        /**
         * IPs of the hosts to create CVMs.
         */
        hostIps: string[];
        /**
         * ID of the project to which the instance belongs. This parameter can be obtained from the projectId returned by DescribeProject. If this is left empty, the default project is used.
         */
        projectId: number;
        /**
         * ID of the availability zone where the instance resides. You can call the [DescribeZones](https://www.tencentcloud.com/document/product/213/35071) API and obtain the ID in the returned Zone field.
         */
        zone: string;
    }

    export interface GetChcHostsFilter {
        /**
         * Filter name.
         */
        name: string;
        /**
         * Filter values.
         */
        values: string[];
    }

    export interface GetInstancesModificationFilter {
        /**
         * Fields to be filtered.
         */
        name: string;
        /**
         * Value of the field.
         */
        values: string[];
    }

    export interface GetInstancesModificationInstanceTypeConfigStatusList {
        /**
         * Configuration information.
         */
        instanceTypeConfigs: outputs.Cvm.GetInstancesModificationInstanceTypeConfigStatusListInstanceTypeConfig[];
        /**
         * Status description information.
         */
        message: string;
        /**
         * State description.
         */
        status: string;
    }

    export interface GetInstancesModificationInstanceTypeConfigStatusListInstanceTypeConfig {
        /**
         * The number of CPU kernels, in cores.
         */
        cpu: number;
        /**
         * The number of FPGA kernels, in cores.
         */
        fpga: number;
        /**
         * The number of GPU kernels, in cores.
         */
        gpu: number;
        /**
         * Instance family.
         */
        instanceFamily: string;
        /**
         * Instance type.
         */
        instanceType: string;
        /**
         * Memory capacity (in GB).
         */
        memory: number;
        /**
         * Availability zone.
         */
        zone: string;
    }

    export interface LaunchTemplateActionTimer {
        /**
         * Execution time.
         */
        actionTime?: string;
        /**
         * Extended data.
         */
        externals?: outputs.Cvm.LaunchTemplateActionTimerExternals;
        /**
         * Timer name.
         */
        timerAction?: string;
    }

    export interface LaunchTemplateActionTimerExternals {
        /**
         * Release address.
         */
        releaseAddress?: boolean;
        /**
         * HDD local storage attributes.
         */
        storageBlockAttr?: outputs.Cvm.LaunchTemplateActionTimerExternalsStorageBlockAttr;
        /**
         * Unsupported network type.
         */
        unsupportNetworks?: string[];
    }

    export interface LaunchTemplateActionTimerExternalsStorageBlockAttr {
        /**
         * The maximum capacity of HDD local storage.
         */
        maxSize: number;
        /**
         * The minimum capacity of HDD local storage.
         */
        minSize: number;
        /**
         * The type of HDD local storage.
         */
        type: string;
    }

    export interface LaunchTemplateDataDisk {
        /**
         * Cloud Dedicated Cluster(CDC) ID.
         */
        cdcId?: string;
        /**
         * Whether the data disk is destroyed along with the instance, true or false.
         */
        deleteWithInstance?: boolean;
        /**
         * Data disk ID.
         */
        diskId?: string;
        /**
         * The size of the data disk.
         */
        diskSize: number;
        /**
         * The type of data disk.
         */
        diskType?: string;
        /**
         * Whether the data disk is encrypted, TRUE or FALSE.
         */
        encrypt?: boolean;
        /**
         * The id of custom CMK.
         */
        kmsKeyId?: string;
        /**
         * Data disk snapshot ID.
         */
        snapshotId?: string;
        /**
         * Cloud disk performance, MB/s.
         */
        throughputPerformance?: number;
    }

    export interface LaunchTemplateEnhancedService {
        /**
         * Enable TencentCloud Automation Tools(TAT).
         */
        automationService?: outputs.Cvm.LaunchTemplateEnhancedServiceAutomationService;
        /**
         * Enable cloud monitor service.
         */
        monitorService?: outputs.Cvm.LaunchTemplateEnhancedServiceMonitorService;
        /**
         * Enable cloud security service.
         */
        securityService?: outputs.Cvm.LaunchTemplateEnhancedServiceSecurityService;
    }

    export interface LaunchTemplateEnhancedServiceAutomationService {
        /**
         * Whether to enable TencentCloud Automation Tools(TAT), TRUE or FALSE.
         */
        enabled?: boolean;
    }

    export interface LaunchTemplateEnhancedServiceMonitorService {
        /**
         * Whether to enable cloud monitor service, TRUE or FALSE.
         */
        enabled?: boolean;
    }

    export interface LaunchTemplateEnhancedServiceSecurityService {
        /**
         * Whether to enable cloud security service, TRUE or FALSE.
         */
        enabled?: boolean;
    }

    export interface LaunchTemplateInstanceChargePrepaid {
        /**
         * The period of purchasing instances.
         */
        period: number;
        /**
         * Automatic renew flag.
         */
        renewFlag?: string;
    }

    export interface LaunchTemplateInstanceMarketOptions {
        /**
         * Market option type, currently only supports value: spot.
         */
        marketType?: string;
        /**
         * Bidding related options.
         */
        spotOptions: outputs.Cvm.LaunchTemplateInstanceMarketOptionsSpotOptions;
    }

    export interface LaunchTemplateInstanceMarketOptionsSpotOptions {
        /**
         * Bidding.
         */
        maxPrice: string;
        /**
         * Bidding request type, currently only supported type: one-time.
         */
        spotInstanceType?: string;
    }

    export interface LaunchTemplateInternetAccessible {
        /**
         * The ID of bandwidth package.
         */
        bandwidthPackageId?: string;
        /**
         * The type of internet charge.
         */
        internetChargeType?: string;
        /**
         * Internet outbound bandwidth upper limit, Mbps.
         */
        internetMaxBandwidthOut?: number;
        /**
         * Whether to allocate public network IP, TRUE or FALSE.
         */
        publicIpAssigned?: boolean;
    }

    export interface LaunchTemplateLoginSettings {
        /**
         * Keep the original settings of the mirror.
         */
        keepImageLogin?: string;
        /**
         * List of key ID.
         */
        keyIds?: string[];
        /**
         * The login password of instance.
         */
        password?: string;
    }

    export interface LaunchTemplatePlacement {
        /**
         * The CDH ID list of the instance(input).
         */
        hostIds?: string[];
        /**
         * Specify the host machine ip.
         */
        hostIps?: string[];
        /**
         * The project ID of the instance.
         */
        projectId?: number;
        /**
         * The available zone ID of the instance.
         */
        zone: string;
    }

    export interface LaunchTemplateSystemDisk {
        /**
         * Cloud Dedicated Cluster(CDC) ID.
         */
        cdcId?: string;
        /**
         * System disk ID.
         */
        diskId?: string;
        /**
         * The size of system disk.
         */
        diskSize?: number;
        /**
         * The type of system disk.
         */
        diskType?: string;
    }

    export interface LaunchTemplateTagSpecification {
        /**
         * The type of resource.
         */
        resourceType: string;
        /**
         * Tag list.
         */
        tags: outputs.Cvm.LaunchTemplateTagSpecificationTag[];
    }

    export interface LaunchTemplateTagSpecificationTag {
        /**
         * The key of tag.
         */
        key: string;
        /**
         * The value of tag.
         */
        value: string;
    }

    export interface LaunchTemplateVersionActionTimer {
        /**
         * Execution time, displayed according to ISO8601 standard, and UTC time is used. The format is YYYY-MM-DDThh:mm:ssZ. For example, 2018-05-29T11:26:40Z, the execution must be at least 5 minutes later than the current time.
         */
        actionTime: string;
        /**
         * Additional data.
         */
        externals: outputs.Cvm.LaunchTemplateVersionActionTimerExternals;
        /**
         * Timer name. Currently TerminateInstances is the only supported value.
         */
        timerAction: string;
    }

    export interface LaunchTemplateVersionActionTimerExternals {
        /**
         * Release address.
         */
        releaseAddress: boolean;
        /**
         * Information on local HDD storage.
         */
        storageBlockAttr: outputs.Cvm.LaunchTemplateVersionActionTimerExternalsStorageBlockAttr;
        /**
         * Not supported network.
         */
        unsupportNetworks: string[];
    }

    export interface LaunchTemplateVersionActionTimerExternalsStorageBlockAttr {
        /**
         * Maximum capacity of local HDD storage.
         */
        maxSize: number;
        /**
         * Minimum capacity of local HDD storage.
         */
        minSize: number;
        /**
         * Local HDD storage type. Value: LOCAL_PRO.
         */
        type: string;
    }

    export interface LaunchTemplateVersionDataDisk {
        /**
         * ID of the dedicated cluster to which the instance belongs.
         */
        cdcId: string;
        /**
         * Whether to terminate the data disk when its CVM is terminated. Default value: `true`.
         */
        deleteWithInstance: boolean;
        /**
         * System disk ID. System disks whose type is LOCAL_BASIC or LOCAL_SSD do not have an ID and do not support this parameter. It is only used as a response parameter for APIs such as DescribeInstances, and cannot be used as a request parameter for APIs such as RunInstances.
         */
        diskId: string;
        /**
         * Data disk size (in GB). The minimum adjustment increment is 10 GB. The value range varies by data disk type.
         */
        diskSize: number;
        /**
         * The type of data disk.
         */
        diskType: string;
        /**
         * Specifies whether the data disk is encrypted.
         */
        encrypt: boolean;
        /**
         * ID of the custom CMK in the format of UUID or `kms-abcd1234`.
         */
        kmsKeyId: string;
        /**
         * Data disk snapshot ID. The size of the selected data disk snapshot must be smaller than that of the data disk. Note: This field may return null, indicating that no valid value is found.
         */
        snapshotId: string;
        /**
         * Cloud disk performance in MB/s.
         */
        throughputPerformance: number;
    }

    export interface LaunchTemplateVersionEnhancedService {
        /**
         * Whether to enable the TAT service. If this parameter is not specified, the TAT service is enabled for public images and disabled for other images by default.
         */
        automationService: outputs.Cvm.LaunchTemplateVersionEnhancedServiceAutomationService;
        /**
         * Enables cloud monitor service. If this parameter is not specified, the cloud monitor service will be enabled by default.
         */
        monitorService: outputs.Cvm.LaunchTemplateVersionEnhancedServiceMonitorService;
        /**
         * Enables cloud security service. If this parameter is not specified, the cloud security service will be enabled by default.
         */
        securityService: outputs.Cvm.LaunchTemplateVersionEnhancedServiceSecurityService;
    }

    export interface LaunchTemplateVersionEnhancedServiceAutomationService {
        /**
         * Whether to enable the TAT service.
         */
        enabled: boolean;
    }

    export interface LaunchTemplateVersionEnhancedServiceMonitorService {
        /**
         * Whether to enable Cloud Monitor.
         */
        enabled: boolean;
    }

    export interface LaunchTemplateVersionEnhancedServiceSecurityService {
        /**
         * Whether to enable Cloud Security.
         */
        enabled: boolean;
    }

    export interface LaunchTemplateVersionInstanceChargePrepaid {
        /**
         * Subscription period; unit: month; valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60.
         */
        period: number;
        /**
         * Auto renewal flag. Valid values: NOTIFY_AND_AUTO_RENEW: notify upon expiration and renew automatically NOTIFY_AND_MANUAL_RENEW: notify upon expiration but do not renew automatically DISABLE_NOTIFY_AND_MANUAL_RENEW: neither notify upon expiration nor renew automatically &lt;br&gt;&lt;br&gt;Default value: NOTIFY_AND_MANUAL_RENEW. If this parameter is specified as NOTIFY_AND_AUTO_RENEW, the instance will be automatically renewed on a monthly basis if the account balance is sufficient.
         */
        renewFlag: string;
    }

    export interface LaunchTemplateVersionInstanceMarketOptions {
        /**
         * Market option type. Currently spot is the only supported value.
         */
        marketType: string;
        /**
         * Options related to bidding.
         */
        spotOptions: outputs.Cvm.LaunchTemplateVersionInstanceMarketOptionsSpotOptions;
    }

    export interface LaunchTemplateVersionInstanceMarketOptionsSpotOptions {
        /**
         * Bidding price.
         */
        maxPrice: string;
        /**
         * Bidding request type. Currently only one-time is supported.
         */
        spotInstanceType: string;
    }

    export interface LaunchTemplateVersionInternetAccessible {
        /**
         * Bandwidth package ID.
         */
        bandwidthPackageId: string;
        /**
         * Network connection billing plan.
         */
        internetChargeType: string;
        /**
         * The maximum outbound bandwidth of the public network, in Mbps. The default value is 0 Mbps.
         */
        internetMaxBandwidthOut: number;
        /**
         * Whether to assign a public IP.
         */
        publicIpAssigned: boolean;
    }

    export interface LaunchTemplateVersionLoginSettings {
        /**
         * Whether to keep the original settings of an image.
         */
        keepImageLogin: string;
        /**
         * List of key IDs. After an instance is associated with a key, you can access the instance with the private key in the key pair.
         */
        keyIds: string[];
        /**
         * Login password of the instance.
         */
        password: string;
    }

    export interface LaunchTemplateVersionPlacement {
        /**
         * ID list of CDHs from which the instance can be created. If you have purchased CDHs and specify this parameter, the instances you purchase will be randomly deployed on the CDHs.
         */
        hostIds: string[];
        /**
         * IPs of the hosts to create CVMs.
         */
        hostIps: string[];
        /**
         * ID of the project to which the instance belongs. This parameter can be obtained from the projectId returned by DescribeProject. If this is left empty, the default project is used.
         */
        projectId: number;
        /**
         * ID of the availability zone where the instance resides. You can call the DescribeZones API and obtain the ID in the returned Zone field.
         */
        zone: string;
    }

    export interface LaunchTemplateVersionSystemDisk {
        /**
         * ID of the dedicated cluster to which the instance belongs.
         */
        cdcId: string;
        /**
         * System disk ID. System disks whose type is LOCAL_BASIC or LOCAL_SSD do not have an ID and do not support this parameter. It is only used as a response parameter for APIs such as DescribeInstances, and cannot be used as a request parameter for APIs such as RunInstances.
         */
        diskId: string;
        /**
         * System disk size; unit: GB; default value: 50 GB.
         */
        diskSize: number;
        /**
         * The type of system disk. Default value: the type of hard disk currently in stock.
         */
        diskType: string;
    }

    export interface LaunchTemplateVersionTagSpecification {
        /**
         * The type of resource that the tag is bound to.
         */
        resourceType: string;
        /**
         * List of tags.
         */
        tags: outputs.Cvm.LaunchTemplateVersionTagSpecificationTag[];
    }

    export interface LaunchTemplateVersionTagSpecificationTag {
        /**
         * Tag key.
         */
        key: string;
        /**
         * Tag value.
         */
        value: string;
    }

    export interface LaunchTemplateVersionVirtualPrivateCloud {
        /**
         * Whether to use a CVM instance as a public gateway. The public gateway is only available when the instance has a public IP and resides in a VPC.
         */
        asVpcGateway: boolean;
        /**
         * Number of IPv6 addresses randomly generated for the ENI.
         */
        ipv6AddressCount: number;
        /**
         * Array of VPC subnet IPs. You can use this parameter when creating instances or modifying VPC attributes of instances. Currently you can specify multiple IPs in one subnet only when creating multiple instances at the same time.
         */
        privateIpAddresses: string[];
        /**
         * VPC subnet ID in the format subnet-xxx, if you specify DEFAULT for both VpcId and SubnetId when creating an instance, the default VPC will be used.
         */
        subnetId: string;
        /**
         * VPC ID in the format of vpc-xxx, if you specify DEFAULT for both VpcId and SubnetId when creating an instance, the default VPC will be used.
         */
        vpcId: string;
    }

    export interface LaunchTemplateVirtualPrivateCloud {
        /**
         * Is it used as a Public network gateway, TRUE or FALSE.
         */
        asVpcGateway?: boolean;
        /**
         * The number of ipv6 addresses for Elastic Network Interface.
         */
        ipv6AddressCount?: number;
        /**
         * The address of private ip.
         */
        privateIpAddresses?: string[];
        /**
         * The id of subnet.
         */
        subnetId: string;
        /**
         * The id of VPC.
         */
        vpcId: string;
    }
}

export namespace Cynosdb {
    export interface AuditLogFileFilter {
        /**
         * Affects the number of rows. Indicates that the audit log whose number of affected rows is greater than this value is filtered.
         */
        affectRows?: number;
        /**
         * The name of database.
         */
        dbNames?: string[];
        /**
         * Execution time. The unit is: ms. Indicates to filter audit logs whose execution time is greater than this value.
         */
        execTime?: number;
        /**
         * Client host.
         */
        hosts?: string[];
        /**
         * The name of audit policy.
         */
        policyNames?: string[];
        /**
         * Return the number of rows.
         */
        sentRows?: number;
        /**
         * SQL statement. Support fuzzy matching.
         */
        sql?: string;
        /**
         * SQL type. currently supported: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, SET, REPLACE, EXECUTE.
         */
        sqlType?: string;
        /**
         * SQL type. Supports simultaneous query of multiple types. currently supported: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, SET, REPLACE, EXECUTE.
         */
        sqlTypes?: string[];
        /**
         * SQL statement. Support passing multiple sql statements.
         */
        sqls?: string[];
        /**
         * The name of table.
         */
        tableNames?: string[];
        /**
         * The ID of thread.
         */
        threadIds?: string[];
        /**
         * User name.
         */
        users?: string[];
    }

    export interface ClusterParamItem {
        /**
         * Param expected value to set.
         */
        currentValue: string;
        /**
         * Name of param, e.g. `characterSetServer`.
         */
        name: string;
        /**
         * Param old value, indicates the value which already set, this value is required when modifying current_value.
         */
        oldValue?: string;
    }

    export interface ClusterRoGroupAddr {
        /**
         * IP address for read-write connection.
         */
        ip: string;
        /**
         * Port of CynosDB cluster.
         */
        port: number;
    }

    export interface ClusterRoGroupInstance {
        /**
         * ID of instance.
         */
        instanceId: string;
        /**
         * Name of instance.
         */
        instanceName: string;
    }

    export interface ClusterRwGroupAddr {
        /**
         * IP address for read-write connection.
         */
        ip: string;
        /**
         * Port of CynosDB cluster.
         */
        port: number;
    }

    export interface ClusterRwGroupInstance {
        /**
         * ID of instance.
         */
        instanceId: string;
        /**
         * Name of instance.
         */
        instanceName: string;
    }

    export interface GetAccountsAccountSet {
        /**
         * Account name of database.
         */
        accountName: string;
        /**
         * Create time.
         */
        createTime: string;
        /**
         * The account description of database.
         */
        description: string;
        /**
         * Host.
         */
        host: string;
        /**
         * Maximum number of user connections.
         */
        maxUserConnections: number;
        /**
         * Update time.
         */
        updateTime: string;
    }

    export interface GetClusterInstanceGroupsInstanceGrpInfoList {
        /**
         * User app id.
         */
        appId: number;
        /**
         * The ID of cluster.
         */
        clusterId: string;
        /**
         * Created time.
         */
        createdTime: string;
        /**
         * Deleted time.
         */
        deletedTime: string;
        /**
         * The ID of instance group.
         */
        instanceGrpId: string;
        /**
         * Instance groups contain instance information.
         */
        instanceSets: outputs.Cynosdb.GetClusterInstanceGroupsInstanceGrpInfoListInstanceSet[];
        /**
         * Status.
         */
        status: string;
        /**
         * Instance group type. ha-ha group; ro-read-only group.
         */
        type: string;
        /**
         * Updated time.
         */
        updatedTime: string;
        /**
         * Intranet IP.
         */
        vip: string;
        /**
         * Intranet port.
         */
        vport: number;
        /**
         * Public domain name.
         */
        wanDomain: string;
        /**
         * Public IP.
         */
        wanIp: string;
        /**
         * Public port.
         */
        wanPort: number;
        /**
         * Public status.
         */
        wanStatus: string;
    }

    export interface GetClusterInstanceGroupsInstanceGrpInfoListInstanceSet {
        /**
         * User app id.
         */
        appId: number;
        /**
         * Business type.Note: This field may return null, indicating that no valid value can be obtained.
         */
        businessType: string;
        /**
         * The ID of cluster.
         */
        clusterId: string;
        /**
         * The name of cluster.
         */
        clusterName: string;
        /**
         * Cpu, unit: CORE.
         */
        cpu: number;
        /**
         * Create time.
         */
        createTime: string;
        /**
         * Cynos kernel version.
         */
        cynosVersion: string;
        /**
         * Database type.
         */
        dbType: string;
        /**
         * Database version.
         */
        dbVersion: string;
        /**
         * Destroy deadline.
         */
        destroyDeadlineText: string;
        /**
         * Instance destroy time.
         */
        destroyTime: string;
        /**
         * The id of instance.
         */
        instanceId: string;
        /**
         * The name of instance.
         */
        instanceName: string;
        /**
         * Instance role.
         */
        instanceRole: string;
        /**
         * Instance type.
         */
        instanceType: string;
        /**
         * Whether to freeze.Note: This field may return null, indicating that no valid value can be obtained.
         */
        isFreeze: string;
        /**
         * Isolate time.
         */
        isolateTime: string;
        /**
         * Serverless instance maxmum cpu.
         */
        maxCpu: number;
        /**
         * Memory, unit: GB.
         */
        memory: number;
        /**
         * Serverless instance minimum cpu.
         */
        minCpu: number;
        /**
         * Net type.
         */
        netType: number;
        /**
         * Pay mode.
         */
        payMode: number;
        /**
         * Instance expiration time.
         */
        periodEndTime: string;
        /**
         * Physical zone.
         */
        physicalZone: string;
        /**
         * Task being processed.
         */
        processingTask: string;
        /**
         * The id of project.
         */
        projectId: number;
        /**
         * Region.
         */
        region: string;
        /**
         * Renew flag.
         */
        renewFlag: number;
        /**
         * Resource tags.Note: This field may return null, indicating that no valid value can be obtained.
         */
        resourceTags: outputs.Cynosdb.GetClusterInstanceGroupsInstanceGrpInfoListInstanceSetResourceTag[];
        /**
         * Serverless instance status, optional values:resumepause.
         */
        serverlessStatus: string;
        /**
         * Status.
         */
        status: string;
        /**
         * Instance state Chinese description.
         */
        statusDesc: string;
        /**
         * Storage, unit: GB.
         */
        storage: number;
        /**
         * Prepaid Storage Id.Note: This field may return null, indicating that no valid value can be obtained..
         */
        storageId: string;
        /**
         * Storage payment type.
         */
        storagePayMode: number;
        /**
         * Subnet ID.
         */
        subnetId: string;
        /**
         * Task list.Note: This field may return null, indicating that no valid value can be obtained.
         */
        tasks: outputs.Cynosdb.GetClusterInstanceGroupsInstanceGrpInfoListInstanceSetTask[];
        /**
         * User Uin.
         */
        uin: string;
        /**
         * Update time.
         */
        updateTime: string;
        /**
         * Intranet IP.
         */
        vip: string;
        /**
         * VPC network ID.
         */
        vpcId: string;
        /**
         * Intranet port.
         */
        vport: number;
        /**
         * Public domain name.
         */
        wanDomain: string;
        /**
         * Public IP.
         */
        wanIp: string;
        /**
         * Public port.
         */
        wanPort: number;
        /**
         * Public status.
         */
        wanStatus: string;
        /**
         * Availability zone.
         */
        zone: string;
    }

    export interface GetClusterInstanceGroupsInstanceGrpInfoListInstanceSetResourceTag {
        /**
         * The key of tag.
         */
        tagKey: string;
        /**
         * The value of tag.
         */
        tagValue: string;
    }

    export interface GetClusterInstanceGroupsInstanceGrpInfoListInstanceSetTask {
        /**
         * Task ID (cluster ID|instance group ID|instance ID).Note: This field may return null, indicating that no valid value can be obtained.
         */
        objectId: string;
        /**
         * Object type.Note: This field may return null, indicating that no valid value can be obtained.
         */
        objectType: string;
        /**
         * Task auto-increment ID.Note: This field may return null, indicating that no valid value can be obtained.
         */
        taskId: number;
        /**
         * Task status.Note: This field may return null, indicating that no valid value can be obtained.
         */
        taskStatus: string;
        /**
         * Task type.Note: This field may return null, indicating that no valid value can be obtained.
         */
        taskType: string;
    }

    export interface GetClusterParamsItem {
        /**
         * Current value.
         */
        currentValue: string;
        /**
         * Default value.
         */
        default: string;
        /**
         * The description of parameter.
         */
        description: string;
        /**
         * When the parameter is enum/string/bool, the optional value list.Note: This field may return null, indicating that no valid value can be obtained.
         */
        enumValues: string[];
        /**
         * Function.Note: This field may return null, indicating that no valid value can be obtained.
         */
        func: string;
        /**
         * Is it a function.Note: This field may return null, indicating that no valid value can be obtained.
         */
        isFunc: boolean;
        /**
         * Is it a global parameter.Note: This field may return null, indicating that no valid value can be obtained.
         */
        isGlobal: number;
        /**
         * Matching type, multiVal, regex is used when the parameter type is string.
         */
        matchType: string;
        /**
         * Match the target value, when multiVal, each key is divided by `;`.
         */
        matchValue: string;
        /**
         * The maximum value when the parameter type is float/integer.
         */
        max: string;
        /**
         * The minimum value when the parameter type is float/integer.
         */
        min: string;
        /**
         * Whether to reboot.
         */
        needReboot: number;
        /**
         * Parameter name.
         */
        paramName: string;
        /**
         * Parameter type: integer/float/string/enum/bool.
         */
        paramType: string;
    }

    export interface GetClustersClusterList {
        /**
         * Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Only works for PREPAID cluster.
         */
        autoRenewFlag: number;
        /**
         * The available zone of the CynosDB Cluster.
         */
        availableZone: string;
        /**
         * The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
         */
        chargeType: string;
        /**
         * ID of the cluster to be queried.
         */
        clusterId: string;
        /**
         * Storage limit of CynosDB cluster instance, unit in GB.
         */
        clusterLimit: number;
        /**
         * Name of the cluster to be queried.
         */
        clusterName: string;
        /**
         * Status of the Cynosdb cluster.
         */
        clusterStatus: string;
        /**
         * Creation time of the CynosDB cluster.
         */
        createTime: string;
        /**
         * Type of CynosDB, and available values include `MYSQL`, `POSTGRESQL`.
         */
        dbType: string;
        /**
         * Version of CynosDB, which is related to `dbType`. For `MYSQL`, available value is `5.7`.
         */
        dbVersion: string;
        /**
         * Port of CynosDB cluster.
         */
        port: number;
        /**
         * ID of the project to be queried.
         */
        projectId: number;
        /**
         * ID of the subnet within this VPC.
         */
        subnetId: string;
        /**
         * ID of the VPC.
         */
        vpcId: string;
    }

    export interface GetInstancesInstanceList {
        /**
         * ID of the cluster.
         */
        clusterId?: string;
        /**
         * Creation time of the CynosDB instance.
         */
        createTime: string;
        instanceCpuCore: number;
        /**
         * ID of the Cynosdb instance to be queried.
         */
        instanceId?: string;
        instanceMemorySize: number;
        /**
         * Name of the Cynosdb instance to be queried.
         */
        instanceName: string;
        /**
         * Status of the Cynosdb instance.
         */
        instanceStatus: string;
        /**
         * Storage size of the Cynosdb instance, unit in GB.
         */
        instanceStorageSize: number;
        /**
         * Instance type. `ro` for readonly instance, `rw` for read and write instance.
         */
        instanceType: string;
    }

    export interface GetParamTemplatesItem {
        /**
         * Database mode, optional values: NORMAL, SERVERLESS.
         */
        dbMode: string;
        /**
         * Engine version.
         */
        engineVersion: string;
        /**
         * The ID of template.
         */
        id: number;
        /**
         * Parameter template details.Note: This field may return null, indicating that no valid value can be obtained.
         */
        paramInfoSets: outputs.Cynosdb.GetParamTemplatesItemParamInfoSet[];
        /**
         * The description of template.
         */
        templateDescription: string;
        /**
         * The name of template.
         */
        templateName: string;
    }

    export interface GetParamTemplatesItemParamInfoSet {
        /**
         * Current value.
         */
        currentValue: string;
        /**
         * Default value.
         */
        default: string;
        /**
         * The description of parameter.
         */
        description: string;
        /**
         * An optional set of value types when the parameter type is enum.Note: This field may return null, indicating that no valid value can be obtained.
         */
        enumValues: string[];
        /**
         * The maximum value when the parameter type is float/integer.Note: This field may return null, indicating that no valid value can be obtained.
         */
        max: string;
        /**
         * The minimum value when the parameter type is float/integer.Note: This field may return null, indicating that no valid value can be obtained.
         */
        min: string;
        /**
         * Whether to reboot.
         */
        needReboot: number;
        /**
         * The name of parameter.
         */
        paramName: string;
        /**
         * Parameter type: integer/float/string/enum.
         */
        paramType: string;
    }

    export interface GetZoneConfigList {
        /**
         * Instance CPU, unit: core.
         */
        cpu: number;
        /**
         * Machine type.
         */
        machineType: string;
        /**
         * Max io bandwidth.
         */
        maxIoBandwidth: number;
        /**
         * The maximum available storage for the instance, unit GB.
         */
        maxStorageSize: number;
        /**
         * Instance memory, unit: GB.
         */
        memory: number;
        /**
         * Minimum available storage of the instance, unit: GB.
         */
        minStorageSize: number;
        /**
         * Regional inventory information.
         */
        zoneStockInfos: outputs.Cynosdb.GetZoneConfigListZoneStockInfo[];
    }

    export interface GetZoneConfigListZoneStockInfo {
        /**
         * Has stock.
         */
        hasStock: boolean;
        /**
         * Availability zone.
         */
        zone: string;
    }

}

export namespace Dayu {
    export interface CcHttpPolicyRuleList {
        /**
         * Operator of the rule. Valid values: `include`, `notInclude`, `equal`.
         */
        operator?: string;
        /**
         * Key of the rule. Valid values: `host`, `cgi`, `ua`, `referer`.
         */
        skey?: string;
        /**
         * Rule value, then length should be less than 31 bytes.
         */
        value?: string;
    }

    export interface CcHttpsPolicyRuleList {
        /**
         * Operator of the rule. Valid values are `include` and `equal`.
         */
        operator: string;
        /**
         * Key of the rule. Valid values are `cgi`, `ua` and `referer`.
         */
        skey: string;
        /**
         * Rule value, then length should be less than 31 bytes.
         */
        value: string;
    }

    export interface CcPolicyV2CcBlackWhiteIp {
        /**
         * Blacklist and whitelist IP addresses.
         */
        blackWhiteIp: string;
        /**
         * Create time.
         */
        createTime: string;
        /**
         * Domain.
         */
        domain: string;
        /**
         * Modify time.
         */
        modifyTime: string;
        /**
         * Protocol.
         */
        protocol: string;
        /**
         * IP type, value [black(blacklist IP), white (whitelist IP)].
         */
        type: string;
    }

    export interface CcPolicyV2CcGeoIpPolicy {
        /**
         * User action, drop or arg.
         */
        action: string;
        /**
         * The list of region IDs that the user selects to block.
         */
        areaLists: number[];
        /**
         * Create time.
         */
        createTime: string;
        /**
         * domain.
         */
        domain: string;
        /**
         * Modify time.
         */
        modifyTime: string;
        /**
         * Protocol, preferably HTTP, HTTPS.
         */
        protocol: string;
        /**
         * Regional types, divided into china, oversea and customized.
         */
        regionType: string;
    }

    export interface CcPolicyV2CcPrecisionPolicy {
        /**
         * Domain.
         */
        domain: string;
        /**
         * Ip address.
         */
        ip: string;
        /**
         * Policy mode (discard or captcha).
         */
        policyAction: string;
        policyId: string;
        /**
         * A list of policies.
         */
        policys: outputs.Dayu.CcPolicyV2CcPrecisionPolicyPolicy[];
        /**
         * Protocol.
         */
        protocol: string;
    }

    export interface CcPolicyV2CcPrecisionPolicyPolicy {
        /**
         * Configuration item types, currently only support value.
         */
        fieldName: string;
        /**
         * Configuration fields with the desirable values cgi, ua, cookie, referer, accept, srcip.
         */
        fieldType: string;
        /**
         * Configure the value.
         */
        value: string;
        /**
         * Configure the item-value comparison mode, which can be taken as the value of evaluate, not_equal, include.
         */
        valueOperator: string;
    }

    export interface CcPolicyV2CcPrecisionReqLimit {
        /**
         * Domain.
         */
        domain: string;
        instanceId: string;
        /**
         * Ip address.
         */
        ip: string;
        /**
         * Protection rating, the optional value of default means default policy, loose means loose, and strict means strict.
         */
        level: string;
        /**
         * The CC Frequency Limit Policy Item field.
         */
        policys: outputs.Dayu.CcPolicyV2CcPrecisionReqLimitPolicy[];
        /**
         * Protocol, preferably HTTP, HTTPS.
         */
        protocol: string;
    }

    export interface CcPolicyV2CcPrecisionReqLimitPolicy {
        /**
         * The frequency limit policy mode, the optional value of arg indicates the verification code, and drop indicates the discard.
         */
        action: string;
        /**
         * Cookies, one of the three policy entries can only be filled in.
         */
        cookie?: string;
        /**
         * The duration of the frequency limit policy can be taken from 1 to 86400 per second.
         */
        executeDuration: number;
        /**
         * The policy item is compared, and the optional value include indicates inclusion, and equal means equal.
         */
        mode: string;
        /**
         * Statistical period, take values 1, 10, 30, 60, in seconds.
         */
        period: number;
        /**
         * The number of requests, the value is 1 to 20000.
         */
        requestNum: number;
        /**
         * Uri, one of the three policy entries can only be filled in.
         */
        uri?: string;
        /**
         * User-Agent, only one of the three policy entries can be filled in.
         */
        userAgent?: string;
    }

    export interface CcPolicyV2Threshold {
        /**
         * domain.
         */
        domain: string;
        /**
         * Cleaning threshold, -1 indicates that the `default` mode is turned on.
         */
        threshold: number;
    }

    export interface DdosIpAttachmentV2BoundIpList {
        /**
         * Category of product that can be bound. Valid values: public (CVM and CLB), bm (BM), eni (ENI), vpngw (VPN gateway), natgw (NAT gateway), waf (WAF), fpc (financial products), gaap (GAAP), and other (hosted IP). This field is required when you perform binding.
         */
        bizType?: string;
        /**
         * Sub-product category. Valid values: cvm (CVM), lb (Load balancer), eni (ENI), vpngw (VPN gateway), natgw (NAT gateway), waf (WAF), fpc (financial products), gaap (GAAP), eip (BM EIP) and other (managed IP). This field is required when you perform binding.
         */
        deviceType?: string;
        /**
         * Anti-DDoS instance ID of the IP. This field is required only when the instance is bound to an IP. For example, this field InstanceId will be eni-* if the instance ID is bound to an ENI IP; none if there is no instance to bind to a managed IP.
         */
        instanceId?: string;
        /**
         * IP address.
         */
        ip: string;
    }

    export interface DdosPolicyDropOption {
        /**
         * The number of new connections based on destination IP that trigger suppression of connections. Valid value ranges: (0~4294967295).
         */
        badConnThreshold: number;
        /**
         * Indicate whether to check null connection or not.
         */
        checkSyncConn: boolean;
        /**
         * Connection timeout of abnormal connection check. Valid value ranges: (0~65535).
         */
        connTimeout: number;
        /**
         * The limit of concurrent connections based on destination IP. Valid value ranges: (0~4294967295).
         */
        dConnLimit: number;
        /**
         * The limit of new connections based on destination IP. Valid value ranges: (0~4294967295).
         */
        dNewLimit: number;
        /**
         * Indicate whether to drop abroad traffic or not.
         */
        dropAbroad: boolean;
        /**
         * Indicate whether to drop ICMP protocol or not.
         */
        dropIcmp: boolean;
        /**
         * Indicate whether to drop other protocols(exclude TCP/UDP/ICMP) or not.
         */
        dropOther: boolean;
        /**
         * Indicate whether to drop TCP protocol or not.
         */
        dropTcp: boolean;
        /**
         * Indicate to drop UDP protocol or not.
         */
        dropUdp: boolean;
        /**
         * The limit of ICMP traffic rate. Valid value ranges: (0~4294967295)(Mbps).
         */
        icmpMbpsLimit: number;
        /**
         * Indicate to enable null connection or not.
         */
        nullConnEnable: boolean;
        /**
         * The limit of other protocols(exclude TCP/UDP/ICMP) traffic rate. Valid value ranges: (0~4294967295)(Mbps).
         */
        otherMbpsLimit: number;
        /**
         * The limit of concurrent connections based on source IP. Valid value ranges: (0~4294967295).
         */
        sConnLimit: number;
        /**
         * The limit of new connections based on source IP. Valid value ranges: (0~4294967295).
         */
        sNewLimit: number;
        /**
         * The limit of syn of abnormal connection check. Valid value ranges: (0~100).
         */
        synLimit: number;
        /**
         * The percentage of syn in ack of abnormal connection check. Valid value ranges: (0~100).
         */
        synRate?: number;
        /**
         * The limit of TCP traffic. Valid value ranges: (0~4294967295)(Mbps).
         */
        tcpMbpsLimit: number;
        /**
         * The limit of UDP traffic rate. Valid value ranges: (0~4294967295)(Mbps).
         */
        udpMbpsLimit: number;
    }

    export interface DdosPolicyPacketFilter {
        /**
         * Action of port to take. Valid values: `drop`, `dropBlack`,`dropRst`,`dropBlackRst`,`transmit`.`drop`(drop the packet), `dropBlack`(drop the packet and black the ip),`dropRst`(drop the packet and disconnect),`dropBlackRst`(drop the packet, black the ip and disconnect),`transmit`(transmit the packet).
         */
        action?: string;
        /**
         * End port of the destination. Valid value ranges: (0~65535). It must be greater than `dStartPort`.
         */
        dEndPort?: number;
        /**
         * Start port of the destination. Valid value ranges: (0~65535).
         */
        dStartPort?: number;
        /**
         * The depth of match. Valid value ranges: (0~1500).
         */
        depth?: number;
        /**
         * Indicate whether to include the key word/regular expression or not.
         */
        isInclude?: boolean;
        /**
         * Indicate whether to check load or not, `beginL5` means to match and `noMatch` means not.
         */
        matchBegin?: string;
        /**
         * The key word or regular expression.
         */
        matchStr?: string;
        /**
         * Match type. Valid values: `sunday` and `pcre`. `sunday` means key word match while `pcre` means regular match.
         */
        matchType?: string;
        /**
         * The offset of match. Valid value ranges: (0~1500).
         */
        offset?: number;
        /**
         * The max length of the packet. Valid value ranges: (0~1500)(Mbps). It must be greater than `pktLengthMin`.
         */
        pktLengthMax?: number;
        /**
         * The minimum length of the packet. Valid value ranges: (0~1500)(Mbps).
         */
        pktLengthMin?: number;
        /**
         * Protocol. Valid values: `tcp`, `udp`, `icmp`, `all`.
         */
        protocol?: string;
        /**
         * End port of the source. Valid value ranges: (0~65535). It must be greater than `sStartPort`.
         */
        sEndPort?: number;
        /**
         * Start port of the source. Valid value ranges: (0~65535).
         */
        sStartPort?: number;
    }

    export interface DdosPolicyPortFilter {
        /**
         * Action of port to take. Valid values: `drop`, `transmit`.
         */
        action?: string;
        /**
         * End port. Valid value ranges: (0~65535). It must be greater than `startPort`.
         */
        endPort?: number;
        /**
         * The type of forbidden port. Valid values: `0`, `1`, `2`. `0` for destination ports make effect, `1` for source ports make effect. `2` for both destination and source ports.
         */
        kind?: number;
        /**
         * Protocol. Valid values are `tcp`, `udp`, `icmp`, `all`.
         */
        protocol?: string;
        /**
         * Start port. Valid value ranges: (0~65535).
         */
        startPort?: number;
    }

    export interface DdosPolicyV2Acl {
        /**
         * Action, optional values: drop, transmit, forward.
         */
        action: string;
        /**
         * The destination port ends, and the value range is 0~65535.
         */
        dPortEnd: number;
        /**
         * The destination port starts, and the value range is 0~65535.
         */
        dPortStart: number;
        /**
         * Protocol type, desirable values tcp, udp, all.
         */
        forwardProtocol: string;
        /**
         * Policy priority, the lower the number, the higher the level, the higher the rule matches, taking a value of 1-1000.Note: This field may return null, indicating that a valid value could not be retrieved.
         */
        priority: number;
        /**
         * The source port ends, and the acceptable value ranges from 0 to 65535.
         */
        sPortEnd: number;
        /**
         * The source port starts, and the value range is 0~65535.
         */
        sPortStart: number;
    }

    export interface DdosPolicyV2BlackWhiteIp {
        /**
         * Ip of resource instance.
         */
        ip: string;
        /**
         * IP type, value [`black`(blacklist IP), `white` (whitelist IP)].
         */
        ipType: string;
    }

    export interface DdosPolicyV2DdosConnectLimit {
        /**
         * Based on connection suppression trigger threshold, value range [0,4294967295].
         */
        badConnThreshold: number;
        /**
         * Abnormal connection detection condition, connection timeout, value range [0,65535].
         */
        connTimeout: number;
        /**
         * Concurrent connection control based on destination IP+ destination port.
         */
        dstConnLimit: number;
        /**
         * Limit on the number of news per second based on the destination IP.
         */
        dstNewLimit: number;
        /**
         * Abnormal connection detection conditions, empty connection guard switch, value range[0,1].
         */
        nullConnEnable: number;
        /**
         * Concurrent connection control based on source IP + destination IP.
         */
        sdConnLimit: number;
        /**
         * The limit on the number of news per second based on source IP + destination IP.
         */
        sdNewLimit: number;
        /**
         * Anomaly connection detection condition, syn threshold, value range [0,100].
         */
        synLimit: number;
        /**
         * Anomalous connection detection condition, percentage of syn ack, value range [0,100].
         */
        synRate: number;
    }

    export interface DdosPolicyV2DdosGeoIpBlockConfig {
        /**
         * Block action, take the value [`drop`, `trans`].
         */
        action: string;
        /**
         * When the RegionType is customized, the AreaList must be filled in, and a maximum of 128 must be filled in.
         */
        areaLists: number[];
        /**
         * Zone type, value [oversea (overseas),china (domestic),customized (custom region)].
         */
        regionType: string;
    }

    export interface DdosPolicyV2DdosSpeedLimitConfig {
        /**
         * Bandwidth bps.
         */
        bandwidth: number;
        /**
         * List of port ranges, up to 8, multiple; Separated, the range is represented with -; this port range must be filled in; fill in the style 1:0-65535, style 2:80; 443; 1000-2000.
         */
        dstPortList: string;
        /**
         * Speed limit mode, take the value [1 (speed limit based on source IP),2 (speed limit based on destination port)].
         */
        mode: number;
        /**
         * Packet rate pps.
         */
        packetRate: number;
        /**
         * IP protocol numbers, take the value[ ALL (all protocols),TCP (tcp protocol),UDP (udp protocol),SMP (smp protocol),1; 2-100 (custom protocol number range, up to 8)].
         */
        protocolList: string;
    }

    export interface DdosPolicyV2PacketFilter {
        /**
         * Action, take the value [drop,transmit,drop_black (discard and black out),drop_rst (Interception),drop_black_rst (intercept and block),forward].
         */
        action: string;
        /**
         * The end destination port, take the value 1~65535, which must be greater than or equal to the starting destination port.
         */
        dPortEnd: number;
        /**
         * From the destination port, take the value 0~65535.
         */
        dPortStart: number;
        /**
         * Detection depth from the detection position, value [0,1500].
         */
        depth: number;
        /**
         * Second detection depth starting from the second detection position, value [0,1500].
         */
        depth2: number;
        /**
         * Whether to include the detected value, take the value [0 (included),1 (not included)].
         */
        isNot: number;
        /**
         * Whether the second detection contains the detected value, the value [0 (included),1 (not included)].
         */
        isNot2: number;
        /**
         * Detect position, take the value [beginL3 (IP header),begin_l4 (TCP/UDP header),begin_l5 (T load), noMatch (mismatch)].
         */
        matchBegin: string;
        /**
         * The second detection position. take the value [beginL3 (IP header),begin_l4 (TCP/UDP header),begin_l5 (T load), noMatch (mismatch)].
         */
        matchBegin2: string;
        /**
         * When there is a second detection condition, the and/or relationship with the first detection condition, takes the value [And (and relationship),none (fill in this value when there is no second detection condition)].
         */
        matchLogic: string;
        /**
         * Detection type, value [sunday (keyword),pcre (regular expression)].
         */
        matchType: string;
        /**
         * The second type of detection, takes the value [sunday (keyword),pcre (regular expression)].
         */
        matchType2: string;
        /**
         * Offset from detection position, value range [0, Depth].
         */
        offset: number;
        /**
         * Offset from the second detection position, value range [0,Depth2].
         */
        offset2: number;
        /**
         * The maximum message length, taken from 1 to 1500, must be greater than or equal to the minimum message length.
         */
        pktlenMax: number;
        /**
         * Minimum message length, 1-1500.
         */
        pktlenMin: number;
        /**
         * Protocol, value [tcp udp icmp all].
         */
        protocol: string;
        /**
         * End source port, take the value 1~65535, must be greater than or equal to the starting source port.
         */
        sPortEnd: number;
        /**
         * Start the source port, take the value 0~65535.
         */
        sPortStart: number;
        /**
         * Detect values, key strings or regular expressions, take the value [When the detection type is sunday, please fill in the string or hexadecimal bytecode, for example 13233 corresponds to the hexadecimal bytecode of the string `123`;When the detection type is pcre, please fill in the regular expression string;].
         */
        str: string;
        /**
         * The second detection value, the key string or regular expression, takes the value [When the detection type is sunday, please fill in the string or hexadecimal bytecode, for example 13233 corresponds to the hexadecimal bytecode of the string `123`;When the detection type is pcre, please fill in the regular expression string;].
         */
        str2: string;
    }

    export interface DdosPolicyV2ProtocolBlockConfig {
        /**
         * ICMP block, value [0 (block off), 1 (block on)].
         */
        dropIcmp: number;
        /**
         * Other block, value [0 (block off), 1 (block on)].
         */
        dropOther: number;
        /**
         * TCP block, value [0 (block off), 1 (block on)].
         */
        dropTcp: number;
        /**
         * UDP block, value [0 (block off), 1 (block on)].
         */
        dropUdp: number;
    }

    export interface DdosPolicyWatermarkFilter {
        /**
         * Indicate whether to auto-remove the watermark or not.
         */
        autoRemove?: boolean;
        /**
         * The offset of watermark. Valid value ranges: (0~1500).
         */
        offset?: number;
        /**
         * Indicate whether to open watermark or not. It muse be set `true` when any field of watermark was set.
         */
        openSwitch?: boolean;
        /**
         * Port range of TCP, the format is like `2000-3000`.
         */
        tcpPortLists?: string[];
        /**
         * Port range of TCP, the format is like `2000-3000`.
         */
        udpPortLists?: string[];
    }

    export interface DdosPolicyWatermarkKey {
        /**
         * Content of the watermark.
         */
        content: string;
        /**
         * Create time of the DDoS policy.
         */
        createTime?: string;
        /**
         * Id of the watermark.
         */
        id: string;
        /**
         * Indicate whether to open watermark or not. It muse be set `true` when any field of watermark was set.
         */
        openSwitch: boolean;
    }

    export interface GetCcHttpPoliciesList {
        /**
         * Action mode.
         */
        action: string;
        /**
         * Create time of the CC self-define http policy.
         */
        createTime: string;
        /**
         * Max frequency per minute.
         */
        frequency: number;
        /**
         * IP of the CC self-define http policy.
         */
        ipLists: string[];
        /**
         * Name of the CC http policy to be queried.
         */
        name: string;
        /**
         * Id of the CC http policy to be queried.
         */
        policyId: string;
        /**
         * ID of the resource that the CC http policy works for.
         */
        resourceId: string;
        /**
         * Type of the resource that the CC http policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
         */
        resourceType: string;
        ruleLists: outputs.Dayu.GetCcHttpPoliciesListRuleList[];
        /**
         * Match mode.
         */
        smode: string;
        /**
         * Indicate the CC self-define http policy takes effect or not.
         */
        switch: boolean;
    }

    export interface GetCcHttpPoliciesListRuleList {
        operator: string;
        skey: string;
        value: string;
    }

    export interface GetCcHttpsPoliciesList {
        /**
         * Action mode.
         */
        action: string;
        /**
         * Create time of the CC self-define https policy.
         */
        createTime: string;
        /**
         * Domain that the CC self-define https policy works for.
         */
        domain: string;
        /**
         * Ip of the CC self-define https policy.
         */
        ipLists: string[];
        /**
         * Name of the CC https policy to be queried.
         */
        name: string;
        /**
         * Id of the CC https policy to be queried.
         */
        policyId: string;
        /**
         * Id of the resource that the CC https policy works for.
         */
        resourceId: string;
        /**
         * Type of the resource that the CC https policy works for, valid value is `bgpip`.
         */
        resourceType: string;
        /**
         * Rule id of the domain that the CC self-define https policy works for.
         */
        ruleId: string;
        ruleLists: outputs.Dayu.GetCcHttpsPoliciesListRuleList[];
        /**
         * Indicate the CC self-define https policy takes effect or not.
         */
        switch: boolean;
    }

    export interface GetCcHttpsPoliciesListRuleList {
        operator: string;
        skey: string;
        value: string;
    }

    export interface GetDdosPoliciesList {
        blackIps?: string[];
        /**
         * Create time of the DDoS policy.
         */
        createTime: string;
        /**
         * Option list of abnormal check of the DDoS policy.
         */
        dropOptions: outputs.Dayu.GetDdosPoliciesListDropOption[];
        /**
         * Name of the DDoS policy.
         */
        name: string;
        /**
         * Message filter options list.
         */
        packetFilters: outputs.Dayu.GetDdosPoliciesListPacketFilter[];
        /**
         * ID of the DDoS policy to be query.
         */
        policyId: string;
        /**
         * Port limits of abnormal check of the DDoS policy.
         */
        portFilters: outputs.Dayu.GetDdosPoliciesListPortFilter[];
        /**
         * Id of policy case that the DDoS policy works for.
         */
        sceneId: string;
        /**
         * Watermark policy options, and only support one watermark policy at most.
         */
        watermarkFilters: outputs.Dayu.GetDdosPoliciesListWatermarkFilter[];
        /**
         * Watermark content.
         */
        watermarkKeys: outputs.Dayu.GetDdosPoliciesListWatermarkKey[];
        whiteIps?: string[];
    }

    export interface GetDdosPoliciesListDropOption {
        /**
         * The number of new connections based on destination IP that trigger suppression of connections.
         */
        badConnThreshold: number;
        /**
         * Indicate whether to check null connection or not.
         */
        checkSyncConn: boolean;
        /**
         * Connection timeout of abnormal connection check.
         */
        connTimeout: number;
        /**
         * The limit of concurrent connections based on destination IP.
         */
        dConnLimit: number;
        /**
         * The limit of new connections based on destination IP.
         */
        dNewLimit: number;
        dropAbroad: boolean;
        /**
         * Indicate whether to drop ICMP protocol or not.
         */
        dropIcmp: boolean;
        /**
         * Indicate whether to drop other protocols(exclude TCP/UDP/ICMP) or not.
         */
        dropOther: boolean;
        /**
         * Indicate whether to drop TCP protocol or not.
         */
        dropTcp: boolean;
        /**
         * Indicate to drop UDP protocol or not.
         */
        dropUdp: boolean;
        /**
         * The limit of ICMP traffic rate.
         */
        icmpMbpsLimit: number;
        /**
         * Indicate to enable null connection or not.
         */
        nullConnEnable: boolean;
        /**
         * The limit of other protocols(exclude TCP/UDP/ICMP) traffic rate.
         */
        otherMbpsLimit: number;
        /**
         * The limit of concurrent connections based on source IP.
         */
        sConnLimit: number;
        /**
         * The limit of new connections based on source IP.
         */
        sNewLimit: number;
        /**
         * The limit of syn of abnormal connection check.
         */
        synLimit: number;
        /**
         * The percentage of syn in ack of abnormal connection check.
         */
        synRate: number;
        /**
         * The limit of TCP traffic.
         */
        tcpMbpsLimit: number;
        /**
         * The limit of UDP traffic rate.
         */
        udpMbpsLimit: number;
    }

    export interface GetDdosPoliciesListPacketFilter {
        /**
         * Action of port to take.
         */
        action: string;
        /**
         * End port of the destination.
         */
        dEndPort: number;
        /**
         * Start port of the destination.
         */
        dStartPort: number;
        /**
         * The depth of match.
         */
        depth: number;
        /**
         * Indicate whether to include the key word/regular expression or not.
         */
        isInclude: boolean;
        /**
         * Indicate whether to check load or not.
         */
        matchBegin: string;
        /**
         * The key word or regular expression.
         */
        matchStr: string;
        /**
         * Match type.
         */
        matchType: string;
        /**
         * The offset of watermark.
         */
        offset: number;
        /**
         * The max length of the packet.
         */
        pktLengthMax: number;
        /**
         * The minimum length of the packet.
         */
        pktLengthMin: number;
        /**
         * Protocol.
         */
        protocol: string;
        /**
         * End port of the source.
         */
        sEndPort: number;
        /**
         * Start port of the source.
         */
        sStartPort: number;
    }

    export interface GetDdosPoliciesListPortFilter {
        /**
         * Action of port to take.
         */
        action: string;
        /**
         * End port.
         */
        endPort: number;
        /**
         * The type of forbidden port, and valid values are 0, 1, 2. 0 for destination port, 1 for source port and 2 for both destination and source posts.
         */
        kind: number;
        /**
         * Protocol.
         */
        protocol: string;
        /**
         * Start port.
         */
        startPort: number;
    }

    export interface GetDdosPoliciesListWatermarkFilter {
        /**
         * Indicate whether to auto-remove the watermark or not.
         */
        autoRemove: boolean;
        /**
         * The offset of watermark.
         */
        offset: number;
        /**
         * Indicate whether to auto-remove the watermark or not.
         */
        openSwitch: boolean;
        /**
         * Port range of TCP.
         */
        tcpPortLists: string[];
        /**
         * Port range of TCP.
         */
        udpPortLists: string[];
    }

    export interface GetDdosPoliciesListWatermarkKey {
        /**
         * Content of the watermark.
         */
        content: string;
        /**
         * Create time of the DDoS policy.
         */
        createTime?: string;
        /**
         * Id of the watermark.
         */
        id: string;
        /**
         * Indicate whether to auto-remove the watermark or not.
         */
        openSwitch: boolean;
    }

    export interface GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentList {
        /**
         * Id of the policy to be queried.
         */
        policyId: string;
        /**
         * ID of the attached resource to be queried.
         */
        resourceId: string;
        /**
         * Type of the resource that the DDoS policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
         */
        resourceType: string;
    }

    export interface GetDdosPolicyCasesList {
        /**
         * App protocol set of the DDoS policy case.
         */
        appProtocols: string[];
        /**
         * App type of the DDoS policy case.
         */
        appType: string;
        /**
         * Create time of the DDoS policy case.
         */
        createTime: string;
        /**
         * Indicate whether the service involves overseas or not.
         */
        hasAbroad: string;
        /**
         * Indicate whether the service actively initiates TCP requests or not.
         */
        hasInitiateTcp: string;
        /**
         * Indicate whether the actively initiate UDP requests or not.
         */
        hasInitiateUdp: string;
        /**
         * Indicate whether the service involves VPN service or not.
         */
        hasVpn: string;
        /**
         * The max length of TCP message package.
         */
        maxTcpPackageLen: string;
        /**
         * The max length of UDP message package.
         */
        maxUdpPackageLen: string;
        /**
         * The minimum length of TCP message package.
         */
        minTcpPackageLen: string;
        /**
         * The minimum length of UDP message package.
         */
        minUdpPackageLen: string;
        /**
         * Name of the DDoS policy case.
         */
        name: string;
        /**
         * The port that actively initiates TCP requests.
         */
        peerTcpPort: string;
        /**
         * The port that actively initiates UDP requests.
         */
        peerUdpPort: string;
        /**
         * Platform set of the DDoS policy case.
         */
        platformTypes: string[];
        /**
         * Type of the resource that the DDoS policy case works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
         */
        resourceType: string;
        /**
         * ID of the DDoS policy case to be query.
         */
        sceneId: string;
        /**
         * End port of the TCP service.
         */
        tcpEndPort: string;
        /**
         * The fixed signature of TCP protocol load.
         */
        tcpFootprint: string;
        /**
         * Start port of the TCP service.
         */
        tcpStartPort: string;
        /**
         * End port of the UDP service.
         */
        udpEndPort: string;
        /**
         * The fixed signature of TCP protocol load.
         */
        udpFootprint: string;
        /**
         * Start port of the UDP service.
         */
        udpStartPort: string;
        /**
         * Web API url set.
         */
        webApiUrls: string[];
    }

    export interface GetEipList {
        createdTime: string;
        eipAddressStatus: string;
        eipBoundRscEni: string;
        eipBoundRscIns?: string;
        eipBoundRscVip: string;
        eipLists: string[];
        expiredTime: string;
        instanceId?: string;
        modifyTime: string;
        protectionStatus: string;
        region: string;
    }

    export interface GetL4RulesList {
        /**
         * The destination port of the layer 4 rule.
         */
        dPort: number;
        /**
         * Health threshold of health check.
         */
        healthCheckHealthNum: number;
        /**
         * Interval time of health check.
         */
        healthCheckInterval: number;
        /**
         * Indicates whether health check is enabled.
         */
        healthCheckSwitch: boolean;
        /**
         * HTTP Status Code. `1` means the return value `1xx` is health. `2` means the return value `2xx` is health. `4` means the return value `3xx` is health. `8` means the return value `4xx` is health. `16` means the return value `5xx` is health. If you want multiple return codes to indicate health, need to add the corresponding values.
         */
        healthCheckTimeout: number;
        /**
         * Unhealthy threshold of health check.
         */
        healthCheckUnhealthNum: number;
        /**
         * LB type of the rule, `1` for weight cycling and `2` for IP hash.
         */
        lbType: number;
        /**
         * Name of the layer 4 rule to be queried.
         */
        name: string;
        /**
         * Protocol of the rule.
         */
        protocol: string;
        /**
         * Id of the layer 4 rule to be queried.
         */
        ruleId: string;
        /**
         * The source port of the layer 4 rule.
         */
        sPort: number;
        /**
         * Indicate that the session will keep or not.
         */
        sessionSwitch: boolean;
        /**
         * Session keep time, only valid when `sessionSwitch` is true, the available value ranges from 1 to 300 and unit is second.
         */
        sessionTime: number;
        sourceLists: outputs.Dayu.GetL4RulesListSourceList[];
        /**
         * Source type, `1` for source of host, `2` for source of IP.
         */
        sourceType: number;
    }

    export interface GetL4RulesListSourceList {
        source: string;
        weight: number;
    }

    export interface GetL4RulesV2List {
        /**
         * Bind the resource ID information.
         */
        id: string;
        /**
         * Ip of the resource.
         */
        ip: string;
        /**
         * session hold switch.
         */
        keepEnable: boolean;
        /**
         * The keeptime of the layer 4 rule.
         */
        keeptime: number;
        /**
         * LB type of the rule, `1` for weight cycling and `2` for IP hash.
         */
        lbType: number;
        /**
         * Rule modification time.
         */
        modifyTime: string;
        /**
         * Protocol of the rule.
         */
        protocol: string;
        /**
         * Corresponding regional information.
         */
        region: number;
        /**
         * Remove the watermark state.
         */
        removeSwitch: boolean;
        /**
         * ID of the 4 layer rule.
         */
        ruleId: string;
        /**
         * Name of the rule.
         */
        ruleName: string;
        sourceLists: outputs.Dayu.GetL4RulesV2ListSourceList[];
        /**
         * The source port of the layer 4 rule.
         */
        sourcePort: number;
        /**
         * Source type, `1` for source of host, `2` for source of IP.
         */
        sourceType: number;
        /**
         * Virtual port of resource.
         */
        virtualPort: number;
    }

    export interface GetL4RulesV2ListSourceList {
        source: string;
        weight: number;
    }

    export interface GetL7RulesList {
        /**
         * Domain of the layer 7 rule to be queried.
         */
        domain: string;
        /**
         * HTTP Status Code. `1` means the return value `1xx` is health. `2` means the return value `2xx` is health. `4` means the return value `3xx` is health. `8` means the return value `4xx` is health. `16` means the return value `5xx` is health. If you want multiple return codes to indicate health, need to add the corresponding values.
         */
        healthCheckCode: number;
        /**
         * Health threshold of health check.
         */
        healthCheckHealthNum: number;
        /**
         * Interval time of health check.
         */
        healthCheckInterval: number;
        /**
         * Methods of health check.
         */
        healthCheckMethod: string;
        /**
         * Path of health check.
         */
        healthCheckPath: string;
        /**
         * Indicates whether health check is enabled.
         */
        healthCheckSwitch: boolean;
        /**
         * Unhealthy threshold of health check.
         */
        healthCheckUnhealthNum: number;
        /**
         * Name of the rule.
         */
        name: string;
        /**
         * Protocol of the rule.
         */
        protocol: string;
        /**
         * Id of the layer 7 rule to be queried.
         */
        ruleId: string;
        /**
         * Source list of the rule.
         */
        sourceLists: string[];
        /**
         * Source type, 1 for source of host, 2 for source of ip.
         */
        sourceType: number;
        /**
         * SSL id.
         */
        sslId: string;
        /**
         * Status of the rule. `0` for create/modify success, `2` for create/modify fail, `3` for delete success, `5` for waiting to be created/modified, `7` for waiting to be deleted and `8` for waiting to get SSL id.
         */
        status: number;
        /**
         * Indicate the rule will take effect or not.
         */
        switch: boolean;
        /**
         * Threshold of the rule.
         */
        threshold: number;
    }

    export interface GetL7RulesV2List {
        /**
         * CC protection status of HTTPS protocol, the value is [0 (off), 1 (on)].
         */
        ccEnable: number;
        /**
         * CC protection level of HTTPS protocol.
         */
        ccLevel: string;
        /**
         * CC protection status, value [0(off), 1(on)].
         */
        ccStatus: number;
        /**
         * CC protection threshold of HTTPS protocol.
         */
        ccThreshold: number;
        /**
         * The source of the certificate.
         */
        certType: number;
        /**
         * Domain of resource.
         */
        domain: string;
        /**
         * Whether to enable the Https protocol to use Http back-to-source, take the value [0 (off), 1 (on)], default is off.
         */
        httpsToHttpEnable: number;
        /**
         * Id of the resource.
         */
        id: string;
        /**
         * Ip of the resource.
         */
        ip: string;
        /**
         * Session keep switch, value [0 (session keep closed), 1 (session keep open)].
         */
        keepEnable: number;
        /**
         * Session hold time, in seconds.
         */
        keepTime: number;
        /**
         * Load balancing mode, the value is [1 (weighted round-robin)].
         */
        lbType: number;
        /**
         * Modify time of resource.
         */
        modifyTime: string;
        /**
         * Protocol of resource, value range [`http`, `https`].
         */
        protocol: string;
        /**
         * The area code.
         */
        region: number;
        /**
         * Rule description.
         */
        ruleName: string;
        /**
         * Source list of the rule.
         */
        sourceLists: outputs.Dayu.GetL7RulesV2ListSourceList[];
        /**
         * Back-to-origin method, value [1 (domain name back-to-source), 2 (IP back-to-source)].
         */
        sourceType: number;
        /**
         * SSL id of the resource.
         */
        sslId: string;
        /**
         * Rule status, value [0 (rule configuration is successful), 1 (rule configuration is in effect), 2 (rule configuration fails), 3 (rule deletion is in effect), 5 (rule deletion fails), 6 (rule is waiting to be configured), 7 (rule pending deletion), 8 (rule pending configuration certificate)].
         */
        status: number;
        /**
         * Virtual port of resource.
         */
        virtualPort: number;
    }

    export interface GetL7RulesV2ListSourceList {
        /**
         * Back-to-source IP or domain name.
         */
        source: string;
        /**
         * Weight value, take value [0,100].
         */
        weight: number;
    }

    export interface L4RuleSourceList {
        /**
         * Source IP or domain, valid format of ip is like `1.1.1.1` and valid format of host source is like `abc.com`.
         */
        source: string;
        /**
         * Weight of the source, the valid value ranges from 0 to 100.
         */
        weight: number;
    }

    export interface L4RuleV2Rules {
        keepEnable: boolean;
        keeptime: number;
        lbType: number;
        protocol: string;
        region: number;
        removeSwitch: boolean;
        ruleName: string;
        sourceLists: outputs.Dayu.L4RuleV2RulesSourceList[];
        sourcePort: number;
        sourceType: number;
        virtualPort: number;
    }

    export interface L4RuleV2RulesSourceList {
        source: string;
        weight: number;
    }

    export interface L7RuleV2Rule {
        /**
         * HTTPS protocol CC protection status, value [0 (off), 1 (on)], defaule is 0.
         */
        ccEnable?: number;
        /**
         * The source of the certificate must be filled in when the forwarding protocol is https, the value [2 (Tencent Cloud Hosting Certificate)], and 0 when the forwarding protocol is http.
         */
        certType?: number;
        /**
         * Domain of the rule.
         */
        domain: string;
        /**
         * Whether to enable the Https protocol to use Http back-to-source, take the value [0 (off), 1 (on)], do not fill in the default is off, defaule is 0.
         */
        httpsToHttpEnable?: number;
        /**
         * session hold switch.
         */
        keepEnable: number;
        /**
         * The keeptime of the layer 4 rule.
         */
        keeptime: number;
        /**
         * LB type of the rule, `1` for weight cycling and `2` for IP hash.
         */
        lbType: number;
        /**
         * Protocol of the rule.
         */
        protocol: string;
        sourceLists: outputs.Dayu.L7RuleV2RuleSourceList[];
        /**
         * Source type, `1` for source of host, `2` for source of IP.
         */
        sourceType: number;
        /**
         * When the certificate source is a Tencent Cloud managed certificate, this field must be filled in with the managed certificate ID.
         */
        sslId?: string;
    }

    export interface L7RuleV2RuleSourceList {
        source: string;
        weight: number;
    }
}

export namespace Dbbrain {
    export interface GetDiagEventsList {
        /**
         * diag item.
         */
        diagItem: string;
        /**
         * diag type.
         */
        diagType: string;
        /**
         * end time.
         */
        endTime: string;
        /**
         * event id.
         */
        eventId: number;
        /**
         * instance id.
         */
        instanceId: string;
        /**
         * metric.
         */
        metric: string;
        /**
         * outline.
         */
        outline: string;
        /**
         * region.
         */
        region: string;
        /**
         * severity.
         */
        severity: number;
        /**
         * start time.
         */
        startTime: string;
    }

    export interface GetDiagHistoryEvent {
        /**
         * Description of the diagnostic item.
         */
        diagItem: string;
        /**
         * Diagnostic type.
         */
        diagType: string;
        /**
         * End time, such as `2019-09-11 12:13:14`, the interval between the end time and the start time can be up to 2 days.
         */
        endTime: string;
        /**
         * Event unique ID.
         */
        eventId: number;
        /**
         * instance id.
         */
        instanceId: string;
        /**
         * reserved text. Note: This field may return null, indicating that no valid value can be obtained.
         */
        metric: string;
        /**
         * Diagnostic summary.
         */
        outline: string;
        /**
         * region.
         */
        region: string;
        /**
         * severity. The severity is divided into 5 levels, according to the degree of impact from high to low: 1: Fatal, 2: Serious, 3: Warning, 4: Prompt, 5: Healthy.
         */
        severity: number;
        /**
         * Start time, such as `2019-09-10 12:13:14`.
         */
        startTime: string;
    }

    export interface GetHealthScoresData {
        /**
         * The total number of abnormal events.
         */
        eventsTotalCount: number;
        /**
         * Health level, such as: HEALTH, SUB_HEALTH, RISK, HIGH_RISK.
         */
        healthLevel: string;
        /**
         * Health score.
         */
        healthScore: number;
        /**
         * Exception details.
         */
        issueTypes: outputs.Dbbrain.GetHealthScoresDataIssueType[];
    }

    export interface GetHealthScoresDataIssueType {
        /**
         * unusual event.
         */
        events: outputs.Dbbrain.GetHealthScoresDataIssueTypeEvent[];
        /**
         * Index classification: AVAILABILITY: availability, MAINTAINABILITY: maintainability, PERFORMANCE, performance, RELIABILITY reliability.
         */
        issueType: string;
        /**
         * The total number of abnormal events.
         */
        totalCount: number;
    }

    export interface GetHealthScoresDataIssueTypeEvent {
        /**
         * Number of alerts.
         */
        count: number;
        /**
         * Diagnostic type.
         */
        diagType: string;
        /**
         * End Time.
         */
        endTime: string;
        /**
         * Event ID.
         */
        eventId: number;
        /**
         * reserved text.
         */
        metric: string;
        /**
         * overview.
         */
        outline: string;
        /**
         * Points deducted.
         */
        scoreLost: number;
        /**
         * severity. The severity is divided into 5 levels, according to the degree of impact from high to low: 1: Fatal, 2: Serious, 3: Warning, 4: Prompt, 5: Healthy.
         */
        severity: number;
        /**
         * Starting time.
         */
        startTime: string;
    }

    export interface GetSecurityAuditLogExportTasksList {
        /**
         * async request id.
         */
        asyncRequestId: number;
        /**
         * create time.
         */
        createTime: string;
        /**
         * danger level list.
         */
        dangerLevels: number[];
        /**
         * end time.
         */
        endTime: string;
        /**
         * log end time.
         */
        logEndTime: string;
        /**
         * log start time.
         */
        logStartTime: string;
        /**
         * task progress.
         */
        progress: number;
        /**
         * start time.
         */
        startTime: string;
        /**
         * status.
         */
        status: string;
        /**
         * the total size of log.
         */
        totalSize: number;
    }

    export interface GetSlowLogTimeSeriesStatsSeriesData {
        /**
         * Monitor metrics.
         */
        series: outputs.Dbbrain.GetSlowLogTimeSeriesStatsSeriesDataSeries[];
        /**
         * Statistics start time.
         */
        timestamps: number[];
    }

    export interface GetSlowLogTimeSeriesStatsSeriesDataSeries {
        /**
         * Indicator name.
         */
        metric: string;
        /**
         * Indicator unit.
         */
        unit: string;
        /**
         * Index value. Note: This field may return null, indicating that no valid value can be obtained.
         */
        values: number[];
    }

    export interface GetSlowLogTimeSeriesStatsTimeSeries {
        /**
         * total.
         */
        count: number;
        /**
         * Statistics start time.
         */
        timestamp: number;
    }

    export interface GetSlowLogTopSqlsRow {
        /**
         * Execution times.
         */
        execTimes: number;
        /**
         * SQL total lock waiting time, in seconds.
         */
        lockTime: number;
        /**
         * Average lock waiting time, in seconds.
         */
        lockTimeAvg: number;
        /**
         * Maximum lock waiting time, in seconds.
         */
        lockTimeMax: number;
        /**
         * Minimum lock waiting time, in seconds.
         */
        lockTimeMin: number;
        /**
         * The ratio of the total lock waiting time of SQL, in %.
         */
        lockTimeRatio: number;
        /**
         * MD5 value of SOL template.
         */
        md5: string;
        /**
         * Total time, in seconds.
         */
        queryTime: number;
        /**
         * Average execution time, in seconds.
         */
        queryTimeAvg: number;
        /**
         * The maximum execution time, in seconds.
         */
        queryTimeMax: number;
        /**
         * The minimum execution time, in seconds.
         */
        queryTimeMin: number;
        /**
         * Total time-consuming ratio, unit %.
         */
        queryTimeRatio: number;
        /**
         * total scan lines.
         */
        rowsExamined: number;
        /**
         * average number of lines scanned.
         */
        rowsExaminedAvg: number;
        /**
         * Maximum number of scan lines.
         */
        rowsExaminedMax: number;
        /**
         * Minimum number of scan lines.
         */
        rowsExaminedMin: number;
        /**
         * The proportion of the total number of scanned lines, unit %.
         */
        rowsExaminedRatio: number;
        /**
         * total number of rows returned.
         */
        rowsSent: number;
        /**
         * average number of rows returned.
         */
        rowsSentAvg: number;
        /**
         * Maximum number of rows returned.
         */
        rowsSentMax: number;
        /**
         * Minimum number of rows returned.
         */
        rowsSentMin: number;
        /**
         * The proportion of the total number of rows returned, in %.
         */
        rowsSentRatio: number;
        /**
         * DB name.
         */
        schema: string;
        /**
         * sql template.
         */
        sqlTemplate: string;
        /**
         * SQL with parameters (random).
         */
        sqlText: string;
    }

    export interface GetSlowLogTopSqlsSchemaList {
        /**
         * DB name.
         */
        schema: string;
    }

    export interface GetSlowLogUserHostStatsItem {
        /**
         * The number of slow logs for this source address.
         */
        count: number;
        /**
         * The ratio of the number of slow logs of the source address to the total, in %.
         */
        ratio: number;
        /**
         * source address.
         */
        userHost: string;
    }

    export interface GetSqlFiltersList {
        /**
         * create time.
         */
        createTime: string;
        /**
         * current concurrency.
         */
        currentConcurrency: number;
        /**
         * current time.
         */
        currentTime: string;
        /**
         * expire time.
         */
        expireTime: string;
        /**
         * task id.
         */
        id: number;
        /**
         * maxmum concurrency.
         */
        maxConcurrency: number;
        /**
         * origin keys.
         */
        originKeys: string;
        /**
         * origin rule.
         */
        originRule: string;
        /**
         * rejected sql count.
         */
        rejectedSqlCount: number;
        /**
         * sql type, optional value is SELECT, UPDATE, DELETE, INSERT, REPLACE.
         */
        sqlType: string;
        /**
         * task status, optional value is RUNNING, FINISHED, TERMINATED.
         */
        status: string;
    }

    export interface ModifyDiagDbInstanceOperationInstanceConfs {
        /**
         * Database inspection switch, Yes/No.
         */
        dailyInspection?: string;
        /**
         * Instance overview switch, Yes/No.
         */
        overviewDisplay?: string;
    }

    export interface SqlFilterSessionToken {
        /**
         * password.
         */
        password: string;
        /**
         * user name.
         */
        user: string;
    }

    export interface TdsqlAuditLogFilter {
        /**
         * Number of affected rows. Indicates filtering audit logs whose affected rows are greater than this value.
         */
        affectRows?: number;
        /**
         * Database name.
         */
        dbNames?: string[];
        /**
         * Execution time. The unit is: us. It means to filter the audit logs whose execution time is greater than this value.
         */
        execTime?: number;
        /**
         * Client Address.
         */
        hosts?: string[];
        /**
         * Return the number of rows. It means to filter the audit log with the number of returned rows greater than this value.
         */
        sentRows?: number;
        /**
         * Username.
         */
        users?: string[];
    }
}

export namespace Dc {
    export interface GetGatewayCcnRoutesInstanceList {
        /**
         * As path list of the BGP.
         */
        asPaths: string[];
        /**
         * A network address segment of IDC.
         */
        cidrBlock: string;
        /**
         * ID of the DCG to be queried.
         */
        dcgId: string;
        /**
         * ID of the DCG route.
         */
        routeId: string;
    }

    export interface GetGatewayInstancesInstanceList {
        /**
         * Type of CCN route. Valid values: `BGP` and `STATIC`.
         */
        cnnRouteType: string;
        /**
         * Creation time of resource.
         */
        createTime: string;
        /**
         * ID of the DCG to be queried.
         */
        dcgId: string;
        /**
         * IP of the DCG.
         */
        dcgIp: string;
        /**
         * Indicates whether the BGP is enabled.
         */
        enableBgp: boolean;
        /**
         * Type of the gateway. Valid values: `NORMAL` and `NAT`. Default is `NORMAL`.
         */
        gatewayType: string;
        /**
         * Name of the DCG to be queried.
         */
        name: string;
        /**
         * Type of associated network. Valid values: `VPC` and `CCN`.
         */
        networkInstanceId: string;
        /**
         * IP of the DCG.
         */
        networkType: string;
    }

    export interface GetInstancesInstanceList {
        /**
         * Access point ID of tne DC.
         */
        accessPointId: string;
        /**
         * Bandwidth of the DC.
         */
        bandwidth: number;
        /**
         * The circuit code provided by the operator for the DC.
         */
        circuitCode: string;
        /**
         * Creation time of resource.
         */
        createTime: string;
        /**
         * Interconnect IP of the DC within client. Note: This field may return null, indicating that no valid values are taken.
         */
        customerAddress: string;
        /**
         * Applicant email of the DC, the default is obtained from the account. Note: This field may return null, indicating that no valid values are taken.
         */
        customerEmail: string;
        /**
         * Applicant name of the DC, the default is obtained from the account. Note: This field may return null, indicating that no valid values are taken.
         */
        customerName: string;
        /**
         * Applicant phone number of the DC, the default is obtained from the account. Note: This field may return null, indicating that no valid values are taken.
         */
        customerPhone: string;
        /**
         * ID of the DC to be queried.
         */
        dcId: string;
        /**
         * Enable time of resource.
         */
        enabledTime: string;
        /**
         * Expire date of resource.
         */
        expiredTime: string;
        /**
         * Contact of reporting a faulty. Note: This field may return null, indicating that no valid values are taken.
         */
        faultReportContactPerson: string;
        /**
         * Phone number of reporting a faulty. Note: This field may return null, indicating that no valid values are taken.
         */
        faultReportContactPhone: string;
        /**
         * Operator of the DC, and available values include `ChinaTelecom`, `ChinaMobile`, `ChinaUnicom`, `In-houseWiring`, `ChinaOther` and `InternationalOperator`.
         */
        lineOperator: string;
        /**
         * The DC location where the connection is located.
         */
        location: string;
        /**
         * Name of the DC to be queried.
         */
        name: string;
        /**
         * Port type of the DC in client, and available values include `100Base-T`, `1000Base-T`, `1000Base-LX`, `10GBase-T` and `10GBase-LR`. The default value is `1000Base-LX`.
         */
        portType: string;
        /**
         * ID of the redundant DC.
         */
        redundantDcId: string;
        /**
         * State of the DC, and available values include `REJECTED`, `TOPAY`, `PAID`, `ALLOCATED`, `AVAILABLE`, `DELETING` and `DELETED`.
         */
        state: string;
        /**
         * Interconnect IP of the DC within Tencent. Note: This field may return null, indicating that no valid values are taken.
         */
        tencentAddress: string;
    }

}

export namespace Dcdb {
    export interface AccountPrivilegesAccount {
        /**
         * account host.
         */
        host: string;
        /**
         * account name.
         */
        user: string;
    }

    export interface AccountPrivilegesColumnPrivileges {
        /**
         * Database column name.
         */
        column: string;
        /**
         * The name of database.
         */
        database: string;
        /**
         * Permission information.
         */
        privileges: string[];
        /**
         * Database table name.
         */
        table: string;
    }

    export interface AccountPrivilegesDatabasePrivileges {
        /**
         * The name of database.
         */
        database: string;
        /**
         * Permission information.
         */
        privileges: string[];
    }

    export interface AccountPrivilegesTablePrivileges {
        /**
         * The name of database.
         */
        database: string;
        /**
         * Permission information.
         */
        privileges: string[];
        /**
         * Database table name.
         */
        table: string;
    }

    export interface AccountPrivilegesViewPrivileges {
        /**
         * The name of database.
         */
        database: string;
        /**
         * Permission information.
         */
        privileges: string[];
        /**
         * Database view name.
         */
        view: string;
    }

    export interface DbInstanceInitParam {
        /**
         * The name of parameter.
         */
        param: string;
        /**
         * The value of parameter.
         */
        value: string;
    }

    export interface DbInstanceResourceTag {
        /**
         * The key of tag.
         */
        tagKey: string;
        /**
         * The value of tag.
         */
        tagValue: string;
    }

    export interface DbParametersParams {
        /**
         * The name of parameter.
         */
        param: string;
        /**
         * The value of parameter.
         */
        value: string;
    }

    export interface GetAccountsList {
        /**
         * Creation time.
         */
        createTime: string;
        /**
         * If the standby machine delay exceeds the setting value of this parameter, the system will consider that the standby machine is faulty and recommend that the parameter value be greater than 10. This parameter takes effect when ReadOnly selects 1 and 2.
         */
        delayThresh: number;
        /**
         * User remarks info.
         */
        description: string;
        /**
         * From which host the user can log in (corresponding to the host field of MySQL users, UserName + Host uniquely identifies a user, in the form of IP, the IP segment ends with %; supports filling in %; if it is empty, it defaults to %).
         */
        host: string;
        /**
         * Read-only flag, 0: No, 1: The SQL request of this account is preferentially executed on the standby machine, and the host is selected for execution when the standby machine is unavailable. 2: The standby machine is preferentially selected for execution, and the operation fails when the standby machine is unavailable.
         */
        readOnly: number;
        /**
         * For read-only accounts, set the policy whether to fix the standby machine, 0: not fix the standby machine, that is, the standby machine will not disconnect from the client if it does not meet the conditions, the Proxy selects other available standby machines, 1: the standby machine will be disconnected if the conditions are not met, Make sure a connection is secured to the standby machine.
         */
        slaveConst: number;
        /**
         * Last update time.
         */
        updateTime: string;
        /**
         * User Name.
         */
        userName: string;
    }

    export interface GetDatabaseObjectsFunc {
        /**
         * The name of function.
         */
        func: string;
    }

    export interface GetDatabaseObjectsProc {
        /**
         * The name of procedure.
         */
        proc: string;
    }

    export interface GetDatabaseObjectsTable {
        /**
         * The name of table.
         */
        table: string;
    }

    export interface GetDatabaseObjectsView {
        /**
         * The name of view.
         */
        view: string;
    }

    export interface GetDatabaseTablesCol {
        /**
         * The name of column.
         */
        col: string;
        /**
         * Column type.
         */
        type: string;
    }

    export interface GetDatabasesList {
        /**
         * Database Name.
         */
        dbName: string;
    }

    export interface GetInstancesList {
        /**
         * app id.
         */
        appId: number;
        /**
         * auto renew flag.
         */
        autoRenewFlag: number;
        /**
         * create time.
         */
        createTime: string;
        /**
         * db engine.
         */
        dbEngine: string;
        /**
         * db engine version.
         */
        dbVersion: string;
        /**
         * instance id.
         */
        instanceId: string;
        /**
         * instance name.
         */
        instanceName: string;
        /**
         * instance type.
         */
        instanceType: number;
        /**
         * aduit support, 0:support, 1:unsupport.
         */
        isAuditSupported: number;
        /**
         * tmp instance mark.
         */
        isTmp: number;
        /**
         * isolated time.
         */
        isolatedTimestamp: string;
        /**
         * memory.
         */
        memory: number;
        /**
         * node count.
         */
        nodeCount: number;
        /**
         * pay mode.
         */
        paymode: string;
        /**
         * expired time.
         */
        periodEndTime: string;
        /**
         * project id.
         */
        projectId: number;
        /**
         * region.
         */
        region: string;
        /**
         * resource tags.
         */
        resourceTags: outputs.Dcdb.GetInstancesListResourceTag[];
        /**
         * shard count.
         */
        shardCount: number;
        /**
         * shard detail.
         */
        shardDetails: outputs.Dcdb.GetInstancesListShardDetail[];
        /**
         * status.
         */
        status: number;
        /**
         * status description.
         */
        statusDesc: string;
        /**
         * memory, the unit is GB.
         */
        storage: number;
        /**
         * subnet id, valid when IsFilterVpc is true.
         */
        subnetId: number;
        /**
         * account uin.
         */
        uin: string;
        /**
         * update time.
         */
        updateTime: string;
        /**
         * vip.
         */
        vip: string;
        /**
         * vpc id, valid when IsFilterVpc is true.
         */
        vpcId: number;
        /**
         * vport.
         */
        vport: number;
        /**
         * wan domain.
         */
        wanDomain: string;
        /**
         * wan port.
         */
        wanPort: number;
        /**
         * wan status, 0:nonactivated, 1:activated, 2:closed, 3:activating.
         */
        wanStatus: number;
        /**
         * wan vip.
         */
        wanVip: string;
    }

    export interface GetInstancesListResourceTag {
        /**
         * tag key.
         */
        tagKey: string;
        /**
         * tag value.
         */
        tagValue: string;
    }

    export interface GetInstancesListShardDetail {
        /**
         * cpu cores.
         */
        cpu: number;
        /**
         * shard create time.
         */
        createtime: string;
        /**
         * memory.
         */
        memory: number;
        /**
         * node count.
         */
        nodeCount: number;
        /**
         * shard id.
         */
        shardId: number;
        /**
         * shard instance id.
         */
        shardInstanceId: string;
        /**
         * shard serial id.
         */
        shardSerialId: string;
        /**
         * status.
         */
        status: number;
        /**
         * memory, the unit is GB.
         */
        storage: number;
    }

    export interface GetParametersList {
        /**
         * params constraint.
         */
        constraints: outputs.Dcdb.GetParametersListConstraint[];
        /**
         * default value.
         */
        default: string;
        /**
         * have set value.
         */
        haveSetValue: boolean;
        /**
         * need restart.
         */
        needRestart: boolean;
        /**
         * parameter name.
         */
        param: string;
        /**
         * parameter value.
         */
        value: string;
    }

    export interface GetParametersListConstraint {
        /**
         * a list of optional values of type num.
         */
        enum: string;
        /**
         * range constraint.
         */
        ranges: outputs.Dcdb.GetParametersListConstraintRange[];
        /**
         * constraint type is string.
         */
        string: string;
        /**
         * type.
         */
        type: string;
    }

    export interface GetParametersListConstraintRange {
        /**
         * max value.
         */
        max: string;
        /**
         * min value.
         */
        min: string;
    }

    export interface GetSecurityGroupsList {
        /**
         * create time.
         */
        createTime: string;
        /**
         * inbound rules.
         */
        inbounds: outputs.Dcdb.GetSecurityGroupsListInbound[];
        /**
         * outbound rules.
         */
        outbounds: outputs.Dcdb.GetSecurityGroupsListOutbound[];
        /**
         * project id.
         */
        projectId: number;
        /**
         * security group id.
         */
        securityGroupId: string;
        /**
         * security group name.
         */
        securityGroupName: string;
    }

    export interface GetSecurityGroupsListInbound {
        /**
         * policy action.
         */
        action: string;
        /**
         * cidr ip.
         */
        cidrIp: string;
        /**
         * internet protocol.
         */
        ipProtocol: string;
        /**
         * port range.
         */
        portRange: string;
    }

    export interface GetSecurityGroupsListOutbound {
        /**
         * policy action.
         */
        action: string;
        /**
         * cidr ip.
         */
        cidrIp: string;
        /**
         * internet protocol.
         */
        ipProtocol: string;
        /**
         * port range.
         */
        portRange: string;
    }

    export interface GetShardsList {
        /**
         * cpu cores.
         */
        cpu: number;
        /**
         * create time.
         */
        createTime: string;
        /**
         * instance id.
         */
        instanceId: string;
        /**
         * memory, the unit is GB.
         */
        memory: number;
        /**
         * memory usage.
         */
        memoryUsage: number;
        /**
         * node count.
         */
        nodeCount: number;
        /**
         * pay mode.
         */
        paymode: string;
        /**
         * expired time.
         */
        periodEndTime: string;
        /**
         * project id.
         */
        projectId: number;
        /**
         * proxy version.
         */
        proxyVersion: string;
        /**
         * the range of shard key.
         */
        range: string;
        /**
         * region.
         */
        region: string;
        /**
         * shard instance id.
         */
        shardInstanceId: string;
        /**
         * shard master zone.
         */
        shardMasterZone: string;
        /**
         * shard serial id.
         */
        shardSerialId: string;
        /**
         * shard slave zones.
         */
        shardSlaveZones: string[];
        /**
         * status.
         */
        status: number;
        /**
         * status description.
         */
        statusDesc: string;
        /**
         * memory, the unit is GB.
         */
        storage: number;
        /**
         * storage usage.
         */
        storageUsage: number;
        /**
         * subnet id.
         */
        subnetId: string;
        /**
         * vpc id.
         */
        vpcId: string;
        /**
         * zone.
         */
        zone: string;
    }

    export interface HourdbInstanceResourceTag {
        /**
         * tag key.
         */
        tagKey: string;
        /**
         * tag value.
         */
        tagValue: string;
    }

}

export namespace Dcx {
    export interface GetInstancesInstanceList {
        /**
         * Bandwidth of the DC.
         */
        bandwidth: number;
        /**
         * BGP ASN of the user.
         */
        bgpAsn: number;
        /**
         * BGP key of the user.
         */
        bgpAuthKey: string;
        /**
         * Creation time of resource.
         */
        createTime: string;
        /**
         * Interconnect IP of the DC within client.
         */
        customerAddress: string;
        /**
         * ID of the DC.
         */
        dcId: string;
        /**
         * ID of the DC Gateway. Currently only new in the console.
         */
        dcgId: string;
        /**
         * ID of the dedicated tunnels to be queried.
         */
        dcxId: string;
        /**
         * Name of the dedicated tunnels to be queried.
         */
        name: string;
        /**
         * The region of the dedicated tunnel.
         */
        networkRegion: string;
        /**
         * Type of the network. Valid values: `VPC`, `BMVPC` and `CCN`. The default value is `VPC`.
         */
        networkType: string;
        /**
         * Static route, the network address of the user IDC.
         */
        routeFilterPrefixes: string[];
        /**
         * Type of the route. Valid values: `BGP` and `STATIC`. The default value is `BGP`.
         */
        routeType: string;
        /**
         * State of the dedicated tunnels. Valid values: `PENDING`, `ALLOCATING`, `ALLOCATED`, `ALTERING`, `DELETING`, `DELETED`, `COMFIRMING` and `REJECTED`.
         */
        state: string;
        /**
         * Interconnect IP of the DC within Tencent.
         */
        tencentAddress: string;
        /**
         * Vlan of the dedicated tunnels.  Valid value ranges: [0-3000]. `0` means that only one tunnel can be created for the physical connect.
         */
        vlan: number;
        /**
         * ID of the VPC or BMVPC.
         */
        vpcId: string;
    }

}

export namespace Dnats {
    export interface GetInstanceDnatList {
        /**
         * Description of the NAT forward.
         */
        description?: string;
        /**
         * Network address of the EIP.
         */
        elasticIp: string;
        /**
         * Port of the EIP.
         */
        elasticPort: string;
        /**
         * ID of the NAT gateway.
         */
        natId: string;
        /**
         * Network address of the backend service.
         */
        privateIp: string;
        /**
         * Port of intranet.
         */
        privatePort: string;
        /**
         * Type of the network protocol. Valid values: `TCP` and `UDP`.
         */
        protocol: string;
        /**
         * ID of the VPC.
         */
        vpcId: string;
    }

}

export namespace Dnspod {
    export interface GetRecordsRecordCountInfo {
        /**
         * The count of records returned in the list.
         */
        listCount: number;
        /**
         * The subdomain count.
         */
        subdomainCount: number;
        /**
         * The total record count.
         */
        totalCount: number;
    }

    export interface GetRecordsResult {
        /**
         * The record split zone.
         */
        line: string;
        /**
         * The split zone ID.
         */
        lineId: string;
        /**
         * The monitoring status of the record. Valid values: OK (normal), WARN (warning), and DOWN (downtime). It is empty if no monitoring is set or the monitoring is suspended.
         */
        monitorStatus: string;
        /**
         * The MX value, applicable to the MX record only.
         * Note: This field may return null, indicating that no valid values can be obtained.
         */
        mx: number;
        /**
         * The host name.
         */
        name: string;
        /**
         * Record ID.
         */
        recordId: number;
        /**
         * The record remarks.
         */
        remark: string;
        /**
         * The record status. Valid values: ENABLE (enabled), DISABLE (disabled).
         */
        status: string;
        /**
         * The record cache time.
         */
        ttl: number;
        /**
         * The record type.
         */
        type: string;
        /**
         * The update time.
         */
        updatedOn: string;
        /**
         * The record value.
         */
        value: string;
        /**
         * The record weight, which is required for round-robin DNS records.
         */
        weight: number;
    }

}

export namespace Domains {
    export interface GetInstanceList {
        /**
         * Whether the domain auto renew, 0 - manual renew, 1 - auto renew.
         */
        autoRenew: number;
        /**
         * Domain buy status.
         */
        buyStatus: string;
        /**
         * Domain code ltd.
         */
        codeTld: string;
        /**
         * Domain create time.
         */
        creationDate: string;
        /**
         * Domain ID.
         */
        domainId: string;
        /**
         * Domain name.
         */
        domainName: string;
        /**
         * Domain expiration date.
         */
        expirationDate: string;
        /**
         * Whether the domain is premium.
         */
        isPremium: boolean;
        /**
         * Domain ltd.
         */
        tld: string;
    }

}

export namespace Dts {
    export interface CompareTaskObjects {
        /**
         * object items.
         */
        objectItems: outputs.Dts.CompareTaskObjectsObjectItem[];
        /**
         * object mode.
         */
        objectMode: string;
    }

    export interface CompareTaskObjectsObjectItem {
        /**
         * database mode.
         */
        dbMode: string;
        /**
         * database name.
         */
        dbName: string;
        /**
         * schema name.
         */
        schemaName: string;
        /**
         * table mode.
         */
        tableMode: string;
        /**
         * table list.
         */
        tables: outputs.Dts.CompareTaskObjectsObjectItemTable[];
        /**
         * view mode.
         */
        viewMode: string;
        /**
         * view list.
         */
        views: outputs.Dts.CompareTaskObjectsObjectItemView[];
    }

    export interface CompareTaskObjectsObjectItemTable {
        /**
         * table name.
         */
        tableName: string;
    }

    export interface CompareTaskObjectsObjectItemView {
        /**
         * view name.
         */
        viewName: string;
    }

    export interface GetCompareTasksList {
        /**
         * compare check info.
         */
        checkProcesses: outputs.Dts.GetCompareTasksListCheckProcess[];
        /**
         * compare processing info.
         */
        compareProcesses: outputs.Dts.GetCompareTasksListCompareProcess[];
        /**
         * compare task id.
         */
        compareTaskId: string;
        /**
         * conclusion.
         */
        conclusion: string;
        /**
         * config.
         */
        configs: outputs.Dts.GetCompareTasksListConfig[];
        /**
         * create time.
         */
        createdAt: string;
        /**
         * finished time.
         */
        finishedAt: string;
        /**
         * job id.
         */
        jobId: string;
        /**
         * start time.
         */
        startedAt: string;
        /**
         * compare task status, optional value is created/readyRun/running/success/stopping/failed/canceled.
         */
        status: string;
        /**
         * compare task name.
         */
        taskName: string;
    }

    export interface GetCompareTasksListCheckProcess {
        /**
         * message.
         */
        message: string;
        /**
         * progress info.
         */
        percent: number;
        /**
         * compare task status, optional value is created/readyRun/running/success/stopping/failed/canceled.
         */
        status: string;
        /**
         * all step counts.
         */
        stepAll: number;
        /**
         * current step number.
         */
        stepNow: number;
        /**
         * step info.
         */
        steps: outputs.Dts.GetCompareTasksListCheckProcessStep[];
    }

    export interface GetCompareTasksListCheckProcessStep {
        errors?: outputs.Dts.GetCompareTasksListCheckProcessStepError[];
        /**
         * progress info.
         */
        percent?: number;
        startTime?: string;
        /**
         * compare task status, optional value is created/readyRun/running/success/stopping/failed/canceled.
         */
        status?: string;
        stepId?: string;
        stepMessage?: string;
        stepName?: string;
        stepNo?: number;
        warnings?: outputs.Dts.GetCompareTasksListCheckProcessStepWarning[];
    }

    export interface GetCompareTasksListCheckProcessStepError {
        helpDoc?: string;
        /**
         * message.
         */
        message?: string;
        solution?: string;
    }

    export interface GetCompareTasksListCheckProcessStepWarning {
        helpDoc?: string;
        /**
         * message.
         */
        message?: string;
        solution?: string;
    }

    export interface GetCompareTasksListCompareProcess {
        /**
         * message.
         */
        message: string;
        /**
         * progress info.
         */
        percent: number;
        /**
         * compare task status, optional value is created/readyRun/running/success/stopping/failed/canceled.
         */
        status: string;
        /**
         * all step counts.
         */
        stepAll: number;
        /**
         * current step number.
         */
        stepNow: number;
        /**
         * step info.
         */
        steps: outputs.Dts.GetCompareTasksListCompareProcessStep[];
    }

    export interface GetCompareTasksListCompareProcessStep {
        errors?: outputs.Dts.GetCompareTasksListCompareProcessStepError[];
        /**
         * progress info.
         */
        percent?: number;
        startTime?: string;
        /**
         * compare task status, optional value is created/readyRun/running/success/stopping/failed/canceled.
         */
        status?: string;
        stepId?: string;
        stepMessage?: string;
        stepName?: string;
        stepNo?: number;
        warnings?: outputs.Dts.GetCompareTasksListCompareProcessStepWarning[];
    }

    export interface GetCompareTasksListCompareProcessStepError {
        helpDoc?: string;
        /**
         * message.
         */
        message?: string;
        solution?: string;
    }

    export interface GetCompareTasksListCompareProcessStepWarning {
        helpDoc?: string;
        /**
         * message.
         */
        message?: string;
        solution?: string;
    }

    export interface GetCompareTasksListConfig {
        /**
         * object items.
         */
        objectItems: outputs.Dts.GetCompareTasksListConfigObjectItem[];
        /**
         * object mode.
         */
        objectMode: string;
    }

    export interface GetCompareTasksListConfigObjectItem {
        dbMode?: string;
        dbName?: string;
        schemaName?: string;
        tableMode?: string;
        tables?: outputs.Dts.GetCompareTasksListConfigObjectItemTable[];
        viewMode?: string;
        views?: outputs.Dts.GetCompareTasksListConfigObjectItemView[];
    }

    export interface GetCompareTasksListConfigObjectItemTable {
        tableName?: string;
    }

    export interface GetCompareTasksListConfigObjectItemView {
        viewName?: string;
    }

    export interface GetMigrateJobsList {
        /**
         * action info.
         */
        actions: outputs.Dts.GetMigrateJobsListAction[];
        /**
         * brief message for migrate error.
         */
        briefMsg: string;
        /**
         * compare task info.
         */
        compareTasks: outputs.Dts.GetMigrateJobsListCompareTask[];
        /**
         * create time.
         */
        createTime: string;
        /**
         * destination info.
         */
        dstInfos: outputs.Dts.GetMigrateJobsListDstInfo[];
        /**
         * end time.
         */
        endTime: string;
        /**
         * expected run time.
         */
        expectRunTime: string;
        /**
         * job id.
         */
        jobId: string;
        /**
         * job name.
         */
        jobName: string;
        /**
         * run mode.
         */
        runMode?: string;
        /**
         * source info.
         */
        srcInfos: outputs.Dts.GetMigrateJobsListSrcInfo[];
        /**
         * start time.
         */
        startTime: string;
        /**
         * migrate status.
         */
        status: string;
        /**
         * step infos.
         */
        stepInfos: outputs.Dts.GetMigrateJobsListStepInfo[];
        /**
         * tag list.
         */
        tags: outputs.Dts.GetMigrateJobsListTag[];
        /**
         * trade info.
         */
        tradeInfos: outputs.Dts.GetMigrateJobsListTradeInfo[];
        /**
         * update time.
         */
        updateTime: string;
    }

    export interface GetMigrateJobsListAction {
        /**
         * all action list.
         */
        allActions: string[];
        /**
         * allowed action list.
         */
        allowedActions: string[];
    }

    export interface GetMigrateJobsListCompareTask {
        /**
         * compare task id.
         */
        compareTaskId: string;
        /**
         * migrate status.
         */
        status: string;
    }

    export interface GetMigrateJobsListDstInfo {
        /**
         * access type.
         */
        accessType: string;
        /**
         * database type.
         */
        databaseType: string;
        /**
         * db info.
         */
        infos: outputs.Dts.GetMigrateJobsListDstInfoInfo[];
        /**
         * node type.
         */
        nodeType: string;
        /**
         * region.
         */
        region: string;
    }

    export interface GetMigrateJobsListDstInfoInfo {
        /**
         * account.
         */
        account: string;
        /**
         * account mode.
         */
        accountMode: string;
        /**
         * account role.
         */
        accountRole: string;
        /**
         * ccn gateway id.
         */
        ccnGwId: string;
        /**
         * cvm instance id.
         */
        cvmInstanceId: string;
        /**
         * database kernel.
         */
        dbKernel: string;
        /**
         * engine version.
         */
        engineVersion: string;
        /**
         * host.
         */
        host: string;
        /**
         * instance id.
         */
        instanceId: string;
        /**
         * password.
         */
        password: string;
        /**
         * port.
         */
        port: number;
        /**
         * node role.
         */
        role: string;
        /**
         * subnet id.
         */
        subnetId: string;
        /**
         * temporary secret id.
         */
        tmpSecretId: string;
        /**
         * temporary secret key.
         */
        tmpSecretKey: string;
        /**
         * temporary token.
         */
        tmpToken: string;
        /**
         * vpn gateway id.
         */
        uniqVpnGwId: string;
        /**
         * user.
         */
        user: string;
        /**
         * vpc id.
         */
        vpcId: string;
    }

    export interface GetMigrateJobsListSrcInfo {
        /**
         * access type.
         */
        accessType: string;
        /**
         * database type.
         */
        databaseType: string;
        /**
         * extra attributes.
         */
        extraAttrs: outputs.Dts.GetMigrateJobsListSrcInfoExtraAttr[];
        /**
         * db info.
         */
        infos: outputs.Dts.GetMigrateJobsListSrcInfoInfo[];
        /**
         * node type.
         */
        nodeType: string;
        /**
         * region.
         */
        region: string;
        /**
         * supplier.
         */
        supplier: string;
    }

    export interface GetMigrateJobsListSrcInfoExtraAttr {
        /**
         * key.
         */
        key: string;
        /**
         * value.
         */
        value: string;
    }

    export interface GetMigrateJobsListSrcInfoInfo {
        /**
         * account.
         */
        account: string;
        /**
         * account mode.
         */
        accountMode: string;
        /**
         * account role.
         */
        accountRole: string;
        /**
         * ccn gateway id.
         */
        ccnGwId: string;
        /**
         * cvm instance id.
         */
        cvmInstanceId: string;
        /**
         * database kernel.
         */
        dbKernel: string;
        /**
         * engine version.
         */
        engineVersion: string;
        /**
         * host.
         */
        host: string;
        /**
         * instance id.
         */
        instanceId: string;
        /**
         * password.
         */
        password: string;
        /**
         * port.
         */
        port: number;
        /**
         * node role.
         */
        role: string;
        /**
         * subnet id.
         */
        subnetId: string;
        /**
         * temporary secret id.
         */
        tmpSecretId: string;
        /**
         * temporary secret key.
         */
        tmpSecretKey: string;
        /**
         * temporary token.
         */
        tmpToken: string;
        /**
         * vpn gateway id.
         */
        uniqVpnGwId: string;
        /**
         * user.
         */
        user: string;
        /**
         * vpc id.
         */
        vpcId: string;
    }

    export interface GetMigrateJobsListStepInfo {
        /**
         * master slave distance.
         */
        masterSlaveDistance: number;
        /**
         * seconds behind master.
         */
        secondsBehindMaster: number;
        /**
         * number of all steps.
         */
        stepAll: number;
        /**
         * step infos.
         */
        stepInfos: outputs.Dts.GetMigrateJobsListStepInfoStepInfo[];
        /**
         * current step.
         */
        stepNow: number;
    }

    export interface GetMigrateJobsListStepInfoStepInfo {
        /**
         * error list.
         */
        errors: outputs.Dts.GetMigrateJobsListStepInfoStepInfoError[];
        /**
         * the percent of miragtion progress.
         */
        percent: number;
        /**
         * start time.
         */
        startTime: string;
        /**
         * migrate status.
         */
        status: string;
        /**
         * step id.
         */
        stepId: string;
        /**
         * step message.
         */
        stepMessage: string;
        /**
         * step name.
         */
        stepName: string;
        /**
         * step number.
         */
        stepNo: number;
        /**
         * warning list.
         */
        warnings: outputs.Dts.GetMigrateJobsListStepInfoStepInfoWarning[];
    }

    export interface GetMigrateJobsListStepInfoStepInfoError {
        /**
         * help document.
         */
        helpDoc: string;
        /**
         * message.
         */
        message: string;
        /**
         * solution.
         */
        solution: string;
    }

    export interface GetMigrateJobsListStepInfoStepInfoWarning {
        /**
         * help document.
         */
        helpDoc: string;
        /**
         * message.
         */
        message: string;
        /**
         * solution.
         */
        solution: string;
    }

    export interface GetMigrateJobsListTag {
        /**
         * tag key.
         */
        tagKey: string;
        /**
         * tag value.
         */
        tagValue: string;
    }

    export interface GetMigrateJobsListTradeInfo {
        /**
         * billing type.
         */
        billingType: string;
        /**
         * deal name.
         */
        dealName: string;
        /**
         * expired time.
         */
        expireTime: string;
        /**
         * instance class.
         */
        instanceClass: string;
        /**
         * isolate reason.
         */
        isolateReason: string;
        /**
         * isolate time.
         */
        isolateTime: string;
        /**
         * last deal name.
         */
        lastDealName: string;
        /**
         * offline reason.
         */
        offlineReason: string;
        /**
         * offline time.
         */
        offlineTime: string;
        /**
         * pay type.
         */
        payType: string;
        /**
         * trade status.
         */
        tradeStatus: string;
    }

    export interface GetMigrateJobsTagFilter {
        /**
         * tag key.
         */
        tagKey?: string;
        /**
         * tag value.
         */
        tagValue?: string;
    }

    export interface GetSyncJobsList {
        /**
         * support action list for current status.
         */
        actions: string[];
        /**
         * all action list.
         */
        allActions: string[];
        /**
         * create time.
         */
        createTime: string;
        /**
         * tag list.
         */
        details: outputs.Dts.GetSyncJobsListDetail[];
        dstAccessType: string;
        /**
         * destination database type.
         */
        dstDatabaseType: string;
        /**
         * destination info.
         */
        dstInfos: outputs.Dts.GetSyncJobsListDstInfo[];
        /**
         * destination region.
         */
        dstRegion: string;
        /**
         * end time.
         */
        endTime: string;
        /**
         * expected run time.
         */
        expectRunTime: string;
        /**
         * expire time.
         */
        expireTime: string;
        /**
         * job id.
         */
        jobId: string;
        /**
         * job name.
         */
        jobName: string;
        /**
         * objects.
         */
        objects: outputs.Dts.GetSyncJobsListObject[];
        /**
         * options.
         */
        options: outputs.Dts.GetSyncJobsListOption[];
        /**
         * pay mode, optional value is PrePay or PostPay.
         */
        payMode: string;
        /**
         * run mode, optional value is mmediate or Timed.
         */
        runMode: string;
        /**
         * specification.
         */
        specification: string;
        /**
         * source access type.
         */
        srcAccessType: string;
        /**
         * source database type.
         */
        srcDatabaseType: string;
        /**
         * source info.
         */
        srcInfos: outputs.Dts.GetSyncJobsListSrcInfo[];
        /**
         * source region.
         */
        srcRegion: string;
        /**
         * start time.
         */
        startTime: string;
        /**
         * status.
         */
        status: string;
        /**
         * tag list.
         */
        tags: outputs.Dts.GetSyncJobsListTag[];
    }

    export interface GetSyncJobsListDetail {
        /**
         * current step progress.
         */
        currentStepProgress: number;
        /**
         * master slave distance.
         */
        masterSlaveDistance: number;
        /**
         * message.
         */
        message: string;
        /**
         * current step progress.
         */
        progress: number;
        /**
         * seconds behind master.
         */
        secondsBehindMaster: number;
        /**
         * total step numbers.
         */
        stepAll: number;
        /**
         * step infos.
         */
        stepInfos: outputs.Dts.GetSyncJobsListDetailStepInfo[];
        /**
         * current step number.
         */
        stepNow: number;
    }

    export interface GetSyncJobsListDetailStepInfo {
        /**
         * error list.
         */
        errors: outputs.Dts.GetSyncJobsListDetailStepInfoError[];
        /**
         * current step progress.
         */
        progress: number;
        /**
         * start time.
         */
        startTime: string;
        /**
         * status.
         */
        status: string;
        /**
         * step id.
         */
        stepId: string;
        /**
         * step name.
         */
        stepName: string;
        /**
         * step number.
         */
        stepNo: number;
        /**
         * waring list.
         */
        warnings: outputs.Dts.GetSyncJobsListDetailStepInfoWarning[];
    }

    export interface GetSyncJobsListDetailStepInfoError {
        /**
         * code.
         */
        code: string;
        /**
         * help document.
         */
        helpDoc: string;
        /**
         * message.
         */
        message: string;
        /**
         * solution.
         */
        solution: string;
    }

    export interface GetSyncJobsListDetailStepInfoWarning {
        /**
         * code.
         */
        code: string;
        /**
         * help document.
         */
        helpDoc: string;
        /**
         * message.
         */
        message: string;
        /**
         * solution.
         */
        solution: string;
    }

    export interface GetSyncJobsListDstInfo {
        /**
         * account.
         */
        account: string;
        /**
         * account mode.
         */
        accountMode: string;
        /**
         * account role.
         */
        accountRole: string;
        /**
         * ccn id.
         */
        ccnId: string;
        /**
         * cvm instance id.
         */
        cvmInstanceId: string;
        /**
         * database kernel.
         */
        dbKernel: string;
        /**
         * database name.
         */
        dbName: string;
        /**
         * engine version.
         */
        engineVersion: string;
        /**
         * instance id.
         */
        instanceId: string;
        /**
         * ip.
         */
        ip: string;
        /**
         * password.
         */
        password: string;
        /**
         * port.
         */
        port: number;
        /**
         * region.
         */
        region: string;
        /**
         * subnet id.
         */
        subnetId: string;
        /**
         * supplier.
         */
        supplier: string;
        /**
         * temporary secret id.
         */
        tmpSecretId: string;
        /**
         * temporary secret key.
         */
        tmpSecretKey: string;
        /**
         * temporary token.
         */
        tmpToken: string;
        /**
         * dedicated gateway id.
         */
        uniqDcgId: string;
        /**
         * vpn gateway id.
         */
        uniqVpnGwId: string;
        /**
         * user.
         */
        user: string;
        /**
         * vpc id.
         */
        vpcId: string;
    }

    export interface GetSyncJobsListObject {
        /**
         * advanced objects.
         */
        advancedObjects: string[];
        /**
         * database list.
         */
        databases: outputs.Dts.GetSyncJobsListObjectDatabase[];
        /**
         * object mode.
         */
        mode: string;
    }

    export interface GetSyncJobsListObjectDatabase {
        /**
         * database mode.
         */
        dbMode: string;
        /**
         * database name.
         */
        dbName: string;
        /**
         * function mode.
         */
        functionMode: string;
        /**
         * functions.
         */
        functions: string[];
        /**
         * new database name.
         */
        newDbName: string;
        /**
         * new schema name.
         */
        newSchemaName: string;
        /**
         * procedure mode.
         */
        procedureMode: string;
        /**
         * procedures.
         */
        procedures: string[];
        /**
         * schema name.
         */
        schemaName: string;
        /**
         * table mode.
         */
        tableMode: string;
        /**
         * table list.
         */
        tables: outputs.Dts.GetSyncJobsListObjectDatabaseTable[];
        /**
         * view mode.
         */
        viewMode: string;
        /**
         * view list.
         */
        views: outputs.Dts.GetSyncJobsListObjectDatabaseView[];
    }

    export interface GetSyncJobsListObjectDatabaseTable {
        /**
         * filter condition.
         */
        filterCondition: string;
        /**
         * new table name.
         */
        newTableName: string;
        /**
         * table name.
         */
        tableName: string;
    }

    export interface GetSyncJobsListObjectDatabaseView {
        /**
         * new view name.
         */
        newViewName: string;
        /**
         * view name.
         */
        viewName: string;
    }

    export interface GetSyncJobsListOption {
        /**
         * add additional column.
         */
        addAdditionalColumn: boolean;
        /**
         * conflict handle option.
         */
        conflictHandleOptions: outputs.Dts.GetSyncJobsListOptionConflictHandleOption[];
        /**
         * conflict handle type.
         */
        conflictHandleType: string;
        /**
         * ddl options.
         */
        ddlOptions: outputs.Dts.GetSyncJobsListOptionDdlOption[];
        /**
         * deal of exist same table.
         */
        dealOfExistSameTable: string;
        /**
         * init type.
         */
        initType: string;
        /**
         * operation types.
         */
        opTypes: string[];
    }

    export interface GetSyncJobsListOptionConflictHandleOption {
        /**
         * condition column.
         */
        conditionColumn: string;
        /**
         * condition override operator.
         */
        conditionOperator: string;
        /**
         * condition order in source and destination.
         */
        conditionOrderInSrcAndDst: string;
    }

    export interface GetSyncJobsListOptionDdlOption {
        /**
         * ddl object.
         */
        ddlObject: string;
        /**
         * ddl value.
         */
        ddlValues: string[];
    }

    export interface GetSyncJobsListSrcInfo {
        /**
         * account.
         */
        account: string;
        /**
         * account mode.
         */
        accountMode: string;
        /**
         * account role.
         */
        accountRole: string;
        /**
         * ccn id.
         */
        ccnId: string;
        /**
         * cvm instance id.
         */
        cvmInstanceId: string;
        /**
         * database kernel.
         */
        dbKernel: string;
        /**
         * database name.
         */
        dbName: string;
        /**
         * engine version.
         */
        engineVersion: string;
        /**
         * instance id.
         */
        instanceId: string;
        /**
         * ip.
         */
        ip: string;
        /**
         * password.
         */
        password: string;
        /**
         * port.
         */
        port: number;
        /**
         * region.
         */
        region: string;
        /**
         * subnet id.
         */
        subnetId: string;
        /**
         * supplier.
         */
        supplier: string;
        /**
         * temporary secret id.
         */
        tmpSecretId: string;
        /**
         * temporary secret key.
         */
        tmpSecretKey: string;
        /**
         * temporary token.
         */
        tmpToken: string;
        /**
         * dedicated gateway id.
         */
        uniqDcgId: string;
        /**
         * vpn gateway id.
         */
        uniqVpnGwId: string;
        /**
         * user.
         */
        user: string;
        /**
         * vpc id.
         */
        vpcId: string;
    }

    export interface GetSyncJobsListTag {
        /**
         * tag key.
         */
        tagKey: string;
        /**
         * tag value.
         */
        tagValue: string;
    }

    export interface GetSyncJobsTagFilter {
        /**
         * tag key.
         */
        tagKey?: string;
        /**
         * tag value.
         */
        tagValue?: string;
    }

    export interface MigrateJobDstInfo {
        /**
         * AccessType.
         */
        accessType: string;
        /**
         * DatabaseType.
         */
        databaseType: string;
        /**
         * ExtraAttr.
         */
        extraAttrs?: outputs.Dts.MigrateJobDstInfoExtraAttr[];
        /**
         * Info.
         */
        infos: outputs.Dts.MigrateJobDstInfoInfo[];
        /**
         * NodeType.
         */
        nodeType: string;
        /**
         * Region.
         */
        region: string;
        /**
         * Supplier.
         */
        supplier?: string;
    }

    export interface MigrateJobDstInfoExtraAttr {
        /**
         * Key.
         */
        key?: string;
        /**
         * Value.
         */
        value?: string;
    }

    export interface MigrateJobDstInfoInfo {
        /**
         * Account.
         */
        account?: string;
        /**
         * AccountMode.
         */
        accountMode?: string;
        /**
         * AccountRole.
         */
        accountRole?: string;
        /**
         * CcnGwId.
         */
        ccnGwId?: string;
        /**
         * CvmInstanceId.
         */
        cvmInstanceId?: string;
        /**
         * DbKernel.
         */
        dbKernel?: string;
        /**
         * EngineVersion.
         */
        engineVersion: string;
        /**
         * Host.
         */
        host?: string;
        /**
         * InstanceId.
         */
        instanceId?: string;
        /**
         * Password.
         */
        password?: string;
        /**
         * Port.
         */
        port?: number;
        /**
         * Role.
         */
        role?: string;
        /**
         * SubnetId.
         */
        subnetId?: string;
        /**
         * TmpSecretId.
         */
        tmpSecretId?: string;
        /**
         * TmpSecretKey.
         */
        tmpSecretKey?: string;
        /**
         * TmpToken.
         */
        tmpToken?: string;
        /**
         * UniqDcgId.
         */
        uniqDcgId?: string;
        /**
         * UniqVpnGwId.
         */
        uniqVpnGwId?: string;
        /**
         * User.
         */
        user?: string;
        /**
         * VpcId.
         */
        vpcId?: string;
    }

    export interface MigrateJobMigrateOption {
        /**
         * Consistency.
         */
        consistency: outputs.Dts.MigrateJobMigrateOptionConsistency;
        /**
         * Migration object option, you need to tell the migration service which library table objects to migrate.
         */
        databaseTable: outputs.Dts.MigrateJobMigrateOptionDatabaseTable;
        /**
         * ExtraAttr.
         */
        extraAttrs?: outputs.Dts.MigrateJobMigrateOptionExtraAttr[];
        /**
         * IsDstReadOnly.
         */
        isDstReadOnly?: boolean;
        /**
         * IsMigrateAccount.
         */
        isMigrateAccount?: boolean;
        /**
         * IsOverrideRoot.
         */
        isOverrideRoot?: boolean;
        /**
         * MigrateType.
         */
        migrateType: string;
    }

    export interface MigrateJobMigrateOptionConsistency {
        /**
         * ConsistencyOption.
         */
        mode?: string;
    }

    export interface MigrateJobMigrateOptionDatabaseTable {
        /**
         * AdvancedObjects.
         */
        advancedObjects: string[];
        /**
         * The database list.
         */
        databases?: outputs.Dts.MigrateJobMigrateOptionDatabaseTableDatabase[];
        /**
         * Object mode. eg:all,partial.
         */
        objectMode: string;
    }

    export interface MigrateJobMigrateOptionDatabaseTableDatabase {
        /**
         * DB selection mode:all (for all objects under the current object), partial (partial objects), when the ObjectMode is partial, this item is required.
         */
        dbMode?: string;
        /**
         * database name.
         */
        dbName?: string;
        /**
         * EventMode.
         */
        eventMode?: string;
        /**
         * Events.
         */
        events: string[];
        /**
         * FunctionMode.
         */
        functionMode?: string;
        /**
         * Functions.
         */
        functions: string[];
        /**
         * New database name.
         */
        newDbName?: string;
        /**
         * schema name after migration or synchronization.
         */
        newSchemaName?: string;
        /**
         * ProcedureMode.
         */
        procedureMode?: string;
        /**
         * Procedures.
         */
        procedures: string[];
        /**
         * RoleMode.
         */
        roleMode?: string;
        /**
         * Roles.
         */
        roles?: outputs.Dts.MigrateJobMigrateOptionDatabaseTableDatabaseRole[];
        /**
         * schema mode: all,partial.
         */
        schemaMode?: string;
        /**
         * schema name.
         */
        schemaName?: string;
        /**
         * table mode: all,partial.
         */
        tableMode?: string;
        /**
         * tables list.
         */
        tables?: outputs.Dts.MigrateJobMigrateOptionDatabaseTableDatabaseTable[];
        /**
         * TriggerMode.
         */
        triggerMode?: string;
        /**
         * Triggers.
         */
        triggers: string[];
        /**
         * ViewMode.
         */
        viewMode?: string;
        /**
         * Views.
         */
        views?: outputs.Dts.MigrateJobMigrateOptionDatabaseTableDatabaseView[];
    }

    export interface MigrateJobMigrateOptionDatabaseTableDatabaseRole {
        /**
         * NewRoleName.
         */
        newRoleName?: string;
        /**
         * RoleName.
         */
        roleName?: string;
    }

    export interface MigrateJobMigrateOptionDatabaseTableDatabaseTable {
        /**
         * new table name.
         */
        newTableName?: string;
        /**
         * table edit mode.
         */
        tableEditMode?: string;
        /**
         * table name.
         */
        tableName?: string;
        /**
         * temporary tables.
         */
        tmpTables: string[];
    }

    export interface MigrateJobMigrateOptionDatabaseTableDatabaseView {
        /**
         * NewViewName.
         */
        newViewName?: string;
        /**
         * ViewName.
         */
        viewName?: string;
    }

    export interface MigrateJobMigrateOptionExtraAttr {
        /**
         * Key.
         */
        key?: string;
        /**
         * Value.
         */
        value?: string;
    }

    export interface MigrateJobSrcInfo {
        /**
         * AccessType.
         */
        accessType: string;
        /**
         * DatabaseType.
         */
        databaseType: string;
        /**
         * ExtraAttr.
         */
        extraAttrs?: outputs.Dts.MigrateJobSrcInfoExtraAttr[];
        /**
         * Info.
         */
        infos: outputs.Dts.MigrateJobSrcInfoInfo[];
        /**
         * NodeType.
         */
        nodeType: string;
        /**
         * Region.
         */
        region: string;
        /**
         * Supplier.
         */
        supplier?: string;
    }

    export interface MigrateJobSrcInfoExtraAttr {
        /**
         * Key.
         */
        key?: string;
        /**
         * Value.
         */
        value?: string;
    }

    export interface MigrateJobSrcInfoInfo {
        /**
         * Account.
         */
        account?: string;
        /**
         * AccountMode.
         */
        accountMode?: string;
        /**
         * AccountRole.
         */
        accountRole?: string;
        /**
         * CcnGwId.
         */
        ccnGwId?: string;
        /**
         * CvmInstanceId.
         */
        cvmInstanceId?: string;
        /**
         * DbKernel.
         */
        dbKernel?: string;
        /**
         * EngineVersion.
         */
        engineVersion: string;
        /**
         * Host.
         */
        host?: string;
        /**
         * InstanceId.
         */
        instanceId?: string;
        /**
         * Password.
         */
        password?: string;
        /**
         * Port.
         */
        port?: number;
        /**
         * Role.
         */
        role?: string;
        /**
         * SubnetId.
         */
        subnetId?: string;
        /**
         * TmpSecretId.
         */
        tmpSecretId?: string;
        /**
         * TmpSecretKey.
         */
        tmpSecretKey?: string;
        /**
         * TmpToken.
         */
        tmpToken?: string;
        /**
         * UniqDcgId.
         */
        uniqDcgId?: string;
        /**
         * UniqVpnGwId.
         */
        uniqVpnGwId?: string;
        /**
         * User.
         */
        user?: string;
        /**
         * VpcId.
         */
        vpcId?: string;
    }

    export interface MigrateServiceTag {
        /**
         * tag key.
         */
        tagKey?: string;
        /**
         * tag value.
         */
        tagValue?: string;
    }

    export interface SyncJobTag {
        /**
         * tag key.
         */
        tagKey?: string;
        /**
         * tag value.
         */
        tagValue?: string;
    }

}

export namespace Eips {
    export interface GetInstanceEipList {
        /**
         * Creation time of the EIP.
         */
        createTime: string;
        /**
         * ID of the EIP to be queried.
         */
        eipId: string;
        /**
         * Name of the EIP to be queried.
         */
        eipName: string;
        /**
         * Type of the EIP.
         */
        eipType: string;
        /**
         * The eni id to bind with the EIP.
         */
        eniId: string;
        /**
         * The instance id to bind with the EIP.
         */
        instanceId: string;
        /**
         * The elastic ip address.
         */
        publicIp: string;
        /**
         * The EIP current status.
         */
        status: string;
        /**
         * The tags of EIP.
         */
        tags: {[key: string]: any};
    }

}

export namespace Elasticsearch {
    export interface GetInstancesInstanceList {
        /**
         * Availability zone.
         */
        availabilityZone: string;
        /**
         * Whether to enable X-Pack security authentication in Basic Edition 6.8 and above.
         */
        basicSecurityType: number;
        /**
         * The charge type of instance.
         */
        chargeType: string;
        /**
         * Instance creation time.
         */
        createTime: string;
        /**
         * Cluster deployment mode.
         */
        deployMode: number;
        /**
         * Elasticsearch domain name.
         */
        elasticsearchDomain: string;
        /**
         * Elasticsearch port.
         */
        elasticsearchPort: number;
        /**
         * Elasticsearch VIP.
         */
        elasticsearchVip: string;
        /**
         * ID of the instance to be queried.
         */
        instanceId: string;
        /**
         * Name of the instance to be queried.
         */
        instanceName: string;
        /**
         * Kibana access URL.
         */
        kibanaUrl: string;
        /**
         * License type.
         */
        licenseType: string;
        /**
         * Details of AZs in multi-AZ deployment mode.
         */
        multiZoneInfos: outputs.Elasticsearch.GetInstancesInstanceListMultiZoneInfo[];
        /**
         * Node information list, which describe the specification information of various types of nodes in the cluster.
         */
        nodeInfoLists: outputs.Elasticsearch.GetInstancesInstanceListNodeInfoList[];
        /**
         * The ID of a VPC subnet.
         */
        subnetId: string;
        /**
         * Tag of the instance to be queried.
         */
        tags: {[key: string]: any};
        /**
         * Version of the instance.
         */
        version: string;
        /**
         * The ID of a VPC network.
         */
        vpcId: string;
    }

    export interface GetInstancesInstanceListMultiZoneInfo {
        /**
         * Availability zone.
         */
        availabilityZone: string;
        /**
         * The ID of a VPC subnet.
         */
        subnetId: string;
    }

    export interface GetInstancesInstanceListNodeInfoList {
        /**
         * Node disk size.
         */
        diskSize: number;
        /**
         * Node disk type.
         */
        diskType: string;
        /**
         * Decides this disk encrypted or not.
         */
        encrypt: boolean;
        /**
         * Number of nodes.
         */
        nodeNum: number;
        /**
         * Node specification.
         */
        nodeType: string;
        /**
         * Node type.
         */
        type: string;
    }

    export interface InstanceEsAcl {
        /**
         * Blacklist of kibana access.
         */
        blackLists: string[];
        /**
         * Whitelist of kibana access.
         */
        whiteLists: string[];
    }

    export interface InstanceMultiZoneInfo {
        /**
         * Availability zone.
         */
        availabilityZone: string;
        /**
         * The ID of a VPC subnetwork.
         */
        subnetId: string;
    }

    export interface InstanceNodeInfoList {
        /**
         * Node disk size. Unit is GB, and default value is `100`.
         */
        diskSize?: number;
        /**
         * Node disk type. Valid values are `CLOUD_SSD` and `CLOUD_PREMIUM`. The default value is `CLOUD_SSD`.
         */
        diskType?: string;
        /**
         * Decides to encrypt this disk or not.
         */
        encrypt?: boolean;
        /**
         * Number of nodes.
         */
        nodeNum: number;
        /**
         * Node specification, and valid values refer to [document of tencentcloud](https://intl.cloud.tencent.com/document/product/845/18376).
         */
        nodeType: string;
        /**
         * Node type. Valid values are `hotData`, `warmData` and `dedicatedMaster`. The default value is 'hotData`.
         */
        type?: string;
    }

    export interface InstanceWebNodeTypeInfo {
        /**
         * Visual node number.
         */
        nodeNum: number;
        /**
         * Visual node specifications.
         */
        nodeType: string;
    }

}

export namespace Emr {
    export interface ClusterResourceSpec {
        /**
         * The number of common node.
         */
        commonCount?: number;
        commonResourceSpec?: outputs.Emr.ClusterResourceSpecCommonResourceSpec;
        /**
         * The number of core node.
         */
        coreCount?: number;
        coreResourceSpec?: outputs.Emr.ClusterResourceSpecCoreResourceSpec;
        /**
         * The number of master node.
         */
        masterCount?: number;
        masterResourceSpec?: outputs.Emr.ClusterResourceSpecMasterResourceSpec;
        /**
         * The number of core node.
         */
        taskCount?: number;
        taskResourceSpec?: outputs.Emr.ClusterResourceSpecTaskResourceSpec;
    }

    export interface ClusterResourceSpecCommonResourceSpec {
        cpu?: number;
        diskSize?: number;
        diskType?: string;
        memSize?: number;
        rootSize?: number;
        spec?: string;
        storageType?: number;
    }

    export interface ClusterResourceSpecCoreResourceSpec {
        cpu?: number;
        diskSize?: number;
        diskType?: string;
        memSize?: number;
        rootSize?: number;
        spec?: string;
        storageType?: number;
    }

    export interface ClusterResourceSpecMasterResourceSpec {
        cpu?: number;
        diskSize?: number;
        diskType?: string;
        memSize?: number;
        rootSize?: number;
        spec?: string;
        storageType?: number;
    }

    export interface ClusterResourceSpecTaskResourceSpec {
        cpu?: number;
        diskSize?: number;
        diskType?: string;
        memSize?: number;
        rootSize?: number;
        spec?: string;
        storageType?: number;
    }

    export interface GetInstanceCluster {
        /**
         * Add time of instance.
         */
        addTime: string;
        /**
         * Charge type of instance.
         */
        chargeType: number;
        /**
         * Cluster id of instance.
         */
        clusterId: string;
        /**
         * Cluster name of instance.
         */
        clusterName: string;
        /**
         * Title of instance.
         */
        ftitle: string;
        /**
         * Id of instance.
         */
        id: number;
        /**
         * Master ip of instance.
         */
        masterIp: string;
        /**
         * Fetch all instances which owner same project. Default 0 meaning use default project id.
         */
        projectId: number;
        /**
         * Region id of instance.
         */
        regionId: number;
        /**
         * Status of instance.
         */
        status: number;
        /**
         * Zone of instance.
         */
        zone: string;
        /**
         * Zone id of instance.
         */
        zoneId: number;
    }

    export interface GetNodesNode {
        /**
         * User APPID.
         */
        appId: number;
        /**
         * Application time.
         */
        applyTime: string;
        /**
         * Whether it is an autoscaling node, 0 is a normal node, and 1 is an autoscaling node.
         */
        autoFlag: number;
        /**
         * Database IP.
         */
        cdbIp: string;
        /**
         * Database information.
         */
        cdbNodeInfos: outputs.Emr.GetNodesNodeCdbNodeInfo[];
        /**
         * Database port.
         */
        cdbPort: number;
        /**
         * The type of payment.
         */
        chargeType: number;
        /**
         * Number of node cores.
         */
        cpuNum: number;
        /**
         * Whether this node is destroyable, 1 can be destroyed, 0 is not destroyable.
         */
        destroyable: number;
        /**
         * Device identity.
         */
        deviceClass: string;
        /**
         * Hard disk size.
         */
        diskSize: string;
        /**
         * Floating specification value json string.
         */
        dynamicPodSpec: string;
        /**
         * Node resource ID.
         */
        emrResourceId: string;
        /**
         * Expiration time.
         */
        expireTime: string;
        /**
         * Node type. 0: common node; 1: master node; 2: core node; 3: task node.
         */
        flag: number;
        /**
         * Release time.
         */
        freeTime: string;
        /**
         * Resource type: Support all/host/pod, default is all.
         */
        hardwareResourceType: string;
        /**
         * Hard disk capacity.
         */
        hwDiskSize: number;
        /**
         * Hard disk capacity description.
         */
        hwDiskSizeDesc: string;
        /**
         * Memory capacity.
         */
        hwMemSize: number;
        /**
         * Memory capacity description.
         */
        hwMemSizeDesc: string;
        /**
         * Intranet IP.
         */
        ip: string;
        /**
         * Renewal logo.
         */
        isAutoRenew: number;
        /**
         * Floating specifications, 1 yes, 0 no.
         */
        isDynamicSpec: number;
        /**
         * Multi-cloud disk.
         */
        mcMultiDisks: outputs.Emr.GetNodesNodeMcMultiDisk[];
        /**
         * Node memory description.
         */
        memDesc: string;
        /**
         * Node memory.
         */
        memSize: number;
        /**
         * Supports variations.
         */
        mutable: number;
        /**
         * Node description.
         */
        nameTag: string;
        /**
         * Machine instance ID.
         */
        orderNo: string;
        /**
         * The node is located in the region.
         */
        regionId: number;
        /**
         * The size of the system disk.
         */
        rootSize: number;
        /**
         * Serial number.
         */
        serialNo: string;
        /**
         * Node deployment service.
         */
        services: string;
        /**
         * Node specifications.
         */
        spec: string;
        /**
         * Disk type.
         */
        storageType: number;
        /**
         * Whether to support change billing type 1 Yes and 0 No.
         */
        supportModifyPayMode: number;
        /**
         * The label of the node binding.
         */
        tags: outputs.Emr.GetNodesNodeTag[];
        /**
         * The master node is bound to the Internet IP address.
         */
        wanIp: string;
        /**
         * Zone where the node is located.
         */
        zoneId: number;
    }

    export interface GetNodesNodeCdbNodeInfo {
        /**
         * Application time.
         */
        applyTime: string;
        /**
         * Expired id.
         */
        expireFlag: boolean;
        /**
         * Expiration time.
         */
        expireTime: string;
        /**
         * DB instance.
         */
        instanceName: string;
        /**
         * Intranet IP.
         */
        ip: string;
        /**
         * Renewal logo.
         */
        isAutoRenew: number;
        /**
         * Node memory.
         */
        memSize: number;
        /**
         * The type of payment.
         */
        payType: number;
        /**
         * Database port.
         */
        port: number;
        /**
         * The node is located in the region.
         */
        regionId: number;
        /**
         * Serial number.
         */
        serialNo: string;
        /**
         * The service identity.
         */
        service: string;
        /**
         * Database status.
         */
        status: number;
        /**
         * The size of the cloud disk.
         */
        volume: number;
        /**
         * Zone where the node is located.
         */
        zoneId: number;
    }

    export interface GetNodesNodeMcMultiDisk {
        /**
         * The number of cloud disks of this type.
         */
        count: number;
        /**
         * Disk type.
         */
        type: number;
        /**
         * The size of the cloud disk.
         */
        volume: number;
    }

    export interface GetNodesNodeTag {
        /**
         * Tag key.
         */
        tagKey: string;
        /**
         * Tag value.
         */
        tagValue: string;
    }

}

export namespace Eni {
    export interface InstanceIpv4 {
        /**
         * Description of the IP, maximum length 25.
         */
        description?: string;
        /**
         * Intranet IP.
         */
        ip: string;
        /**
         * Indicates whether the IP is primary.
         */
        primary: boolean;
    }

    export interface InstanceIpv4Info {
        /**
         * Description of the IP, maximum length 25.
         */
        description: string;
        /**
         * Intranet IP.
         */
        ip: string;
        /**
         * Indicates whether the IP is primary.
         */
        primary: boolean;
    }

}

export namespace Enis {
    export interface GetInstanceEni {
        /**
         * Creation time of the ENI.
         */
        createTime: string;
        /**
         * Description of the ENI. Conflict with `ids`.
         */
        description: string;
        /**
         * ID of the ENI.
         */
        id: string;
        /**
         * ID of the instance which bind the ENI. Conflict with `ids`.
         */
        instanceId: string;
        /**
         * A set of intranet IPv4s.
         */
        ipv4s: outputs.Enis.GetInstanceEniIpv4[];
        /**
         * MAC address.
         */
        mac: string;
        /**
         * Name of the ENI to be queried. Conflict with `ids`.
         */
        name: string;
        /**
         * Indicates whether the IP is primary.
         */
        primary: boolean;
        /**
         * A set of security group IDs which bind the ENI.
         */
        securityGroups: string[];
        /**
         * States of the ENI.
         */
        state: string;
        /**
         * ID of the subnet within this vpc to be queried. Conflict with `ids`.
         */
        subnetId: string;
        /**
         * Tags of the ENI. Conflict with `ids`.
         */
        tags: {[key: string]: any};
        /**
         * ID of the vpc to be queried. Conflict with `ids`.
         */
        vpcId: string;
    }

    export interface GetInstanceEniIpv4 {
        /**
         * Description of the ENI. Conflict with `ids`.
         */
        description: string;
        /**
         * Intranet IP.
         */
        ip: string;
        /**
         * Indicates whether the IP is primary.
         */
        primary: boolean;
    }

}

export namespace Gaap {
    export interface GetCertificatesCertificate {
        /**
         * Beginning time of the certificate.
         */
        beginTime: string;
        /**
         * Creation time of the certificate.
         */
        createTime: string;
        /**
         * Ending time of the certificate.
         */
        endTime: string;
        /**
         * ID of the certificate to be queried.
         */
        id: string;
        /**
         * Issuer name of the certificate.
         */
        issuerCn: string;
        /**
         * Name of the certificate to be queried.
         */
        name: string;
        /**
         * Subject name of the certificate.
         */
        subjectCn: string;
        /**
         * Type of the certificate to be queried. Valid values: `BASIC`, `CLIENT`, `SERVER`, `REALSERVER` and `PROXY`. `BASIC` means basic certificate; `CLIENT` means client CA certificate; `SERVER` means server SSL certificate; `REALSERVER` means realserver CA certificate; `PROXY` means proxy SSL certificate.
         */
        type: string;
    }

    export interface GetDomainErrorPagesErrorPageInfoList {
        /**
         * New response body.
         */
        body: string;
        /**
         * Response headers to be removed.
         */
        clearHeaders: string[];
        /**
         * HTTP domain to be queried.
         */
        domain: string;
        /**
         * Original error codes.
         */
        errorCodes: number[];
        /**
         * ID of the error page info.
         */
        id: string;
        /**
         * ID of the layer7 listener to be queried.
         */
        listenerId: string;
        /**
         * New error code.
         */
        newErrorCodes: number;
        /**
         * Response headers to be set.
         */
        setHeaders: {[key: string]: any};
    }

    export interface GetHttpDomainsDomain {
        /**
         * Indicates whether basic authentication is enable.
         */
        basicAuth: boolean;
        /**
         * ID of the basic authentication.
         */
        basicAuthId: string;
        /**
         * ID of the server certificate.
         */
        certificateId: string;
        /**
         * (**Deprecated**) It has been deprecated from version 1.26.0. Use `clientCertificateIds` instead. ID of the client certificate.
         *
         * @deprecated It has been deprecated from version 1.26.0. Use `client_certificate_ids` instead.
         */
        clientCertificateId: string;
        /**
         * ID list of the client certificate.
         */
        clientCertificateIds: string[];
        /**
         * Forward domain of the layer7 listener to be queried.
         */
        domain: string;
        /**
         * Indicates whether SSL certificate authentication is enable.
         */
        gaapAuth: boolean;
        /**
         * ID of the SSL certificate.
         */
        gaapAuthId: string;
        /**
         * Indicates whether realserver authentication is enable.
         */
        realserverAuth: boolean;
        /**
         * CA certificate domain of the realserver.
         */
        realserverCertificateDomain: string;
        /**
         * (**Deprecated**) It has been deprecated from version 1.28.0. Use `realserverCertificateIds` instead. CA certificate ID of the realserver.
         *
         * @deprecated It has been deprecated from version 1.28.0. Use `realserver_certificate_ids` instead.
         */
        realserverCertificateId: string;
        /**
         * CA certificate ID list of the realserver.
         */
        realserverCertificateIds: string[];
    }

    export interface GetHttpRulesRule {
        /**
         * Timeout of the health check response.
         */
        connectTimeout: number;
        /**
         * Forward domain of the layer7 listener to be queried.
         */
        domain: string;
        /**
         * Requested host which is forwarded to the realserver by the listener to be queried.
         */
        forwardHost: string;
        /**
         * Indicates whether health check is enable.
         */
        healthCheck: boolean;
        /**
         * Method of the health check.
         */
        healthCheckMethod: string;
        /**
         * Path of health check.
         */
        healthCheckPath: string;
        /**
         * Return code of confirmed normal.
         */
        healthCheckStatusCodes: number[];
        /**
         * ID of the GAAP realserver.
         */
        id: string;
        /**
         * Interval of the health check.
         */
        interval: number;
        /**
         * ID of the layer7 listener to be queried.
         */
        listenerId: string;
        /**
         * Path of the forward rule to be queried.
         */
        path: string;
        /**
         * Type of the realserver.
         */
        realserverType: string;
        /**
         * An information list of GAAP realserver. Each element contains the following attributes:
         */
        realservers: outputs.Gaap.GetHttpRulesRuleRealserver[];
        /**
         * Scheduling policy of the forward rule.
         */
        scheduler: string;
        /**
         * ServerNameIndication (SNI).
         */
        sni: string;
        /**
         * ServerNameIndication (SNI) switch.
         */
        sniSwitch: string;
    }

    export interface GetHttpRulesRuleRealserver {
        /**
         * Forward domain of the layer7 listener to be queried.
         */
        domain: string;
        /**
         * ID of the GAAP realserver.
         */
        id: string;
        /**
         * IP of the GAAP realserver.
         */
        ip: string;
        /**
         * Port of the GAAP realserver.
         */
        port: number;
        /**
         * Status of the GAAP realserver.
         */
        status: number;
        /**
         * Scheduling weight.
         */
        weight: number;
    }

    export interface GetLayer4ListenersListener {
        /**
         * Timeout of the health check response.
         */
        connectTimeout: number;
        /**
         * Creation time of the layer4 listener.
         */
        createTime: string;
        /**
         * Indicates whether health check is enable.
         */
        healthCheck: boolean;
        /**
         * ID of the layer4 listener.
         */
        id: string;
        /**
         * Interval of the health check.
         */
        interval: number;
        /**
         * Name of the layer4 listener.
         */
        name: string;
        /**
         * Port of the layer4 listener to be queried.
         */
        port: number;
        /**
         * Protocol of the layer4 listener to be queried. Valid values: `TCP` and `UDP`.
         */
        protocol: string;
        /**
         * ID of the GAAP proxy to be queried.
         */
        proxyId: string;
        /**
         * Type of the realserver.
         */
        realserverType: string;
        /**
         * Scheduling policy of the layer4 listener.
         */
        scheduler: string;
        /**
         * Status of the layer4 listener.
         */
        status: number;
    }

    export interface GetLayer7ListenersListener {
        /**
         * Authentication type of the layer7 listener. `0` is one-way authentication and `1` is mutual authentication.
         */
        authType: number;
        /**
         * Certificate ID of the layer7 listener.
         */
        certificateId: string;
        /**
         * (**Deprecated**) It has been deprecated from version 1.26.0. Use `clientCertificateIds` instead. ID of the client certificate.
         *
         * @deprecated It has been deprecated from version 1.26.0. Use `client_certificate_ids` instead.
         */
        clientCertificateId: string;
        /**
         * ID list of the client certificate.
         */
        clientCertificateIds: string[];
        /**
         * Creation time of the layer7 listener.
         */
        createTime: string;
        /**
         * Protocol type of the forwarding.
         */
        forwardProtocol: string;
        /**
         * ID of the layer7 listener.
         */
        id: string;
        /**
         * Name of the layer7 listener.
         */
        name: string;
        /**
         * Port of the layer7 listener to be queried.
         */
        port: number;
        /**
         * Protocol of the layer7 listener to be queried. Valid values: `HTTP` and `HTTPS`.
         */
        protocol: string;
        /**
         * ID of the GAAP proxy to be queried.
         */
        proxyId: string;
        /**
         * Status of the layer7 listener.
         */
        status: number;
    }

    export interface GetProxiesProxy {
        /**
         * Access region of the GAAP proxy to be queried. Conflict with `ids`.
         */
        accessRegion: string;
        /**
         * Maximum bandwidth of the GAAP proxy, unit is Mbps.
         */
        bandwidth: number;
        /**
         * Maximum concurrency of the GAAP proxy, unit is 10k.
         */
        concurrent: number;
        /**
         * Creation time of the GAAP proxy.
         */
        createTime: string;
        /**
         * Access domain of the GAAP proxy.
         */
        domain: string;
        /**
         * Forwarding IP of the GAAP proxy.
         */
        forwardIp: string;
        /**
         * ID of the GAAP proxy.
         */
        id: string;
        /**
         * Access domain of the GAAP proxy.
         */
        ip: string;
        /**
         * Name of the GAAP proxy.
         */
        name: string;
        /**
         * Security policy ID of the GAAP proxy.
         */
        policyId: string;
        /**
         * Project ID of the GAAP proxy to be queried. Conflict with `ids`.
         */
        projectId: number;
        /**
         * Region of the GAAP realserver to be queried. Conflict with `ids`.
         */
        realserverRegion: string;
        /**
         * Indicates whether GAAP proxy can scalable.
         */
        scalable: boolean;
        /**
         * Status of the GAAP proxy.
         */
        status: string;
        /**
         * Supported protocols of the GAAP proxy.
         */
        supportProtocols: string[];
        /**
         * Tags of the GAAP proxy to be queried. Support up to 5, display the information as long as it matches one.
         */
        tags: {[key: string]: any};
        /**
         * Version of the GAAP proxy.
         */
        version: string;
    }

    export interface GetRealserversRealserver {
        /**
         * Domain of the GAAP realserver to be queried, conflict with `ip`.
         */
        domain: string;
        /**
         * ID of the GAAP realserver.
         */
        id: string;
        /**
         * IP of the GAAP realserver to be queried, conflict with `domain`.
         */
        ip: string;
        /**
         * Name of the GAAP realserver to be queried, the maximum length is 30.
         */
        name: string;
        /**
         * ID of the project within the GAAP realserver to be queried, default value is `-1`, no set means all projects.
         */
        projectId: number;
        /**
         * Tags of the GAAP proxy to be queried. Support up to 5, display the information as long as it matches one.
         */
        tags: {[key: string]: any};
    }

    export interface GetSecurityRulesRule {
        /**
         * Policy of the rule to be queried.
         */
        action: string;
        /**
         * A network address block of the request source to be queried.
         */
        cidrIp: string;
        /**
         * ID of the security policy rule.
         */
        id: string;
        /**
         * Name of the security policy rule to be queried.
         */
        name: string;
        /**
         * Port of the security policy rule to be queried.
         */
        port: string;
        /**
         * Protocol of the security policy rule to be queried.
         */
        protocol: string;
    }

    export interface HttpRuleRealserver {
        /**
         * ID of the GAAP realserver.
         */
        id: string;
        /**
         * IP of the GAAP realserver.
         */
        ip: string;
        /**
         * Port of the GAAP realserver.
         */
        port: number;
        /**
         * Scheduling weight, default value is `1`. Valid value ranges: (1~100).
         */
        weight?: number;
    }

    export interface Layer4ListenerRealserverBindSet {
        /**
         * ID of the GAAP realserver.
         */
        id: string;
        /**
         * IP of the GAAP realserver.
         */
        ip: string;
        /**
         * Port of the GAAP realserver.
         */
        port: number;
        /**
         * Scheduling weight, default value is `1`. The range of values is [1,100].
         */
        weight?: number;
    }
}

export namespace Ha {
    export interface GetVipEipAttachmentsHaVipEipAttachmentList {
        /**
         * Public IP address of EIP to be queried.
         */
        addressIp: string;
        /**
         * ID of the attached HA VIP to be queried.
         */
        havipId: string;
    }

    export interface GetVipsHaVipList {
        /**
         * EIP of the HA VIP to be queried.
         */
        addressIp: string;
        /**
         * Create time of the HA VIP.
         */
        createTime: string;
        /**
         * ID of the HA VIP to be queried.
         */
        id: string;
        /**
         * Instance id that is associated.
         */
        instanceId: string;
        /**
         * Name of the HA VIP. The length of character is limited to 1-60.
         */
        name: string;
        /**
         * Network interface id that is associated.
         */
        networkInterfaceId: string;
        /**
         * State of the HA VIP. Valid values: `AVAILABLE`, `UNBIND`.
         */
        state: string;
        /**
         * Subnet id of the HA VIP to be queried.
         */
        subnetId: string;
        /**
         * Virtual IP address, it must not be occupied and in this VPC network segment. If not set, it will be assigned after resource created automatically.
         */
        vip: string;
        /**
         * VPC id of the HA VIP to be queried.
         */
        vpcId: string;
    }

}

export namespace Image {
    export interface GetInstanceFilter {
        /**
         * Key of the filter, valid keys: `image-id`, `image-type`, `image-name`.
         */
        name: string;
        /**
         * Values of the filter.
         */
        values: string[];
    }

}

export namespace Images {
    export interface GetInstanceImage {
        /**
         * Architecture of the image.
         */
        architecture: string;
        /**
         * Created time of the image.
         */
        createdTime: string;
        /**
         * Image creator of the image.
         */
        imageCreator: string;
        /**
         * Description of the image.
         */
        imageDescription: string;
        /**
         * ID of the image to be queried.
         */
        imageId: string;
        /**
         * Name of the image.
         */
        imageName: string;
        /**
         * Size of the image.
         */
        imageSize: number;
        /**
         * Image source of the image.
         */
        imageSource: string;
        /**
         * State of the image.
         */
        imageState: string;
        /**
         * A list of the image type to be queried. Valid values: 'PUBLIC_IMAGE', 'PRIVATE_IMAGE', 'SHARED_IMAGE', 'MARKET_IMAGE'.
         */
        imageType: string;
        /**
         * A string to apply with fuzzy match to the osName attribute on the image list returned by TencentCloud, conflict with 'image_name_regex'.
         */
        osName: string;
        /**
         * Platform of the image.
         */
        platform: string;
        /**
         * List of snapshot details.
         */
        snapshots: outputs.Images.GetInstanceImageSnapshot[];
        /**
         * Whether support cloud-init.
         */
        supportCloudInit: boolean;
        /**
         * Sync percent of the image.
         */
        syncPercent: number;
    }

    export interface GetInstanceImageSnapshot {
        /**
         * Size of the cloud disk used to create the snapshot; unit: GB.
         */
        diskSize: number;
        /**
         * Type of the cloud disk used to create the snapshot.
         */
        diskUsage: string;
        /**
         * Snapshot ID.
         */
        snapshotId: string;
        /**
         * Snapshot name, the user-defined snapshot alias.
         */
        snapshotName: string;
    }

}

export namespace Instance {
    export interface GetTypesFilter {
        /**
         * The filter name. Valid values: `zone`, `instance-family` and `instance-charge-type`.
         */
        name: string;
        /**
         * The filter values.
         */
        values: string[];
    }

    export interface GetTypesInstanceType {
        /**
         * The available zone that the CVM instance locates at. This field is conflict with `filter`.
         */
        availabilityZone: string;
        /**
         * The number of CPU cores of the instance.
         */
        cpuCoreCount: number;
        /**
         * Type series of the instance.
         */
        family: string;
        /**
         * The number of GPU cores of the instance.
         */
        gpuCoreCount: number;
        /**
         * Charge type of the instance.
         */
        instanceChargeType: string;
        /**
         * Type of the instance.
         */
        instanceType: string;
        /**
         * Instance memory capacity, unit in GB.
         */
        memorySize: number;
        /**
         * Sell status of the instance.
         */
        status: string;
    }

    export interface InstanceDataDisk {
        /**
         * Data disk ID used to initialize the data disk. When data disk type is `LOCAL_BASIC` and `LOCAL_SSD`, disk id is not supported.
         */
        dataDiskId: string;
        /**
         * Size of the data disk, and unit is GB.
         */
        dataDiskSize: number;
        /**
         * Snapshot ID of the data disk. The selected data disk snapshot size must be smaller than the data disk size.
         */
        dataDiskSnapshotId?: string;
        /**
         * Data disk type. For more information about limits on different data disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: LOCAL_BASIC: local disk, LOCAL_SSD: local SSD disk, LOCAL_NVME: local NVME disk, specified in the InstanceType, LOCAL_PRO: local HDD disk, specified in the InstanceType, CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD, CLOUD_BSSD: Balanced SSD.
         */
        dataDiskType: string;
        /**
         * Decides whether the disk is deleted with instance(only applied to `CLOUD_BASIC`, `CLOUD_SSD` and `CLOUD_PREMIUM` disk with `POSTPAID_BY_HOUR` instance), default is true.
         */
        deleteWithInstance?: boolean;
        /**
         * Decides whether the disk is encrypted. Default is `false`.
         */
        encrypt?: boolean;
        /**
         * Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
         */
        throughputPerformance?: number;
    }

}

export namespace Instances {
    export interface GetInstanceInstanceList {
        /**
         * Indicates whether public ip is assigned.
         */
        allocatePublicIp: boolean;
        /**
         * The available zone that the CVM instance locates at.
         */
        availabilityZone: string;
        /**
         * CAM role name authorized to access.
         */
        camRoleName: string;
        /**
         * The number of CPU cores of the instance.
         */
        cpu: number;
        /**
         * Creation time of the instance.
         */
        createTime: string;
        /**
         * An information list of data disk. Each element contains the following attributes:
         */
        dataDisks: outputs.Instances.GetInstanceInstanceListDataDisk[];
        /**
         * Expired time of the instance.
         */
        expiredTime: string;
        /**
         * ID of the image.
         */
        imageId: string;
        /**
         * The charge type of the instance.
         */
        instanceChargeType: string;
        /**
         * The way that CVM instance will be renew automatically or not when it reach the end of the prepaid tenancy.
         */
        instanceChargeTypePrepaidRenewFlag: string;
        /**
         * ID of the instances to be queried.
         */
        instanceId: string;
        /**
         * Name of the instances to be queried.
         */
        instanceName: string;
        /**
         * Type of the instance.
         */
        instanceType: string;
        /**
         * The charge type of the instance.
         */
        internetChargeType: string;
        /**
         * Public network maximum output bandwidth of the instance.
         */
        internetMaxBandwidthOut: number;
        /**
         * Instance memory capacity, unit in GB.
         */
        memory: number;
        /**
         * Private IP of the instance.
         */
        privateIp: string;
        /**
         * The project CVM belongs to.
         */
        projectId: number;
        /**
         * Public IP of the instance.
         */
        publicIp: string;
        /**
         * Security groups of the instance.
         */
        securityGroups: string[];
        /**
         * Status of the instance.
         */
        status: string;
        /**
         * ID of a vpc subnetwork.
         */
        subnetId: string;
        /**
         * Image ID of the system disk.
         */
        systemDiskId: string;
        /**
         * Size of the system disk.
         */
        systemDiskSize: number;
        /**
         * Type of the system disk.
         */
        systemDiskType: string;
        /**
         * Tags of the instance.
         */
        tags: {[key: string]: any};
        /**
         * ID of the vpc to be queried.
         */
        vpcId: string;
    }

    export interface GetInstanceInstanceListDataDisk {
        /**
         * Image ID of the data disk.
         */
        dataDiskId: string;
        /**
         * Size of the data disk.
         */
        dataDiskSize: number;
        /**
         * Type of the data disk.
         */
        dataDiskType: string;
        /**
         * Indicates whether the data disk is destroyed with the instance.
         */
        deleteWithInstance: boolean;
    }

    export interface GetSetInstanceList {
        /**
         * Indicates whether public ip is assigned.
         */
        allocatePublicIp: boolean;
        /**
         * The available zone that the CVM instance locates at.
         */
        availabilityZone: string;
        /**
         * CAM role name authorized to access.
         */
        camRoleName: string;
        /**
         * The number of CPU cores of the instance.
         */
        cpu: number;
        /**
         * Creation time of the instance.
         */
        createTime: string;
        /**
         * An information list of data disk. Each element contains the following attributes:
         */
        dataDisks: outputs.Instances.GetSetInstanceListDataDisk[];
        /**
         * Expired time of the instance.
         */
        expiredTime: string;
        /**
         * ID of the image.
         */
        imageId: string;
        /**
         * The charge type of the instance.
         */
        instanceChargeType: string;
        /**
         * The way that CVM instance will be renew automatically or not when it reach the end of the prepaid tenancy.
         */
        instanceChargeTypePrepaidRenewFlag: string;
        /**
         * ID of the instances to be queried.
         */
        instanceId: string;
        /**
         * Name of the instances to be queried.
         */
        instanceName: string;
        /**
         * Type of the instance.
         */
        instanceType: string;
        /**
         * The charge type of the instance.
         */
        internetChargeType: string;
        /**
         * Public network maximum output bandwidth of the instance.
         */
        internetMaxBandwidthOut: number;
        /**
         * Instance memory capacity, unit in GB.
         */
        memory: number;
        /**
         * Private IP of the instance.
         */
        privateIp: string;
        /**
         * The project CVM belongs to.
         */
        projectId: number;
        /**
         * Public IP of the instance.
         */
        publicIp: string;
        /**
         * Security groups of the instance.
         */
        securityGroups: string[];
        /**
         * Status of the instance.
         */
        status: string;
        /**
         * ID of a vpc subnetwork.
         */
        subnetId: string;
        /**
         * Image ID of the system disk.
         */
        systemDiskId: string;
        /**
         * Size of the system disk.
         */
        systemDiskSize: number;
        /**
         * Type of the system disk.
         */
        systemDiskType: string;
        /**
         * Tags of the instance.
         */
        tags: {[key: string]: any};
        /**
         * ID of the vpc to be queried.
         */
        vpcId: string;
    }

    export interface GetSetInstanceListDataDisk {
        /**
         * Image ID of the data disk.
         */
        dataDiskId: string;
        /**
         * Size of the data disk.
         */
        dataDiskSize: number;
        /**
         * Type of the data disk.
         */
        dataDiskType: string;
        /**
         * Indicates whether the data disk is destroyed with the instance.
         */
        deleteWithInstance: boolean;
    }

}

export namespace Key {
    export interface GetPairsKeyPairList {
        /**
         * Creation time of the key pair.
         */
        createTime: string;
        /**
         * ID of the key pair to be queried.
         */
        keyId: string;
        /**
         * Name of the key pair to be queried. Support regular expression search, only `^` and `$` are supported.
         */
        keyName: string;
        /**
         * Project ID of the key pair to be queried.
         */
        projectId: number;
        /**
         * public key of the key pair.
         */
        publicKey: string;
    }

}

export namespace Kms {
    export interface GetKeysKeyList {
        /**
         * Name of CMK.
         */
        alias: string;
        /**
         * Create time of CMK.
         */
        createTime: number;
        /**
         * Uin of CMK Creator.
         */
        creatorUin: number;
        /**
         * Delete time of CMK.
         */
        deletionDate: number;
        /**
         * Description of CMK.
         */
        description: string;
        /**
         * ID of CMK.
         */
        keyId: string;
        /**
         * Specify whether to enable key rotation.
         */
        keyRotationEnabled: boolean;
        /**
         * Filter by state of CMK. `0` - all CMKs are queried, `1` - only Enabled CMKs are queried, `2` - only Disabled CMKs are queried, `3` - only PendingDelete CMKs are queried, `4` - only PendingImport CMKs are queried, `5` - only Archived CMKs are queried.
         */
        keyState: string;
        /**
         * Filter by usage of CMK. Available values include `ALL`, `ENCRYPT_DECRYPT`, `ASYMMETRIC_DECRYPT_RSA_2048`, `ASYMMETRIC_DECRYPT_SM2`, `ASYMMETRIC_SIGN_VERIFY_SM2`, `ASYMMETRIC_SIGN_VERIFY_RSA_2048`, `ASYMMETRIC_SIGN_VERIFY_ECC`. Default value is `ENCRYPT_DECRYPT`.
         */
        keyUsage: string;
        /**
         * Next rotate time of CMK when keyRotationEnabled is true.
         */
        nextRotateTime: number;
        /**
         * Filter by origin of CMK. `TENCENT_KMS` - CMK created by KMS, `EXTERNAL` - CMK imported by user, `ALL` - all CMKs. Default value is `ALL`.
         */
        origin: string;
        /**
         * Creator of CMK.
         */
        owner: string;
        /**
         * Valid when origin is `EXTERNAL`, it means the effective date of the key material.
         */
        validTo: number;
    }

}

export namespace Kubernetes {
    export interface ClusterAttachmentWorkerConfig {
        /**
         * Configurations of data disk.
         */
        dataDisks?: outputs.Kubernetes.ClusterAttachmentWorkerConfigDataDisk[];
        /**
         * Indicate to set desired pod number in node. valid when the cluster is podCIDR.
         */
        desiredPodNum?: number;
        /**
         * Docker graph path. Default is `/var/lib/docker`.
         */
        dockerGraphPath?: string;
        /**
         * Custom parameter information related to the node. This is a white-list parameter.
         */
        extraArgs?: string[];
        /**
         * GPU driver parameters.
         */
        gpuArgs?: outputs.Kubernetes.ClusterAttachmentWorkerConfigGpuArgs;
        /**
         * Indicate to schedule the adding node or not. Default is true.
         */
        isSchedule?: boolean;
        /**
         * Mount target. Default is not mounting.
         */
        mountTarget?: string;
        /**
         * Base64-encoded User Data text, the length limit is 16KB.
         */
        userData?: string;
    }

    export interface ClusterAttachmentWorkerConfigDataDisk {
        /**
         * Indicate whether to auto format and mount or not. Default is `false`.
         */
        autoFormatAndMount?: boolean;
        /**
         * The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
         */
        diskPartition?: string;
        /**
         * Volume of disk in GB. Default is `0`.
         */
        diskSize?: number;
        /**
         * Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD`.
         */
        diskType?: string;
        /**
         * File system, e.g. `ext3/ext4/xfs`.
         */
        fileSystem?: string;
        /**
         * Mount target.
         */
        mountTarget?: string;
    }

    export interface ClusterAttachmentWorkerConfigGpuArgs {
        /**
         * CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
         */
        cuda?: {[key: string]: any};
        /**
         * cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `docName`: Doc name of cuDNN; `devName`: Dev name of cuDNN.
         */
        cudnn?: {[key: string]: any};
        /**
         * Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
         */
        customDriver?: {[key: string]: any};
        /**
         * GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
         */
        driver?: {[key: string]: any};
        /**
         * Whether to enable MIG.
         */
        migEnable?: boolean;
    }

    export interface ClusterAttachmentWorkerConfigOverrides {
        /**
         * Configurations of data disk.
         */
        dataDisks?: outputs.Kubernetes.ClusterAttachmentWorkerConfigOverridesDataDisk[];
        /**
         * Indicate to set desired pod number in node. valid when the cluster is podCIDR.
         */
        desiredPodNum?: number;
        /**
         * Docker graph path. Default is `/var/lib/docker`.
         */
        dockerGraphPath?: string;
        /**
         * Custom parameter information related to the node. This is a white-list parameter.
         */
        extraArgs?: string[];
        /**
         * GPU driver parameters.
         */
        gpuArgs?: outputs.Kubernetes.ClusterAttachmentWorkerConfigOverridesGpuArgs;
        /**
         * Indicate to schedule the adding node or not. Default is true.
         */
        isSchedule?: boolean;
        /**
         * Mount target. Default is not mounting.
         */
        mountTarget?: string;
        /**
         * Base64-encoded User Data text, the length limit is 16KB.
         */
        userData?: string;
    }

    export interface ClusterAttachmentWorkerConfigOverridesDataDisk {
        /**
         * Indicate whether to auto format and mount or not. Default is `false`.
         */
        autoFormatAndMount?: boolean;
        /**
         * The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
         */
        diskPartition?: string;
        /**
         * Volume of disk in GB. Default is `0`.
         */
        diskSize?: number;
        /**
         * Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD`.
         */
        diskType?: string;
        /**
         * File system, e.g. `ext3/ext4/xfs`.
         */
        fileSystem?: string;
        /**
         * Mount target.
         */
        mountTarget?: string;
    }

    export interface ClusterAttachmentWorkerConfigOverridesGpuArgs {
        /**
         * CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
         */
        cuda?: {[key: string]: any};
        /**
         * cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `docName`: Doc name of cuDNN; `devName`: Dev name of cuDNN.
         */
        cudnn?: {[key: string]: any};
        /**
         * Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
         */
        customDriver?: {[key: string]: any};
        /**
         * GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
         */
        driver?: {[key: string]: any};
        /**
         * Whether to enable MIG.
         */
        migEnable?: boolean;
    }

    export interface ClusterAuthOptions {
        /**
         * If set to `true`, the rbac rule will be created automatically which allow anonymous user to access '/.well-known/openid-configuration' and '/openid/v1/jwks'.
         */
        autoCreateDiscoveryAnonymousAuth?: boolean;
        /**
         * Specify service-account-issuer. If useTkeDefault is set to `true`, please do not set this field, it will be ignored anyway.
         */
        issuer?: string;
        /**
         * Specify service-account-jwks-uri. If useTkeDefault is set to `true`, please do not set this field, it will be ignored anyway.
         */
        jwksUri?: string;
        /**
         * If set to `true`, the issuer and jwksUri will be generated automatically by tke, please do not set issuer and jwks_uri, and they will be ignored.
         */
        useTkeDefault?: boolean;
    }

    export interface ClusterClusterAudit {
        /**
         * when you want to close the cluster audit log or delete the cluster, you can use this parameter to determine whether the audit log set and topic created by default will be deleted.
         */
        deleteAuditLogAndTopic?: boolean;
        /**
         * Specify weather the Cluster Audit enabled. NOTE: Enable Cluster Audit will also auto install Log Agent.
         */
        enabled: boolean;
        /**
         * Specify id of existing CLS log set, or auto create a new set by leave it empty.
         */
        logSetId?: string;
        /**
         * Specify id of existing CLS log topic, or auto create a new topic by leave it empty.
         */
        topicId?: string;
    }

    export interface ClusterClusterExtraArgs {
        /**
         * The customized parameters for kube-apiserver.
         */
        kubeApiservers?: string[];
        /**
         * The customized parameters for kube-controller-manager.
         */
        kubeControllerManagers?: string[];
        /**
         * The customized parameters for kube-scheduler.
         */
        kubeSchedulers?: string[];
    }

    export interface ClusterEventPersistence {
        /**
         * when you want to close the cluster event persistence or delete the cluster, you can use this parameter to determine whether the event persistence log set and topic created by default will be deleted.
         */
        deleteEventLogAndTopic?: boolean;
        /**
         * Specify weather the Event Persistence enabled.
         */
        enabled: boolean;
        /**
         * Specify id of existing CLS log set, or auto create a new set by leave it empty.
         */
        logSetId?: string;
        /**
         * Specify id of existing CLS log topic, or auto create a new topic by leave it empty.
         */
        topicId?: string;
    }

    export interface ClusterExistInstance {
        /**
         * Custom mode cluster, you can specify the number of pods for each node. corresponding to the existed_instances_para.instance_ids parameter.
         */
        desiredPodNumbers?: number[];
        /**
         * Reinstallation parameters of an existing instance.
         */
        instancesPara?: outputs.Kubernetes.ClusterExistInstanceInstancesPara;
        /**
         * Role of existed node. value:MASTER_ETCD or WORKER.
         */
        nodeRole?: string;
    }

    export interface ClusterExistInstanceInstancesPara {
        /**
         * Cluster IDs.
         */
        instanceIds: string[];
    }

    export interface ClusterExtensionAddon {
        /**
         * Add-on name.
         */
        name: string;
        /**
         * Parameter of the add-on resource object in JSON string format, please check the example at the top of page for reference.
         */
        param: string;
    }

    export interface ClusterLogAgent {
        /**
         * Whether the log agent enabled.
         */
        enabled: boolean;
        /**
         * Kubelet root directory as the literal.
         */
        kubeletRootDir?: string;
    }

    export interface ClusterMasterConfig {
        /**
         * Indicates which availability zone will be used.
         */
        availabilityZone?: string;
        /**
         * bandwidth package id. if user is standard user, then the bandwidthPackageId is needed, or default has bandwidth_package_id.
         */
        bandwidthPackageId?: string;
        /**
         * CAM role name authorized to access.
         */
        camRoleName?: string;
        /**
         * Number of cvm.
         */
        count?: number;
        /**
         * Configurations of data disk.
         */
        dataDisks?: outputs.Kubernetes.ClusterMasterConfigDataDisk[];
        /**
         * Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desiredPodNum` or none.
         */
        desiredPodNum?: number;
        /**
         * Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
         */
        disasterRecoverGroupIds?: string;
        /**
         * To specify whether to enable cloud monitor service. Default is TRUE.
         */
        enhancedMonitorService?: boolean;
        /**
         * To specify whether to enable cloud security service. Default is TRUE.
         */
        enhancedSecurityService?: boolean;
        /**
         * The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
         */
        hostname?: string;
        /**
         * Id of cvm hpc cluster.
         */
        hpcClusterId?: string;
        /**
         * The valid image id, format of img-xxx.
         */
        imgId?: string;
        /**
         * The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
         */
        instanceChargeType?: string;
        /**
         * The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instanceChargeType is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
         */
        instanceChargeTypePrepaidPeriod?: number;
        /**
         * Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instanceChargeType is set to `PREPAID`.
         */
        instanceChargeTypePrepaidRenewFlag?: string;
        /**
         * Name of the CVMs.
         */
        instanceName?: string;
        /**
         * Specified types of CVM instance.
         */
        instanceType: string;
        /**
         * Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
         */
        internetChargeType?: string;
        /**
         * Max bandwidth of Internet access in Mbps. Default is 0.
         */
        internetMaxBandwidthOut?: number;
        /**
         * ID list of keys, should be set if `password` not set.
         */
        keyIds?: string;
        /**
         * Password to access, should be set if `keyIds` not set.
         */
        password?: string;
        /**
         * Specify whether to assign an Internet IP address.
         */
        publicIpAssigned?: boolean;
        /**
         * Security groups to which a CVM instance belongs.
         */
        securityGroupIds?: string[];
        /**
         * Private network ID.
         */
        subnetId: string;
        /**
         * Volume of system disk in GB. Default is `50`.
         */
        systemDiskSize?: number;
        /**
         * System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
         */
        systemDiskType?: string;
        /**
         * ase64-encoded User Data text, the length limit is 16KB.
         */
        userData?: string;
    }

    export interface ClusterMasterConfigDataDisk {
        /**
         * Indicate whether to auto format and mount or not. Default is `false`.
         */
        autoFormatAndMount?: boolean;
        /**
         * The name of the device or partition to mount.
         */
        diskPartition?: string;
        /**
         * Volume of disk in GB. Default is `0`.
         */
        diskSize?: number;
        /**
         * Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
         */
        diskType?: string;
        /**
         * Indicates whether to encrypt data disk, default `false`.
         */
        encrypt?: boolean;
        /**
         * File system, e.g. `ext3/ext4/xfs`.
         */
        fileSystem?: string;
        /**
         * ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
         */
        kmsKeyId?: string;
        /**
         * Mount target.
         */
        mountTarget?: string;
        /**
         * Data disk snapshot ID.
         */
        snapshotId?: string;
    }

    export interface ClusterNodePoolGlobalConfig {
        /**
         * Indicates which scale-out method will be used when there are multiple scaling groups. Valid values: `random` - select a random scaling group, `most-pods` - select the scaling group that can schedule the most pods, `least-waste` - select the scaling group that can ensure the fewest remaining resources after Pod scheduling.
         */
        expander: string;
        /**
         * Whether to ignore DaemonSet pods by default when calculating resource usage.
         */
        ignoreDaemonSetsUtilization: boolean;
        /**
         * Indicates whether to enable scale-in.
         */
        isScaleInEnabled: boolean;
        /**
         * Max concurrent scale-in volume.
         */
        maxConcurrentScaleIn: number;
        /**
         * Number of minutes after cluster scale-out when the system starts judging whether to perform scale-in.
         */
        scaleInDelay: number;
        /**
         * Number of consecutive minutes of idleness after which the node is subject to scale-in.
         */
        scaleInUnneededTime: number;
        /**
         * Percentage of node resource usage below which the node is considered to be idle.
         */
        scaleInUtilizationThreshold: number;
        /**
         * During scale-in, ignore nodes with local storage pods.
         */
        skipNodesWithLocalStorage: boolean;
        /**
         * During scale-in, ignore nodes with pods in the kube-system namespace that are not managed by DaemonSet.
         */
        skipNodesWithSystemPods: boolean;
    }

    export interface ClusterWorkerConfig {
        /**
         * Indicates which availability zone will be used.
         */
        availabilityZone?: string;
        /**
         * bandwidth package id. if user is standard user, then the bandwidthPackageId is needed, or default has bandwidth_package_id.
         */
        bandwidthPackageId?: string;
        /**
         * CAM role name authorized to access.
         */
        camRoleName?: string;
        /**
         * Number of cvm.
         */
        count?: number;
        /**
         * Configurations of data disk.
         */
        dataDisks?: outputs.Kubernetes.ClusterWorkerConfigDataDisk[];
        /**
         * Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desiredPodNum` or none.
         */
        desiredPodNum?: number;
        /**
         * Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
         */
        disasterRecoverGroupIds?: string;
        /**
         * To specify whether to enable cloud monitor service. Default is TRUE.
         */
        enhancedMonitorService?: boolean;
        /**
         * To specify whether to enable cloud security service. Default is TRUE.
         */
        enhancedSecurityService?: boolean;
        /**
         * The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
         */
        hostname?: string;
        /**
         * Id of cvm hpc cluster.
         */
        hpcClusterId?: string;
        /**
         * The valid image id, format of img-xxx.
         */
        imgId?: string;
        /**
         * The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
         */
        instanceChargeType?: string;
        /**
         * The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instanceChargeType is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
         */
        instanceChargeTypePrepaidPeriod?: number;
        /**
         * Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instanceChargeType is set to `PREPAID`.
         */
        instanceChargeTypePrepaidRenewFlag?: string;
        /**
         * Name of the CVMs.
         */
        instanceName?: string;
        /**
         * Specified types of CVM instance.
         */
        instanceType: string;
        /**
         * Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
         */
        internetChargeType?: string;
        /**
         * Max bandwidth of Internet access in Mbps. Default is 0.
         */
        internetMaxBandwidthOut?: number;
        /**
         * ID list of keys, should be set if `password` not set.
         */
        keyIds?: string;
        /**
         * Password to access, should be set if `keyIds` not set.
         */
        password?: string;
        /**
         * Specify whether to assign an Internet IP address.
         */
        publicIpAssigned?: boolean;
        /**
         * Security groups to which a CVM instance belongs.
         */
        securityGroupIds?: string[];
        /**
         * Private network ID.
         */
        subnetId: string;
        /**
         * Volume of system disk in GB. Default is `50`.
         */
        systemDiskSize?: number;
        /**
         * System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
         */
        systemDiskType?: string;
        /**
         * ase64-encoded User Data text, the length limit is 16KB.
         */
        userData?: string;
    }

    export interface ClusterWorkerConfigDataDisk {
        /**
         * Indicate whether to auto format and mount or not. Default is `false`.
         */
        autoFormatAndMount?: boolean;
        /**
         * The name of the device or partition to mount.
         */
        diskPartition?: string;
        /**
         * Volume of disk in GB. Default is `0`.
         */
        diskSize?: number;
        /**
         * Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
         */
        diskType?: string;
        /**
         * Indicates whether to encrypt data disk, default `false`.
         */
        encrypt?: boolean;
        /**
         * File system, e.g. `ext3/ext4/xfs`.
         */
        fileSystem?: string;
        /**
         * ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
         */
        kmsKeyId?: string;
        /**
         * Mount target.
         */
        mountTarget?: string;
        /**
         * Data disk snapshot ID.
         */
        snapshotId?: string;
    }

    export interface ClusterWorkerInstancesList {
        /**
         * Information of the cvm when it is failed.
         */
        failedReason: string;
        /**
         * ID of the cvm.
         */
        instanceId: string;
        /**
         * Role of the cvm.
         */
        instanceRole: string;
        /**
         * State of the cvm.
         */
        instanceState: string;
        /**
         * LAN IP of the cvm.
         */
        lanIp: string;
    }

    export interface GetAvailableClusterVersionsCluster {
        /**
         * Cluster Id.
         */
        clusterId: string;
        /**
         * Upgradable cluster version number. Note: This field may return null, indicating that no valid value can be obtained.
         */
        versions: string[];
    }

    export interface GetChartsChartList {
        /**
         * Label of chart.
         */
        label: {[key: string]: any};
        /**
         * Chart latest version.
         */
        latestVersion: string;
        /**
         * Name of chart.
         */
        name: string;
    }

    export interface GetClusterCommonNamesList {
        /**
         * The CommonName in the certificate of the client corresponding to the sub-account.
         */
        commonNames: string;
        /**
         * User UIN.
         */
        subaccountUin: string;
    }

    export interface GetClusterLevelsList {
        /**
         * Alias used for pass to cluster level arguments.
         */
        alias: string;
        /**
         * Number of ConfigMaps.
         */
        configMapCount: number;
        /**
         * Number of CRDs.
         */
        crdCount: number;
        /**
         * Indicates whether the current level enabled.
         */
        enable: boolean;
        /**
         * Level name.
         */
        name: string;
        /**
         * Number of nodes.
         */
        nodeCount: number;
        /**
         * Number of others.
         */
        otherCount: number;
        /**
         * Number of pods.
         */
        podCount: number;
    }

    export interface GetClustersList {
        /**
         * The certificate used for access.
         */
        certificationAuthority: string;
        /**
         * The expired seconds to recycle ENI.
         */
        claimExpiredSeconds: number;
        /**
         * Indicates whether to enable cluster node auto scaler.
         */
        clusterAsEnabled: boolean;
        /**
         * A network address block of the cluster. Different from vpc cidr and cidr of other clusters within this VPC.
         */
        clusterCidr: string;
        /**
         * Deployment type of the cluster.
         */
        clusterDeployType: string;
        /**
         * Description of the cluster.
         */
        clusterDesc: string;
        /**
         * External network address to access.
         */
        clusterExternalEndpoint: string;
        /**
         * Customized parameters for master component.
         */
        clusterExtraArgs: outputs.Kubernetes.GetClustersListClusterExtraArg[];
        /**
         * ID of the cluster. Conflict with cluster_name, can not be set at the same time.
         */
        clusterId: string;
        /**
         * Indicates whether ipvs is enabled.
         */
        clusterIpvs: boolean;
        /**
         * The maximum number of Pods per node in the cluster.
         */
        clusterMaxPodNum: number;
        /**
         * The maximum number of services in the cluster.
         */
        clusterMaxServiceNum: number;
        /**
         * Name of the cluster. Conflict with cluster_id, can not be set at the same time.
         */
        clusterName: string;
        /**
         * Number of nodes in the cluster.
         */
        clusterNodeNum: number;
        /**
         * Operating system of the cluster.
         */
        clusterOs: string;
        /**
         * Version of the cluster.
         */
        clusterVersion: string;
        /**
         * (**Deprecated**) It has been deprecated from version 1.18.1. Container runtime of the cluster.
         *
         * @deprecated It has been deprecated from version 1.18.1.
         */
        containerRuntime: string;
        /**
         * Indicates whether cluster deletion protection is enabled.
         */
        deletionProtection: boolean;
        /**
         * Domain name for access.
         */
        domain: string;
        /**
         * Subnet IDs for cluster with VPC-CNI network mode.
         */
        eniSubnetIds: string[];
        /**
         * Indicates whether to ignore the cluster cidr conflict error.
         */
        ignoreClusterCidrConflict: boolean;
        /**
         * Indicates whether non-static ip mode is enabled.
         */
        isNonStaticIpMode: boolean;
        /**
         * Kubernetes config.
         */
        kubeConfig: string;
        /**
         * Kubernetes config of private network.
         */
        kubeConfigIntranet: string;
        /**
         * Cluster kube-proxy mode.
         */
        kubeProxyMode: string;
        /**
         * Cluster network type.
         */
        networkType: string;
        /**
         * Node name type of cluster.
         */
        nodeNameType: string;
        /**
         * Password of account.
         */
        password: string;
        /**
         * The Intranet address used for access.
         */
        pgwEndpoint: string;
        /**
         * Project ID of the cluster.
         */
        projectId: number;
        /**
         * Access policy.
         */
        securityPolicies: string[];
        /**
         * The network address block of the cluster.
         */
        serviceCidr: string;
        /**
         * Tags of the cluster.
         */
        tags: {[key: string]: any};
        /**
         * User name of account.
         */
        userName: string;
        /**
         * Vpc ID of the cluster.
         */
        vpcId: string;
        /**
         * An information list of cvm within the WORKER clusters. Each element contains the following attributes.
         */
        workerInstancesLists: outputs.Kubernetes.GetClustersListWorkerInstancesList[];
    }

    export interface GetClustersListClusterExtraArg {
        /**
         * The customized parameters for kube-apiserver.
         */
        kubeApiservers: string[];
        /**
         * The customized parameters for kube-controller-manager.
         */
        kubeControllerManagers: string[];
        /**
         * The customized parameters for kube-scheduler.
         */
        kubeSchedulers: string[];
    }

    export interface GetClustersListWorkerInstancesList {
        /**
         * Information of the cvm when it is failed.
         */
        failedReason: string;
        /**
         * ID of the cvm.
         */
        instanceId: string;
        /**
         * Role of the cvm.
         */
        instanceRole: string;
        /**
         * State of the cvm.
         */
        instanceState: string;
        /**
         * LAN IP of the cvm.
         */
        lanIp: string;
    }

    export interface NodePoolAutoScalingConfig {
        /**
         * Backup CVM instance types if specified instance type sold out or mismatch.
         */
        backupInstanceTypes?: string[];
        /**
         * bandwidth package id. if user is standard user, then the bandwidthPackageId is needed, or default has bandwidth_package_id.
         */
        bandwidthPackageId?: string;
        /**
         * Name of cam role.
         */
        camRoleName?: string;
        /**
         * Configurations of data disk.
         */
        dataDisks?: outputs.Kubernetes.NodePoolAutoScalingConfigDataDisk[];
        /**
         * To specify whether to enable cloud monitor service. Default is TRUE.
         */
        enhancedMonitorService?: boolean;
        /**
         * To specify whether to enable cloud security service. Default is TRUE.
         */
        enhancedSecurityService?: boolean;
        /**
         * The hostname of the cloud server, dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows instances are not supported. Examples of other types (Linux, etc.): The character length is [2, 40], multiple periods are allowed, and there is a paragraph between the dots, and each paragraph is allowed to consist of letters (unlimited case), numbers and dashes (-). Pure numbers are not allowed. For usage, refer to `HostNameSettings` in https://www.tencentcloud.com/document/product/377/31001.
         */
        hostName: string;
        /**
         * The style of the host name of the cloud server, the value range includes ORIGINAL and UNIQUE, and the default is ORIGINAL. For usage, refer to `HostNameSettings` in https://www.tencentcloud.com/document/product/377/31001.
         */
        hostNameStyle: string;
        /**
         * Charge type of instance. Valid values are `PREPAID`, `POSTPAID_BY_HOUR`, `SPOTPAID`. The default is `POSTPAID_BY_HOUR`. NOTE: `SPOTPAID` instance must set `spotInstanceType` and `spotMaxPrice` at the same time.
         */
        instanceChargeType: string;
        /**
         * The tenancy (in month) of the prepaid instance, NOTE: it only works when instanceChargeType is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
         */
        instanceChargeTypePrepaidPeriod?: number;
        /**
         * Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instanceChargeType is set to `PREPAID`.
         */
        instanceChargeTypePrepaidRenewFlag: string;
        /**
         * Instance name, no more than 60 characters. For usage, refer to `InstanceNameSettings` in https://www.tencentcloud.com/document/product/377/31001.
         */
        instanceName: string;
        /**
         * Specified types of CVM instance.
         */
        instanceType: string;
        /**
         * Charge types for network traffic. Valid value: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
         */
        internetChargeType?: string;
        /**
         * Max bandwidth of Internet access in Mbps. Default is `0`.
         */
        internetMaxBandwidthOut?: number;
        /**
         * ID list of keys.
         */
        keyIds?: string[];
        /**
         * Password to access.
         */
        password?: string;
        /**
         * Specify whether to assign an Internet IP address.
         */
        publicIpAssigned?: boolean;
        /**
         * Security groups to which a CVM instance belongs.
         */
        securityGroupIds?: string[];
        /**
         * Type of spot instance, only support `one-time` now. Note: it only works when instanceChargeType is set to `SPOTPAID`.
         */
        spotInstanceType?: string;
        /**
         * Max price of a spot instance, is the format of decimal string, for example "0.50". Note: it only works when instanceChargeType is set to `SPOTPAID`.
         */
        spotMaxPrice?: string;
        /**
         * Volume of system disk in GB. Default is `50`.
         */
        systemDiskSize?: number;
        /**
         * Type of a CVM disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`.
         */
        systemDiskType?: string;
    }

    export interface NodePoolAutoScalingConfigDataDisk {
        /**
         * Indicates whether the disk remove after instance terminated. Default is `false`.
         */
        deleteWithInstance?: boolean;
        /**
         * Volume of disk in GB. Default is `0`.
         */
        diskSize?: number;
        /**
         * Types of disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`.
         */
        diskType?: string;
        /**
         * Specify whether to encrypt data disk, default: false. NOTE: Make sure the instance type is offering and the cam role `QcloudKMSAccessForCVMRole` was provided.
         */
        encrypt?: boolean;
        /**
         * Data disk snapshot ID.
         */
        snapshotId?: string;
        /**
         * Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD` and `dataSize` > 460GB.
         */
        throughputPerformance?: number;
    }

    export interface NodePoolNodeConfig {
        /**
         * Configurations of data disk.
         */
        dataDisks?: outputs.Kubernetes.NodePoolNodeConfigDataDisk[];
        /**
         * Indicate to set desired pod number in node. valid when the cluster is podCIDR.
         */
        desiredPodNum?: number;
        /**
         * Docker graph path. Default is `/var/lib/docker`.
         */
        dockerGraphPath?: string;
        /**
         * Custom parameter information related to the node. This is a white-list parameter.
         */
        extraArgs?: string[];
        /**
         * GPU driver parameters.
         */
        gpuArgs?: outputs.Kubernetes.NodePoolNodeConfigGpuArgs;
        /**
         * Indicate to schedule the adding node or not. Default is true.
         */
        isSchedule?: boolean;
        /**
         * Mount target. Default is not mounting.
         */
        mountTarget?: string;
        /**
         * Base64-encoded User Data text, the length limit is 16KB.
         */
        userData?: string;
    }

    export interface NodePoolNodeConfigDataDisk {
        /**
         * Indicate whether to auto format and mount or not. Default is `false`.
         */
        autoFormatAndMount?: boolean;
        /**
         * The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
         */
        diskPartition?: string;
        /**
         * Volume of disk in GB. Default is `0`.
         */
        diskSize?: number;
        /**
         * Types of disk. Valid value: `CLOUD_PREMIUM` and `CLOUD_SSD`.
         */
        diskType?: string;
        /**
         * File system, e.g. `ext3/ext4/xfs`.
         */
        fileSystem?: string;
        /**
         * Mount target.
         */
        mountTarget?: string;
    }

    export interface NodePoolNodeConfigGpuArgs {
        /**
         * CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
         */
        cuda?: {[key: string]: any};
        /**
         * cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `docName`: Doc name of cuDNN; `devName`: Dev name of cuDNN.
         */
        cudnn?: {[key: string]: any};
        /**
         * Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
         */
        customDriver?: {[key: string]: any};
        /**
         * GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
         */
        driver?: {[key: string]: any};
        /**
         * Whether to enable MIG.
         */
        migEnable?: boolean;
    }

    export interface NodePoolTaint {
        /**
         * Effect of the taint. Valid values are: `NoSchedule`, `PreferNoSchedule`, `NoExecute`.
         */
        effect: string;
        /**
         * Key of the taint. The taint key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
         */
        key: string;
        /**
         * Value of the taint.
         */
        value: string;
    }

    export interface ScaleWorkerDataDisk {
        /**
         * Indicate whether to auto format and mount or not. Default is `false`.
         */
        autoFormatAndMount?: boolean;
        /**
         * Volume of disk in GB. Default is `0`.
         */
        diskSize?: number;
        /**
         * Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
         */
        diskType?: string;
        /**
         * File system, e.g. `ext3/ext4/xfs`.
         */
        fileSystem?: string;
        /**
         * Mount target.
         */
        mountTarget?: string;
    }

    export interface ScaleWorkerGpuArgs {
        /**
         * CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
         */
        cuda?: {[key: string]: any};
        /**
         * cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `docName`: Doc name of cuDNN; `devName`: Dev name of cuDNN.
         */
        cudnn?: {[key: string]: any};
        /**
         * Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
         */
        customDriver?: {[key: string]: any};
        /**
         * GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
         */
        driver?: {[key: string]: any};
        /**
         * Whether to enable MIG.
         */
        migEnable?: boolean;
    }

    export interface ScaleWorkerWorkerConfig {
        /**
         * Indicates which availability zone will be used.
         */
        availabilityZone?: string;
        /**
         * bandwidth package id. if user is standard user, then the bandwidthPackageId is needed, or default has bandwidth_package_id.
         */
        bandwidthPackageId?: string;
        /**
         * CAM role name authorized to access.
         */
        camRoleName?: string;
        /**
         * Number of cvm.
         */
        count?: number;
        /**
         * Configurations of data disk.
         */
        dataDisks?: outputs.Kubernetes.ScaleWorkerWorkerConfigDataDisk[];
        /**
         * Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desiredPodNum` or none.
         */
        desiredPodNum?: number;
        /**
         * Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
         */
        disasterRecoverGroupIds?: string;
        /**
         * To specify whether to enable cloud monitor service. Default is TRUE.
         */
        enhancedMonitorService?: boolean;
        /**
         * To specify whether to enable cloud security service. Default is TRUE.
         */
        enhancedSecurityService?: boolean;
        /**
         * The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
         */
        hostname?: string;
        /**
         * Id of cvm hpc cluster.
         */
        hpcClusterId?: string;
        /**
         * The valid image id, format of img-xxx.
         */
        imgId?: string;
        /**
         * The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
         */
        instanceChargeType?: string;
        /**
         * The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instanceChargeType is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
         */
        instanceChargeTypePrepaidPeriod?: number;
        /**
         * Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instanceChargeType is set to `PREPAID`.
         */
        instanceChargeTypePrepaidRenewFlag?: string;
        /**
         * Name of the CVMs.
         */
        instanceName?: string;
        /**
         * Specified types of CVM instance.
         */
        instanceType: string;
        /**
         * Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
         */
        internetChargeType?: string;
        /**
         * Max bandwidth of Internet access in Mbps. Default is 0.
         */
        internetMaxBandwidthOut?: number;
        /**
         * ID list of keys, should be set if `password` not set.
         */
        keyIds?: string;
        /**
         * Password to access, should be set if `keyIds` not set.
         */
        password?: string;
        /**
         * Specify whether to assign an Internet IP address.
         */
        publicIpAssigned?: boolean;
        /**
         * Security groups to which a CVM instance belongs.
         */
        securityGroupIds?: string[];
        /**
         * Private network ID.
         */
        subnetId: string;
        /**
         * Volume of system disk in GB. Default is `50`.
         */
        systemDiskSize?: number;
        /**
         * System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
         */
        systemDiskType?: string;
        /**
         * ase64-encoded User Data text, the length limit is 16KB.
         */
        userData?: string;
    }

    export interface ScaleWorkerWorkerConfigDataDisk {
        /**
         * Indicate whether to auto format and mount or not. Default is `false`.
         */
        autoFormatAndMount?: boolean;
        /**
         * The name of the device or partition to mount.
         */
        diskPartition?: string;
        /**
         * Volume of disk in GB. Default is `0`.
         */
        diskSize?: number;
        /**
         * Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
         */
        diskType?: string;
        /**
         * Indicates whether to encrypt data disk, default `false`.
         */
        encrypt?: boolean;
        /**
         * File system, e.g. `ext3/ext4/xfs`.
         */
        fileSystem?: string;
        /**
         * ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
         */
        kmsKeyId?: string;
        /**
         * Mount target.
         */
        mountTarget?: string;
        /**
         * Data disk snapshot ID.
         */
        snapshotId?: string;
    }

    export interface ScaleWorkerWorkerInstancesList {
        /**
         * Information of the cvm when it is failed.
         */
        failedReason: string;
        /**
         * ID of the cvm.
         */
        instanceId: string;
        /**
         * Role of the cvm.
         */
        instanceRole: string;
        /**
         * State of the cvm.
         */
        instanceState: string;
        /**
         * LAN IP of the cvm.
         */
        lanIp: string;
    }

    export interface ServerlessNodePoolServerlessNode {
        /**
         * display name of serverless node.
         */
        displayName?: string;
        /**
         * subnet id of serverless node.
         */
        subnetId: string;
    }

    export interface ServerlessNodePoolTaint {
        /**
         * Effect of the taint. Valid values are: `NoSchedule`, `PreferNoSchedule`, `NoExecute`.
         */
        effect: string;
        /**
         * Key of the taint. The taint key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
         */
        key: string;
        /**
         * Value of the taint.
         */
        value: string;
    }

}

export namespace Lighthouse {
    export interface FirewallRuleFirewallRule {
        /**
         * Valid values are ACCEPT, DROP. Default value is ACCEPT.
         */
        action?: string;
        /**
         * IP range or IP (mutually exclusive). Default value is 0.0.0.0/0, which indicates all sources.
         */
        cidrBlock?: string;
        /**
         * Firewall rule description.
         */
        firewallRuleDescription?: string;
        /**
         * Port. Valid values are ALL, one single port, multiple ports separated by commas, or port range indicated by a minus sign.
         */
        port?: string;
        /**
         * Protocol. Valid values are TCP, UDP, ICMP, ALL.
         */
        protocol: string;
    }

    export interface GetBundleBundleSet {
        /**
         * Package tag.Valid values:ACTIVITY: promotional packageNORMAL: regular packageCAREFREE: carefree package.
         */
        bundleDisplayLabel: string;
        /**
         * Package ID.
         */
        bundleId: string;
        /**
         * Package sale status. Valid values are AVAILABLE, SOLD_OUT.
         */
        bundleSalesState: string;
        /**
         * Package type.Valid values:GENERAL_BUNDLE: generalSTORAGE_BUNDLE: Storage.
         */
        bundleType: string;
        /**
         * CPU.
         */
        cpu: number;
        /**
         * Network billing mode.
         */
        internetChargeType: string;
        /**
         * Peak bandwidth in Mbps.
         */
        internetMaxBandwidthOut: number;
        /**
         * Memory size in GB.
         */
        memory: number;
        /**
         * Monthly network traffic in Gb.
         */
        monthlyTraffic: number;
        /**
         * Current package unit price information.
         */
        prices: outputs.Lighthouse.GetBundleBundleSetPrice[];
        /**
         * Whether Linux/Unix is supported.
         */
        supportLinuxUnixPlatform: boolean;
        /**
         * Whether Windows is supported.
         */
        supportWindowsPlatform: boolean;
        /**
         * System disk size.
         */
        systemDiskSize: number;
        /**
         * System disk type.
         */
        systemDiskType: string;
    }

    export interface GetBundleBundleSetPrice {
        /**
         * Instance price.
         */
        instancePrices: outputs.Lighthouse.GetBundleBundleSetPriceInstancePrice[];
    }

    export interface GetBundleBundleSetPriceInstancePrice {
        /**
         * Currency unit. Valid values: CNY and USD.
         */
        currency: string;
        /**
         * Discount.
         */
        discount: number;
        /**
         * Discounted price.
         */
        discountPrice: number;
        /**
         * Original package unit price.
         */
        originalBundlePrice: number;
        /**
         * Original price.
         */
        originalPrice: number;
    }

    export interface GetBundleFilter {
        /**
         * Field to be filtered.
         */
        name: string;
        /**
         * Filter value of field.
         */
        values: string[];
    }

    export interface GetFirewallRulesTemplateFirewallRuleSet {
        /**
         * Valid values are (ACCEPT, DROP). Default value is ACCEPT.
         */
        action: string;
        /**
         * Application type. Valid values are custom, HTTP (80), HTTPS (443), Linux login (22), Windows login (3389), MySQL (3306), SQL Server (1433), all TCP ports, all UDP ports, Ping-ICMP, ALL.
         */
        appType: string;
        /**
         * IP range or IP (mutually exclusive). Default value is 0.0.0.0/0, which indicates all sources.
         */
        cidrBlock: string;
        /**
         * Firewall rule description.
         */
        firewallRuleDescription: string;
        /**
         * Port. Valid values are ALL, one single port, multiple ports separated by commas, or port range indicated by a minus sign.
         */
        port: string;
        /**
         * Protocol. Valid values are TCP, UDP, ICMP, ALL.
         */
        protocol: string;
    }

    export interface InstanceContainer {
        /**
         * The command to run.
         */
        command?: string;
        /**
         * Container image address.
         */
        containerImage?: string;
        /**
         * Container name.
         */
        containerName?: string;
        /**
         * List of environment variables.
         */
        envs?: outputs.Lighthouse.InstanceContainerEnv[];
        /**
         * List of mappings of container ports and host ports.
         */
        publishPorts?: outputs.Lighthouse.InstanceContainerPublishPort[];
        /**
         * List of container mount volumes.
         */
        volumes?: outputs.Lighthouse.InstanceContainerVolume[];
    }

    export interface InstanceContainerEnv {
        /**
         * Environment variable key.
         */
        key: string;
        /**
         * Environment variable value.
         */
        value: string;
    }

    export interface InstanceContainerPublishPort {
        /**
         * Container port.
         */
        containerPort: number;
        /**
         * Host port.
         */
        hostPort: number;
        /**
         * External IP. It defaults to 0.0.0.0.
         */
        ip?: string;
        /**
         * The protocol defaults to tcp. Valid values: tcp, udp and sctp.
         */
        protocol?: string;
    }

    export interface InstanceContainerVolume {
        /**
         * Container path.
         */
        containerPath: string;
        /**
         * Host path.
         */
        hostPath: string;
    }

    export interface InstanceLoginConfiguration {
        /**
         * whether auto generate password. if false, need set password.
         */
        autoGeneratePassword: string;
        /**
         * Login password.
         */
        password?: string;
    }

}

export namespace Mariadb {
    export interface GetAccountsList {
        /**
         * creation time.
         */
        createTime: string;
        /**
         * This field is meaningful for read-only accounts, indicating that the standby machine with the active-standby delay less than this value is selected.
         */
        delayThresh: number;
        /**
         * User remarks.
         */
        description: string;
        /**
         * The host from which the user can log in (corresponding to the host field of MySQL users, UserName + Host uniquely identifies a user, in the form of IP, and the IP segment ends with %; supports filling in %; if it is empty, it defaults to %).
         */
        host: string;
        /**
         * Read-only flag, `0`: No, `1`: The SQL request of this account is preferentially executed on the standby machine, and the host machine is selected for execution when the standby machine is unavailable, `2`: The standby machine is preferentially selected for execution, and the operation fails when the standby machine is unavailable.
         */
        readOnly: number;
        /**
         * For read-only accounts, set whether the policy is to fix the standby machine, `0`: The standby machine is not fixed, that is, the standby machine does not meet the conditions and will not disconnect from the client, and the Proxy selects other available standby machines, `1`: The standby machine does not meet the conditions Disconnect, make sure one connection secures the standby.
         */
        slaveConst: number;
        /**
         * Update time.
         */
        updateTime: string;
        /**
         * username.
         */
        userName: string;
    }

    export interface GetDatabaseObjectsFunc {
        /**
         * func name.
         */
        func: string;
    }

    export interface GetDatabaseObjectsProc {
        /**
         * proc name.
         */
        proc: string;
    }

    export interface GetDatabaseObjectsTable {
        /**
         * table name.
         */
        table: string;
    }

    export interface GetDatabaseObjectsView {
        /**
         * view name.
         */
        view: string;
    }

    export interface GetDatabaseTableCol {
        /**
         * column name.
         */
        col: string;
        /**
         * column type.
         */
        type: string;
    }

    export interface GetDatabasesDatabase {
        /**
         * Database name.
         */
        dbName: string;
    }

    export interface GetDbInstancesInstance {
        /**
         * db version id.
         */
        dbVersionId: string;
        /**
         * instance id.
         */
        instanceId: string;
        /**
         * instance name.
         */
        instanceName: string;
        /**
         * meory of instance.
         */
        memory: number;
        /**
         * project id.
         */
        projectId: number;
        /**
         * region.
         */
        region: string;
        /**
         * resource tags.
         */
        resourceTags: outputs.Mariadb.GetDbInstancesInstanceResourceTag[];
        /**
         * storage of instance.
         */
        storage: number;
        /**
         * subnet id.
         */
        subnetId: string;
        /**
         * vpc id.
         */
        vpcId: string;
        /**
         * available zone.
         */
        zone: string;
    }

    export interface GetDbInstancesInstanceResourceTag {
        /**
         * tag key.
         */
        tagKey: string;
        /**
         * tag value.
         */
        tagValue: string;
    }

    export interface GetSecurityGroupsList {
        /**
         * Creation time, time format: `yyyy-mm-dd hh:mm:ss`.
         */
        createTime: string;
        /**
         * Inbound rules.
         */
        inbounds: outputs.Mariadb.GetSecurityGroupsListInbound[];
        /**
         * Outbound Rules.
         */
        outbounds: outputs.Mariadb.GetSecurityGroupsListOutbound[];
        /**
         * Project ID.
         */
        projectId: number;
        /**
         * Security group ID.
         */
        securityGroupId: string;
        /**
         * security group name.
         */
        securityGroupName: string;
        /**
         * Security Group Notes.
         */
        securityGroupRemark: string;
    }

    export interface GetSecurityGroupsListInbound {
        /**
         * Policy, ACCEPT or DROP.
         */
        action: string;
        /**
         * Source IP or IP range, such as 192.168.0.0/16.
         */
        cidrIp: string;
        /**
         * Network protocols, support `UDP`, `TCP`, etc.
         */
        ipProtocol: string;
        /**
         * port.
         */
        portRange: string;
    }

    export interface GetSecurityGroupsListOutbound {
        /**
         * Policy, ACCEPT or DROP.
         */
        action: string;
        /**
         * Source IP or IP range, such as 192.168.0.0/16.
         */
        cidrIp: string;
        /**
         * Network protocols, support `UDP`, `TCP`, etc.
         */
        ipProtocol: string;
        /**
         * port.
         */
        portRange: string;
    }

    export interface InstanceInitParam {
        /**
         * parameter name.
         */
        param: string;
        /**
         * parameter value.
         */
        value: string;
    }

    export interface ParametersParam {
        /**
         * parameter name.
         */
        param: string;
        /**
         * parameter value.
         */
        value: string;
    }
}

export namespace Mdl {
    export interface StreamLiveInputInputSetting {
        /**
         * Application name, which is valid if `Type` is `RTMP_PUSH` and can contain 1-32 letters and digitsNote: This field may return `null`, indicating that no valid value was found.
         */
        appName?: string;
        /**
         * Delayed time (ms) for playback, which is valid if `Type` is `RTMP_PUSH`Value range: 0 (default) or 10000-600000The value must be a multiple of 1,000.Note: This field may return `null`, indicating that no valid value was found.
         */
        delayTime?: number;
        /**
         * RTP/UDP input address, which does not need to be entered for the input parameter.Note: this field may return null, indicating that no valid values can be obtained.
         */
        inputAddress?: string;
        /**
         * The domain of an SRT_PUSH address. If this is a request parameter, you do not need to specify it.Note: This field may return `null`, indicating that no valid value was found.
         */
        inputDomain?: string;
        /**
         * The password, which is used for authentication.Note: This field may return `null`, indicating that no valid value was found.
         */
        password?: string;
        /**
         * Source type for stream pulling and relaying. To pull content from private-read COS buckets under the current account, set this parameter to `TencentCOS`; otherwise, leave it empty.Note: this field may return `null`, indicating that no valid value was found.
         */
        sourceType?: string;
        /**
         * Source URL, which is valid if `Type` is `RTMP_PULL`, `HLS_PULL`, or `MP4_PULL` and can contain 1-512 charactersNote: This field may return `null`, indicating that no valid value was found.
         */
        sourceUrl?: string;
        /**
         * Stream name, which is valid if `Type` is `RTMP_PUSH` and can contain 1-32 letters and digitsNote: This field may return `null`, indicating that no valid value was found.
         */
        streamName?: string;
        /**
         * The username, which is used for authentication.Note: This field may return `null`, indicating that no valid value was found.
         */
        userName?: string;
    }

}

export namespace Mongodb {
    export interface GetInstanceBackupsBackupList {
        /**
         * Remark of backup.
         */
        backupDesc: string;
        /**
         * Backup mode, currently supported: 0-logic backup, 1-physical backup, 2-all backups.The default is logical backup.
         */
        backupMethod: number;
        /**
         * Backup mode name.
         */
        backupName: string;
        /**
         * Size of backup(KN).
         */
        backupSize: number;
        /**
         * Backup mode type.
         */
        backupType: number;
        /**
         * end time of backup.
         */
        endTime: string;
        /**
         * Instance ID, the format is: cmgo-9d0p6umb.Same as the instance ID displayed in the cloud database console page.
         */
        instanceId: string;
        /**
         * start time of backup.
         */
        startTime: string;
        /**
         * Backup status.
         */
        status: number;
    }

    export interface GetInstanceConnectionsClient {
        /**
         * client connection count.
         */
        count: number;
        /**
         * is internal.
         */
        internalService: boolean;
        /**
         * client connection ip.
         */
        ip: string;
    }

    export interface GetInstanceCurrentOpCurrentOp {
        /**
         * running time(ms).
         */
        microsecsRunning: number;
        /**
         * Node name.
         */
        nodeName: string;
        /**
         * Filter condition, the namespace namespace to which the operation belongs, in the format of db.collection.
         */
        ns: string;
        /**
         * Filter condition, operation type, possible values: none, update, insert, query, command, getmore,remove and killcursors.
         */
        op: string;
        /**
         * operation id.
         */
        opId: number;
        /**
         * operation info.
         */
        operation: string;
        /**
         * operation query.
         */
        query: string;
        /**
         * filter condition, shard name.
         */
        replicaSetName: string;
        /**
         * Filter condition, node status, possible value: primary, secondary.
         */
        state: string;
    }

    export interface GetInstanceParamsInstanceEnumParam {
        /**
         * current value.
         */
        currentValue: string;
        /**
         * default value.
         */
        defaultValue: string;
        /**
         * enum value.
         */
        enumValues: string[];
        /**
         * if need restart.
         */
        needRestart: string;
        /**
         * name of parameter.
         */
        paramName: string;
        /**
         * if is running.
         */
        status: number;
        /**
         * descripition of parameter.
         */
        tips: string[];
        /**
         * value type.
         */
        valueType: string;
    }

    export interface GetInstanceParamsInstanceIntegerParam {
        /**
         * current value.
         */
        currentValue: string;
        /**
         * default value.
         */
        defaultValue: string;
        /**
         * max value.
         */
        max: string;
        /**
         * min value.
         */
        min: string;
        /**
         * if need restart.
         */
        needRestart: string;
        /**
         * name of parameter.
         */
        paramName: string;
        /**
         * if is running.
         */
        status: number;
        /**
         * descripition of parameter.
         */
        tips: string[];
        /**
         * value type.
         */
        valueType: string;
    }

    export interface GetInstanceParamsInstanceMultiParam {
        /**
         * current value.
         */
        currentValue: string;
        /**
         * default value.
         */
        defaultValue: string;
        /**
         * enum value.
         */
        enumValues: string[];
        /**
         * if need restart.
         */
        needRestart: string;
        /**
         * name of parameter.
         */
        paramName: string;
        /**
         * if is running.
         */
        status: number;
        /**
         * descripition of parameter.
         */
        tips: string[];
        /**
         * value type.
         */
        valueType: string;
    }

    export interface GetInstanceParamsInstanceTextParam {
        /**
         * current value.
         */
        currentValue: string;
        /**
         * default value.
         */
        defaultValue: string;
        /**
         * if need restart.
         */
        needRestart: string;
        /**
         * name of parameter.
         */
        paramName: string;
        /**
         * if is running.
         */
        status: string;
        /**
         * text value.
         */
        textValue: string;
        /**
         * descripition of parameter.
         */
        tips: string[];
        /**
         * value type.
         */
        valueType: string;
    }

    export interface GetInstancesInstanceList {
        /**
         * Auto renew flag.
         */
        autoRenewFlag: number;
        /**
         * The available zone of the Mongodb.
         */
        availableZone: string;
        /**
         * The charge type of instance.
         */
        chargeType: string;
        /**
         * Type of Mongodb cluster, and available values include replica set cluster(expressed with `REPLSET`), sharding cluster(expressed with `SHARD`).
         */
        clusterType: string;
        /**
         * Number of cpu's core.
         */
        cpu: number;
        /**
         * Creation time of the Mongodb instance.
         */
        createTime: string;
        /**
         * Version of the Mongodb engine.
         */
        engineVersion: string;
        /**
         * ID of the Mongodb instance to be queried.
         */
        instanceId: string;
        /**
         * Name of the Mongodb instance.
         */
        instanceName: string;
        /**
         * Type of Mongodb instance.
         */
        machineType: string;
        /**
         * Memory size.
         */
        memory: number;
        /**
         * ID of the project which the instance belongs.
         */
        projectId: number;
        /**
         * Number of sharding.
         */
        shardQuantity: number;
        /**
         * Status of the Mongodb, and available values include pending initialization(expressed with 0),  processing(expressed with 1), running(expressed with 2) and expired(expressed with -2).
         */
        status: number;
        /**
         * ID of the subnet.
         */
        subnetId: string;
        /**
         * Tags of the Mongodb instance to be queried.
         */
        tags: {[key: string]: any};
        /**
         * IP of the Mongodb instance.
         */
        vip: string;
        /**
         * Disk size.
         */
        volume: number;
        /**
         * ID of the VPC.
         */
        vpcId: string;
        /**
         * IP port of the Mongodb instance.
         */
        vport: number;
    }

    export interface GetZoneConfigList {
        /**
         * The available zone of the Mongodb.
         */
        availableZone: string;
        /**
         * Type of Mongodb cluster.
         */
        clusterType: string;
        /**
         * Number of cpu's core.
         */
        cpu: number;
        /**
         * Default disk size.
         */
        defaultStorage: number;
        /**
         * Version of the Mongodb version.
         */
        engineVersion: string;
        /**
         * Type of Mongodb instance.
         */
        machineType: string;
        /**
         * Maximum replicate set num for sharding cluster.
         */
        maxReplicateSetNum: number;
        /**
         * Maximum size of the disk.
         */
        maxStorage: number;
        /**
         * Memory size.
         */
        memory: number;
        /**
         * Minimum replicate set num for sharding cluster.
         */
        minReplicateSetNum: number;
        /**
         * Minimum sie of the disk.
         */
        minStorage: number;
    }

    export interface InstanceAccountAuthRole {
        /**
         * Permission information of the current account. 0: No permission. 1: read-only. 2: Write only. 3: Read and write.
         */
        mask: number;
        /**
         * Refers to the name of the database with the current account permissions.*: Indicates all databases. db.name: Indicates the database of a specific name.
         */
        namespace: string;
    }

    export interface InstanceBackupDownloadTaskBackupSet {
        replicaSetId: string;
    }

    export interface InstanceStandbyInstanceList {
        /**
         * Indicates the ID of standby instance.
         */
        standbyInstanceId: string;
        /**
         * Indicates the region of standby instance.
         */
        standbyInstanceRegion: string;
    }
}

export namespace Monitor {
    export interface AlarmNoticeClsNotice {
        /**
         * Start-stop status, can not be transmitted, default enabled. 0= Disabled, 1= enabled.
         */
        enable?: number;
        /**
         * Log collection Id.
         */
        logSetId: string;
        /**
         * Regional.
         */
        region: string;
        /**
         * Theme Id.
         */
        topicId: string;
    }

    export interface AlarmNoticeUrlNotice {
        /**
         * Notification End Time Seconds at the start of a day.
         */
        endTime?: number;
        /**
         * Notification Start Time Number of seconds at the start of a day.
         */
        startTime?: number;
        /**
         * Callback URL (limited to 256 characters).
         */
        url: string;
        /**
         * Notification period 1-7 indicates Monday to Sunday.
         */
        weekdays?: number[];
    }

    export interface AlarmNoticeUserNotice {
        /**
         * The number of seconds since the notification end time 00:00:00 (value range 0-86399).
         */
        endTime: number;
        /**
         * User group ID list.
         */
        groupIds?: number[];
        /**
         * Contact notification required 0= No 1= Yes.
         */
        needPhoneArriveNotice?: number;
        /**
         * Notification Channel List EMAIL=Mail SMS=SMS CALL=Telephone WECHAT=WeChat RTX=Enterprise WeChat.
         */
        noticeWays: string[];
        /**
         * Call type SYNC= Simultaneous call CIRCLE= Round call If this parameter is not specified, the default value is round call.
         */
        phoneCallType?: string;
        /**
         * Number of seconds between polls (value range: 60-900).
         */
        phoneCircleInterval?: number;
        /**
         * Number of telephone polls (value range: 1-5).
         */
        phoneCircleTimes?: number;
        /**
         * Number of seconds between calls in a polling session (value range: 60-900).
         */
        phoneInnerInterval?: number;
        /**
         * Telephone polling list.
         */
        phoneOrders?: number[];
        /**
         * Recipient Type USER=User GROUP=User Group.
         */
        receiverType: string;
        /**
         * The number of seconds since the notification start time 00:00:00 (value range 0-86399).
         */
        startTime: number;
        /**
         * User UID List.
         */
        userIds?: number[];
        /**
         * Notification period 1-7 indicates Monday to Sunday.
         */
        weekdays?: number[];
    }

    export interface AlarmPolicyConditions {
        /**
         * The and or relation of indicator alarm rule.
         */
        isUnionRule?: number;
        /**
         * A list of metric trigger condition.
         */
        rules?: outputs.Monitor.AlarmPolicyConditionsRule[];
    }

    export interface AlarmPolicyConditionsRule {
        /**
         * Number of periods.
         */
        continuePeriod: number;
        /**
         * Metric display name, which is used in the output parameter.
         */
        description: string;
        /**
         * Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
         */
        filter?: outputs.Monitor.AlarmPolicyConditionsRuleFilter;
        /**
         * Whether the alarm frequency increases exponentially.
         */
        isPowerNotice: number;
        /**
         * Metric name or event name.
         */
        metricName?: string;
        /**
         * Alarm interval in seconds.
         */
        noticeFrequency: number;
        /**
         * Operator.
         */
        operator?: string;
        /**
         * Statistical period in seconds.
         */
        period?: number;
        /**
         * Trigger condition type.
         */
        ruleType: string;
        /**
         * Unit, which is used in the output parameter.
         */
        unit: string;
        /**
         * Threshold.
         */
        value?: string;
    }

    export interface AlarmPolicyConditionsRuleFilter {
        /**
         * JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
         */
        dimensions?: string;
        /**
         * Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
         */
        type?: string;
    }

    export interface AlarmPolicyEventCondition {
        /**
         * Number of periods.
         */
        continuePeriod: number;
        /**
         * Metric display name, which is used in the output parameter.
         */
        description: string;
        /**
         * Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
         */
        filter?: outputs.Monitor.AlarmPolicyEventConditionFilter;
        /**
         * Whether the alarm frequency increases exponentially.
         */
        isPowerNotice: number;
        /**
         * Metric name or event name.
         */
        metricName?: string;
        /**
         * Alarm interval in seconds.
         */
        noticeFrequency: number;
        /**
         * Operator.
         */
        operator?: string;
        /**
         * Statistical period in seconds.
         */
        period?: number;
        /**
         * Trigger condition type.
         */
        ruleType: string;
        /**
         * Unit, which is used in the output parameter.
         */
        unit: string;
        /**
         * Threshold.
         */
        value?: string;
    }

    export interface AlarmPolicyEventConditionFilter {
        /**
         * JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
         */
        dimensions?: string;
        /**
         * Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
         */
        type?: string;
    }

    export interface AlarmPolicyPolicyTag {
        /**
         * Tag key.
         */
        key: string;
        /**
         * Tag value.
         */
        value: string;
    }

    export interface AlarmPolicyTriggerTask {
        /**
         * Configuration information in JSON format.
         */
        taskConfig: string;
        /**
         * Triggered task type.
         */
        type: string;
    }

    export interface BindingReceiverReceivers {
        /**
         * End of alarm period. Meaning with `startTime`.
         */
        endTime?: number;
        /**
         * Method of warning notification.Optional `CALL`,`EMAIL`,`SITE`,`SMS`,`WECHAT`.
         */
        notifyWays: string[];
        /**
         * Alert sending language. Optional `en-US`,`zh-CN`.
         */
        receiveLanguage?: string;
        /**
         * Alarm receive group ID list.
         */
        receiverGroupLists?: number[];
        /**
         * Receive type. Optional `group`,`user`.
         */
        receiverType: string;
        /**
         * Alarm receiver ID list.
         */
        receiverUserLists?: number[];
        /**
         * Alarm period start time. Valid value ranges: (0~86399). which removes the date after it is converted to Beijing time as a Unix timestamp, for example 7200 means '10:0:0'.
         */
        startTime?: number;
    }

    export interface GetAlarmNoticesAlarmNotice {
        /**
         * A maximum of one alarm notification can be pushed to the CLS service.
         */
        clsNotices: outputs.Monitor.GetAlarmNoticesAlarmNoticeClsNotice[];
        /**
         * Alarm notification template ID.
         */
        id: string;
        /**
         * Whether it is the system default notification template 0=No 1=Yes.
         */
        isPreset: number;
        /**
         * Alarm notification template name Used for fuzzy search.
         */
        name: string;
        /**
         * Notification language zh-CN=Chinese en-US=English.
         */
        noticeLanguage: string;
        /**
         * Alarm notification type ALARM=Notification not restored OK=Notification restored ALL.
         */
        noticeType: string;
        /**
         * List of alarm policy IDs bound to the alarm notification template.
         */
        policyIds: string[];
        /**
         * Last modified time.
         */
        updatedAt: string;
        /**
         * Last Modified By.
         */
        updatedBy: string;
        /**
         * The maximum number of callback notifications is 3.
         */
        urlNotices: outputs.Monitor.GetAlarmNoticesAlarmNoticeUrlNotice[];
        /**
         * Alarm notification template list.(At most five).
         */
        userNotices: outputs.Monitor.GetAlarmNoticesAlarmNoticeUserNotice[];
    }

    export interface GetAlarmNoticesAlarmNoticeClsNotice {
        /**
         * Start-stop status, can not be transmitted, default enabled. 0= Disabled, 1= enabled.
         */
        enable: number;
        /**
         * Log collection Id.
         */
        logSetId: string;
        /**
         * Regional.
         */
        region: string;
        /**
         * Theme Id.
         */
        topicId: string;
    }

    export interface GetAlarmNoticesAlarmNoticeUrlNotice {
        /**
         * The number of seconds since the notification end time 00:00:00 (value range 0-86399).
         */
        endTime: number;
        /**
         * The number of seconds since the notification start time 00:00:00 (value range 0-86399).
         */
        startTime: number;
        /**
         * Callback URL (limited to 256 characters).
         */
        url: string;
        /**
         * Notification period 1-7 indicates Monday to Sunday.
         */
        weekdays: number[];
    }

    export interface GetAlarmNoticesAlarmNoticeUserNotice {
        /**
         * The number of seconds since the notification end time 00:00:00 (value range 0-86399).
         */
        endTime: number;
        /**
         * Receive group list.
         */
        groupIds: number[];
        /**
         * Contact notification required 0= No 1= Yes.
         */
        needPhoneArriveNotice: number;
        /**
         * Notification Channel List EMAIL=Mail SMS=SMS CALL=Telephone WECHAT=WeChat RTX=Enterprise WeChat.
         */
        noticeWays: string[];
        /**
         * Call type SYNC= Simultaneous call CIRCLE= Round call If this parameter is not specified, the default value is round call.
         */
        phoneCallType: string;
        /**
         * Number of seconds between polls (value range: 60-900).
         */
        phoneCircleInterval: number;
        /**
         * Number of telephone polls (value range: 1-5).
         */
        phoneCircleTimes: number;
        /**
         * Number of seconds between calls in a polling session (value range: 60-900).
         */
        phoneInnerInterval: number;
        /**
         * Telephone polling list.
         */
        phoneOrders: number[];
        /**
         * To filter alarm notification templates according to recipients, you need to select the notification user type. USER=user GROUP=user group Leave blank = not filter by recipient.
         */
        receiverType: string;
        /**
         * The number of seconds since the notification start time 00:00:00 (value range 0-86399).
         */
        startTime: number;
        /**
         * List of recipients.
         */
        userIds: number[];
        /**
         * Notification period 1-7 indicates Monday to Sunday.
         */
        weekdays: number[];
    }

    export interface GetBindingObjectsList {
        /**
         * Represents a collection of dimensions of an object instance, json format.
         */
        dimensionsJson: string;
        /**
         * Whether the object is shielded or not, `0` means unshielded and `1` means shielded.
         */
        isShielded: number;
        /**
         * The region where the object is located.
         */
        region: string;
        /**
         * Object unique ID.
         */
        uniqueId: string;
    }

    export interface GetDataDimension {
        /**
         * Instance dimension name, eg: `InstanceId` for cvm.
         */
        name: string;
        /**
         * Instance dimension value, eg: `ins-j0hk02zo` for cvm.
         */
        value: string;
    }

    export interface GetDataList {
        /**
         * Statistical timestamp.
         */
        timestamp: number;
        /**
         * Instance dimension value, eg: `ins-j0hk02zo` for cvm.
         */
        value: number;
    }

    export interface GetPolicyConditionsList {
        /**
         * A list of event condition metrics. Each element contains the following attributes:
         */
        eventMetrics: outputs.Monitor.GetPolicyConditionsListEventMetric[];
        /**
         * Whether to support multi region.
         */
        isSupportMultiRegion: boolean;
        /**
         * A list of event condition metrics. Each element contains the following attributes:
         */
        metrics: outputs.Monitor.GetPolicyConditionsListMetric[];
        /**
         * Name of the policy name, support partial matching, eg:`Cloud Virtual Machine`,`Virtual`,`Cloud Load Banlancer-Private CLB Listener`.
         */
        name: string;
        /**
         * Policy view name, eg:`cvmDevice`,`BANDWIDTHPACKAGE`, refer to `data.tencentcloud_monitor_policy_conditions(policy_view_name)`.
         */
        policyViewName: string;
        /**
         * Support regions of this policy view.
         */
        supportRegions: string[];
    }

    export interface GetPolicyConditionsListEventMetric {
        /**
         * The ID of this event metric.
         */
        eventId: number;
        /**
         * The name of this event metric.
         */
        eventShowName: string;
        /**
         * Whether to recover.
         */
        needRecovered: boolean;
    }

    export interface GetPolicyConditionsListMetric {
        /**
         * Calculate type of this metric.
         */
        calcTypeKeys: number[];
        /**
         * Whether `calcType` required in the configuration.
         */
        calcTypeNeed: boolean;
        /**
         * The default calculate value of this metric.
         */
        calcValueDefault: string;
        /**
         * The fixed calculate value of this metric.
         */
        calcValueFixed: string;
        /**
         * The max calculate value of this metric.
         */
        calcValueMax: string;
        /**
         * The min calculate value of this metric.
         */
        calcValueMin: string;
        /**
         * Whether `calcValue` required in the configuration.
         */
        calcValueNeed: boolean;
        /**
         * The default continue time(seconds) config for this metric.
         */
        continueTimeDefault: number;
        /**
         * The continue time(seconds) keys for this metric.
         */
        continueTimeKeys: number[];
        /**
         * Whether `continueTime` required in the configuration.
         */
        continueTimeNeed: boolean;
        /**
         * The ID of this metric.
         */
        metricId: number;
        /**
         * The name of this metric.
         */
        metricShowName: string;
        /**
         * The unit of this metric.
         */
        metricUnit: string;
        /**
         * The default data time(seconds) config for this metric.
         */
        periodDefault: number;
        /**
         * The data time(seconds) keys for this metric.
         */
        periodKeys: number[];
        /**
         * Whether `period` required in the configuration.
         */
        periodNeed: boolean;
        /**
         * The default period number config for this metric.
         */
        periodNumDefault: number;
        /**
         * The period number keys for this metric.
         */
        periodNumKeys: number[];
        /**
         * Whether `periodNum` required in the configuration.
         */
        periodNumNeed: boolean;
        /**
         * Data aggregation mode, cycle of 10 seconds.
         */
        statTypeP10: string;
        /**
         * Data aggregation mode, cycle of 1800 seconds.
         */
        statTypeP1800: string;
        /**
         * Data aggregation mode, cycle of 300 seconds.
         */
        statTypeP300: string;
        /**
         * Data aggregation mode, cycle of 3600 seconds.
         */
        statTypeP3600: string;
        /**
         * Data aggregation mode, cycle of 5 seconds.
         */
        statTypeP5: string;
        /**
         * Data aggregation mode, cycle of 60 seconds.
         */
        statTypeP60: string;
        /**
         * Data aggregation mode, cycle of 600 seconds.
         */
        statTypeP600: string;
        /**
         * Data aggregation mode, cycle of 86400 seconds.
         */
        statTypeP86400: string;
    }

    export interface GetPolicyGroupsList {
        /**
         * Whether it can be set as the default policy.
         */
        canSetDefault: boolean;
        /**
         * A list of threshold rules. Each element contains the following attributes:
         */
        conditions: outputs.Monitor.GetPolicyGroupsListCondition[];
        /**
         * A list of event rules. Each element contains the following attributes:
         */
        eventConditions: outputs.Monitor.GetPolicyGroupsListEventCondition[];
        /**
         * The policy group id.
         */
        groupId: number;
        /**
         * The policy group name.
         */
        groupName: string;
        /**
         * The policy group create timestamp.
         */
        insertTime: number;
        /**
         * If is default policy group or not, `0` represents the non-default policy, and `1` represents the default policy.
         */
        isDefault: number;
        /**
         * Whether open or not.
         */
        isOpen: boolean;
        /**
         * Recently edited user uin.
         */
        lastEditUin: string;
        /**
         * Number of unmasked instances of policy group bindings.
         */
        noShieldedSum: number;
        /**
         * Parent policy group ID.
         */
        parentGroupId: number;
        /**
         * The policy group view name.
         */
        policyViewName: string;
        /**
         * The project ID to which the policy group belongs.
         */
        projectId: number;
        /**
         * A list of receivers. Each element contains the following attributes:
         */
        receivers: outputs.Monitor.GetPolicyGroupsListReceiver[];
        /**
         * Policy group remarks.
         */
        remark: string;
        /**
         * The policy group update timestamp.
         */
        updateTime: number;
        /**
         * Number of instances of policy group bindings.
         */
        useSum: number;
    }

    export interface GetPolicyGroupsListCondition {
        /**
         * Alarm sending cycle per second. `<0` does not fire, `0` only fires once, and `>0` fires every triggerTime second.
         */
        alarmNotifyPeriod: number;
        /**
         * Alarm sending convergence type. `0` continuous alarm, `1` index alarm.
         */
        alarmNotifyType: number;
        /**
         * Compare type, `1` means more than, `2`  means greater than or equal, `3` means less than, `4` means less than or equal to, `5` means equal, `6` means not equal, `7` means days rose, `8` means days fell, `9` means weeks rose, `10` means weeks fell, `11` means period rise, `12` means period fell.
         */
        calcType: number;
        /**
         * Threshold value.
         */
        calcValue: string;
        /**
         * How long does the triggering rule last (per second).
         */
        continueTime: number;
        /**
         * The ID of this metric.
         */
        metricId: number;
        /**
         * The name of this metric.
         */
        metricShowName: string;
        /**
         * The unit of this metric.
         */
        metricUnit: string;
        /**
         * Data aggregation cycle (unit second).
         */
        period: number;
        /**
         * Threshold rule ID.
         */
        ruleId: number;
    }

    export interface GetPolicyGroupsListEventCondition {
        /**
         * Alarm sending cycle per second. `<0` does not fire, `0` only fires once, and `>0` fires every triggerTime second.
         */
        alarmNotifyPeriod: number;
        /**
         * Alarm sending convergence type. `0` continuous alarm, `1` index alarm.
         */
        alarmNotifyType: number;
        /**
         * The ID of this event metric.
         */
        eventId: number;
        /**
         * The name of this event metric.
         */
        eventShowName: string;
        /**
         * Threshold rule ID.
         */
        ruleId: number;
    }

    export interface GetPolicyGroupsListReceiver {
        /**
         * End of alarm period. Meaning with `startTime`.
         */
        endTime: number;
        /**
         * Do need a telephone alarm contact prompt.You don't need 0, you need 1.
         */
        needSendNotice: number;
        /**
         * Method of warning notification.Optional `CALL`,`EMAIL`,`SITE`,`SMS`,`WECHAT`.
         */
        notifyWays: string[];
        /**
         * Telephone warning to individual interval (seconds).
         */
        personInterval: number;
        /**
         * Alert sending language.
         */
        receiveLanguage: string;
        /**
         * Alarm receive group ID list.
         */
        receiverGroupLists: number[];
        /**
         * Receive type. Optional 'group' or 'user'.
         */
        receiverType: string;
        /**
         * Alarm receiver ID list.
         */
        receiverUserLists: number[];
        /**
         * Restore notification mode. Optional "SMS".
         */
        recoverNotifies: string[];
        /**
         * Telephone alarm interval per round (seconds).
         */
        roundInterval: number;
        /**
         * Telephone alarm number.
         */
        roundNumber: number;
        /**
         * Telephone warning time.Option "OCCUR", "RECOVER".
         */
        sendFors: string[];
        /**
         * Alarm period start time.Range [0,86399], which removes the date after it is converted to Beijing time as a Unix timestamp, for example 7200 means '10:0:0'.
         */
        startTime: number;
        /**
         * The phone alerts the receiver uid.
         */
        uidLists: number[];
    }

    export interface GetProductEventDimension {
        /**
         * Instance dimension name, eg: `deviceWanIp` for internet ip.
         */
        name?: string;
        /**
         * Instance dimension value, eg: `119.119.119.119` for internet ip.
         */
        value?: string;
    }

    export interface GetProductEventList {
        /**
         * A list of addition message. Each element contains the following attributes:
         */
        additionMsgs: outputs.Monitor.GetProductEventListAdditionMsg[];
        /**
         * Dimensional composition of instance objects.
         */
        dimensions: outputs.Monitor.GetProductEventListDimension[];
        /**
         * Event chinese name.
         */
        eventCname: string;
        /**
         * Event english name.
         */
        eventEname: string;
        /**
         * Event ID.
         */
        eventId: number;
        /**
         * Event name filtering, such as `guestReboot` indicates that the machine restart.
         */
        eventName: string;
        /**
         * A list of group info. Each element contains the following attributes:
         */
        groupInfos: outputs.Monitor.GetProductEventListGroupInfo[];
        /**
         * Affect objects, such as `ins-19708ino`.
         */
        instanceId: string;
        /**
         * The name of this instance.
         */
        instanceName: string;
        /**
         * Alarm status configuration filter, 1means configured, 0(default) means not configured.
         */
        isAlarmConfig: number;
        /**
         * Product chinese name.
         */
        productCname: string;
        /**
         * Product english name.
         */
        productEname: string;
        /**
         * Product type filtering, such as `cvm` for cloud server.
         */
        productName: string;
        /**
         * Project ID filter.
         */
        projectId: string;
        /**
         * The region of this instance.
         */
        region: string;
        /**
         * Start timestamp for this query, eg:`1588230000`. Default start time is `now-3600`.
         */
        startTime: number;
        /**
         * Event status filter, value range `-`,`alarm`,`recover`, indicating recovered, unrecovered and stateless.
         */
        status: string;
        /**
         * Whether to support alarm.
         */
        supportAlarm: number;
        /**
         * Event type filtering, with value range `abnormal`,`statusChange`, indicating state change and abnormal events.
         */
        type: string;
        /**
         * The update timestamp of this event.
         */
        updateTime: number;
    }

    export interface GetProductEventListAdditionMsg {
        /**
         * The key of this dimension.
         */
        key: string;
        /**
         * Instance dimension name, eg: `deviceWanIp` for internet ip.
         */
        name: string;
        /**
         * Instance dimension value, eg: `119.119.119.119` for internet ip.
         */
        value: string;
    }

    export interface GetProductEventListDimension {
        /**
         * The key of this dimension.
         */
        key: string;
        /**
         * Instance dimension name, eg: `deviceWanIp` for internet ip.
         */
        name: string;
        /**
         * Instance dimension value, eg: `119.119.119.119` for internet ip.
         */
        value: string;
    }

    export interface GetProductEventListGroupInfo {
        /**
         * Policy group ID.
         */
        groupId: string;
        /**
         * Policy group name.
         */
        groupName: string;
    }

    export interface GetProductNamespaceList {
        /**
         * Namespace of each cloud product in monitor system.
         */
        namespace: string;
        /**
         * Chinese name of this product.
         */
        productChineseName: string;
        /**
         * English name of this product.
         */
        productName: string;
    }

    export interface GrafanaSsoAccountRole {
        /**
         * Grafana organization id string.
         */
        organization: string;
        /**
         * Grafana role, one of {Admin,Editor,Viewer}.
         */
        role: string;
    }

    export interface PolicyBindingObjectDimension {
        /**
         * Represents a collection of dimensions of an object instance, json format.eg:'{"unInstanceId":"ins-ot3cq4bi"}'.
         */
        dimensionsJson: string;
        uniqueId: string;
    }

    export interface TmpAlertRuleAnnotation {
        /**
         * key.
         */
        key: string;
        /**
         * value.
         */
        value: string;
    }

    export interface TmpAlertRuleLabel {
        /**
         * key.
         */
        key: string;
        /**
         * value.
         */
        value: string;
    }

    export interface TmpTkeAlertPolicyAlertRule {
        /**
         * If the alarm policy is derived from the CRD resource definition of the user cluster, the ClusterId is the cluster ID to which it belongs.
         */
        clusterId?: string;
        /**
         * Alarm policy ID. Note: This field may return null, indicating that a valid value could not be retrieved.
         */
        id?: string;
        /**
         * Policy name.
         */
        name: string;
        /**
         * Alarm channels, which may be returned using null in the template.
         */
        notification?: outputs.Monitor.TmpTkeAlertPolicyAlertRuleNotification;
        /**
         * A list of rules.
         */
        rules: outputs.Monitor.TmpTkeAlertPolicyAlertRuleRule[];
        /**
         * If the alarm is sent from a template, the TemplateId is the template id.
         */
        templateId?: string;
        /**
         * Last modified time.
         */
        updatedAt?: string;
    }

    export interface TmpTkeAlertPolicyAlertRuleNotification {
        /**
         * If Type is alertmanager, the field is required. Note: This field may return null, indicating that a valid value could not be retrieved..
         */
        alertManager?: outputs.Monitor.TmpTkeAlertPolicyAlertRuleNotificationAlertManager;
        /**
         * Whether it is enabled.
         */
        enabled: boolean;
        /**
         * Alarm notification method. At present, there are SMS, EMAIL, CALL, WECHAT methods.
         */
        notifyWays?: string[];
        /**
         * Telephone alerts reach notifications.
         */
        phoneArriveNotice?: boolean;
        /**
         * Effective end timeTelephone alarm wheel interval. Units: Seconds.
         */
        phoneCircleInterval?: number;
        /**
         * PhoneCircleTimes.
         */
        phoneCircleTimes?: number;
        /**
         * Telephone alarm wheel intervals. Units: Seconds.
         */
        phoneInnerInterval?: number;
        /**
         * Telephone alarm sequence.
         */
        phoneNotifyOrders?: number[];
        /**
         * Alert Receiving Group (User Group).
         */
        receiverGroups?: string[];
        /**
         * Convergence time.
         */
        repeatInterval?: string;
        /**
         * Effective end time.
         */
        timeRangeEnd?: string;
        /**
         * The time from which it takes effect.
         */
        timeRangeStart?: string;
        /**
         * The channel type, which defaults to amp, supports the following `amp`, `webhook`, `alertmanager`.
         */
        type: string;
        /**
         * If Type is webhook, the field is required. Note: This field may return null, indicating that a valid value could not be retrieved.
         */
        webHook?: string;
    }

    export interface TmpTkeAlertPolicyAlertRuleNotificationAlertManager {
        /**
         * The ID of the cluster where the alertmanager is deployed. Note: This field may return null, indicating that a valid value could not be retrieved.
         */
        clusterId?: string;
        /**
         * Alertmanager is deployed in the cluster type. Note: This field may return null, indicating that a valid value could not be retrieved.
         */
        clusterType?: string;
        /**
         * Alertmanager url.
         */
        url: string;
    }

    export interface TmpTkeAlertPolicyAlertRuleRule {
        /**
         * Refer to annotations in prometheus rule.
         */
        annotations?: outputs.Monitor.TmpTkeAlertPolicyAlertRuleRuleAnnotation[];
        /**
         * A description of the rule.
         */
        describe?: string;
        /**
         * Time of duration.
         */
        for: string;
        /**
         * Extra labels.
         */
        labels: outputs.Monitor.TmpTkeAlertPolicyAlertRuleRuleLabel[];
        /**
         * Rule name.
         */
        name: string;
        /**
         * Prometheus statement.
         */
        rule: string;
        /**
         * Alarm rule status.
         */
        ruleState?: number;
        /**
         * Alert sending template.
         */
        template: string;
    }

    export interface TmpTkeAlertPolicyAlertRuleRuleAnnotation {
        /**
         * Name of map.
         */
        name: string;
        /**
         * Value of map.
         */
        value: string;
    }

    export interface TmpTkeAlertPolicyAlertRuleRuleLabel {
        /**
         * Name of map.
         */
        name: string;
        /**
         * Value of map.
         */
        value: string;
    }

    export interface TmpTkeClusterAgentAgents {
        /**
         * An id identify the cluster, like `cls-xxxxxx`.
         */
        clusterId: string;
        clusterName: string;
        /**
         * Type of cluster.
         */
        clusterType: string;
        /**
         * Whether to enable the public network CLB.
         */
        enableExternal: boolean;
        /**
         * All metrics collected by the cluster will carry these labels.
         */
        externalLabels?: outputs.Monitor.TmpTkeClusterAgentAgentsExternalLabel[];
        /**
         * Pod configuration for components deployed in the cluster.
         */
        inClusterPodConfig?: outputs.Monitor.TmpTkeClusterAgentAgentsInClusterPodConfig;
        /**
         * Whether to install the default collection configuration.
         */
        notInstallBasicScrape?: boolean;
        /**
         * Whether to collect indicators, true means drop all indicators, false means collect default indicators.
         */
        notScrape?: boolean;
        /**
         * Limitation of region.
         */
        region: string;
        status: string;
    }

    export interface TmpTkeClusterAgentAgentsExternalLabel {
        /**
         * Indicator name.
         */
        name: string;
        /**
         * Index value.
         */
        value?: string;
    }

    export interface TmpTkeClusterAgentAgentsInClusterPodConfig {
        /**
         * Whether to use HostNetWork.
         */
        hostNet: boolean;
        /**
         * Specify the pod to run the node.
         */
        nodeSelectors?: outputs.Monitor.TmpTkeClusterAgentAgentsInClusterPodConfigNodeSelector[];
        /**
         * Tolerate Stain.
         */
        tolerations?: outputs.Monitor.TmpTkeClusterAgentAgentsInClusterPodConfigToleration[];
    }

    export interface TmpTkeClusterAgentAgentsInClusterPodConfigNodeSelector {
        /**
         * The pod configuration name of the component deployed in the cluster.
         */
        name?: string;
        /**
         * Pod configuration values for components deployed in the cluster.
         */
        value?: string;
    }

    export interface TmpTkeClusterAgentAgentsInClusterPodConfigToleration {
        /**
         * blemish effect to match.
         */
        effect?: string;
        /**
         * The taint key to which the tolerance applies.
         */
        key?: string;
        /**
         * key-value relationship.
         */
        operator?: string;
    }

    export interface TmpTkeConfigPodMonitor {
        /**
         * Config.
         */
        config: string;
        /**
         * Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
         */
        name: string;
        /**
         * Used for output parameters, if the configuration comes from a template, it is the template id.
         */
        templateId?: string;
    }

    export interface TmpTkeConfigRawJob {
        /**
         * Config.
         */
        config: string;
        /**
         * Name.
         */
        name: string;
        /**
         * Used for output parameters, if the configuration comes from a template, it is the template id.
         */
        templateId?: string;
    }

    export interface TmpTkeConfigServiceMonitor {
        /**
         * Config.
         */
        config: string;
        /**
         * Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
         */
        name: string;
        /**
         * Used for output parameters, if the configuration comes from a template, it is the template id.
         */
        templateId?: string;
    }

    export interface TmpTkeGlobalNotificationNotification {
        /**
         * Alert manager, if Type is `alertmanager`, this field is required.
         */
        alertManagers?: outputs.Monitor.TmpTkeGlobalNotificationNotificationAlertManager[];
        /**
         * Alarm notification switch.
         */
        enabled: boolean;
        /**
         * Alarm notification method, Valid values: `SMS`, `EMAIL`, `CALL`, `WECHAT`.
         */
        notifyWays?: string[];
        /**
         * Phone Alarm Reach Notification, NotifyWay is `CALL`, and this parameter is used.
         */
        phoneArriveNotice?: boolean;
        /**
         * Telephone alarm off-wheel interval, NotifyWay is `CALL`, and this parameter is used.
         */
        phoneCircleInterval?: number;
        /**
         * Number of phone alerts (user group), NotifyWay is `CALL`, and this parameter is used.
         */
        phoneCircleTimes?: number;
        /**
         * Interval between telephone alarm rounds, NotifyWay is `CALL`, and this parameter is used.
         */
        phoneInnerInterval?: number;
        /**
         * Phone alert sequence, NotifyWay is `CALL`, and this parameter is used.
         */
        phoneNotifyOrders?: number[];
        /**
         * Alarm receiving group(user group).
         */
        receiverGroups?: string[];
        /**
         * Convergence time.
         */
        repeatInterval?: string;
        /**
         * Effective end time.
         */
        timeRangeEnd?: string;
        /**
         * Effective start time.
         */
        timeRangeStart?: string;
        /**
         * Alarm notification type, Valid values: `amp`, `webhook`, `alertmanager`.
         */
        type: string;
        /**
         * Web hook, if Type is `webhook`, this field is required.
         */
        webHook?: string;
    }

    export interface TmpTkeGlobalNotificationNotificationAlertManager {
        /**
         * Cluster id.
         */
        clusterId?: string;
        /**
         * Cluster type.
         */
        clusterType?: string;
        /**
         * Alert manager url.
         */
        url: string;
    }

    export interface TmpTkeTemplateAttachmentTargets {
        /**
         * ID of the cluster.
         */
        clusterId?: string;
        /**
         * Name the cluster.
         */
        clusterName?: string;
        /**
         * Cluster type.
         */
        clusterType?: string;
        /**
         * instance id.
         */
        instanceId: string;
        /**
         * Name of the prometheus instance.
         */
        instanceName?: string;
        /**
         * target area.
         */
        region: string;
        /**
         * Last sync template time.
         */
        syncTime?: string;
        /**
         * Template version currently in use.
         */
        version?: string;
    }

    export interface TmpTkeTemplateTemplate {
        /**
         * Template description.
         */
        describe?: string;
        /**
         * Whether the system-supplied default template is used for outgoing references.
         */
        isDefault?: boolean;
        /**
         * Template dimensions, the following types are supported `instance` instance level, `cluster` cluster level.
         */
        level: string;
        /**
         * Template name.
         */
        name: string;
        /**
         * Effective when Level is a cluster, A list of PodMonitors rules in the template.
         */
        podMonitors?: outputs.Monitor.TmpTkeTemplateTemplatePodMonitor[];
        /**
         * Effective when Level is a cluster, A list of RawJobs rules in the template.
         */
        rawJobs?: outputs.Monitor.TmpTkeTemplateTemplateRawJob[];
        /**
         * Effective when Level is instance, A list of aggregation rules in the template.
         */
        recordRules?: outputs.Monitor.TmpTkeTemplateTemplateRecordRule[];
        /**
         * Effective when Level is a cluster, A list of ServiceMonitor rules in the template.
         */
        serviceMonitors?: outputs.Monitor.TmpTkeTemplateTemplateServiceMonitor[];
        /**
         * The ID of the template, which is used for the outgoing reference.
         */
        templateId?: string;
        /**
         * Last updated, for outgoing references.
         */
        updateTime?: string;
        /**
         * Whether the system-supplied default template is used for outgoing references.
         */
        version?: string;
    }

    export interface TmpTkeTemplateTemplatePodMonitor {
        /**
         * Config.
         */
        config: string;
        /**
         * Name.
         */
        name: string;
        /**
         * Used for the argument, if the configuration comes to the template, the template id.
         */
        templateId?: string;
    }

    export interface TmpTkeTemplateTemplateRawJob {
        /**
         * Config.
         */
        config: string;
        /**
         * Name.
         */
        name: string;
        /**
         * Used for the argument, if the configuration comes to the template, the template id.
         */
        templateId?: string;
    }

    export interface TmpTkeTemplateTemplateRecordRule {
        /**
         * Config.
         */
        config: string;
        /**
         * Name.
         */
        name: string;
        /**
         * Used for the argument, if the configuration comes to the template, the template id.
         */
        templateId?: string;
    }

    export interface TmpTkeTemplateTemplateServiceMonitor {
        /**
         * Config.
         */
        config: string;
        /**
         * Name.
         */
        name: string;
        /**
         * Used for the argument, if the configuration comes to the template, the template id.
         */
        templateId?: string;
    }

}

export namespace Mps {
    export interface AdaptiveDynamicStreamingTemplateStreamInfo {
        /**
         * Audio parameter information.
         */
        audio: outputs.Mps.AdaptiveDynamicStreamingTemplateStreamInfoAudio;
        /**
         * Whether to remove audio stream, value:0: reserved.1: remove.
         */
        removeAudio?: number;
        /**
         * Whether to remove video stream, value:0: reserved.1: remove.
         */
        removeVideo?: number;
        /**
         * Video parameter information.
         */
        video: outputs.Mps.AdaptiveDynamicStreamingTemplateStreamInfoVideo;
    }

    export interface AdaptiveDynamicStreamingTemplateStreamInfoAudio {
        /**
         * Audio channel mode, optional values:`1: single channel.2: Dual channel.6: Stereo.When the package format of the media is an audio format (flac, ogg, mp3, m4a), the number of channels is not allowed to be set to stereo.Default: 2.
         */
        audioChannel?: number;
        /**
         * Bit rate of the audio stream, value range: 0 and [26, 256], unit: kbps.When the value is 0, it means that the audio bit rate is consistent with the original audio.
         */
        bitrate: number;
        /**
         * Encoding format of audio stream.When the outer parameter Container is mp3, the optional value is:libmp3lame.When the outer parameter Container is ogg or flac, the optional value is:flac.When the outer parameter Container is m4a, the optional value is:libfdk_aac.libmp3lame.ac3.When the outer parameter Container is mp4 or flv, the optional value is:libfdk_aac: more suitable for mp4.libmp3lame: more suitable for flv.When the outer parameter Container is hls, the optional value is:libfdk_aac.libmp3lame.
         */
        codec: string;
        /**
         * Sampling rate of audio stream, optional value.32000.44100.48000.Unit: Hz.
         */
        sampleRate: number;
    }

    export interface AdaptiveDynamicStreamingTemplateStreamInfoVideo {
        /**
         * Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
         */
        bitrate: number;
        /**
         * Encoding format of the video stream, optional value:libx264: H.264 encoding.libx265: H.265 encoding.av1: AOMedia Video 1 encoding.Note: Currently H.265 encoding must specify a resolution, and it needs to be within 640*480.Note: av1 encoded containers currently only support mp4.
         */
        codec: string;
        /**
         * Filling type, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling type:stretch: Stretching, stretching each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched.black: Leave black, keep the video aspect ratio unchanged, and fill the rest of the edge with black.white: Leave blank, keep the aspect ratio of the video, and fill the rest of the edge with white.gauss: Gaussian blur, keep the aspect ratio of the video unchanged, and use Gaussian blur for the rest of the edge.Default value: black.Note: Adaptive stream only supports stretch, black.
         */
        fillType?: string;
        /**
         * Video frame rate, value range: [0, 100], unit: Hz.When the value is 0, it means that the frame rate is consistent with the original video.Note: The value range for adaptive code rate is [0, 60].
         */
        fps: number;
        /**
         * The interval between keyframe I frames, value range: 0 and [1, 100000], unit: number of frames.When filling 0 or not filling, the system will automatically set the gop length.
         */
        gop?: number;
        /**
         * The maximum value of the height (or short side) of the video streaming, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
         */
        height?: number;
        /**
         * Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.Note: In adaptive mode, Width cannot be smaller than Height.
         */
        resolutionAdaptive?: string;
        /**
         * Video constant bit rate control factor, the value range is [1, 51].If this parameter is specified, the code rate control method of CRF will be used for transcoding (the video code rate will no longer take effect).If there is no special requirement, it is not recommended to specify this parameter.
         */
        vcrf?: number;
        /**
         * The maximum value of the width (or long side) of the video streaming, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
         */
        width?: number;
    }

    export interface AiAnalysisTemplateClassificationConfigure {
        /**
         * Ai classification task switch, optional value:ON/OFF.
         */
        switch: string;
    }

    export interface AiAnalysisTemplateCoverConfigure {
        /**
         * Ai cover task switch, optional value:ON/OFF.
         */
        switch: string;
    }

    export interface AiAnalysisTemplateFrameTagConfigure {
        /**
         * Ai frame tag task switch, optional value:ON/OFF.
         */
        switch: string;
    }

    export interface AiAnalysisTemplateTagConfigure {
        /**
         * Ai tag task switch, optional value:ON/OFF.
         */
        switch: string;
    }

    export interface AiRecognitionTemplateAsrFullTextConfigure {
        /**
         * Generated subtitle file format, if left blank or blank string means no subtitle file will be generated, optional value:vtt: Generate WebVTT subtitle files.
         */
        subtitleFormat?: string;
        /**
         * Asr full text recognition task switch, optional value:ON/OFF.
         */
        switch: string;
    }

    export interface AiRecognitionTemplateAsrWordsConfigure {
        /**
         * Keyword filter label, specify the label of the keyword to be returned. If not filled or empty, all results will be returned.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
         */
        labelSets?: string[];
        /**
         * Asr word recognition task switch, optional value:ON/OFF.
         */
        switch: string;
    }

    export interface AiRecognitionTemplateFaceConfigure {
        /**
         * Default face filter tag, specify the tag of the default face that needs to be returned. If not filled or empty, all default face results will be returned. Label optional value:entertainment, sport, politician.
         */
        defaultLibraryLabelSets?: string[];
        /**
         * Face library selection, optional value:Default, UserDefine, AllDefault value: All, use the system default face library and user-defined face library.
         */
        faceLibrary?: string;
        /**
         * Face recognition filter score, when the recognition result reaches the score above, the recognition result will be returned. The default is 95 points. Value range: 0 - 100.
         */
        score?: number;
        /**
         * Ai face recognition task switch, optional value:ON/OFF.
         */
        switch: string;
        /**
         * User-defined face filter tag, specify the tag of the user-defined face that needs to be returned. If not filled or empty, all custom face results will be returned.The maximum number of tags is 100, and the length of each tag is up to 16 characters.
         */
        userDefineLibraryLabelSets?: string[];
    }

    export interface AiRecognitionTemplateOcrFullTextConfigure {
        /**
         * Ocr full text recognition task switch, optional value:ON/OFF.
         */
        switch: string;
    }

    export interface AiRecognitionTemplateOcrWordsConfigure {
        /**
         * Keyword filter label, specify the label of the keyword to be returned. If not filled or empty, all results will be returned.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
         */
        labelSets?: string[];
        /**
         * Ocr words recognition task switch, optional value:ON/OFF.
         */
        switch: string;
    }

    export interface TranscodeTemplateAudioTemplate {
        /**
         * Audio channel mode, optional values:`1: single channel.2: Dual channel.6: Stereo.When the package format of the media is an audio format (flac, ogg, mp3, m4a), the number of channels is not allowed to be set to stereo.Default: 2.
         */
        audioChannel?: number;
        /**
         * Bit rate of the audio stream, value range: 0 and [26, 256], unit: kbps.When the value is 0, it means that the audio bit rate is consistent with the original audio.
         */
        bitrate: number;
        /**
         * Encoding format of frequency stream.When the outer parameter Container is mp3, the optional value is:libmp3lame.When the outer parameter Container is ogg or flac, the optional value is:flac.When the outer parameter Container is m4a, the optional value is:libfdk_aac.libmp3lame.ac3.When the outer parameter Container is mp4 or flv, the optional value is:libfdk_aac: more suitable for mp4.libmp3lame: more suitable for flv.When the outer parameter Container is hls, the optional value is:libfdk_aac.libmp3lame.
         */
        codec: string;
        /**
         * Sampling rate of audio stream, optional value.32000.44100.48000.Unit: Hz.
         */
        sampleRate: number;
    }

    export interface TranscodeTemplateEnhanceConfig {
        /**
         * Video Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
         */
        videoEnhance?: outputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhance;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhance {
        /**
         * De-artifact (glitch) configuration.Note: This field may return null, indicating that no valid value can be obtained.
         */
        artifactRepair?: outputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair;
        /**
         * Color Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
         */
        colorEnhance?: outputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance;
        /**
         * Video Noise Reduction Configuration.Note: This field may return null, indicating that no valid value can be obtained.
         */
        denoise?: outputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceDenoise;
        /**
         * Face Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
         */
        faceEnhance?: outputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance;
        /**
         * Interpolation frame rate configuration.Note: This field may return null, indicating that no valid value can be obtained.
         */
        frameRate?: outputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceFrameRate;
        /**
         * HDR configuration.Note: This field may return null, indicating that no valid value can be obtained.
         */
        hdr?: outputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceHdr;
        /**
         * Comprehensive Enhanced Configuration.Note: This field may return null, indicating that no valid value can be obtained.
         */
        imageQualityEnhance?: outputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance;
        /**
         * Low Light Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
         */
        lowLightEnhance?: outputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance;
        /**
         * De-scratch configuration.Note: This field may return null, indicating that no valid value can be obtained.
         */
        scratchRepair?: outputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair;
        /**
         * Detail Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
         */
        sharpEnhance?: outputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance;
        /**
         * Super resolution configuration.Note: This field may return null, indicating that no valid value can be obtained.
         */
        superResolution?: outputs.Mps.TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair {
        /**
         * Capability configuration switch, optional value: ON/OFF.Default value: ON.
         */
        switch?: string;
        /**
         * Type, optional value: weak/strong.Default value: weak.Note: This field may return null, indicating that no valid value can be obtained.
         */
        type?: string;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance {
        /**
         * Capability configuration switch, optional value: ON/OFF.Default value: ON.
         */
        switch?: string;
        /**
         * Type, optional value: weak/normal/strong.Default value: weak.Note: This field may return null, indicating that no valid value can be obtained.
         */
        type?: string;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceDenoise {
        /**
         * Capability configuration switch, optional value: ON/OFF.Default value: ON.
         */
        switch?: string;
        /**
         * Type, optional value: weak/strong.Default value: weak.Note: This field may return null, indicating that no valid value can be obtained.
         */
        type?: string;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance {
        /**
         * Intensity, value range: 0.0~1.0.Default value: 0.0.Note: This field may return null, indicating that no valid value can be obtained.
         */
        intensity?: number;
        /**
         * Capability configuration switch, optional value: ON/OFF.Default value: ON.
         */
        switch?: string;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceFrameRate {
        /**
         * Frame rate, value range: [0, 100], unit: Hz.Default value: 0.Note: For transcoding, this parameter will override the Fps inside the VideoTemplate.Note: This field may return null, indicating that no valid value can be obtained.
         */
        fps?: number;
        /**
         * Capability configuration switch, optional value: ON/OFF.Default value: ON.
         */
        switch?: string;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceHdr {
        /**
         * Capability configuration switch, optional value: ON/OFF.Default value: ON.
         */
        switch?: string;
        /**
         * Type, optional value: HDR10/HLG.Default value: HDR10.Note: The encoding method of video needs to be libx265.Note: Video encoding bit depth is 10.Note: This field may return null, indicating that no valid value can be obtained.
         */
        type?: string;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance {
        /**
         * Capability configuration switch, optional value: ON/OFF.Default value: ON.
         */
        switch?: string;
        /**
         * Type, optional value: weak/normal/strong.Default value: weak.Note: This field may return null, indicating that no valid value can be obtained.
         */
        type?: string;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance {
        /**
         * Capability configuration switch, optional value: ON/OFF.Default value: ON.
         */
        switch?: string;
        /**
         * Type, optional value: normal.Default value: normal.Note: This field may return null, indicating that no valid value can be obtained.
         */
        type?: string;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair {
        /**
         * Intensity, value range: 0.0~1.0.Default value: 0.0.Note: This field may return null, indicating that no valid value can be obtained.
         */
        intensity?: number;
        /**
         * Capability configuration switch, optional value: ON/OFF.Default value: ON.
         */
        switch?: string;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance {
        /**
         * Intensity, value range: 0.0~1.0.Default value: 0.0.Note: This field may return null, indicating that no valid value can be obtained.
         */
        intensity?: number;
        /**
         * Capability configuration switch, optional value: ON/OFF.Default value: ON.
         */
        switch?: string;
    }

    export interface TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution {
        /**
         * Super resolution multiple, optional value:2: currently only supports 2x super resolution.Default value: 2.Note: This field may return null, indicating that no valid value can be obtained.
         */
        size?: number;
        /**
         * Capability configuration switch, optional value: ON/OFF.Default value: ON.
         */
        switch?: string;
        /**
         * Type, optional value:lq: super-resolution for low-definition video with more noise.hq: super resolution for high-definition video.Default value: lq.Note: This field may return null, indicating that no valid value can be obtained.
         */
        type?: string;
    }

    export interface TranscodeTemplateTehdConfig {
        /**
         * The upper limit of the video bit rate, which is valid when the Type specifies the ultra-fast HD type.Do not fill in or fill in 0 means that there is no upper limit on the video bit rate.
         */
        maxVideoBitrate?: number;
        /**
         * Extremely high-definition type, optional value:TEHD-100: Extreme HD-100.Not filling means that the ultra-fast high-definition is not enabled.
         */
        type: string;
    }

    export interface TranscodeTemplateVideoTemplate {
        /**
         * Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
         */
        bitrate: number;
        /**
         * Encoding format of the video stream, optional value:libx264: H.264 encoding.libx265: H.265 encoding.av1: AOMedia Video 1 encoding.Note: Currently H.265 encoding must specify a resolution, and it needs to be within 640*480.Note: av1 encoded containers currently only support mp4.
         */
        codec: string;
        /**
         * Filling method, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling method:stretch: Stretch, stretch each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched.black: Leave black, keep the aspect ratio of the video unchanged, and fill the rest of the edge with black.white: Leave blank, keep the aspect ratio of the video unchanged, and fill the rest of the edge with white.gauss: Gaussian blur, keep the aspect ratio of the video unchanged, and fill the rest of the edge with Gaussian blur.Default: black.Note: Adaptive stream only supports stretch, black.
         */
        fillType?: string;
        /**
         * Video frame rate, value range: [0, 100], unit: Hz.When the value is 0, it means that the frame rate is consistent with the original video.Note: The value range for adaptive code rate is [0, 60].
         */
        fps: number;
        /**
         * The interval between keyframe I frames, value range: 0 and [1, 100000], unit: number of frames.When filling 0 or not filling, the system will automatically set the gop length.
         */
        gop?: number;
        /**
         * The maximum value of video stream height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
         */
        height?: number;
        /**
         * Adaptive resolution, optional values:```open: open, at this time, Width represents the long side of the video, Height represents the short side of the video.close: close, at this time, Width represents the width of the video, and Height represents the height of the video.Default: open.Note: In adaptive mode, Width cannot be smaller than Height.
         */
        resolutionAdaptive?: string;
        /**
         * Video constant bit rate control factor, the value range is [1, 51].If this parameter is specified, the code rate control method of CRF will be used for transcoding (the video code rate will no longer take effect).If there is no special requirement, it is not recommended to specify this parameter.
         */
        vcrf?: number;
        /**
         * The maximum value of video stream width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
         */
        width?: number;
    }

    export interface WatermarkTemplateImageTemplate {
        /**
         * The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels. The value range is 0 or [8, 4096].Default value: 0px. Indicates that Height is scaled according to the aspect ratio of the original watermark image.
         */
        height?: string;
        /**
         * Watermark image[Base64](https://tools.ietf.org/html/rfc4648) encoded string. Support jpeg, png image format.
         */
        imageContent: string;
        /**
         * Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges:once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
         */
        repeatType?: string;
        /**
         * The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixel, such as 100px means that the Width is 100 pixels. The value range is [8, 4096].Default value: 10%.
         */
        width?: string;
    }

    export interface WatermarkTemplateSvgTemplate {
        /**
         * The height of the watermark, supports px, W%, H%, S%, L% six formats:When the string ends with px, it means that the watermark Height unit is pixels, such as 100px means that the Height is 100 pixels; when filling 0px and Width is not 0px, it means that the height of the watermark is proportionally scaled according to the original SVG image; when both Width and Height are filled When 0px, it means that the height of the watermark takes the height of the original SVG image.When the string ends with W%, it means that the watermark Height is a percentage of the video width, such as 10W% means that the Height is 10% of the video width.When the string ends with H%, it means that the watermark Height is the percentage size of the video height, such as 10H% means that the Height is 10% of the video height.When the string ends with S%, it means that the watermark Height is the percentage size of the short side of the video, such as 10S% means that the Height is 10% of the short side of the video.When the string ends with L%, it means that the watermark Height is the percentage size of the long side of the video, such as 10L% means that the Height is 10% of the long side of the video.When the string ends with %, the meaning is the same as H%.Default value: 0px.
         */
        height?: string;
        /**
         * The width of the watermark, supports px, %, W%, H%, S%, L% six formats.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels; when filling 0px and the Height is not 0px, it means that the width of the watermark is proportionally scaled according to the original SVG image; when both Width and Height are filled When 0px, it means that the width of the watermark takes the width of the original SVG image.When the string ends with W%, it means that the watermark Width is a percentage of the video width, such as 10W% means that the Width is 10% of the video width.When the string ends with H%, it means that the watermark Width is a percentage of the video height, such as 10H% means that the Width is 10% of the video height.When the string ends with S%, it means that the watermark Width is the percentage size of the short side of the video, such as 10S% means that the Width is 10% of the short side of the video.When the string ends with L%, it means that the watermark Width is the percentage size of the long side of the video, such as 10L% means that the Width is 10% of the long side of the video.When the string ends with %, it has the same meaning as W%.Default value: 10W%.
         */
        width?: string;
    }

    export interface WatermarkTemplateTextTemplate {
        /**
         * Text transparency, value range: (0, 1].0: fully transparent.1: fully opaque.Default value: 1.
         */
        fontAlpha: number;
        /**
         * Font color, format: 0xRRGGBB, default value: 0xFFFFFF (white).
         */
        fontColor: string;
        /**
         * Font size, format: Npx, N is a number.
         */
        fontSize: string;
        /**
         * Font type, currently supports two:simkai.ttf: can support Chinese and English.arial.ttf: English only.
         */
        fontType: string;
    }

    export interface WorkflowAiAnalysisTask {
        /**
         * Video Content Analysis Template ID.
         */
        definition: number;
        /**
         * Extension parameter whose value is a serialized json string.Note: This parameter is a customized demand parameter, which requires offline docking.Note: This field may return null, indicating that no valid value can be obtained.
         */
        extendedParameter?: string;
    }

    export interface WorkflowAiContentReviewTask {
        /**
         * Video Content Review Template ID.
         */
        definition: number;
    }

    export interface WorkflowAiRecognitionTask {
        /**
         * Video Intelligent Recognition Template ID.
         */
        definition: number;
    }

    export interface WorkflowMediaProcessTask {
        /**
         * Transfer Adaptive Code Stream Task List.
         */
        adaptiveDynamicStreamingTaskSets?: outputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet[];
        /**
         * Video Rotation Map Task List.
         */
        animatedGraphicTaskSets?: outputs.Mps.WorkflowMediaProcessTaskAnimatedGraphicTaskSet[];
        /**
         * Sprite image capture task list for video.
         */
        imageSpriteTaskSets?: outputs.Mps.WorkflowMediaProcessTaskImageSpriteTaskSet[];
        /**
         * Screenshot task list for video sampling.
         */
        sampleSnapshotTaskSets?: outputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSet[];
        /**
         * Screenshot the task list of the video according to the time point.
         */
        snapshotByTimeOffsetTaskSets?: outputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet[];
        /**
         * Video Transcoding Task List.
         */
        transcodeTaskSets?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSet[];
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet {
        /**
         * Transfer Adaptive Code Stream Template ID.
         */
        definition: number;
        /**
         * After converting to an adaptive stream, the output path of the manifest file can be a relative path or an absolute path. If not filled, the default is a relative path: `{inputName}_adaptiveDynamicStreaming_{definition}.{format}`.
         */
        outputObjectPath?: string;
        /**
         * The target storage of the file after converting to the adaptive code stream, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
         */
        outputStorage?: outputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage;
        /**
         * After converting to an adaptive stream (only HLS), the output path of the fragmented file can only be a relative path. If not filled, the default is a relative path: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}_{segmentNumber}.{format}`.
         */
        segmentObjectName?: string;
        /**
         * After converting to an adaptive stream, the output path of the sub-stream file can only be a relative path. If not filled, the default is a relative path: {inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}.{format}`.
         */
        subStreamObjectName?: string;
        /**
         * Watermark list, support multiple pictures or text watermarks, up to 10.
         */
        watermarkSets?: outputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet[];
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage {
        /**
         * Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
         */
        cosOutputStorage?: outputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage;
        /**
         * The type of media processing output object storage location, now only supports COS.
         */
        type: string;
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage {
        /**
         * The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
         */
        bucket?: string;
        /**
         * The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
         */
        region?: string;
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet {
        /**
         * Watermark Template ID.
         */
        definition: number;
        /**
         * End time offset of watermark, unit: second.Do not fill in or fill in 0, indicating that the watermark lasts until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the watermark lasts until it disappears n seconds before the end of the screen.
         */
        endTimeOffset?: number;
        /**
         * Watermark custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios, it is recommended that you use Definition to specify watermark parameters first.Watermark custom parameters do not support screenshot watermarking.
         */
        rawParameter: outputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter;
        /**
         * The start time offset of the watermark, unit: second. Do not fill in or fill in 0, which means that the watermark will start to appear when the screen appears.Do not fill in or fill in 0, which means the watermark will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the watermark starts to appear n seconds before the end of the screen.
         */
        startTimeOffset?: number;
        /**
         * SVG content. The length cannot exceed 2000000 characters. Fill in only if the watermark type is SVG watermark.SVG watermark does not support screenshot watermarking.
         */
        svgContent?: string;
        /**
         * Text content, the length does not exceed 100 characters. Fill in only when the watermark type is text watermark.Text watermark does not support screenshot watermarking.
         */
        textContent?: string;
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter {
        /**
         * Origin position, currently only supports:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.Default: TopLeft.
         */
        coordinateOrigin?: string;
        /**
         * Image watermark template, when Type is image, this field is required. When Type is text, this field is invalid.
         */
        imageTemplate?: outputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate;
        /**
         * Watermark type, optional value:image: image watermark.
         */
        type: string;
        /**
         * The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
         */
        xPos?: string;
        /**
         * The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
         */
        yPos?: string;
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate {
        /**
         * The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels.Default value: 0px, indicating that Height is scaled according to the aspect ratio of the original watermark image.
         */
        height?: string;
        /**
         * The input content of the watermark image. Support jpeg, png image format.
         */
        imageContent: outputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent;
        /**
         * Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges.once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
         */
        repeatType?: string;
        /**
         * The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels.Default: 10%.
         */
        width?: string;
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent {
        /**
         * Valid when Type is COS, this item is required, indicating media processing COS object information.
         */
        cosInputInfo?: outputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo;
        /**
         * Enter the type of source object, which supports COS and URL.
         */
        type: string;
        /**
         * Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
         */
        urlInputInfo?: outputs.Mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo;
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
        /**
         * The name of the COS Bucket where the media processing object file is located.
         */
        bucket: string;
        /**
         * Input path for media processing object files.
         */
        object: string;
        /**
         * The park to which the COS Bucket where the media processing target file resides belongs.
         */
        region: string;
    }

    export interface WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
        /**
         * Video URL.
         */
        url: string;
    }

    export interface WorkflowMediaProcessTaskAnimatedGraphicTaskSet {
        /**
         * Video turntable template id.
         */
        definition: number;
        /**
         * The end time of the animation in the video, in seconds.
         */
        endTimeOffset: number;
        /**
         * The output path of the file after rotating the image, which can be a relative path or an absolute path. If not filled, the default is a relative path: {inputName}_animatedGraphic_{definition}.{format}.
         */
        outputObjectPath?: string;
        /**
         * The target storage of the transcoded file, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
         */
        outputStorage?: outputs.Mps.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage;
        /**
         * The start time of the animation in the video, in seconds.
         */
        startTimeOffset: number;
    }

    export interface WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage {
        /**
         * Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
         */
        cosOutputStorage?: outputs.Mps.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage;
        /**
         * The type of media processing output object storage location, now only supports COS.
         */
        type: string;
    }

    export interface WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage {
        /**
         * The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
         */
        bucket?: string;
        /**
         * The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
         */
        region?: string;
    }

    export interface WorkflowMediaProcessTaskImageSpriteTaskSet {
        /**
         * Sprite Illustration Template ID.
         */
        definition: number;
        /**
         * Rules for the `{number}` variable in the output path after intercepting the Sprite image.Note: This field may return null, indicating that no valid value can be obtained.
         */
        objectNumberFormat?: outputs.Mps.WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat;
        /**
         * After capturing the sprite image, the output path of the sprite image file can be a relative path or an absolute path. If not filled, the default is a relative path: `{inputName}_imageSprite_{definition}_{number}.{format}`.
         */
        outputObjectPath?: string;
        /**
         * The target storage of the file after the sprite image is intercepted, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
         */
        outputStorage?: outputs.Mps.WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage;
        /**
         * After capturing the sprite image, the output path of the Web VTT file can only be a relative path. If not filled, the default is a relative path: `{inputName}_imageSprite_{definition}.{format}`.
         */
        webVttObjectName?: string;
    }

    export interface WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat {
        /**
         * The growth step of the `{number}` variable, the default is 1.
         */
        increment?: number;
        /**
         * The starting value of `{number}` variable, the default is 0.
         */
        initialValue?: number;
        /**
         * The minimum length of the `{number}` variable, if insufficient, placeholders will be filled. Default is 1.
         */
        minLength?: number;
        /**
         * When the length of the `{number}` variable is insufficient, a placeholder is added. Default is 0.
         */
        placeHolder?: string;
    }

    export interface WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage {
        /**
         * Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
         */
        cosOutputStorage?: outputs.Mps.WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage;
        /**
         * The type of media processing output object storage location, now only supports COS.
         */
        type: string;
    }

    export interface WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage {
        /**
         * The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
         */
        bucket?: string;
        /**
         * The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
         */
        region?: string;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSet {
        /**
         * Sample screenshot template ID.
         */
        definition: number;
        /**
         * Rules for the `{number}` variable in the output path after sampling the screenshot.Note: This field may return null, indicating that no valid value can be obtained.
         */
        objectNumberFormat?: outputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat;
        /**
         * The output path of the image file after sampling the screenshot, which can be a relative path or an absolute path. If not filled, the default is a relative path: `{inputName}_sampleSnapshot_{definition}_{number}.{format}`.
         */
        outputObjectPath?: string;
        /**
         * The target storage of the file after the screenshot at the time point, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
         */
        outputStorage?: outputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage;
        /**
         * Watermark list, support multiple pictures or text watermarks, up to 10.
         */
        watermarkSets?: outputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet[];
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat {
        /**
         * The growth step of the `{number}` variable, the default is 1.
         */
        increment?: number;
        /**
         * The starting value of `{number}` variable, the default is 0.
         */
        initialValue?: number;
        /**
         * The minimum length of the `{number}` variable, if insufficient, placeholders will be filled. Default is 1.
         */
        minLength?: number;
        /**
         * When the length of the `{number}` variable is insufficient, a placeholder is added. Default is 0.
         */
        placeHolder?: string;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage {
        /**
         * Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
         */
        cosOutputStorage?: outputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage;
        /**
         * The type of media processing output object storage location, now only supports COS.
         */
        type: string;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage {
        /**
         * The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
         */
        bucket?: string;
        /**
         * The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
         */
        region?: string;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet {
        /**
         * Watermark Template ID.
         */
        definition: number;
        /**
         * End time offset of watermark, unit: second.Do not fill in or fill in 0, indicating that the watermark lasts until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the watermark lasts until it disappears n seconds before the end of the screen.
         */
        endTimeOffset?: number;
        /**
         * Watermark custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios, it is recommended that you use Definition to specify watermark parameters first.Watermark custom parameters do not support screenshot watermarking.
         */
        rawParameter: outputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter;
        /**
         * The start time offset of the watermark, unit: second. Do not fill in or fill in 0, which means that the watermark will start to appear when the screen appears.Do not fill in or fill in 0, which means the watermark will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the watermark starts to appear n seconds before the end of the screen.
         */
        startTimeOffset?: number;
        /**
         * SVG content. The length cannot exceed 2000000 characters. Fill in only if the watermark type is SVG watermark.SVG watermark does not support screenshot watermarking.
         */
        svgContent?: string;
        /**
         * Text content, the length does not exceed 100 characters. Fill in only when the watermark type is text watermark.Text watermark does not support screenshot watermarking.
         */
        textContent?: string;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter {
        /**
         * Origin position, currently only supports:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.Default: TopLeft.
         */
        coordinateOrigin?: string;
        /**
         * Image watermark template, when Type is image, this field is required. When Type is text, this field is invalid.
         */
        imageTemplate?: outputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate;
        /**
         * Watermark type, optional value:image: image watermark.
         */
        type: string;
        /**
         * The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
         */
        xPos?: string;
        /**
         * The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
         */
        yPos?: string;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate {
        /**
         * The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels.Default value: 0px, indicating that Height is scaled according to the aspect ratio of the original watermark image.
         */
        height?: string;
        /**
         * The input content of the watermark image. Support jpeg, png image format.
         */
        imageContent: outputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent;
        /**
         * Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges.once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
         */
        repeatType?: string;
        /**
         * The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels.Default: 10%.
         */
        width?: string;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent {
        /**
         * Valid when Type is COS, this item is required, indicating media processing COS object information.
         */
        cosInputInfo?: outputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo;
        /**
         * Enter the type of source object, which supports COS and URL.
         */
        type: string;
        /**
         * Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
         */
        urlInputInfo?: outputs.Mps.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
        /**
         * The name of the COS Bucket where the media processing object file is located.
         */
        bucket: string;
        /**
         * Input path for media processing object files.
         */
        object: string;
        /**
         * The park to which the COS Bucket where the media processing target file resides belongs.
         */
        region: string;
    }

    export interface WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
        /**
         * Video URL.
         */
        url: string;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet {
        /**
         * Specified time point screenshot template ID.
         */
        definition: number;
        /**
         * Screenshot time point list, the time point supports two formats: s and %:;When the string ends with s, it means that the time point is in seconds, such as 3.5s means that the time point is the 3.5th second.When the string ends with %, it means that the time point is the percentage of the video duration, such as 10% means that the time point is the first 10% of the time in the video.
         */
        extTimeOffsetSets?: string[];
        /**
         * Rules for the `{number}` variable in the output path after the screenshot at the time point.Note: This field may return null, indicating that no valid value can be obtained.
         */
        objectNumberFormat?: outputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat;
        /**
         * The output path of the picture file after the snapshot at the time point can be a relative path or an absolute path. If not filled, the default is a relative path: `{inputName}_snapshotByTimeOffset_{definition}_{number}.{format}`.
         */
        outputObjectPath?: string;
        /**
         * The target storage of the file after the screenshot at the time point, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
         */
        outputStorage?: outputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage;
        /**
         * Screenshot time point list, the unit is &lt;font color=red&gt;seconds&lt;/font&gt;. This parameter is no longer recommended, it is recommended that you use the ExtTimeOffsetSet parameter.
         */
        timeOffsetSets?: number[];
        /**
         * Watermark list, support multiple pictures or text watermarks, up to 10.
         */
        watermarkSets?: outputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet[];
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat {
        /**
         * The growth step of the `{number}` variable, the default is 1.
         */
        increment?: number;
        /**
         * The starting value of `{number}` variable, the default is 0.
         */
        initialValue?: number;
        /**
         * The minimum length of the `{number}` variable, if insufficient, placeholders will be filled. Default is 1.
         */
        minLength?: number;
        /**
         * When the length of the `{number}` variable is insufficient, a placeholder is added. Default is 0.
         */
        placeHolder?: string;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage {
        /**
         * Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
         */
        cosOutputStorage?: outputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage;
        /**
         * The type of media processing output object storage location, now only supports COS.
         */
        type: string;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage {
        /**
         * The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
         */
        bucket?: string;
        /**
         * The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
         */
        region?: string;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet {
        /**
         * Watermark Template ID.
         */
        definition: number;
        /**
         * End time offset of watermark, unit: second.Do not fill in or fill in 0, indicating that the watermark lasts until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the watermark lasts until it disappears n seconds before the end of the screen.
         */
        endTimeOffset?: number;
        /**
         * Watermark custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios, it is recommended that you use Definition to specify watermark parameters first.Watermark custom parameters do not support screenshot watermarking.
         */
        rawParameter: outputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter;
        /**
         * The start time offset of the watermark, unit: second. Do not fill in or fill in 0, which means that the watermark will start to appear when the screen appears.Do not fill in or fill in 0, which means the watermark will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the watermark starts to appear n seconds before the end of the screen.
         */
        startTimeOffset?: number;
        /**
         * SVG content. The length cannot exceed 2000000 characters. Fill in only if the watermark type is SVG watermark.SVG watermark does not support screenshot watermarking.
         */
        svgContent?: string;
        /**
         * Text content, the length does not exceed 100 characters. Fill in only when the watermark type is text watermark.Text watermark does not support screenshot watermarking.
         */
        textContent?: string;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter {
        /**
         * Origin position, currently only supports:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.Default: TopLeft.
         */
        coordinateOrigin?: string;
        /**
         * Image watermark template, when Type is image, this field is required. When Type is text, this field is invalid.
         */
        imageTemplate?: outputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate;
        /**
         * Watermark type, optional value:image: image watermark.
         */
        type: string;
        /**
         * The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
         */
        xPos?: string;
        /**
         * The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
         */
        yPos?: string;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate {
        /**
         * The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels.Default value: 0px, indicating that Height is scaled according to the aspect ratio of the original watermark image.
         */
        height?: string;
        /**
         * The input content of the watermark image. Support jpeg, png image format.
         */
        imageContent: outputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent;
        /**
         * Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges.once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
         */
        repeatType?: string;
        /**
         * The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels.Default: 10%.
         */
        width?: string;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent {
        /**
         * Valid when Type is COS, this item is required, indicating media processing COS object information.
         */
        cosInputInfo?: outputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo;
        /**
         * Enter the type of source object, which supports COS and URL.
         */
        type: string;
        /**
         * Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
         */
        urlInputInfo?: outputs.Mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
        /**
         * The name of the COS Bucket where the media processing object file is located.
         */
        bucket: string;
        /**
         * Input path for media processing object files.
         */
        object: string;
        /**
         * The park to which the COS Bucket where the media processing target file resides belongs.
         */
        region: string;
    }

    export interface WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
        /**
         * Video URL.
         */
        url: string;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSet {
        /**
         * Video Transcoding Template ID.
         */
        definition: number;
        /**
         * End time offset of video after transcoding, unit: second.Do not fill in or fill in 0, indicating that the transcoded video continues until the end of the original video.When the value is greater than 0 (assumed to be n), it means that the transcoded video lasts until the nth second of the original video and terminates.When the value is less than 0 (assumed to be -n), it means that the transcoded video lasts until n seconds before the end of the original video.
         */
        endTimeOffset?: number;
        /**
         * Opening and ending parameters.Note: This field may return null, indicating that no valid value can be obtained.
         */
        headTailParameter?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter;
        /**
         * Mosaic list, up to 10 sheets can be supported.
         */
        mosaicSets?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet[];
        /**
         * Rules for the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid value can be obtained.
         */
        objectNumberFormat?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat;
        /**
         * The output path of the main file after transcoding can be a relative path or an absolute path. If not filled, the default is a relative path: {inputName}_transcode_{definition}.{format}.
         */
        outputObjectPath?: string;
        /**
         * The target storage of the transcoded file, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
         */
        outputStorage?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage;
        /**
         * Video transcoding custom parameters, valid when Definition is not filled with 0.When some transcoding parameters in this structure are filled in, the parameters in the transcoding template will be overwritten with the filled parameters.This parameter is used in highly customized scenarios, it is recommended that you only use Definition to specify transcoding parameters.Note: This field may return null, indicating that no valid value can be obtained.
         */
        overrideParameter?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter;
        /**
         * Video transcoding custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios. It is recommended that you use Definition to specify transcoding parameters first.Note: This field may return null, indicating that no valid value can be obtained.
         */
        rawParameter: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetRawParameter;
        /**
         * The output path of the transcoded fragment file (the path of ts when transcoding HLS), can only be a relative path. If not filled, the default is: `{inputName}_transcode_{definition}_{number}.{format}.
         */
        segmentObjectName?: string;
        /**
         * The start time offset of the transcoded video, unit: second.Do not fill in or fill in 0, indicating that the transcoded video starts from the beginning of the original video.When the value is greater than 0 (assumed to be n), it means that the transcoded video starts from the nth second position of the original video.When the value is less than 0 (assumed to be -n), it means that the transcoded video starts from the position n seconds before the end of the original video.
         */
        startTimeOffset?: number;
        /**
         * Watermark list, support multiple pictures or text watermarks, up to 10.Note: This field may return null, indicating that no valid value can be obtained.
         */
        watermarkSets?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet[];
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter {
        /**
         * Title list.
         */
        headSets?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet[];
        /**
         * Ending List.
         */
        tailSets?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet[];
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet {
        /**
         * Valid when Type is COS, this item is required, indicating media processing COS object information.
         */
        cosInputInfo?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo;
        /**
         * Enter the type of source object, which supports COS and URL.
         */
        type: string;
        /**
         * Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
         */
        urlInputInfo?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo {
        /**
         * The name of the COS Bucket where the media processing object file is located.
         */
        bucket: string;
        /**
         * Input path for media processing object files.
         */
        object: string;
        /**
         * The park to which the COS Bucket where the media processing target file resides belongs.
         */
        region: string;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo {
        /**
         * Video URL.
         */
        url: string;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet {
        /**
         * Valid when Type is COS, this item is required, indicating media processing COS object information.
         */
        cosInputInfo?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo;
        /**
         * Enter the type of source object, which supports COS and URL.
         */
        type: string;
        /**
         * Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
         */
        urlInputInfo?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo {
        /**
         * The name of the COS Bucket where the media processing object file is located.
         */
        bucket: string;
        /**
         * Input path for media processing object files.
         */
        object: string;
        /**
         * The park to which the COS Bucket where the media processing target file resides belongs.
         */
        region: string;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo {
        /**
         * Video URL.
         */
        url: string;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet {
        /**
         * Origin position, currently only supports:TopLeft: Indicates that the coordinate origin is located in the upper left corner of the video image, and the origin of the mosaic is the upper left corner of the picture or textDefault: TopLeft.
         */
        coordinateOrigin?: string;
        /**
         * The end time offset of the mosaic, unit: second.Fill in or fill in 0, indicating that the mosaic continues until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the mosaic lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the mosaic lasts until it disappears n seconds before the end of the screen.
         */
        endTimeOffset?: number;
        /**
         * The height of the mosaic. Support %, px two formats.When the string ends with %, it means that the mosaic Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the mosaic Height unit is pixel, such as 100px means that the Height is 100 pixels.Default: 10%.
         */
        height?: string;
        /**
         * The start time offset of the mosaic, unit: second. Do not fill or fill in 0, which means that the mosaic will start to appear when the screen appears.Fill in or fill in 0, which means that the mosaic will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the mosaic appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the mosaic starts to appear n seconds before the end of the screen.
         */
        startTimeOffset?: number;
        /**
         * The width of the mosaic. Support %, px two formats:When the string ends with %, it means that the mosaic Width is the percentage size of the video width, such as 10% means that the Width is 10% of the video width.The string ends with px, indicating that the mosaic Width unit is pixels, such as 100px indicates that the Width is 100 pixels.Default: 10%.
         */
        width?: string;
        /**
         * The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
         */
        xPos?: string;
        /**
         * The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
         */
        yPos?: string;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat {
        /**
         * The growth step of the `{number}` variable, the default is 1.
         */
        increment?: number;
        /**
         * The starting value of `{number}` variable, the default is 0.
         */
        initialValue?: number;
        /**
         * The minimum length of the `{number}` variable, if insufficient, placeholders will be filled. Default is 1.
         */
        minLength?: number;
        /**
         * When the length of the `{number}` variable is insufficient, a placeholder is added. Default is 0.
         */
        placeHolder?: string;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage {
        /**
         * Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
         */
        cosOutputStorage?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage;
        /**
         * The type of media processing output object storage location, now only supports COS.
         */
        type: string;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage {
        /**
         * The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
         */
        bucket?: string;
        /**
         * The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
         */
        region?: string;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter {
        /**
         * Audio stream configuration parameters.
         */
        audioTemplate?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate;
        /**
         * Encapsulation format, optional values: mp4, flv, hls, mp3, flac, ogg, m4a. Among them, mp3, flac, ogg, m4a are pure audio files.
         */
        container?: string;
        /**
         * Whether to remove audio data, value:0: reserved.1: remove.
         */
        removeAudio?: number;
        /**
         * Whether to remove video data, value:0: reserved.1: remove.
         */
        removeVideo?: number;
        /**
         * Subtitle Stream Configuration Parameters.
         */
        subtitleTemplate?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate;
        /**
         * Ultra-fast HD transcoding parameters.
         */
        tehdConfig?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig;
        /**
         * Video streaming configuration parameters.
         */
        videoTemplate?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate {
        /**
         * Audio channel mode, optional values:`1: single channel.2: Dual channel.6: Stereo.When the package format of the media is an audio format (flac, ogg, mp3, m4a), the number of channels is not allowed to be set to stereo.Default: 2.
         */
        audioChannel?: number;
        /**
         * Bit rate of the audio stream, value range: 0 and [26, 256], unit: kbps.When the value is 0, it means that the audio bit rate is consistent with the original audio.
         */
        bitrate?: number;
        /**
         * Encoding format of frequency stream.When the outer parameter Container is mp3, the optional value is:libmp3lame.When the outer parameter Container is ogg or flac, the optional value is:flac.When the outer parameter Container is m4a, the optional value is:libfdk_aac.libmp3lame.ac3.When the outer parameter Container is mp4 or flv, the optional value is:libfdk_aac: more suitable for mp4.libmp3lame: more suitable for flv.When the outer parameter Container is hls, the optional value is:libfdk_aac.libmp3lame.
         */
        codec?: string;
        /**
         * Sampling rate of audio stream, optional value.32000.44100.48000.Unit: Hz.
         */
        sampleRate?: number;
        /**
         * Specifies the audio track to preserve for the output. The default is to keep all sources.
         */
        streamSelects?: number[];
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate {
        /**
         * Text transparency, value range: (0, 1].0: fully transparent.1: fully opaque.Default: 1.
         */
        fontAlpha?: number;
        /**
         * Font color, format: 0xRRGGBB, default value: 0xFFFFFF (white).
         */
        fontColor?: string;
        /**
         * Font size, format: Npx, N is a value, if not specified, the subtitle file shall prevail.
         */
        fontSize?: string;
        /**
         * Font type.hei.ttf, song.ttf, simkai.ttf, arial.ttf.Default: hei.ttf.
         */
        fontType?: string;
        /**
         * The address of the subtitle file to be compressed into the video.
         */
        path?: string;
        /**
         * Specifies the subtitle track to be compressed into the video. If there is a specified Path, the Path has a higher priority. Path and StreamIndex specify at least one.
         */
        streamIndex?: number;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig {
        /**
         * The upper limit of the video bit rate, which is valid when the Type specifies the ultra-fast HD type.Do not fill in or fill in 0 means that there is no upper limit on the video bit rate.
         */
        maxVideoBitrate?: number;
        /**
         * Extremely high-definition type, optional value:TEHD-100: Extreme HD-100.Not filling means that the ultra-fast high-definition is not enabled.
         */
        type?: string;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate {
        /**
         * Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
         */
        bitrate?: number;
        /**
         * Encoding format of the video stream, optional value:libx264: H.264 encoding.libx265: H.265 encoding.av1: AOMedia Video 1 encoding.Note: Currently H.265 encoding must specify a resolution, and it needs to be within 640*480.Note: av1 encoded containers currently only support mp4.
         */
        codec?: string;
        /**
         * Content Adaptive Encoding. optional value:0: not open.1: open.Default: 0.When this parameter is turned on, multiple code streams with different resolutions and different bit rates will be adaptively generated. The width and height of the VideoTemplate are the maximum resolutions among the multiple code streams, and the bit rates in the VideoTemplate are multiple code rates. The highest bit rate in the stream, the vcrf in VideoTemplate is the highest quality among multiple bit streams. When the resolution, bit rate and vcrf are not set, the highest resolution generated by the ContentAdaptStream parameter is the resolution of the video source, and the video quality is close to vmaf95. To enable this parameter or learn about billing details, please contact your Tencent Cloud Business.
         */
        contentAdaptStream?: number;
        /**
         * Filling method, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling method:stretch: Stretch, stretch each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched;.black: Leave black, keep the aspect ratio of the video unchanged, and fill the rest of the edge with black.white: Leave blank, keep the aspect ratio of the video unchanged, and fill the rest of the edge with white.gauss: Gaussian blur, keep the aspect ratio of the video unchanged, and fill the rest of the edge with Gaussian blur.Default: black.Note: Adaptive stream only supports stretch, black.
         */
        fillType?: string;
        /**
         * Video frame rate, value range: [0, 100], unit: Hz.When the value is 0, it means that the frame rate is consistent with the original video.Note: The value range for adaptive code rate is [0, 60].
         */
        fps?: number;
        /**
         * The interval between keyframe I frames, value range: 0 and [1, 100000], unit: number of frames.When filling 0 or not filling, the system will automatically set the gop length.
         */
        gop?: number;
        /**
         * The maximum value of video stream height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
         */
        height?: number;
        /**
         * Adaptive resolution, optional values:```open: open, at this time, Width represents the long side of the video, Height represents the short side of the video.close: close, at this time, Width represents the width of the video, and Height represents the height of the video.Default: open.Note: In adaptive mode, Width cannot be smaller than Height.
         */
        resolutionAdaptive?: string;
        /**
         * Video constant bit rate control factor, the value range is [1, 51].If this parameter is specified, the code rate control method of CRF will be used for transcoding (the video code rate will no longer take effect).If there is no special requirement, it is not recommended to specify this parameter.
         */
        vcrf?: number;
        /**
         * The maximum value of video stream width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
         */
        width?: number;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetRawParameter {
        /**
         * Audio stream configuration parameters, when RemoveAudio is 0, this field is required.
         */
        audioTemplate?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate;
        /**
         * Encapsulation format, optional values: mp4, flv, hls, mp3, flac, ogg, m4a. Among them, mp3, flac, ogg, m4a are pure audio files.
         */
        container: string;
        /**
         * Whether to remove audio data, value:0: reserved.1: remove.Default: 0.
         */
        removeAudio?: number;
        /**
         * Whether to remove video data, value:0: reserved.1: remove.Default: 0.
         */
        removeVideo?: number;
        /**
         * Ultra-fast HD transcoding parameters.
         */
        tehdConfig?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig;
        /**
         * Video stream configuration parameters, when RemoveVideo is 0, this field is required.
         */
        videoTemplate?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate {
        /**
         * Audio channel mode, optional values:`1: single channel.2: Dual channel.6: Stereo.When the package format of the media is an audio format (flac, ogg, mp3, m4a), the number of channels is not allowed to be set to stereo.Default: 2.
         */
        audioChannel?: number;
        /**
         * Bit rate of the audio stream, value range: 0 and [26, 256], unit: kbps.When the value is 0, it means that the audio bit rate is consistent with the original audio.
         */
        bitrate: number;
        /**
         * Encoding format of frequency stream.When the outer parameter Container is mp3, the optional value is:libmp3lame.When the outer parameter Container is ogg or flac, the optional value is:flac.When the outer parameter Container is m4a, the optional value is:libfdk_aac.libmp3lame.ac3.When the outer parameter Container is mp4 or flv, the optional value is:libfdk_aac: more suitable for mp4.libmp3lame: more suitable for flv.When the outer parameter Container is hls, the optional value is:libfdk_aac.libmp3lame.
         */
        codec: string;
        /**
         * Sampling rate of audio stream, optional value.32000.44100.48000.Unit: Hz.
         */
        sampleRate: number;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig {
        /**
         * The upper limit of the video bit rate, which is valid when the Type specifies the ultra-fast HD type.Do not fill in or fill in 0 means that there is no upper limit on the video bit rate.
         */
        maxVideoBitrate?: number;
        /**
         * Extremely high-definition type, optional value:TEHD-100: Extreme HD-100.Not filling means that the ultra-fast high-definition is not enabled.
         */
        type: string;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate {
        /**
         * Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
         */
        bitrate: number;
        /**
         * Encoding format of the video stream, optional value:libx264: H.264 encoding.libx265: H.265 encoding.av1: AOMedia Video 1 encoding.Note: Currently H.265 encoding must specify a resolution, and it needs to be within 640*480.Note: av1 encoded containers currently only support mp4.
         */
        codec: string;
        /**
         * Filling method, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling method:stretch: Stretch, stretch each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched;.black: Leave black, keep the aspect ratio of the video unchanged, and fill the rest of the edge with black.white: Leave blank, keep the aspect ratio of the video unchanged, and fill the rest of the edge with white.gauss: Gaussian blur, keep the aspect ratio of the video unchanged, and fill the rest of the edge with Gaussian blur.Default: black.Note: Adaptive stream only supports stretch, black.
         */
        fillType?: string;
        /**
         * Video frame rate, value range: [0, 100], unit: Hz.When the value is 0, it means that the frame rate is consistent with the original video.Note: The value range for adaptive code rate is [0, 60].
         */
        fps: number;
        /**
         * The interval between keyframe I frames, value range: 0 and [1, 100000], unit: number of frames.When filling 0 or not filling, the system will automatically set the gop length.
         */
        gop?: number;
        /**
         * The maximum value of video stream height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
         */
        height?: number;
        /**
         * Adaptive resolution, optional values:```open: open, at this time, Width represents the long side of the video, Height represents the short side of the video.close: close, at this time, Width represents the width of the video, and Height represents the height of the video.Default: open.Note: In adaptive mode, Width cannot be smaller than Height.
         */
        resolutionAdaptive?: string;
        /**
         * Video constant bit rate control factor, the value range is [1, 51].If this parameter is specified, the code rate control method of CRF will be used for transcoding (the video code rate will no longer take effect).If there is no special requirement, it is not recommended to specify this parameter.
         */
        vcrf?: number;
        /**
         * The maximum value of video stream width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
         */
        width?: number;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet {
        /**
         * Watermark Template ID.
         */
        definition: number;
        /**
         * End time offset of watermark, unit: second.Do not fill in or fill in 0, indicating that the watermark lasts until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the watermark lasts until it disappears n seconds before the end of the screen.
         */
        endTimeOffset?: number;
        /**
         * Watermark custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios, it is recommended that you use Definition to specify watermark parameters first.Watermark custom parameters do not support screenshot watermarking.
         */
        rawParameter: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter;
        /**
         * The start time offset of the watermark, unit: second. Do not fill in or fill in 0, which means that the watermark will start to appear when the screen appears.Do not fill in or fill in 0, which means the watermark will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the watermark starts to appear n seconds before the end of the screen.
         */
        startTimeOffset?: number;
        /**
         * SVG content. The length cannot exceed 2000000 characters. Fill in only if the watermark type is SVG watermark.SVG watermark does not support screenshot watermarking.
         */
        svgContent?: string;
        /**
         * Text content, the length does not exceed 100 characters. Fill in only when the watermark type is text watermark.Text watermark does not support screenshot watermarking.
         */
        textContent?: string;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter {
        /**
         * Origin position, currently only supports:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.Default: TopLeft.
         */
        coordinateOrigin?: string;
        /**
         * Image watermark template, when Type is image, this field is required. When Type is text, this field is invalid.
         */
        imageTemplate?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate;
        /**
         * Watermark type, optional value:image: image watermark.
         */
        type: string;
        /**
         * The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
         */
        xPos?: string;
        /**
         * The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
         */
        yPos?: string;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate {
        /**
         * The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels.Default value: 0px, indicating that Height is scaled according to the aspect ratio of the original watermark image.
         */
        height?: string;
        /**
         * The input content of the watermark image. Support jpeg, png image format.
         */
        imageContent: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent;
        /**
         * Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges.once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
         */
        repeatType?: string;
        /**
         * The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels.Default: 10%.
         */
        width?: string;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent {
        /**
         * Valid when Type is COS, this item is required, indicating media processing COS object information.
         */
        cosInputInfo?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo;
        /**
         * Enter the type of source object, which supports COS and URL.
         */
        type: string;
        /**
         * Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
         */
        urlInputInfo?: outputs.Mps.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo {
        /**
         * The name of the COS Bucket where the media processing object file is located.
         */
        bucket: string;
        /**
         * Input path for media processing object files.
         */
        object: string;
        /**
         * The park to which the COS Bucket where the media processing target file resides belongs.
         */
        region: string;
    }

    export interface WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo {
        /**
         * Video URL.
         */
        url: string;
    }

    export interface WorkflowOutputStorage {
        /**
         * Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
         */
        cosOutputStorage?: outputs.Mps.WorkflowOutputStorageCosOutputStorage;
        /**
         * The type of media processing output object storage location, now only supports COS.
         */
        type: string;
    }

    export interface WorkflowOutputStorageCosOutputStorage {
        /**
         * The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
         */
        bucket?: string;
        /**
         * The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
         */
        region?: string;
    }

    export interface WorkflowTaskNotifyConfig {
        /**
         * CMQ or TDMQ-CMQ model, there are two kinds of Queue and Topic.
         */
        cmqModel?: string;
        /**
         * Region of CMQ or TDMQ-CMQ, such as sh, bj, etc.
         */
        cmqRegion?: string;
        /**
         * The mode of the workflow notification, the possible values are Finish and Change, leaving blank means Finish.
         */
        notifyMode?: string;
        /**
         * Notification type, optional value:CMQ: offline, it is recommended to switch to TDMQ-CMQ.TDMQ-CMQ: message queue.URL: When the URL is specified, the HTTP callback is pushed to the address specified by NotifyUrl, the callback protocol is http+json, and the package body content is the same as the output parameters of the parsing event notification interface.SCF: not recommended, additional configuration of SCF in the console is required.Note: CMQ is the default when not filled or empty, if you need to use other types, you need to fill in the corresponding type value.
         */
        notifyType?: string;
        /**
         * HTTP callback address, required when NotifyType is URL.
         */
        notifyUrl?: string;
        /**
         * Valid when the model is Queue, indicating the queue name of the CMQ or TDMQ-CMQ that receives the event notification.
         */
        queueName?: string;
        /**
         * Valid when the model is a Topic, indicating the topic name of the CMQ or TDMQ-CMQ that receives event notifications.
         */
        topicName?: string;
    }

    export interface WorkflowTrigger {
        /**
         * Mandatory and valid when Type is CosFileUpload, the rule is triggered for COS.Note: This field may return null, indicating that no valid value can be obtained.
         */
        cosFileUploadTrigger?: outputs.Mps.WorkflowTriggerCosFileUploadTrigger;
        /**
         * The type of trigger, currently only supports CosFileUpload.
         */
        type: string;
    }

    export interface WorkflowTriggerCosFileUploadTrigger {
        /**
         * The name of the COS Bucket bound to the workflow.
         */
        bucket: string;
        /**
         * The input path directory of the workflow binding must be an absolute path, that is, start and end with `/`.
         */
        dir?: string;
        /**
         * A list of file formats that are allowed to be triggered by the workflow, if not filled in, it means that files of all formats can trigger the workflow.
         */
        formats: string[];
        /**
         * The park to which the COS Bucket bound to the workflow belongs.
         */
        region: string;
    }

}

export namespace Mysql {
    export interface AuditLogFileFilter {
        /**
         * Affects the number of rows. Indicates to filter audit logs whose number of affected rows is greater than this value.
         */
        affectRows?: number;
        /**
         * Database name.
         */
        dbNames?: string[];
        /**
         * Execution time. The unit is: ms. Indicates to filter audit logs whose execution time is greater than this value.
         */
        execTime?: number;
        /**
         * Client address.
         */
        hosts?: string[];
        /**
         * The name of policy.
         */
        policyNames?: string[];
        /**
         * SQL statement. support fuzzy matching.
         */
        sql?: string;
        /**
         * SQL type. Currently supported: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, SET, REPLACE, EXECUTE.
         */
        sqlType?: string;
        /**
         * SQL type. Supports simultaneous query of multiple types. Currently supported: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, SET, REPLACE, EXECUTE.
         */
        sqlTypes?: string[];
        /**
         * SQL statement. Support passing multiple sql statements.
         */
        sqls?: string[];
        /**
         * Table name.
         */
        tableNames?: string[];
        /**
         * User name.
         */
        users?: string[];
    }

    export interface GetBackupListList {
        /**
         * ID of Backup task.
         */
        backupId: number;
        /**
         * Backup method. Supported values include: `physical` - physical backup, and `logical` - logical backup.
         */
        backupModel: string;
        /**
         * The owner of the backup files.
         */
        creator: string;
        /**
         * The time at which the backup finishes.
         */
        finishTime: string;
        /**
         * URL for downloads externally.
         */
        internetUrl: string;
        /**
         * URL for downloads internally.
         */
        intranetUrl: string;
        /**
         * the size of backup file.
         */
        size: number;
        /**
         * The earliest time at which the backup starts. For example, `2` indicates 2:00 am.
         */
        time: string;
    }

    export interface GetBackupSummariesItem {
        /**
         * The number of automatic data backups for this instance.
         */
        autoBackupCount: number;
        /**
         * The automatic data backup capacity of this instance.
         */
        autoBackupVolume: number;
        /**
         * The total backup (including data backup and log backup) of the instance occupies capacity.
         */
        backupVolume: number;
        /**
         * The number of log backups for this instance.
         */
        binlogBackupCount: number;
        /**
         * The capacity of the instance log backup.
         */
        binlogBackupVolume: number;
        /**
         * The total number of data backups (including automatic backups and manual backups) of the instance.
         */
        dataBackupCount: number;
        /**
         * The total data backup capacity of this instance.
         */
        dataBackupVolume: number;
        /**
         * Instance ID.
         */
        instanceId: string;
        /**
         * The number of manual data backups for this instance.
         */
        manualBackupCount: number;
        /**
         * The capacity of manual data backup for this instance.
         */
        manualBackupVolume: number;
    }

    export interface GetBinLogItem {
        /**
         * binlog file deadline.
         */
        binlogFinishTime: string;
        /**
         * Binlog file start time.
         */
        binlogStartTime: string;
        /**
         * Storage method, 0-regular storage, 1-archive storage, the default is 0.
         */
        cosStorageType: number;
        /**
         * File storage time, time format: 2016-03-17 02:10:37.
         */
        date: string;
        /**
         * Instance ID, in the format: cdb-c1nl9rpv. Same instance ID as displayed in the ApsaraDB for Console page.
         */
        instanceId: string;
        /**
         * download link.
         */
        internetUrl: string;
        /**
         * download link.
         */
        intranetUrl: string;
        /**
         * binlog log backup file name.
         */
        name: string;
        /**
         * The region where remote backup is located.
         */
        region: string;
        /**
         * Binlog remote backup details.
         */
        remoteInfos: outputs.Mysql.GetBinLogItemRemoteInfo[];
        /**
         * Backup file size, unit: Byte.
         */
        size: number;
        /**
         * Backup task status. Possible values are `SUCCESS`: backup succeeded, `FAILED`: backup failed, `RUNNING`: backup in progress.
         */
        status: string;
        /**
         * Specific log type, possible values are: binlog - binary log.
         */
        type: string;
    }

    export interface GetBinLogItemRemoteInfo {
        /**
         * End time of remote backup task.
         */
        finishTime: string;
        /**
         * The region where remote backup is located.
         */
        region: string;
        /**
         * Start time of remote backup task.
         */
        startTime: string;
        /**
         * Backup task status. Possible values are `SUCCESS`: backup succeeded, `FAILED`: backup failed, `RUNNING`: backup in progress.
         */
        status: string;
        /**
         * The ID of the remote backup subtask.
         */
        subBackupIds: number[];
        /**
         * download link.
         */
        url: string;
    }

    export interface GetCloneListItem {
        /**
         * Id of the task list corresponding to the clone task.
         */
        cloneJobId: number;
        /**
         * The newly spawned instance Id of the clone task.
         */
        dstInstanceId: string;
        /**
         * Task end time.
         */
        endTime: string;
        /**
         * Id of the region where the cloned instance is located.
         */
        newRegionId: number;
        /**
         * The strategy used by the clone instance includes the following types: timepoint: specify the point-in-time rollback, backupset: specify the backup file rollback.
         */
        rollbackStrategy: string;
        /**
         * The time point when the clone instance is rolled back.
         */
        rollbackTargetTime: string;
        /**
         * The source instance Id of the clone task.
         */
        srcInstanceId: string;
        /**
         * Id of the region where the source instance is located.
         */
        srcRegionId: number;
        /**
         * Task start time.
         */
        startTime: string;
        /**
         * Task status, including the following status: initial, running, wait_complete, success, failed.
         */
        taskStatus: string;
    }

    export interface GetDefaultParamsParamList {
        /**
         * Param current value.
         */
        currentValue: string;
        /**
         * Param default value.
         */
        default: string;
        /**
         * Param description.
         */
        description: string;
        /**
         * Params available values if type of param is enum.
         */
        enumValues: string[];
        /**
         * Param maximum value if type of param is integer.
         */
        max: number;
        /**
         * Param minimum value if type of param is integer.
         */
        min: number;
        /**
         * Param key name.
         */
        name: string;
        /**
         * Indicates weather the database instance reboot if param modified.
         */
        needReboot: number;
        /**
         * Type of param.
         */
        paramType: string;
    }

    export interface GetInstanceInstanceList {
        /**
         * Auto renew flag. NOTES: Only supported prepay instance.
         */
        autoRenewFlag: number;
        /**
         * Pay type of instance, valid values are `PREPAID` and `POSTPAID`.
         */
        chargeType: string;
        /**
         * CPU count.
         */
        cpuCoreCount: number;
        /**
         * The time at which a instance is created.
         */
        createTime: string;
        /**
         * Expire date of instance. NOTES: Only supported prepay instance.
         */
        deadLineTime: string;
        /**
         * Supported instance model. `HA` - high available version; `Basic` - basic version.
         */
        deviceType: string;
        /**
         * ID list of disaster-recovery type associated with the current instance.
         */
        drInstanceIds: string[];
        /**
         * The version number of the database engine to use. Supported versions include 5.5/5.6/5.7/8.0.
         */
        engineVersion: string;
        /**
         * Initialization mark. Available values: `0` - Uninitialized; `1` - Initialized.
         */
        initFlag: number;
        /**
         * Name of mysql instance.
         */
        instanceName: string;
        /**
         * Instance type. Supported values include: `master` - master instance, `dr` - disaster recovery instance, and `ro` - read-only instance.
         */
        instanceRole: string;
        /**
         * Public network domain name.
         */
        internetHost: string;
        /**
         * Public network port.
         */
        internetPort: number;
        /**
         * Status of public network.
         */
        internetStatus: number;
        /**
         * Instance IP for internal access.
         */
        intranetIp: string;
        /**
         * Transport layer port number for internal purpose.
         */
        intranetPort: number;
        /**
         * Indicates the master instance ID of recovery instances.
         */
        masterInstanceId: string;
        /**
         * Memory size (in MB).
         */
        memorySize: number;
        /**
         * Instance ID, such as `cdb-c1nl9rpv`. It is identical to the instance ID displayed in the database console page.
         */
        mysqlId: string;
        /**
         * It has been deprecated from version 1.36.0. Please use `chargeType` instead. Pay type of instance, `0`: prepay, `1`: postpaid.
         */
        payType: number;
        /**
         * Project ID to which the current instance belongs.
         */
        projectId: number;
        /**
         * ID list of read-only type associated with the current instance.
         */
        roInstanceIds: string[];
        /**
         * Data replication mode. `0` - Async replication; `1` - Semisync replication; `2` - Strongsync replication.
         */
        slaveSyncMode: number;
        /**
         * Instance status. Available values: `0` - Creating; `1` - Running; `4` - Isolating; `5` - Isolated.
         */
        status: number;
        /**
         * ID of subnet to which the current instance belongs.
         */
        subnetId: string;
        /**
         * Disk capacity (in GB).
         */
        volumeSize: number;
        /**
         * ID of Virtual Private Cloud.
         */
        vpcId: string;
        /**
         * Information of available zone.
         */
        zone: string;
    }

    export interface GetParameterListParameterList {
        /**
         * Current value.
         */
        currentValue: string;
        /**
         * Default value.
         */
        defaultValue: string;
        /**
         * Parameter specification description.
         */
        description: string;
        /**
         * Enumerated value.
         */
        enumValues: string[];
        /**
         * Maximum value for the parameter.
         */
        max: number;
        /**
         * Minimum value for the parameter.
         */
        min: number;
        /**
         * Indicates whether reboot is needed to enable the new parameters.
         */
        needReboot: number;
        /**
         * Parameter name.
         */
        parameterName: string;
        /**
         * Parameter type.
         */
        parameterType: string;
    }

    export interface GetZoneConfigList {
        /**
         * Information about available zones of recovery.
         */
        disasterRecoveryZones: string[];
        /**
         * The version number of the database engine to use. Supported versions include `5.5`/`5.6`/`5.7`.
         */
        engineVersions: string[];
        /**
         * Zone information about first slave instance.
         */
        firstSlaveZones: string[];
        hourInstanceSaleMaxNum: number;
        /**
         * Indicates whether the current DC is the default DC for the region. Possible returned values: `0` - no; `1` - yes.
         */
        isDefault: number;
        /**
         * Indicates whether recovery is supported: `0` - No; `1` - Yes.
         */
        isSupportDisasterRecovery: number;
        /**
         * Indicates whether VPC is supported: `0` - No; `1` - Yes.
         */
        isSupportVpc: number;
        /**
         * The name of available zone which is equal to a specific datacenter.
         */
        name: string;
        payTypes: number[];
        /**
         * Zone information about remote ro instance.
         */
        remoteRoZones: string[];
        /**
         * Zone information about second slave instance.
         */
        secondSlaveZones: string[];
        /**
         * A list of supported instance types for sell:
         */
        sells: outputs.Mysql.GetZoneConfigListSell[];
        /**
         * Availability zone deployment method. Available values: `0` - Single availability zone; `1` - Multiple availability zones.
         */
        slaveDeployModes: number[];
        /**
         * Data replication mode. `0` - Async replication; `1` - Semisync replication; `2` - Strongsync replication.
         */
        supportSlaveSyncModes: number[];
    }

    export interface GetZoneConfigListSell {
        cdbType: string;
        /**
         * Maximum disk size (in GB).
         */
        maxVolumeSize: number;
        /**
         * Memory size (in MB).
         */
        memSize: number;
        /**
         * Minimum disk size (in GB).
         */
        minVolumeSize: number;
        /**
         * Queries per second.
         */
        qps: number;
        /**
         * Disk increment (in GB).
         */
        volumeStep: number;
    }

    export interface ParamTemplateParamList {
        /**
         * The value of parameter.
         */
        currentValue: string;
        /**
         * The name of parameter template.
         */
        name: string;
    }

    export interface PrivilegeColumn {
        /**
         * Column name.
         */
        columnName: string;
        /**
         * Database name.
         */
        databaseName: string;
        /**
         * Column privilege.available values for Privileges:SELECT,INSERT,UPDATE,REFERENCES.
         */
        privileges: string[];
        /**
         * Table name.
         */
        tableName: string;
    }

    export interface PrivilegeDatabase {
        /**
         * Database name.
         */
        databaseName: string;
        /**
         * Database privilege.available values for Privileges:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,INDEX,ALTER,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER.
         */
        privileges: string[];
    }

    export interface PrivilegeTable {
        /**
         * Database name.
         */
        databaseName: string;
        /**
         * Table privilege.available values for Privileges:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,INDEX,ALTER,CREATE VIEW,SHOW VIEW,TRIGGER.
         */
        privileges: string[];
        /**
         * Table name.
         */
        tableName: string;
    }
}

export namespace Nat {
    export interface GetGatewaySnatsSnatList {
        /**
         * Create time.
         */
        createTime: string;
        /**
         * Description.
         */
        description: string;
        /**
         * Instance ID.
         */
        instanceId?: string;
        instancePrivateIpAddr?: string;
        /**
         * NAT gateway ID.
         */
        natGatewayId: string;
        /**
         * Elastic IP address pool.
         */
        publicIpAddrs: string[];
        resourceType: string;
        /**
         * SNAT rule ID.
         */
        snatId: string;
        subnetCidrBlock?: string;
        /**
         * Subnet instance ID.
         */
        subnetId?: string;
    }

    export interface GetGatewaysNat {
        /**
         * EIP IP address set bound to the gateway. The value of at least 1.
         */
        assignedEipSets: string[];
        /**
         * The maximum public network output bandwidth of NAT gateway (unit: Mbps), the available values include: 20,50,100,200,500,1000,2000,5000. Default is 100.
         */
        bandwidth: number;
        /**
         * Create time of the NAT gateway.
         */
        createTime: string;
        /**
         * ID of the NAT gateway.
         */
        id: string;
        /**
         * The upper limit of concurrent connection of NAT gateway, the available values include: 1000000,3000000,10000000. Default is 1000000.
         */
        maxConcurrent: number;
        /**
         * Name of the NAT gateway.
         */
        name: string;
        /**
         * State of the NAT gateway.
         */
        state: string;
        /**
         * The available tags within this NAT gateway.
         */
        tags: {[key: string]: any};
        /**
         * ID of the VPC.
         */
        vpcId: string;
    }

}

export namespace Organization {
    export interface OrgMemberOrgPermission {
        /**
         * Permissions ID.
         */
        id: number;
        /**
         * Member name.
         */
        name: string;
    }

}

export namespace Placement {
    export interface GetGroupsPlacementGroupList {
        /**
         * Creation time of the placement group.
         */
        createTime: string;
        /**
         * Number of hosts in the placement group.
         */
        currentNum: number;
        /**
         * Maximum number of hosts in the placement group.
         */
        cvmQuotaTotal: number;
        /**
         * Host IDs in the placement group.
         */
        instanceIds: string[];
        /**
         * Name of the placement group to be queried.
         */
        name: string;
        /**
         * ID of the placement group to be queried.
         */
        placementGroupId: string;
        /**
         * Type of the placement group.
         */
        type: string;
    }

}

export namespace Postgresql {
    export interface GetInstancesInstanceList {
        /**
         * Auto renew flag.
         */
        autoRenewFlag: number;
        /**
         * Availability zone.
         */
        availabilityZone: string;
        /**
         * Pay type of the postgresql instance.
         */
        chargeType: string;
        /**
         * Charset of the postgresql instance.
         */
        charset: string;
        /**
         * Create time of the postgresql instance.
         */
        createTime: string;
        /**
         * Version of the postgresql database engine.
         */
        engineVersion: string;
        /**
         * ID of the postgresql instance to be query.
         */
        id: string;
        /**
         * Memory size(in GB).
         */
        memory: number;
        /**
         * Name of the postgresql instance to be query.
         */
        name: string;
        /**
         * IP address for private access.
         */
        privateAccessIp: string;
        /**
         * Port for private access.
         */
        privateAccessPort: number;
        /**
         * Project ID of the postgresql instance to be query.
         */
        projectId: number;
        /**
         * Host for public access.
         */
        publicAccessHost: string;
        /**
         * Port for public access.
         */
        publicAccessPort: number;
        /**
         * Indicates whether to enable the access to an instance from public network or not.
         */
        publicAccessSwitch: boolean;
        /**
         * Instance root account name, default value is `root`.
         */
        rootUser: string;
        /**
         * Volume size(in GB).
         */
        storage: number;
        /**
         * ID of subnet.
         */
        subnetId: string;
        /**
         * The available tags within this postgresql.
         */
        tags: {[key: string]: any};
        /**
         * ID of VPC.
         */
        vpcId: string;
    }

    export interface GetParameterTemplatesFilter {
        /**
         * Filter name.
         */
        name?: string;
        /**
         * One or more filter values.
         */
        values?: string[];
    }

    export interface GetParameterTemplatesList {
        /**
         * the database engine for which the parameter template applies.
         */
        dbEngine: string;
        /**
         * the database version to which the parameter template applies.
         */
        dbMajorVersion: string;
        /**
         * parameter template description.
         */
        templateDescription: string;
        /**
         * parameter template ID.
         */
        templateId: string;
        /**
         * parameter template name.
         */
        templateName: string;
    }

    export interface GetSpecinfosList {
        /**
         * The CPU number of the postgresql instance.
         */
        cpu: number;
        /**
         * Version of the postgresql database engine.
         */
        engineVersion: string;
        /**
         * Version name of the postgresql database engine.
         */
        engineVersionName: string;
        /**
         * ID of the postgresql instance speccode.
         */
        id: string;
        /**
         * Memory size(in GB).
         */
        memory: number;
        /**
         * The QPS of the postgresql instance.
         */
        qps: number;
        /**
         * The maximum volume size(in GB).
         */
        storageMax: number;
        /**
         * The minimum volume size(in GB).
         */
        storageMin: number;
    }

    export interface GetXlogsList {
        /**
         * Xlog end time, format `yyyy-MM-dd hh:mm:ss`.
         */
        endTime: string;
        /**
         * Xlog external download address.
         */
        externalAddr: string;
        /**
         * Xlog id.
         */
        id: number;
        /**
         * Xlog internal download address.
         */
        internalAddr: string;
        /**
         * Xlog file size.
         */
        size: number;
        /**
         * Xlog start time, format `yyyy-MM-dd hh:mm:ss`, start time cannot before 7 days ago.
         */
        startTime: string;
    }

    export interface InstanceBackupPlan {
        /**
         * List of backup period per week, available values: `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`. NOTE: At least specify two days.
         */
        backupPeriods?: string[];
        /**
         * Specify days of the retention.
         */
        baseBackupRetentionPeriod?: number;
        /**
         * Specify latest backup start time, format `hh:mm:ss`.
         */
        maxBackupStartTime?: string;
        /**
         * Specify earliest backup start time, format `hh:mm:ss`.
         */
        minBackupStartTime?: string;
    }

    export interface InstanceDbNodeSet {
        /**
         * Indicates node type, available values:`Primary`, `Standby`. Default: `Standby`.
         */
        role?: string;
        /**
         * Indicates the node available zone.
         */
        zone: string;
    }

    export interface ParameterTemplateModifyParamEntrySet {
        /**
         * Modify the parameter value. The input parameters are passed in the form of strings, for example: decimal `0.1`, integer `1000`, enumeration `replica`.
         */
        expectedValue: string;
        /**
         * The parameter name.
         */
        name: string;
    }
}

export namespace PrivateDns {
    export interface ZoneAccountVpcSet {
        /**
         * Region.
         */
        region: string;
        /**
         * UIN of the VPC account.
         */
        uin: string;
        /**
         * VPC ID.
         */
        uniqVpcId: string;
        /**
         * VPC NAME.
         */
        vpcName: string;
    }

    export interface ZoneTagSet {
        /**
         * Key of Tag.
         */
        tagKey: string;
        /**
         * Value of Tag.
         */
        tagValue: string;
    }

    export interface ZoneVpcSet {
        /**
         * VPC REGION.
         */
        region: string;
        /**
         * VPC ID.
         */
        uniqVpcId: string;
    }

}

export namespace Protocol {
    export interface GetTemplateGroupsGroupList {
        /**
         * ID of the protocol template group to query.
         */
        id: string;
        /**
         * Name of the protocol template group to query.
         */
        name: string;
        /**
         * ID set of the protocol template.
         */
        templateIds: string[];
    }

    export interface GetTemplatesTemplateList {
        /**
         * ID of the protocol template to query.
         */
        id: string;
        /**
         * Name of the protocol template to query.
         */
        name: string;
        /**
         * Set of the protocols.
         */
        protocols: string[];
    }

}

export namespace Pts {
    export interface FileFileInfo {
        /**
         * File id.
         */
        fileId?: string;
        /**
         * File name.
         */
        name?: string;
        /**
         * File size.
         */
        size?: number;
        /**
         * File type.
         */
        type?: string;
        /**
         * Update time.
         */
        updatedAt?: string;
    }

    export interface JobDataset {
        fileId?: string;
        headLines?: string[];
        headerColumns?: string[];
        headerInFile: boolean;
        lineCount?: number;
        name: string;
        size?: number;
        split: boolean;
        tailLines?: string[];
        /**
         * Scene Type.
         */
        type?: string;
        updatedAt?: string;
    }

    export interface JobDomainNameConfig {
        dnsConfig?: outputs.Pts.JobDomainNameConfigDnsConfig;
        hostAliases?: outputs.Pts.JobDomainNameConfigHostAlias[];
    }

    export interface JobDomainNameConfigDnsConfig {
        nameservers?: string[];
    }

    export interface JobDomainNameConfigHostAlias {
        hostNames?: string[];
        ip?: string;
    }

    export interface JobLoad {
        geoRegionsLoadDistributions?: outputs.Pts.JobLoadGeoRegionsLoadDistribution[];
        loadSpec?: outputs.Pts.JobLoadLoadSpec;
        vpcLoadDistribution?: outputs.Pts.JobLoadVpcLoadDistribution;
    }

    export interface JobLoadGeoRegionsLoadDistribution {
        percentage?: number;
        region?: string;
        regionId: number;
    }

    export interface JobLoadLoadSpec {
        concurrency?: outputs.Pts.JobLoadLoadSpecConcurrency;
        /**
         * Average number of requests per second.
         */
        requestsPerSecond?: outputs.Pts.JobLoadLoadSpecRequestsPerSecond;
        scriptOrigin?: outputs.Pts.JobLoadLoadSpecScriptOrigin;
    }

    export interface JobLoadLoadSpecConcurrency {
        gracefulStopSeconds?: number;
        iterationCount?: number;
        /**
         * Maximum requests per second.
         */
        maxRequestsPerSecond?: number;
        stages?: outputs.Pts.JobLoadLoadSpecConcurrencyStage[];
    }

    export interface JobLoadLoadSpecConcurrencyStage {
        durationSeconds?: number;
        targetVirtualUsers?: number;
    }

    export interface JobLoadLoadSpecRequestsPerSecond {
        durationSeconds?: number;
        gracefulStopSeconds?: number;
        /**
         * Maximum requests per second.
         */
        maxRequestsPerSecond?: number;
        resources?: number;
        startRequestsPerSecond?: number;
        targetRequestsPerSecond?: number;
    }

    export interface JobLoadLoadSpecScriptOrigin {
        durationSeconds: number;
        machineNumber: number;
        machineSpecification: string;
    }

    export interface JobLoadVpcLoadDistribution {
        region?: string;
        regionId: number;
        subnetIds?: string[];
        vpcId?: string;
    }

    export interface JobPlugin {
        fileId?: string;
        name?: string;
        size?: number;
        /**
         * Scene Type.
         */
        type?: string;
        updatedAt?: string;
    }

    export interface JobProtocol {
        fileId?: string;
        name?: string;
        size?: number;
        /**
         * Scene Type.
         */
        type?: string;
        updatedAt?: string;
    }

    export interface JobRequestFile {
        fileId?: string;
        name?: string;
        size?: number;
        /**
         * Scene Type.
         */
        type?: string;
        updatedAt?: string;
    }

    export interface JobTestScript {
        encodedContent?: string;
        encodedHttpArchive?: string;
        loadWeight?: number;
        name?: string;
        size?: number;
        /**
         * Scene Type.
         */
        type?: string;
        updatedAt?: string;
    }

    export interface ProjectTag {
        /**
         * tag key.
         */
        tagKey?: string;
        /**
         * tag value.
         */
        tagValue?: string;
    }

    export interface ScenarioDataset {
        /**
         * File ID.
         */
        fileId?: string;
        /**
         * Header data row.
         */
        headLines?: string[];
        /**
         * Parameter name array.
         */
        headerColumns?: string[];
        /**
         * Whether the first line is the parameter name.
         */
        headerInFile: boolean;
        /**
         * Number of file lines.
         */
        lineCount?: number;
        /**
         * The file name where the test dataset is located.
         */
        name: string;
        /**
         * Number of file bytes.
         */
        size?: number;
        /**
         * Test whether the dataset is fragmented.
         */
        split: boolean;
        /**
         * Trailing data row.
         */
        tailLines?: string[];
        /**
         * File type.
         */
        type?: string;
        /**
         * Update time.
         */
        updatedAt?: string;
    }

    export interface ScenarioDomainNameConfig {
        /**
         * DNS configuration.
         */
        dnsConfig?: outputs.Pts.ScenarioDomainNameConfigDnsConfig;
        /**
         * Domain name binding configuration.
         */
        hostAliases?: outputs.Pts.ScenarioDomainNameConfigHostAlias[];
    }

    export interface ScenarioDomainNameConfigDnsConfig {
        /**
         * DNS IP List.
         */
        nameservers?: string[];
    }

    export interface ScenarioDomainNameConfigHostAlias {
        /**
         * List of domain names to be bound.
         */
        hostNames?: string[];
        /**
         * The IP address to be bound.
         */
        ip?: string;
    }

    export interface ScenarioLoad {
        /**
         * Pressure distribution.
         */
        geoRegionsLoadDistributions?: outputs.Pts.ScenarioLoadGeoRegionsLoadDistribution[];
        /**
         * Pressure allocation.
         */
        loadSpec?: outputs.Pts.ScenarioLoadLoadSpec;
        /**
         * Source of stress.
         */
        vpcLoadDistribution?: outputs.Pts.ScenarioLoadVpcLoadDistribution;
    }

    export interface ScenarioLoadGeoRegionsLoadDistribution {
        /**
         * Percentage.
         */
        percentage?: number;
        /**
         * Region.
         */
        region?: string;
        /**
         * Regional ID.
         */
        regionId: number;
    }

    export interface ScenarioLoadLoadSpec {
        /**
         * Configuration of concurrent pressure mode.
         */
        concurrency?: outputs.Pts.ScenarioLoadLoadSpecConcurrency;
        /**
         * Configuration of RPS pressure mode.
         */
        requestsPerSecond?: outputs.Pts.ScenarioLoadLoadSpecRequestsPerSecond;
        /**
         * Built-in stress mode in script.
         */
        scriptOrigin?: outputs.Pts.ScenarioLoadLoadSpecScriptOrigin;
    }

    export interface ScenarioLoadLoadSpecConcurrency {
        /**
         * Wait time for graceful termination of the task.
         */
        gracefulStopSeconds?: number;
        /**
         * Number of runs.
         */
        iterationCount?: number;
        /**
         * Maximum RPS.
         */
        maxRequestsPerSecond?: number;
        /**
         * Multi-phase configuration array.
         */
        stages?: outputs.Pts.ScenarioLoadLoadSpecConcurrencyStage[];
    }

    export interface ScenarioLoadLoadSpecConcurrencyStage {
        /**
         * Pressure time.
         */
        durationSeconds?: number;
        /**
         * Number of virtual users.
         */
        targetVirtualUsers?: number;
    }

    export interface ScenarioLoadLoadSpecRequestsPerSecond {
        /**
         * Pressure time.
         */
        durationSeconds?: number;
        /**
         * Elegant shutdown waiting time.
         */
        gracefulStopSeconds?: number;
        /**
         * Maximum RPS.
         */
        maxRequestsPerSecond?: number;
        /**
         * Number of resources.
         */
        resources?: number;
        /**
         * Initial RPS.
         */
        startRequestsPerSecond?: number;
        /**
         * Target RPS, invalid input parameter.
         */
        targetRequestsPerSecond?: number;
    }

    export interface ScenarioLoadLoadSpecScriptOrigin {
        /**
         * Pressure testing time.
         */
        durationSeconds: number;
        /**
         * Number of machines.
         */
        machineNumber: number;
        /**
         * Machine specification.
         */
        machineSpecification: string;
    }

    export interface ScenarioLoadVpcLoadDistribution {
        /**
         * Region.
         */
        region?: string;
        /**
         * Regional ID.
         */
        regionId: number;
        /**
         * Subnet ID list.
         */
        subnetIds?: string[];
        /**
         * VPC ID.
         */
        vpcId?: string;
    }

    export interface ScenarioPlugin {
        /**
         * File id.
         */
        fileId?: string;
        /**
         * File name.
         */
        name?: string;
        /**
         * File size.
         */
        size?: number;
        /**
         * File type.
         */
        type?: string;
        /**
         * Update time.
         */
        updatedAt?: string;
    }

    export interface ScenarioProtocol {
        /**
         * File ID.
         */
        fileId?: string;
        /**
         * Protocol name.
         */
        name?: string;
        /**
         * File name.
         */
        size?: number;
        /**
         * File type.
         */
        type?: string;
        /**
         * Update time.
         */
        updatedAt?: string;
    }

    export interface ScenarioRequestFile {
        /**
         * File id.
         */
        fileId?: string;
        /**
         * File name.
         */
        name?: string;
        /**
         * File size.
         */
        size?: number;
        /**
         * File type.
         */
        type?: string;
        /**
         * Update time.
         */
        updatedAt?: string;
    }

    export interface ScenarioSlaPolicy {
        /**
         * Alarm notification channel.
         */
        alertChannel?: outputs.Pts.ScenarioSlaPolicyAlertChannel;
        /**
         * SLA rules.
         */
        slaRules?: outputs.Pts.ScenarioSlaPolicySlaRule[];
    }

    export interface ScenarioSlaPolicyAlertChannel {
        /**
         * AMP consumer ID.
         */
        ampConsumerId?: string;
        /**
         * Notification template ID.
         */
        noticeId?: string;
    }

    export interface ScenarioSlaPolicySlaRule {
        /**
         * Whether to stop the stress test task.
         */
        abortFlag?: boolean;
        /**
         * Aggregation method of pressure test index.
         */
        aggregation?: string;
        /**
         * Pressure test index condition judgment symbol.
         */
        condition?: string;
        /**
         * duraion.
         */
        for?: string;
        /**
         * tag.
         */
        labelFilters?: outputs.Pts.ScenarioSlaPolicySlaRuleLabelFilter[];
        /**
         * Pressure test index.
         */
        metric?: string;
        /**
         * Threshold value.
         */
        value?: number;
    }

    export interface ScenarioSlaPolicySlaRuleLabelFilter {
        /**
         * Label name.
         */
        labelName?: string;
        /**
         * Label value.
         */
        labelValue?: string;
    }

    export interface ScenarioTestScript {
        /**
         * Base64 encoded file content.
         */
        encodedContent?: string;
        /**
         * Base64 encoded har structure.
         */
        encodedHttpArchive?: string;
        /**
         * Script weight, range 1-100.
         */
        loadWeight?: number;
        /**
         * File name.
         */
        name?: string;
        /**
         * File size.
         */
        size?: number;
        /**
         * File type.
         */
        type?: string;
        /**
         * Update time.
         */
        updatedAt?: string;
    }

}

export namespace Redis {
    export interface GetBackupBackupSet {
        /**
         * Backup ID.
         */
        backupId: string;
        /**
         * Internal fields, which can be ignored by the user.
         */
        backupSize: number;
        /**
         * Backup type.1: User-initiated manual backup.0: System-initiated backup in the early morning.
         */
        backupType: string;
        /**
         * End time, such as 2017-02-08 19:09:26.Query the list of backups that the instance started backing up during the [beginTime, endTime] time period.
         */
        endTime: string;
        /**
         * Backup file expiration time.
         */
        expireTime: string;
        /**
         * Back up file types.
         */
        fileType: string;
        /**
         * Internal fields, which can be ignored by the user.
         */
        fullBackup: number;
        /**
         * The ID of instance.
         */
        instanceId: string;
        /**
         * Instance name, which supports fuzzy search based on instance name.
         */
        instanceName: string;
        /**
         * Internal fields, which can be ignored by the user.
         */
        instanceType: number;
        /**
         * Whether the backup is locked.0: Not locked.1: Has been locked.
         */
        locked: number;
        /**
         * The region where the backup is located.
         */
        region: string;
        /**
         * Notes information for the backup.
         */
        remark: string;
        /**
         * Backup start time.
         */
        startTime: string;
        /**
         * Status of the backup task:1: Backup is in the process.2: The backup is normal.3: Backup to RDB file processing.4: RDB conversion completed.-1: The backup has expired.-2: Backup deleted.
         */
        status: number;
    }

    export interface GetBackupDownloadInfoBackupInfo {
        /**
         * Backup file download address on the Internet (6 hours).
         */
        downloadUrl: string;
        /**
         * Backup file name.
         */
        fileName: string;
        /**
         * The backup file size is in unit B, if it is 0, it is invalid.
         */
        fileSize: number;
        /**
         * Backup file intranet download address (6 hours).
         */
        innerDownloadUrl: string;
    }

    export interface GetBackupDownloadInfoLimitVpc {
        /**
         * Customize the region of the VPC to which the backup file is downloaded.
         */
        region: string;
        /**
         * Customize the list of VPCs to download backup files.
         */
        vpcLists: string[];
    }

    export interface GetInstanceShardsInstanceShard {
        /**
         * Service status: 0-down;1-on.
         */
        connected: number;
        /**
         * Number of keys.
         */
        keys: number;
        /**
         * role.
         */
        role: number;
        /**
         * The node ID of the instance runtime.
         */
        runid: string;
        /**
         * Shard node ID.
         */
        shardId: string;
        /**
         * Shard node name.
         */
        shardName: string;
        /**
         * Slot information.
         */
        slots: string;
        /**
         * Used capacity.
         */
        storage: number;
        /**
         * Capacity tilt.
         */
        storageSlope: number;
    }

    export interface GetInstanceTaskListTask {
        /**
         * Termination time.
         */
        endTime: string;
        /**
         * The ID of instance.
         */
        instanceId: string;
        /**
         * Instance name.
         */
        instanceName: string;
        /**
         * Task progress.
         */
        progress: number;
        /**
         * The project ID.
         */
        projectId: number;
        /**
         * Task status.
         */
        result: number;
        /**
         * Start time.
         */
        startTime: string;
        /**
         * Task ID.
         */
        taskId: number;
        /**
         * Task type.
         */
        taskType: string;
    }

    export interface GetInstanceZoneInfoReplicaGroup {
        /**
         * Node group ID.
         */
        groupId: number;
        /**
         * Node group Name.
         */
        groupName: string;
        /**
         * Node group node list.
         */
        redisNodes: outputs.Redis.GetInstanceZoneInfoReplicaGroupRedisNode[];
        /**
         * The node group type, master is the primary node, and replica is the replica node.
         */
        role: string;
        /**
         * he availability zone ID of the node, such as ap-guangzhou-1.
         */
        zoneId: string;
    }

    export interface GetInstanceZoneInfoReplicaGroupRedisNode {
        /**
         * The number of node keys.
         */
        keys: number;
        /**
         * Node ID.
         */
        nodeId: string;
        /**
         * The node group type, master is the primary node, and replica is the replica node.
         */
        role: string;
        /**
         * Node slot distribution.
         */
        slot: string;
        /**
         * Node status.
         */
        status: string;
    }

    export interface GetInstancesInstanceList {
        /**
         * The charge type of instance. Valid values are `POSTPAID` and `PREPAID`.
         */
        chargeType: string;
        /**
         * The time when the instance is created.
         */
        createTime: string;
        /**
         * IP address of an instance.
         */
        ip: string;
        /**
         * Memory size in MB.
         */
        memSize: number;
        /**
         * Name of a redis instance.
         */
        name: string;
        /**
         * List of instance node information. Currently, information about the node type (master or replica) and node availability zone can be passed in.
         */
        nodeInfos: outputs.Redis.GetInstancesInstanceListNodeInfo[];
        /**
         * The port used to access a redis instance.
         */
        port: number;
        /**
         * ID of the project to which redis instance belongs.
         */
        projectId: number;
        /**
         * ID of a redis instance.
         */
        redisId: string;
        /**
         * The number of instance copies.
         */
        redisReplicasNum: number;
        /**
         * The number of instance shard.
         */
        redisShardNum: number;
        /**
         * Current status of an instance, maybe: `init`, `processing`, `online`, `isolate` and `todelete`.
         */
        status: string;
        /**
         * ID of the vpc subnet.
         */
        subnetId: string;
        /**
         * Tags of redis instance.
         */
        tags: {[key: string]: any};
        /**
         * (**Deprecated**) It has been deprecated from version 1.33.1. Please use 'type_id' instead. Instance type. Available values: `masterSlaveRedis`, `masterSlaveCkv`, `clusterCkv`, `clusterRedis` and `standaloneRedis`.
         *
         * @deprecated It has been deprecated from version 1.33.1. Please use 'type_id' instead.
         */
        type: string;
        /**
         * Instance type. Refer to `data.tencentcloud_redis_zone_config.list.type_id` get available values.
         */
        typeId: number;
        /**
         * ID of the vpc with which the instance is associated.
         */
        vpcId: string;
        /**
         * ID of an available zone.
         */
        zone: string;
    }

    export interface GetInstancesInstanceListNodeInfo {
        /**
         * ID of the master or replica node.
         */
        id: number;
        /**
         * Indicates whether the node is master.
         */
        master: boolean;
        /**
         * ID of the availability zone of the master or replica node.
         */
        zoneId: number;
    }

    export interface GetParamRecordsInstanceParamHistory {
        /**
         * Modification time.
         */
        modifyTime: string;
        /**
         * The modified value.
         */
        newValue: string;
        /**
         * The parameter name.
         */
        paramName: string;
        /**
         * Modify the previous value.
         */
        preValue: string;
        /**
         * Parameter status:1: parameter configuration modification.2: The parameter configuration is modified successfully.3: Parameter configuration modification failed.
         */
        status: number;
    }

    export interface GetZoneConfigList {
        /**
         * (**Deprecated**) It has been deprecated from version 1.26.0. Use `shardMemories` instead. The memory volume of an available instance(in MB).
         *
         * @deprecated It has been deprecated from version 1.26.0. Use `shard_memories` instead.
         */
        memSizes: number[];
        /**
         * The support numbers of instance copies.
         */
        redisReplicasNums: number[];
        /**
         * The support numbers of instance shard.
         */
        redisShardNums: number[];
        /**
         * The memory volume list of an available instance shard(in MB).
         */
        shardMemories: number[];
        /**
         * (**Deprecated**) It has been deprecated from version 1.33.1. Please use 'type_id' instead. Instance type. Available values: `masterSlaveRedis`, `masterSlaveCkv`, `clusterCkv`, `clusterRedis` and `standaloneRedis`.
         *
         * @deprecated It has been deprecated from version 1.33.1. Please use 'type_id' instead.
         */
        type: string;
        /**
         * Instance type ID.
         */
        typeId: number;
        /**
         * Version description of an available instance. Possible values: `Redis 3.2`, `Redis 4.0`.
         */
        version: string;
        /**
         * ID of available zone.
         */
        zone: string;
    }

    export interface InstanceNodeInfo {
        /**
         * ID of the master or replica node.
         */
        id: number;
        /**
         * Indicates whether the node is master.
         */
        master: boolean;
        /**
         * ID of the availability zone of the master or replica node.
         */
        zoneId: number;
    }

    export interface ParamTemplateParamDetail {
        /**
         * Current value.
         */
        currentValue: string;
        /**
         * Default value.
         */
        default: string;
        /**
         * Parameter template description.
         */
        description: string;
        /**
         * Enum values.
         */
        enumValues: string[];
        /**
         * Maximum value.
         */
        max: string;
        /**
         * Minimum value.
         */
        min: string;
        /**
         * Parameter template name.
         */
        name: string;
        /**
         * Indicates whether to reboot redis instance if modified.
         */
        needReboot: number;
        /**
         * Parameter type.
         */
        paramType: string;
    }

    export interface ParamTemplateParamsOverride {
        /**
         * Parameter key e.g. `timeout`, check https://www.tencentcloud.com/document/product/239/39796 for more reference.
         */
        key: string;
        /**
         * Parameter value, check https://www.tencentcloud.com/document/product/239/39796 for more reference.
         */
        value: string;
    }
}

export namespace Reserved {
    export interface GetInstanceConfigsConfigList {
        /**
         * The available zone that the reserved instance locates at.
         */
        availabilityZone: string;
        /**
         * Configuration ID of the purchasable reserved instance.
         */
        configId: string;
        /**
         * Settlement currency of the reserved instance, which is a standard currency code as listed in ISO 4217.
         */
        currencyCode: string;
        /**
         * Validity period of the reserved instance. Valid values are `31536000`(1 year) and `94608000`(3 years).
         */
        duration: number;
        /**
         * The type of reserved instance.
         */
        instanceType: string;
        /**
         * Filter by Payment Type. Such as All Upfront.
         */
        offeringType: string;
        /**
         * Platform of the reserved instance.
         */
        platform: string;
        /**
         * Purchase price of the reserved instance.
         */
        price: number;
        /**
         * UsagePrice of the reserved instance.
         */
        usagePrice: number;
    }

    export interface GetInstancesReservedInstanceList {
        /**
         * The available zone that the reserved instance locates at.
         */
        availabilityZone: string;
        /**
         * Expiry time of the reserved instance.
         */
        endTime: string;
        /**
         * Number of reserved instance.
         */
        instanceCount: number;
        /**
         * The type of reserved instance.
         */
        instanceType: string;
        /**
         * ID of the reserved instance to be query.
         */
        reservedInstanceId: string;
        /**
         * Start time of the reserved instance.
         */
        startTime: string;
        /**
         * Status of the reserved instance.
         */
        status: string;
    }

}

export namespace Rum {
    export interface GetProjectProjectSet {
        /**
         * CreateTime.
         */
        createTime: string;
        /**
         * Creator ID.
         */
        creator: string;
        /**
         * Project description.
         */
        desc: string;
        /**
         * Whether to enable URL aggregation.
         */
        enableUrlGroup: number;
        /**
         * Instance ID.
         */
        instanceId: string;
        /**
         * Instance key.
         */
        instanceKey: string;
        /**
         * Instance name.
         */
        instanceName: string;
        /**
         * Starred status. `1`: yes; `0`: no.
         */
        isStar: number;
        /**
         * Unique project key (12 characters).
         */
        key: string;
        /**
         * Project name.
         */
        name: string;
        /**
         * Project ID.
         */
        pid: number;
        /**
         * Project status (`1`: Creating; `2`: Running; `3`: Abnormal; `4`: Restarting; `5`: Stopping; `6`: Stopped; `7`: Terminating; `8`: Terminated).
         */
        projectStatus: number;
        /**
         * Project sample rate.
         */
        rate: string;
        /**
         * Project repository address.
         */
        repo: string;
        /**
         * Project type.
         */
        type: string;
        /**
         * Project URL.
         */
        url: string;
    }

    export interface GetTawInstanceInstanceSet {
        /**
         * Area ID.
         */
        areaId: number;
        /**
         * Billing status (`1` = in use, `2` = expired, `3` = destroyed, `4` = assigning, `5` = failed).
         */
        chargeStatus: number;
        /**
         * Billing type (`1` = free version, `2` = prepaid, `3` = postpaid).
         */
        chargeType: number;
        /**
         * Cluster ID.
         */
        clusterId: number;
        /**
         * Create time.
         */
        createdAt: string;
        /**
         * Data retention time (days).
         */
        dataRetentionDays: number;
        /**
         * Instance Desc.
         */
        instanceDesc: string;
        /**
         * Instance ID.
         */
        instanceId: string;
        /**
         * Instance name.
         */
        instanceName: string;
        /**
         * Instance status (`1` = creating, `2` = running, `3` = exception, `4` = restarting, `5` = stopping, `6` = stopped, `7` = deleted).
         */
        instanceStatus: number;
        /**
         * Tag List.
         */
        tags: outputs.Rum.GetTawInstanceInstanceSetTag[];
        /**
         * Update time.
         */
        updatedAt: string;
    }

    export interface GetTawInstanceInstanceSetTag {
        /**
         * Tag Key.
         */
        key: string;
        /**
         * Tag Value.
         */
        value: string;
    }

    export interface GetWhitelistWhitelistSet {
        /**
         * Business identifier.
         */
        aid: string;
        /**
         * Creation time.
         */
        createTime: string;
        /**
         * Creator ID.
         */
        createUser: string;
        /**
         * Remarks.
         */
        remark: string;
        /**
         * End time.
         */
        ttl: string;
        /**
         * uin: business identifier.
         */
        whitelistUin: string;
        /**
         * Auto-Increment allowlist ID.
         */
        wid: string;
    }

}

export namespace Scf {
    export interface FunctionAliasRoutingConfig {
        /**
         * Additional version with rule-based routing.
         */
        additionalVersionMatches?: outputs.Scf.FunctionAliasRoutingConfigAdditionalVersionMatch[];
        /**
         * Additional version with random weight-based routing.
         */
        additionalVersionWeights?: outputs.Scf.FunctionAliasRoutingConfigAdditionalVersionWeight[];
    }

    export interface FunctionAliasRoutingConfigAdditionalVersionMatch {
        /**
         * Rule requirements for range match:It should be described in an open or closed range, i.e., (a,b) or [a,b], where both a and b are integersRule requirements for exact match:Exact string match.
         */
        expression: string;
        /**
         * Matching rule key. When the API is called, pass in the key to route the request to the specified version based on the matching ruleHeader method:Enter invoke.headers.User for key and pass in RoutingKey:{User:value} when invoking a function through invoke for invocation based on rule matching.
         */
        key: string;
        /**
         * Match method. Valid values:range: Range matchexact: exact string match.
         */
        method: string;
        /**
         * Function version name.
         */
        version: string;
    }

    export interface FunctionAliasRoutingConfigAdditionalVersionWeight {
        /**
         * Function version name.
         */
        version: string;
        /**
         * Version weight.
         */
        weight: number;
    }

    export interface FunctionCfsConfig {
        /**
         * File system instance ID.
         */
        cfsId: string;
        ipAddress: string;
        /**
         * Local mount directory.
         */
        localMountDir: string;
        /**
         * File system mount instance ID.
         */
        mountInsId: string;
        mountSubnetId: string;
        mountVpcId: string;
        /**
         * Remote mount directory.
         */
        remoteMountDir: string;
        /**
         * ID of user group.
         */
        userGroupId: string;
        /**
         * ID of user.
         */
        userId: string;
    }

    export interface FunctionImageConfig {
        /**
         * the parameters of command.
         */
        args?: string;
        /**
         * The command of entrypoint.
         */
        command?: string;
        /**
         * The entrypoint of app.
         */
        entryPoint?: string;
        /**
         * The image type. personal or enterprise.
         */
        imageType: string;
        /**
         * The uri of image.
         */
        imageUri: string;
        /**
         * The registry id of TCR. When image type is enterprise, it must be set.
         */
        registryId?: string;
    }

    export interface FunctionLayer {
        /**
         * The name of Layer.
         */
        layerName: string;
        /**
         * The version of layer.
         */
        layerVersion: number;
    }

    export interface FunctionTrigger {
        /**
         * Region of cos bucket. if `type` is `cos`, `cosRegion` is required.
         */
        cosRegion?: string;
        /**
         * Name of the SCF function trigger, if `type` is `ckafka`, the format of name must be `<ckafkaInstanceId>-<topicId>`; if `type` is `cos`, the name is cos bucket id, other In any case, it can be combined arbitrarily. It can only contain English letters, numbers, connectors and underscores. The maximum length is 100.
         */
        name: string;
        /**
         * TriggerDesc of the SCF function trigger, parameter format of `timer` is linux cron expression; parameter of `cos` type is json string `{"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}`, where `bucketUrl` is cos bucket (optional), `event` is the cos event trigger, `Prefix` is the corresponding file prefix filter condition, `Suffix` is the suffix filter condition, if not need filter condition can not pass; `cmq` type does not pass this parameter; `ckafka` type parameter format is json string `{"maxMsgNum":"1","offset":"latest"}`; `apigw` type parameter format is json string `{"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}`.
         */
        triggerDesc: string;
        /**
         * Type of the SCF function trigger, support `cos`, `cmq`, `timer`, `ckafka`, `apigw`.
         */
        type: string;
    }

    export interface FunctionTriggerInfo {
        /**
         * Create time of SCF function trigger.
         */
        createTime: string;
        /**
         * User-defined parameters of SCF function trigger.
         */
        customArgument: string;
        /**
         * Whether SCF function trigger is enable.
         */
        enable: boolean;
        /**
         * Modify time of SCF function trigger.
         */
        modifyTime: string;
        /**
         * Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
         */
        name: string;
        /**
         * TriggerDesc of the SCF function trigger, parameter format of `timer` is linux cron expression; parameter of `cos` type is json string `{"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}`, where `bucketUrl` is cos bucket (optional), `event` is the cos event trigger, `Prefix` is the corresponding file prefix filter condition, `Suffix` is the suffix filter condition, if not need filter condition can not pass; `cmq` type does not pass this parameter; `ckafka` type parameter format is json string `{"maxMsgNum":"1","offset":"latest"}`; `apigw` type parameter format is json string `{"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}`.
         */
        triggerDesc: string;
        /**
         * Type of the SCF function trigger, support `cos`, `cmq`, `timer`, `ckafka`, `apigw`.
         */
        type: string;
    }

    export interface GetFunctionsFunction {
        /**
         * CLS logset ID of the SCF function.
         */
        clsLogsetId: string;
        /**
         * CLS topic ID of the SCF function.
         */
        clsTopicId: string;
        /**
         * Code error of the SCF function.
         */
        codeError: string;
        /**
         * Code result of the SCF function.
         */
        codeResult: string;
        /**
         * Code size of the SCF function.
         */
        codeSize: number;
        /**
         * Create time of the SCF function trigger.
         */
        createTime: string;
        /**
         * Description of the SCF function to be queried.
         */
        description: string;
        /**
         * Whether EIP is a fixed IP.
         */
        eipFixed: boolean;
        /**
         * EIP list of the SCF function.
         */
        eips: string[];
        /**
         * Whether the EIP enabled.
         */
        enableEipConfig: boolean;
        /**
         * Whether the public net enabled.
         */
        enablePublicNet: boolean;
        /**
         * Environment variable of the SCF function.
         */
        environment: {[key: string]: any};
        /**
         * Errno of the SCF function.
         */
        errNo: number;
        /**
         * Handler of the SCF function.
         */
        handler: string;
        /**
         * Host of the SCF function.
         */
        host: string;
        /**
         * Whether to automatically install dependencies.
         */
        installDependency: boolean;
        /**
         * Whether to enable L5.
         */
        l5Enable: boolean;
        /**
         * Memory size of the SCF function runtime, unit is M.
         */
        memSize: number;
        /**
         * Modify time of the SCF function trigger.
         */
        modifyTime: string;
        /**
         * Name of the SCF function to be queried.
         */
        name: string;
        /**
         * Namespace of the SCF function to be queried.
         */
        namespace: string;
        /**
         * CAM role of the SCF function.
         */
        role: string;
        /**
         * Runtime of the SCF function.
         */
        runtime: string;
        /**
         * Status of the SCF function.
         */
        status: string;
        /**
         * Status description of the SCF function.
         */
        statusDesc: string;
        /**
         * Subnet ID of the SCF function.
         */
        subnetId: string;
        /**
         * Tags of the SCF function to be queried, can use up to 10 tags.
         */
        tags: {[key: string]: any};
        /**
         * Timeout of the SCF function maximum execution time, unit is second.
         */
        timeout: number;
        /**
         * Trigger details list the SCF function. Each element contains the following attributes:
         */
        triggerInfos: outputs.Scf.GetFunctionsFunctionTriggerInfo[];
        /**
         * Vip of the SCF function.
         */
        vip: string;
        /**
         * VPC ID of the SCF function.
         */
        vpcId: string;
    }

    export interface GetFunctionsFunctionTriggerInfo {
        /**
         * Create time of the SCF function trigger.
         */
        createTime: string;
        /**
         * user-defined parameter of the SCF function trigger.
         */
        customArgument: string;
        /**
         * Whether to enable SCF function trigger.
         */
        enable: boolean;
        /**
         * Modify time of the SCF function trigger.
         */
        modifyTime: string;
        /**
         * Name of the SCF function to be queried.
         */
        name: string;
        /**
         * TriggerDesc of the SCF function trigger.
         */
        triggerDesc: string;
        /**
         * Type of the SCF function trigger.
         */
        type: string;
    }

    export interface GetLogsLog {
        /**
         * Function billing time, according to duration up to the last 100ms, unit is ms.
         */
        billDuration: number;
        /**
         * Function execution time-consuming, unit is ms.
         */
        duration: number;
        /**
         * Name of the SCF function to be queried.
         */
        functionName: string;
        /**
         * Whether the function call ends, `1` means the execution ends, other values indicate the call exception.
         */
        invokeFinished: number;
        /**
         * Log level.
         */
        level: string;
        /**
         * Log output during function execution.
         */
        log: string;
        /**
         * The actual memory size consumed in the execution of the function, unit is Byte.
         */
        memUsage: number;
        /**
         * Execute the requestId corresponding to the function.
         */
        requestId: string;
        /**
         * Use to filter log, optional value: `not0` only returns the error log. `is0` only returns the correct log. `TimeLimitExceeded` returns the log of the function call timeout. `ResourceLimitExceeded` returns the function call generation resource overrun log. `UserCodeException` returns logs of the user code error that occurred in the function call. Not passing the parameter means returning all logs.
         */
        retCode: number;
        /**
         * Return value after function execution is completed.
         */
        retMsg: string;
        /**
         * Log source.
         */
        source: string;
        /**
         * The start time of the query, the format is `2017-05-16 20:00:00`, which can only be within one day from `endTime`.
         */
        startTime: string;
    }

    export interface GetNamespacesNamespace {
        /**
         * Create time of the SCF namespace.
         */
        createTime: string;
        /**
         * Description of the SCF namespace to be queried.
         */
        description: string;
        /**
         * Modify time of the SCF namespace.
         */
        modifyTime: string;
        /**
         * Name of the SCF namespace to be queried.
         */
        namespace: string;
        /**
         * Type of the SCF namespace.
         */
        type: string;
    }

    export interface LayerContent {
        /**
         * Cos bucket name of the SCF layer, such as `cos-1234567890`, conflict with `zipFile`.
         */
        cosBucketName?: string;
        /**
         * Cos bucket region of the SCF layer, conflict with `zipFile`.
         */
        cosBucketRegion?: string;
        /**
         * Cos object name of the SCF layer, should have suffix `.zip` or `.jar`, conflict with `zipFile`.
         */
        cosObjectName?: string;
        /**
         * Zip file of the SCF layer, conflict with `cosBucketName`, `cosObjectName`, `cosBucketRegion`.
         */
        zipFile?: string;
    }

}

export namespace Security {
    export interface GetGroupsSecurityGroup {
        /**
         * Number of security group binding resources.
         */
        beAssociateCount: number;
        /**
         * Creation time of security group.
         */
        createTime: string;
        /**
         * Description of the security group.
         */
        description: string;
        /**
         * Egress rules set. For items like `[action]#[cidrIp]#[port]#[protocol]`, it means a regular rule; for items like `sg-XXXX`, it means a nested security group.
         */
        egresses: string[];
        /**
         * Ingress rules set. For items like `[action]#[cidrIp]#[port]#[protocol]`, it means a regular rule; for items like `sg-XXXX`, it means a nested security group.
         */
        ingresses: string[];
        /**
         * Name of the security group to be queried. Conflict with `securityGroupId`.
         */
        name: string;
        /**
         * Project ID of the security group to be queried. Conflict with `securityGroupId`.
         */
        projectId: number;
        /**
         * ID of the security group to be queried. Conflict with `name` and `projectId`.
         */
        securityGroupId: string;
        /**
         * Tags of the security group to be queried. Conflict with `securityGroupId`.
         */
        tags: {[key: string]: any};
    }

    export interface GroupRuleAddressTemplate {
        /**
         * Address template group ID, conflicts with `templateId`.
         */
        groupId?: string;
        /**
         * Address template ID, conflicts with `groupId`.
         */
        templateId?: string;
    }

    export interface GroupRuleProtocolTemplate {
        /**
         * Address template group ID, conflicts with `templateId`.
         */
        groupId?: string;
        /**
         * Address template ID, conflicts with `groupId`.
         */
        templateId?: string;
    }

    export interface GroupRuleSetEgress {
        /**
         * Rule policy of security group. Valid values: `ACCEPT` and `DROP`.
         */
        action: string;
        /**
         * Specify Group ID of Address template like `ipmg-xxxxxxxx`, conflict with `sourceSecurityId` and `cidrBlock`.
         */
        addressTemplateGroup?: string;
        /**
         * Specify Address template ID like `ipm-xxxxxxxx`, conflict with `sourceSecurityId` and `cidrBlock`.
         */
        addressTemplateId?: string;
        /**
         * An IP address network or CIDR segment. NOTE: `cidrBlock`, `ipv6CidrBlock`, `sourceSecurityId` and `address_template_*` are exclusive and cannot be set in the same time.
         */
        cidrBlock?: string;
        /**
         * Description of the security group rule.
         */
        description?: string;
        /**
         * An IPV6 address network or CIDR segment, and conflict with `sourceSecurityId` and `address_template_*`.
         */
        ipv6CidrBlock?: string;
        /**
         * Range of the port. The available value can be one, multiple or one segment. E.g. `80`, `80,90` and `80-90`. Default to all ports, and conflicts with `service_template_*`.
         */
        port: string;
        /**
         * Type of IP protocol. Valid values: `TCP`, `UDP` and `ICMP`. Default to all types protocol, and conflicts with `service_template_*`.
         */
        protocol: string;
        /**
         * Specify Group ID of Protocol template ID like `ppmg-xxxxxxxx`, conflict with `cidrBlock` and `port`.
         */
        serviceTemplateGroup?: string;
        /**
         * Specify Protocol template ID like `ppm-xxxxxxxx`, conflict with `cidrBlock` and `port`.
         */
        serviceTemplateId?: string;
        /**
         * ID of the nested security group, and conflicts with `cidrBlock` and `address_template_*`.
         */
        sourceSecurityId?: string;
    }

    export interface GroupRuleSetIngress {
        /**
         * Rule policy of security group. Valid values: `ACCEPT` and `DROP`.
         */
        action: string;
        /**
         * Specify Group ID of Address template like `ipmg-xxxxxxxx`, conflict with `sourceSecurityId` and `cidrBlock`.
         */
        addressTemplateGroup?: string;
        /**
         * Specify Address template ID like `ipm-xxxxxxxx`, conflict with `sourceSecurityId` and `cidrBlock`.
         */
        addressTemplateId?: string;
        /**
         * An IP address network or CIDR segment. NOTE: `cidrBlock`, `ipv6CidrBlock`, `sourceSecurityId` and `address_template_*` are exclusive and cannot be set in the same time.
         */
        cidrBlock?: string;
        /**
         * Description of the security group rule.
         */
        description?: string;
        /**
         * An IPV6 address network or CIDR segment, and conflict with `sourceSecurityId` and `address_template_*`.
         */
        ipv6CidrBlock?: string;
        /**
         * Range of the port. The available value can be one, multiple or one segment. E.g. `80`, `80,90` and `80-90`. Default to all ports, and conflicts with `service_template_*`.
         */
        port: string;
        /**
         * Type of IP protocol. Valid values: `TCP`, `UDP` and `ICMP`. Default to all types protocol, and conflicts with `service_template_*`.
         */
        protocol: string;
        /**
         * Specify Group ID of Protocol template ID like `ppmg-xxxxxxxx`, conflict with `cidrBlock` and `port`.
         */
        serviceTemplateGroup?: string;
        /**
         * Specify Protocol template ID like `ppm-xxxxxxxx`, conflict with `cidrBlock` and `port`.
         */
        serviceTemplateId?: string;
        /**
         * ID of the nested security group, and conflicts with `cidrBlock` and `address_template_*`.
         */
        sourceSecurityId?: string;
    }

}

export namespace Ses {
    export interface TemplateTemplateContent {
        /**
         * Html code after base64.
         */
        html?: string;
        /**
         * Text content after base64.
         */
        text?: string;
    }

}

export namespace Sqlserver {
    export interface GetAccountDbAttachmentsList {
        /**
         * Name of the SQL Server account to be queried.
         */
        accountName: string;
        /**
         * Name of the DB to be queried.
         */
        dbName: string;
        /**
         * SQL Server instance ID that the account belongs to.
         */
        instanceId: string;
        /**
         * Privilege of the account on DB. Valid value are `ReadOnly`, `ReadWrite`.
         */
        privilege: string;
    }

    export interface GetAccountsList {
        /**
         * Create time of the SQL Server account.
         */
        createTime: string;
        /**
         * SQL server instance ID that the account belongs to.
         */
        instanceId: string;
        /**
         * Name of the SQL server account to be queried.
         */
        name: string;
        /**
         * Remark of the SQL Server account.
         */
        remark: string;
        /**
         * Status of the SQL Server account. `1` for creating, `2` for running, `3` for modifying, 4 for resetting password, -1 for deleting.
         */
        status: number;
        /**
         * Last updated time of the SQL Server account.
         */
        updateTime: string;
    }

    export interface GetBackupsList {
        /**
         * Database name list of the backup.
         */
        dbLists: string[];
        /**
         * End time of the instance list, like yyyy-MM-dd HH:mm:ss.
         */
        endTime: string;
        /**
         * File name of the backup.
         */
        fileName: string;
        /**
         * ID of the backup.
         */
        id: string;
        /**
         * Instance ID.
         */
        instanceId: string;
        /**
         * URL for downloads externally.
         */
        internetUrl: string;
        /**
         * URL for downloads internally.
         */
        intranetUrl: string;
        /**
         * The size of backup file. Unit is KB.
         */
        size: number;
        /**
         * Start time of the instance list, like yyyy-MM-dd HH:mm:ss.
         */
        startTime: string;
        /**
         * Status of the backup. `1` for creating, `2` for successfully created, 3 for failed.
         */
        status: number;
        /**
         * Strategy of the backup. `0` for instance backup, `1` for multi-databases backup.
         */
        strategy: number;
        /**
         * The way to trigger backup. `0` for timed trigger, `1` for manual trigger.
         */
        triggerModel: number;
    }

    export interface GetBasicInstancesInstanceList {
        /**
         * Availability zone.
         */
        availabilityZone: string;
        /**
         * Pay type of the SQL Server basic instance. For now, only `POSTPAID_BY_HOUR` is valid.
         */
        chargeType: string;
        /**
         * The CPU number of the SQL Server basic instance.
         */
        cpu: number;
        /**
         * Create time of the SQL Server basic instance.
         */
        createTime: string;
        /**
         * Version of the SQL Server basic database engine. Allowed values are `2008R2`(SQL Server 2008 Enterprise), `2012SP3`(SQL Server 2012 Enterprise), `2016SP1` (SQL Server 2016 Enterprise), `201602`(SQL Server 2016 Standard) and `2017`(SQL Server 2017 Enterprise). Default is `2008R2`.
         */
        engineVersion: string;
        /**
         * ID of the SQL Server basic instance to be query.
         */
        id: string;
        /**
         * Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloudSqlserverSpecinfos` provides.
         */
        memory: number;
        /**
         * Name of the SQL Server basic instance to be query.
         */
        name: string;
        /**
         * Project ID of the SQL Server basic instance to be query.
         */
        projectId: number;
        /**
         * Status of the SQL Server basic instance. `1` for applying, `2` for running, `3` for running with limit, `4` for isolated, `5` for recycling, `6` for recycled, `7` for running with task, `8` for off-line, `9` for expanding, `10` for migrating, `11` for readonly, `12` for rebooting.
         */
        status: number;
        /**
         * Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storageMin` and `storageMax` which data source `tencentcloudSqlserverSpecinfos` provides.
         */
        storage: number;
        /**
         * Subnet ID of the SQL Server basic instance to be query.
         */
        subnetId: string;
        /**
         * Tags of the SQL Server basic instance.
         */
        tags: {[key: string]: any};
        /**
         * Used storage.
         */
        usedStorage: number;
        /**
         * IP for private access.
         */
        vip: string;
        /**
         * Vpc ID of the SQL Server basic instance to be query.
         */
        vpcId: string;
        /**
         * Port for private access.
         */
        vport: number;
    }

    export interface GetDbsDbList {
        /**
         * Character set DB uses, could be `Chinese_PRC_CI_AS`, `Chinese_PRC_CS_AS`, `Chinese_PRC_BIN`, `Chinese_Taiwan_Stroke_CI_AS`, `SQL_Latin1_General_CP1_CI_AS`, and `SQL_Latin1_General_CP1_CS_AS`.
         */
        charset: string;
        /**
         * Database creation time.
         */
        createTime: string;
        /**
         * SQL Server instance ID which DB belongs to.
         */
        instanceId: string;
        /**
         * Name of DB.
         */
        name: string;
        /**
         * Remark of the DB.
         */
        remark: string;
        /**
         * Database status. Valid values are `creating`, `running`, `modifying`, `dropping`.
         */
        status: string;
    }

    export interface GetInstancesInstanceList {
        /**
         * Availability zone.
         */
        availabilityZone: string;
        /**
         * Pay type of the SQL Server instance. For now, only `POSTPAID_BY_HOUR` is valid.
         */
        chargeType: string;
        /**
         * Create time of the SQL Server instance.
         */
        createTime: string;
        /**
         * Version of the SQL Server database engine. Allowed values are `2008R2`(SQL Server 2008 Enterprise), `2012SP3`(SQL Server 2012 Enterprise), `2016SP1` (SQL Server 2016 Enterprise), `201602`(SQL Server 2016 Standard) and `2017`(SQL Server 2017 Enterprise). Default is `2008R2`.
         */
        engineVersion: string;
        /**
         * Instance type. `DUAL` (dual-server high availability), `CLUSTER` (cluster).
         */
        haType: string;
        /**
         * ID of the SQL Server instance to be query.
         */
        id: string;
        /**
         * Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloudSqlserverSpecinfos` provides.
         */
        memory: number;
        /**
         * Name of the SQL Server instance to be query.
         */
        name: string;
        /**
         * Project ID of the SQL Server instance to be query.
         */
        projectId: number;
        /**
         * Readonly flag. `RO` (read-only instance), `MASTER` (primary instance with read-only instances). If it is left empty, it refers to an instance which is not read-only and has no RO group.
         */
        roFlag: string;
        /**
         * Status of the SQL Server instance. 1 for applying, 2 for running, 3 for running with limit, 4 for isolated, 5 for recycling, 6 for recycled, 7 for running with task, 8 for off-line, 9 for expanding, 10 for migrating, 11 for readonly, 12 for rebooting.
         */
        status: number;
        /**
         * Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storageMin` and `storageMax` which data source `tencentcloudSqlserverSpecinfos` provides.
         */
        storage: number;
        /**
         * Subnet ID of the SQL Server instance to be query.
         */
        subnetId: string;
        /**
         * Tags of the SQL Server instance.
         */
        tags: {[key: string]: any};
        /**
         * Used storage.
         */
        usedStorage: number;
        /**
         * IP for private access.
         */
        vip: string;
        /**
         * Vpc ID of the SQL Server instance to be query.
         */
        vpcId: string;
        /**
         * Port for private access.
         */
        vport: number;
    }

    export interface GetPublishSubscribesPublishSubscribeList {
        /**
         * Database Publish and Publish relationship list.
         */
        databaseTuples: outputs.Sqlserver.GetPublishSubscribesPublishSubscribeListDatabaseTuple[];
        /**
         * ID of the SQL Server instance which publish.
         */
        publishInstanceId: string;
        /**
         * IP of the the SQL Server instance which publish.
         */
        publishInstanceIp: string;
        /**
         * Name of the SQL Server instance which publish.
         */
        publishInstanceName: string;
        /**
         * The id of the Publish and Subscribe.
         */
        publishSubscribeId: number;
        /**
         * The name of the Publish and Subscribe.
         */
        publishSubscribeName: string;
        /**
         * ID of the SQL Server instance which subscribe.
         */
        subscribeInstanceId: string;
        /**
         * IP of the SQL Server instance which subscribe.
         */
        subscribeInstanceIp: string;
        /**
         * Name of the SQL Server instance which subscribe.
         */
        subscribeInstanceName: string;
    }

    export interface GetPublishSubscribesPublishSubscribeListDatabaseTuple {
        /**
         * Last sync time.
         */
        lastSyncTime: string;
        /**
         * Name of publish database.
         */
        publishDatabase: string;
        /**
         * Publish and subscribe status between databases, valid values are `running`, `success`, `fail`, `unknow`.
         */
        status: string;
        /**
         * Name of subscribe database.
         */
        subscribeDatabase: string;
    }

    export interface GetReadonlyGroupsList {
        /**
         * ID of the readonly group.
         */
        id: string;
        /**
         * Indicate whether to offline delayed readonly instances.
         */
        isOfflineDelay: number;
        /**
         * Master SQL Server instance ID.
         */
        masterInstanceId: string;
        /**
         * Maximum delay time of the readonly instances.
         */
        maxDelayTime: number;
        /**
         * Minimum readonly instances that stays in the group.
         */
        minInstances: number;
        /**
         * Name of the readonly group.
         */
        name: string;
        /**
         * Readonly instance ID set of the readonly group.
         */
        readonlyInstanceSets: string[];
        /**
         * Status of the readonly group. `1` for running, `5` for applying.
         */
        status: number;
        /**
         * Virtual IP address of the readonly group.
         */
        vip: string;
        /**
         * Virtual port of the readonly group.
         */
        vport: number;
    }

    export interface GetZoneConfigZoneList {
        /**
         * Alphabet ID of availability zone.
         */
        availabilityZone: string;
        /**
         * A list of specinfo configurations for the specific availability zone. Each element contains the following attributes:
         */
        specinfoLists: outputs.Sqlserver.GetZoneConfigZoneListSpecinfoList[];
        /**
         * Number ID of availability zone.
         */
        zoneId: number;
    }

    export interface GetZoneConfigZoneListSpecinfoList {
        /**
         * Billing mode under this specification. Valid values are `POSTPAID_BY_HOUR`, `PREPAID` and `ALL`. `ALL` means both POSTPAID_BY_HOUR and PREPAID.
         */
        chargeType: string;
        /**
         * Number of CPU cores.
         */
        cpu: number;
        /**
         * Database version information. Valid values: `2008R2 (SQL Server 2008 Enterprise)`, `2012SP3 (SQL Server 2012 Enterprise)`, `2016SP1 (SQL Server 2016 Enterprise)`, `201602 (SQL Server 2016 Standard)`, `2017 (SQL Server 2017 Enterprise)`.
         */
        dbVersion: string;
        /**
         * Version name corresponding to the `dbVersion` field.
         */
        dbVersionName: string;
        /**
         * Model ID.
         */
        machineType: string;
        /**
         * Maximum disk size under this specification in GB.
         */
        maxStorageSize: number;
        /**
         * Memory size in GB.
         */
        memory: number;
        /**
         * Minimum disk size under this specification in GB.
         */
        minStorageSize: number;
        /**
         * QPS of this specification.
         */
        qps: number;
        /**
         * Instance specification ID.
         */
        specId: number;
    }

    export interface MigrationMigrateDbSet {
        /**
         * Name of the migration database.
         */
        dbName?: string;
    }

    export interface MigrationRenameRestore {
        /**
         * When the new name of the library is used for offline migration, if it is not filled in, it will be named according to OldName. OldName and NewName cannot be filled in at the same time. OldName and NewName must be filled in and cannot be duplicate when used for cloning database.
         */
        newName?: string;
        /**
         * The name of the library. If oldName does not exist, a failure is returned.It can be left blank when used for offline migration tasks.
         */
        oldName?: string;
    }

    export interface MigrationSource {
        /**
         * ID of the migration source Cvm, used when MigrateType=2 (cloud server self-built SQL Server database).
         */
        cvmId?: string;
        /**
         * The ID of the migration source instance, which is used when MigrateType=1 (TencentDB for SQLServers). The format is mssql-si2823jyl.
         */
        instanceId?: string;
        /**
         * Migrate the intranet IP of the self-built database of the source Cvm, and use it when MigrateType=2 (self-built SQL Server database of the cloud server).
         */
        ip?: string;
        /**
         * Password, MigrateType=1 or MigrateType=2.
         */
        password?: string;
        /**
         * The port number of the self-built database of the migration source Cvm, which is used when MigrateType=2 (self-built SQL Server database of the cloud server).
         */
        port?: number;
        /**
         * The subnet ID under the Vpc of the source Cvm is used when MigrateType=2 (ECS self-built SQL Server database). The format is as follows subnet-h9extioi.
         */
        subnetId?: string;
        /**
         * The source backup password for offline migration, MigrateType=4 or MigrateType=5.
         */
        urlPassword?: string;
        /**
         * The source backup address for offline migration. MigrateType=4 or MigrateType=5.
         */
        urls?: string[];
        /**
         * User name, MigrateType=1 or MigrateType=2.
         */
        userName?: string;
        /**
         * The Vpc network ID of the migration source Cvm is used when MigrateType=2 (cloud server self-built SQL Server database). The format is as follows vpc-6ys9ont9.
         */
        vpcId: string;
    }

    export interface MigrationTarget {
        /**
         * The ID of the migration target instance, in the format mssql-si2823jyl.
         */
        instanceId?: string;
        /**
         * Password of the migration target instance.
         */
        password?: string;
        /**
         * User name of the migration target instance.
         */
        userName?: string;
    }

    export interface PublishSubscribeDatabaseTuple {
        /**
         * Publish the database.
         */
        publishDatabase: string;
    }
}

export namespace Ssl {
    export interface FreeCertificateDvAuth {
        /**
         * DV authentication key.
         */
        dvAuthKey: string;
        /**
         * DV authentication value.
         */
        dvAuthValue: string;
        /**
         * DV authentication type.
         */
        dvAuthVerifyType: string;
    }

    export interface GetCertificatesCertificate {
        /**
         * Beginning time of the SSL certificate.
         */
        beginTime: string;
        /**
         * Content of the SSL certificate.
         */
        cert: string;
        /**
         * Creation time of the SSL certificate.
         */
        createTime: string;
        /**
         * Primary domain of the SSL certificate.
         */
        domain: string;
        /**
         * Ending time of the SSL certificate.
         */
        endTime: string;
        /**
         * ID of the SSL certificate to be queried.
         */
        id: string;
        /**
         * Key of the SSL certificate.
         */
        key: string;
        /**
         * Name of the SSL certificate to be queried.
         */
        name: string;
        /**
         * Certificate authority.
         */
        productZhName: string;
        /**
         * Project ID of the SSL certificate.
         */
        projectId: number;
        /**
         * Status of the SSL certificate.
         */
        status: number;
        /**
         * ALL domains included in the SSL certificate. Including the primary domain name.
         */
        subjectNames: string[];
        /**
         * Type of the SSL certificate to be queried. Available values includes: `CA` and `SVR`.
         */
        type: string;
    }

    export interface PayCertificateDvAuth {
        /**
         * DV authentication key.
         */
        dvAuthKey: string;
        /**
         * DV authentication value.
         */
        dvAuthValue: string;
        /**
         * DV authentication type.
         */
        dvAuthVerifyType: string;
    }

    export interface PayCertificateInformation {
        /**
         * The administrator's email address.
         */
        adminEmail: string;
        /**
         * The first name of the administrator.
         */
        adminFirstName: string;
        /**
         * The last name of the administrator.
         */
        adminLastName: string;
        /**
         * Manager mobile phone number.
         */
        adminPhoneNum: string;
        /**
         * Manager position.
         */
        adminPosition: string;
        /**
         * Domain name for binding certificate.
         */
        certificateDomain: string;
        /**
         * Contact email address.
         */
        contactEmail: string;
        /**
         * Contact first name.
         */
        contactFirstName: string;
        /**
         * Contact last name.
         */
        contactLastName: string;
        /**
         * Contact phone number.
         */
        contactNumber: string;
        /**
         * Contact position.
         */
        contactPosition: string;
        /**
         * CSR content uploaded.
         */
        csrContent?: string;
        /**
         * CSR generation method. Valid values: `online`, `parse`. `online` means online generation, `parse` means manual upload.
         */
        csrType?: string;
        /**
         * Array of uploaded domain names, multi-domain certificates can be uploaded.
         */
        domainLists?: string[];
        /**
         * Private key password.
         */
        keyPassword?: string;
        /**
         * Company address.
         */
        organizationAddress: string;
        /**
         * Company city.
         */
        organizationCity: string;
        /**
         * Country name, such as China: CN.
         */
        organizationCountry: string;
        /**
         * Department name.
         */
        organizationDivision: string;
        /**
         * Company name.
         */
        organizationName: string;
        /**
         * The province where the company is located.
         */
        organizationRegion: string;
        /**
         * Company landline area code.
         */
        phoneAreaCode: string;
        /**
         * Company landline number.
         */
        phoneNumber: string;
        /**
         * Company postal code.
         */
        postalCode: string;
        /**
         * Certificate verification method. Valid values: `DNS_AUTO`, `DNS`, `FILE`. `DNS_AUTO` means automatic DNS verification, this verification type is only supported for domain names resolved by Tencent Cloud and the resolution status is normal, `DNS` means manual DNS verification, `FILE` means file verification.
         */
        verifyType: string;
    }

}

export namespace Ssm {
    export interface GetSecretVersionsSecretVersionList {
        /**
         * The base64-encoded binary secret.
         */
        secretBinary: string;
        /**
         * The string text of secret.
         */
        secretString: string;
        /**
         * VersionId used to filter result.
         */
        versionId: string;
    }

    export interface GetSecretsSecretList {
        /**
         * Create time of secret.
         */
        createTime: number;
        /**
         * Uin of Creator.
         */
        createUin: number;
        /**
         * Delete time of CMK.
         */
        deleteTime: number;
        /**
         * Description of secret.
         */
        description: string;
        /**
         * KMS keyId used to encrypt secret.
         */
        kmsKeyId: string;
        /**
         * Secret name used to filter result.
         */
        secretName: string;
        /**
         * Status of secret.
         */
        status: string;
    }

}

export namespace Tat {
    export interface CommandTag {
        /**
         * Tag key.
         */
        key: string;
        /**
         * Tag value.
         */
        value: string;
    }

    export interface GetAgentAutomationAgentSet {
        /**
         * Agent status.Ranges:&lt;li&gt; Online:Online&lt;li&gt; Offline:Offline.
         */
        agentStatus: string;
        /**
         * Environment for Agent.Ranges:&lt;li&gt; Linux:Linux instance&lt;li&gt; Windows:Windows instance.
         */
        environment: string;
        /**
         * InstanceId.
         */
        instanceId: string;
        /**
         * Time of last heartbeat.
         */
        lastHeartbeatTime: string;
        /**
         * List of feature Agent support.
         */
        supportFeatures: string[];
        /**
         * Agent version.
         */
        version: string;
    }

    export interface GetAgentFilter {
        /**
         * Field to be filtered.
         */
        name: string;
        /**
         * Filter values of the field.
         */
        values: string[];
    }

    export interface GetCommandCommandSet {
        /**
         * Command ID.
         */
        commandId: string;
        /**
         * Command name.
         */
        commandName: string;
        /**
         * Command type, Value is `SHELL` or `POWERSHELL`.
         */
        commandType: string;
        /**
         * command.
         */
        content: string;
        /**
         * Command creator. `TAT` indicates a public command and `USER` indicates a personal command.
         */
        createdBy: string;
        /**
         * Command creation time.
         */
        createdTime: string;
        /**
         * Default custom parameter value.
         */
        defaultParameters: string;
        /**
         * Command description.
         */
        description: string;
        /**
         * Whether to enable the custom parameter feature.
         */
        enableParameter: boolean;
        /**
         * Formatted description of the command. This parameter is an empty string for user commands and contains values for public commands.
         */
        formattedDescription: string;
        /**
         * The COS bucket URL for uploading logs.
         */
        outputCosBucketUrl: string;
        /**
         * The COS bucket directory where the logs are saved.
         */
        outputCosKeyPrefix: string;
        /**
         * Tags bound to the command. At most 10 tags are allowed.
         */
        tags: outputs.Tat.GetCommandCommandSetTag[];
        /**
         * Command timeout period.
         */
        timeout: number;
        /**
         * Command update time.
         */
        updatedTime: string;
        /**
         * The user who executes the command on the instance.
         */
        username: string;
        /**
         * Command execution path.
         */
        workingDirectory: string;
    }

    export interface GetCommandCommandSetTag {
        /**
         * Tag key.
         */
        key: string;
        /**
         * Tag value.
         */
        value: string;
    }

    export interface GetInvocationTaskFilter {
        /**
         * Field to be filtered.
         */
        name: string;
        /**
         * Filter values of the field.
         */
        values: string[];
    }

    export interface GetInvocationTaskInvocationTaskSet {
        /**
         * Command details of the execution task.
         */
        commandDocuments: outputs.Tat.GetInvocationTaskInvocationTaskSetCommandDocument[];
        /**
         * Command ID.
         */
        commandId: string;
        /**
         * Creation time.
         */
        createdTime: string;
        /**
         * End time of the execution task.
         */
        endTime: string;
        /**
         * Error message displayed when the execution task fails.
         */
        errorInfo: string;
        /**
         * Instance ID.
         */
        instanceId: string;
        /**
         * Execution activity ID.
         */
        invocationId: string;
        /**
         * Invocation source.
         */
        invocationSource: string;
        /**
         * Execution task ID.
         */
        invocationTaskId: string;
        /**
         * Start time of the execution task.
         */
        startTime: string;
        /**
         * Execution result.
         */
        taskResults: outputs.Tat.GetInvocationTaskInvocationTaskSetTaskResult[];
        /**
         * Execution task status. Valid values:PENDING: PendingDELIVERING: DeliveringDELIVER_DELAYED: Delivery delayedDELIVER_FAILED: Delivery failedSTART_FAILED: Failed to start the commandRUNNING: RunningSUCCESS: SuccessFAILED: Failed to execute the command. The exit code is not 0 after execution.TIMEOUT: Command timed outTASK_TIMEOUT: Task timed outCANCELLING: CancelingCANCELLED: Canceled (canceled before execution)TERMINATED: Terminated (canceled during execution).
         */
        taskStatus: string;
        /**
         * Update time.
         */
        updatedTime: string;
    }

    export interface GetInvocationTaskInvocationTaskSetCommandDocument {
        /**
         * Command type.
         */
        commandType: string;
        /**
         * Base64-encoded command.
         */
        content: string;
        /**
         * URL of the COS bucket to store the output.
         */
        outputCosBucketUrl: string;
        /**
         * Prefix of the output file name.
         */
        outputCosKeyPrefix: string;
        /**
         * Timeout period.
         */
        timeout: number;
        /**
         * The user who executes the command.
         */
        username: string;
        /**
         * Execution path.
         */
        workingDirectory: string;
    }

    export interface GetInvocationTaskInvocationTaskSetTaskResult {
        /**
         * Dropped bytes of the command output.
         */
        dropped: number;
        /**
         * Time when the execution is ended.
         */
        execEndTime: string;
        /**
         * Time when the execution is started.
         */
        execStartTime: string;
        /**
         * ExitCode of the execution.
         */
        exitCode: number;
        /**
         * Base64-encoded command output. The maximum length is 24 KB.
         */
        output: string;
        /**
         * Error message for uploading logs to COS.
         */
        outputUploadCosErrorInfo: string;
        /**
         * COS URL of the logs.
         */
        outputUrl: string;
    }

    export interface GetInvokerInvokerSet {
        /**
         * Command ID.
         */
        commandId: string;
        /**
         * Creation time.
         */
        createdTime: string;
        /**
         * Whether to enable the invoker.
         */
        enable: boolean;
        /**
         * Instance ID list.
         */
        instanceIds: string[];
        /**
         * Invoker ID.
         */
        invokerId: string;
        /**
         * Invoker name.
         */
        name: string;
        /**
         * Custom parameters.
         */
        parameters: string;
        /**
         * Execution schedule of the invoker. This field is returned for recurring invokers.
         */
        scheduleSettings: outputs.Tat.GetInvokerInvokerSetScheduleSetting[];
        /**
         * Invoker type.
         */
        type: string;
        /**
         * Modification time.
         */
        updatedTime: string;
        /**
         * Username.
         */
        username: string;
    }

    export interface GetInvokerInvokerSetScheduleSetting {
        /**
         * The next execution time of the invoker. This field is required if Policy is ONCE.
         */
        invokeTime: string;
        /**
         * Execution policy: `ONCE`: Execute once; `RECURRENCE`: Execute repeatedly.
         */
        policy: string;
        /**
         * Trigger the crontab expression. This field is required if `Policy` is `RECURRENCE`. The crontab expression is parsed in UTC+8.
         */
        recurrence: string;
    }

    export interface GetInvokerRecordsInvokerRecordSet {
        /**
         * Command execution ID.
         */
        invocationId: string;
        /**
         * Execution time.
         */
        invokeTime: string;
        /**
         * Invoker ID.
         */
        invokerId: string;
        /**
         * Execution reason.
         */
        reason: string;
        /**
         * Trigger result.
         */
        result: string;
    }

    export interface InvokerScheduleSettings {
        /**
         * The next execution time of the invoker. This field is required if Policy is ONCE.
         */
        invokeTime?: string;
        /**
         * Execution policy: `ONCE`: Execute once; `RECURRENCE`: Execute repeatedly.
         */
        policy: string;
        /**
         * Trigger the crontab expression. This field is required if `Policy` is `RECURRENCE`. The crontab expression is parsed in UTC+8.
         */
        recurrence?: string;
    }

}

export namespace Tcaplus {
    export interface GetClustersList {
        /**
         * Access id of the TcaplusDB cluster.For TcaplusDB SDK connect.
         */
        apiAccessId: string;
        /**
         * Access ip of the TcaplusDB cluster.For TcaplusDB SDK connect.
         */
        apiAccessIp: string;
        /**
         * Access port of the TcaplusDB cluster.For TcaplusDB SDK connect.
         */
        apiAccessPort: number;
        /**
         * ID of the TcaplusDB cluster to be query.
         */
        clusterId: string;
        /**
         * Name of the TcaplusDB cluster to be query.
         */
        clusterName: string;
        /**
         * Create time of the TcaplusDB cluster.
         */
        createTime: string;
        /**
         * IDL type of the TcaplusDB cluster.
         */
        idlType: string;
        /**
         * Network type of the TcaplusDB cluster.
         */
        networkType: string;
        /**
         * Expiration time of the old password. If `passwordStatus` is `unmodifiable`, it means the old password has not yet expired.
         */
        oldPasswordExpireTime: string;
        /**
         * Access password of the TcaplusDB cluster.
         */
        password: string;
        /**
         * Password status of the TcaplusDB cluster. Valid values: `unmodifiable`, `modifiable`. `unmodifiable` means the password can not be changed in this moment; `modifiable` means the password can be changed in this moment.
         */
        passwordStatus: string;
        /**
         * Subnet ID of the TcaplusDB cluster.
         */
        subnetId: string;
        /**
         * VPC ID of the TcaplusDB cluster.
         */
        vpcId: string;
    }

    export interface GetIdlsList {
        /**
         * ID of the IDL.
         */
        idlId: string;
    }

    export interface GetTablegroupsList {
        /**
         * Create time of the table group..
         */
        createTime: string;
        /**
         * Number of tables.
         */
        tableCount: number;
        /**
         * Id of the table group to be query.
         */
        tablegroupId: string;
        /**
         * Name of the table group to be query.
         */
        tablegroupName: string;
        /**
         * Total storage size (MB).
         */
        totalSize: number;
    }

    export interface GetTablesList {
        /**
         * Create time of the TcaplusDB table.
         */
        createTime: string;
        /**
         * Description of the TcaplusDB table.
         */
        description: string;
        /**
         * Error message for creating TcaplusDB table.
         */
        error: string;
        /**
         * IDL file id of the TcaplusDB table.
         */
        idlId: string;
        /**
         * Reserved read capacity units of the TcaplusDB table.
         */
        reservedReadCu: number;
        /**
         * Reserved storage capacity of the TcaplusDB table (unit:GB).
         */
        reservedVolume: number;
        /**
         * Reserved write capacity units of the TcaplusDB table.
         */
        reservedWriteCu: number;
        /**
         * Status of the TcaplusDB table.
         */
        status: string;
        /**
         * Table ID to be query.
         */
        tableId: string;
        /**
         * IDL type of  the TcaplusDB table.
         */
        tableIdlType: string;
        /**
         * Table name to be query.
         */
        tableName: string;
        /**
         * Size of the TcaplusDB table.
         */
        tableSize: number;
        /**
         * Type of the TcaplusDB table.
         */
        tableType: string;
        /**
         * ID of the table group to be query.
         */
        tablegroupId: string;
    }

    export interface IdlTableInfo {
        /**
         * Error messages for creating IDL file.
         */
        error: string;
        /**
         * Index key set of the TcaplusDB table.
         */
        indexKeySet: string;
        /**
         * Primary key fields of the TcaplusDB table.
         */
        keyFields: string;
        /**
         * Total size of primary key field of the TcaplusDB table.
         */
        sumKeyFieldSize: number;
        /**
         * Total size of non-primary key fields of the TcaplusDB table.
         */
        sumValueFieldSize: number;
        /**
         * Name of the TcaplusDB table.
         */
        tableName: string;
        /**
         * Non-primary key fields of the TcaplusDB table.
         */
        valueFields: string;
    }

}

export namespace Tcm {
    export interface AccessLogConfigCls {
        /**
         * Whether enable CLS.
         */
        enable: boolean;
        /**
         * Log set of CLS.
         */
        logSet?: string;
        /**
         * Log topic of CLS.
         */
        topic?: string;
    }

    export interface AccessLogConfigSelectedRange {
        /**
         * Select all if true, default false.
         */
        all?: boolean;
        /**
         * Items.
         */
        items?: outputs.Tcm.AccessLogConfigSelectedRangeItem[];
    }

    export interface AccessLogConfigSelectedRangeItem {
        /**
         * Ingress gateway list.
         */
        gateways?: string[];
        /**
         * Namespace.
         */
        namespace?: string;
    }

    export interface ClusterAttachmentClusterList {
        /**
         * TKE Cluster id.
         */
        clusterId: string;
        /**
         * TKE cluster region.
         */
        region: string;
        /**
         * Cluster role in mesh, REMOTE or MASTER.
         */
        role: string;
        /**
         * Subnet id, only needed if it&#39;s standalone mesh.
         */
        subnetId: string;
        /**
         * Cluster type.
         */
        type: string;
        /**
         * Cluster&#39;s VpcId.
         */
        vpcId: string;
    }

    export interface GetMeshMeshList {
        /**
         * Mesh configuration.
         */
        configs: outputs.Tcm.GetMeshMeshListConfig[];
        /**
         * Mesh name.
         */
        displayName: string;
        /**
         * Mesh instance Id.
         */
        meshId: string;
        /**
         * A list of associated tags.
         */
        tagLists: outputs.Tcm.GetMeshMeshListTagList[];
        /**
         * Mesh type.  Value range:- `STANDALONE`: Standalone mesh- `HOSTED`: hosted the mesh.
         */
        type: string;
        /**
         * Mesh version.
         */
        version: string;
    }

    export interface GetMeshMeshListConfig {
        /**
         * Istio configuration.
         */
        istios: outputs.Tcm.GetMeshMeshListConfigIstio[];
    }

    export interface GetMeshMeshListConfigIstio {
        /**
         * Disable http retry.
         */
        disableHttpRetry: boolean;
        /**
         * Disable policy checks.
         */
        disablePolicyChecks: boolean;
        /**
         * Enable HTTP/1.0 support.
         */
        enablePilotHttp: boolean;
        /**
         * Outbound traffic policy.
         */
        outboundTrafficPolicy: string;
        /**
         * SmartDNS configuration.
         */
        smartDns: outputs.Tcm.GetMeshMeshListConfigIstioSmartDn[];
    }

    export interface GetMeshMeshListConfigIstioSmartDn {
        /**
         * Enable auto allocate address.
         */
        istioMetaDnsAutoAllocate: boolean;
        /**
         * Enable dns proxy.
         */
        istioMetaDnsCapture: boolean;
    }

    export interface GetMeshMeshListTagList {
        /**
         * Tag key.
         */
        key: string;
        /**
         * Passthrough to other related product.
         */
        passthrough: boolean;
        /**
         * Tag value.
         */
        value: string;
    }

    export interface MeshConfig {
        /**
         * Istio configuration.
         */
        istio?: outputs.Tcm.MeshConfigIstio;
        /**
         * Prometheus configuration.
         */
        prometheus: outputs.Tcm.MeshConfigPrometheus;
        /**
         * Tracing config.
         */
        tracing: outputs.Tcm.MeshConfigTracing;
    }

    export interface MeshConfigIstio {
        /**
         * Disable http retry.
         */
        disableHttpRetry?: boolean;
        /**
         * Disable policy checks.
         */
        disablePolicyChecks?: boolean;
        /**
         * Enable HTTP/1.0 support.
         */
        enablePilotHttp?: boolean;
        /**
         * Outbound traffic policy.
         */
        outboundTrafficPolicy: string;
        /**
         * SmartDNS configuration.
         */
        smartDns?: outputs.Tcm.MeshConfigIstioSmartDns;
    }

    export interface MeshConfigIstioSmartDns {
        /**
         * Enable auto allocate address.
         */
        istioMetaDnsAutoAllocate?: boolean;
        /**
         * Enable dns proxy.
         */
        istioMetaDnsCapture?: boolean;
    }

    export interface MeshConfigPrometheus {
        /**
         * Custom prometheus.
         */
        customProm: outputs.Tcm.MeshConfigPrometheusCustomProm;
        /**
         * Instance id.
         */
        instanceId: string;
        /**
         * Region.
         */
        region: string;
        /**
         * Subnet id.
         */
        subnetId: string;
        /**
         * Vpc id.
         */
        vpcId: string;
    }

    export interface MeshConfigPrometheusCustomProm {
        /**
         * Authentication type of the prometheus.
         */
        authType: string;
        /**
         * Whether it is public address, default false.
         */
        isPublicAddr: boolean;
        /**
         * Password of the prometheus, used in basic authentication type.
         */
        password: string;
        /**
         * Url of the prometheus.
         */
        url: string;
        /**
         * Username of the prometheus, used in basic authentication type.
         */
        username: string;
        /**
         * Vpc id.
         */
        vpcId: string;
    }

    export interface MeshConfigTracing {
        /**
         * APM config.
         */
        apm: outputs.Tcm.MeshConfigTracingApm;
        /**
         * Whether enable tracing.
         */
        enable: boolean;
        /**
         * Tracing sampling, 0.0-1.0.
         */
        sampling: number;
        /**
         * Third party zipkin config.
         */
        zipkin: outputs.Tcm.MeshConfigTracingZipkin;
    }

    export interface MeshConfigTracingApm {
        /**
         * Whether enable APM.
         */
        enable: boolean;
        /**
         * Instance id of the APM.
         */
        instanceId: string;
        /**
         * Region.
         */
        region: string;
    }

    export interface MeshConfigTracingZipkin {
        /**
         * Zipkin address.
         */
        address: string;
    }

    export interface MeshTagList {
        /**
         * Tag key.
         */
        key: string;
        /**
         * Passthrough to other related product.
         */
        passthrough?: boolean;
        /**
         * Tag value.
         */
        value: string;
    }

    export interface PrometheusAttachmentPrometheus {
        /**
         * Third party prometheus.
         */
        customProm: outputs.Tcm.PrometheusAttachmentPrometheusCustomProm;
        /**
         * Existed TMP id, auto create TMP if empty.
         */
        instanceId: string;
        /**
         * Region for TMP.
         */
        region: string;
        /**
         * Subnet id for TMP.
         */
        subnetId: string;
        /**
         * Vpc id for TMP.
         */
        vpcId: string;
    }

    export interface PrometheusAttachmentPrometheusCustomProm {
        /**
         * Authentication type of the prometheus.
         */
        authType: string;
        /**
         * Whether it is public address, default false.
         */
        isPublicAddr: boolean;
        /**
         * Password of the prometheus, used in basic authentication type.
         */
        password: string;
        /**
         * Url of the prometheus.
         */
        url: string;
        /**
         * Username of the prometheus, used in basic authentication type.
         */
        username: string;
        /**
         * Vpc id.
         */
        vpcId: string;
    }

    export interface TracingConfigApm {
        /**
         * Whether enable APM.
         */
        enable?: boolean;
        /**
         * Instance id of the APM.
         */
        instanceId?: string;
        /**
         * Region.
         */
        region?: string;
    }

    export interface TracingConfigZipkin {
        /**
         * Zipkin address.
         */
        address: string;
    }

}

export namespace Tcmq {
    export interface GetQueueFilter {
        /**
         * Filter parameter name.
         */
        name?: string;
        /**
         * Value.
         */
        values?: string[];
    }

    export interface GetQueueQueueList {
        /**
         * Total number of messages in `Active` status (i.e., unconsumed) in the queue, which is an approximate value.
         */
        activeMsgNum: number;
        /**
         * Bandwidth limit.
         */
        bps: number;
        /**
         * Queue creation time. A Unix timestamp accurate down to the millisecond will be returned.
         */
        createTime: number;
        /**
         * Creator `Uin`.
         */
        createUin: number;
        /**
         * Dead letter queue policy.
         */
        deadLetterPolicies: outputs.Tcmq.GetQueueQueueListDeadLetterPolicy[];
        /**
         * Dead letter queue.
         */
        deadLetterSources: outputs.Tcmq.GetQueueQueueListDeadLetterSource[];
        /**
         * Number of delayed messages.
         */
        delayMsgNum: number;
        /**
         * Total number of messages in `Inactive` status (i.e., being consumed) in the queue, which is an approximate value.
         */
        inactiveMsgNum: number;
        /**
         * Time when the queue attribute is last modified. A Unix timestamp accurate down to the millisecond will be returned.
         */
        lastModifyTime: number;
        /**
         * Maximum retention period for inflight messages.
         */
        maxDelaySeconds: number;
        /**
         * Maximum size of heaped messages in bytes.
         */
        maxMsgBacklogSize: number;
        /**
         * Maximum number of heaped messages. The value range is 1,000,000-10,000,000 during the beta test and can be 1,000,000-1,000,000,000 after the product is officially released. The default value is 10,000,000 during the beta test and will be 100,000,000 after the product is officially released.
         */
        maxMsgHeapNum: number;
        /**
         * Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
         */
        maxMsgSize: number;
        /**
         * The maximum number of unacknowledged messages.
         */
        maxUnackedMsgNum: number;
        /**
         * Minimum unconsumed time of message in seconds.
         */
        minMsgTime: number;
        /**
         * The max period during which a message is retained before it is automatically acknowledged. Value range: 30-43,200 seconds (30 seconds to 12 hours). Default value: 3600 seconds (1 hour).
         */
        msgRetentionSeconds: number;
        /**
         * Namespace name.
         */
        namespaceName: string;
        /**
         * Long polling wait time for message reception. Value range: 0-30 seconds. Default value: 0.
         */
        pollingWaitSeconds: number;
        /**
         * Limit of the number of messages produced per second. The value for consumed messages is 1.1 times this value.
         */
        qps: number;
        /**
         * Message queue ID.
         */
        queueId: string;
        /**
         * Filter by QueueName.
         */
        queueName: string;
        /**
         * Queue storage space configured for message rewind. Value range: 1,024-10,240 MB (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
         */
        retentionSizeInMb: number;
        /**
         * Number of retained messages which have been deleted by the `DelMsg` API but are still within their rewind time range.
         */
        rewindMsgNum: number;
        /**
         * Rewindable time of messages in the queue. Value range: 0-1,296,000s (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
         */
        rewindSeconds: number;
        /**
         * Cluster status. `0`: creating; `1`: normal; `2`: terminating; `3`: deleted; `4`: isolated; `5`: creation failed; `6`: deletion failed.
         */
        status: number;
        /**
         * Associated tag.
         */
        tags: outputs.Tcmq.GetQueueQueueListTag[];
        /**
         * Tenant ID.
         */
        tenantId: string;
        /**
         * Message trace. true: enabled; false: not enabled.
         */
        trace: boolean;
        /**
         * 1: transaction queue; 0: general queue.
         */
        transaction: boolean;
        /**
         * Transaction message policy.
         */
        transactionPolicies: outputs.Tcmq.GetQueueQueueListTransactionPolicy[];
        /**
         * Message visibility timeout period. Value range: 1-43200 seconds (i.e., 12 hours). Default value: 30.
         */
        visibilityTimeout: number;
    }

    export interface GetQueueQueueListDeadLetterPolicy {
        /**
         * Dead letter queue.
         */
        deadLetterQueue: string;
        /**
         * Maximum number of receipts.
         */
        maxReceiveCount: number;
        /**
         * Maximum period in seconds before an unconsumed message expires, which is required if `Policy` is 1. Value range: 300-43200. This value should be smaller than `MsgRetentionSeconds` (maximum message retention period).
         */
        maxTimeToLive: number;
        /**
         * Dead letter queue policy.
         */
        policy: number;
    }

    export interface GetQueueQueueListDeadLetterSource {
        /**
         * Message queue ID.
         */
        queueId: string;
        /**
         * Filter by QueueName.
         */
        queueName: string;
    }

    export interface GetQueueQueueListTag {
        /**
         * Value of the tag key.
         */
        tagKey: string;
        /**
         * Value of the tag value.
         */
        tagValue: string;
    }

    export interface GetQueueQueueListTransactionPolicy {
        /**
         * First lookback time.
         */
        firstQueryInterval: number;
        /**
         * Maximum number of queries.
         */
        maxQueryCount: number;
    }

    export interface GetSubscribeSubscriptionList {
        /**
         * Filtering policy for subscribing to and receiving messages.
         */
        bindingKeys: string[];
        /**
         * Subscription creation time. A Unix timestamp accurate down to the millisecond will be returned.
         */
        createTime: number;
        /**
         * Endpoint that receives notifications, which varies by `protocol`: for HTTP, the endpoint must start with `http://`, and the `host` can be a domain or IP; for `queue`, `queueName` should be entered.
         */
        endpoint: string;
        /**
         * Filtering policy selected when a subscription is created:If `filterType` is 1, `filterTag` will be used for filtering. If `filterType` is 2, `bindingKey` will be used for filtering.
         */
        filterTags: string[];
        /**
         * Time when the subscription attribute is last modified. A Unix timestamp accurate down to the millisecond will be returned.
         */
        lastModifyTime: number;
        /**
         * Number of messages to be delivered in the subscription.
         */
        msgCount: number;
        /**
         * Push content format. Valid values: 1. `JSON`; 2. `SIMPLIFIED`, i.e., the raw format. If `Protocol` is `queue`, this value must be `SIMPLIFIED`. If `Protocol` is `http`, both options are acceptable, and the default value is `JSON`.
         */
        notifyContentFormat: string;
        /**
         * CMQ push server retry policy in case an error occurs while pushing a message to `Endpoint`. Valid values: 1. `BACKOFF_RETRY`: backoff retry, which is to retry at a fixed interval, discard the message after a certain number of retries, and continue to push the next message; 2. `EXPONENTIAL_DECAY_RETRY`: exponential decay retry, which is to retry at an exponentially increasing interval, such as 1s, 2s, 4s, 8s, and so on. As a message can be retained in a topic for one day, failed messages will be discarded at most after one day of retry. Default value: `EXPONENTIAL_DECAY_RETRY`.
         */
        notifyStrategy: string;
        /**
         * Subscription protocol. Currently, two protocols are supported: HTTP and queue. To use the HTTP protocol, you need to build your own web server to receive messages. With the queue protocol, messages are automatically pushed to a CMQ queue and you can pull them concurrently.
         */
        protocol: string;
        /**
         * Subscription ID, which will be used during monitoring data pull.
         */
        subscriptionId: string;
        /**
         * Fuzzy search by SubscriptionName.
         */
        subscriptionName: string;
        /**
         * Subscription owner APPID.
         */
        topicOwner: number;
    }

    export interface GetTopicFilter {
        /**
         * Filter parameter name.
         */
        name?: string;
        /**
         * Value.
         */
        values?: string[];
    }

    export interface GetTopicTopicList {
        /**
         * Valid values: `0` (Pulsar), `1` (RocketMQ).
         */
        brokerType: number;
        /**
         * Topic creation time. A Unix timestamp accurate down to the millisecond will be returned.
         */
        createTime: number;
        /**
         * Creator `Uin`. The `resource` field for CAM authentication is composed of this field.
         */
        createUin: number;
        /**
         * Filtering policy selected when a subscription is created: If `filterType` is 1, `FilterTag` will be used for filtering. If `filterType` is 2, `BindingKey` will be used for filtering.
         */
        filterType: number;
        /**
         * Time when the topic attribute is last modified. A Unix timestamp accurate down to the millisecond will be returned.
         */
        lastModifyTime: number;
        /**
         * Maximum message size, which ranges from 1,024 to 1,048,576 bytes (i.e., 1-1,024 KB). The default value is 65,536.
         */
        maxMsgSize: number;
        /**
         * Number of current messages in the topic (number of retained messages).
         */
        msgCount: number;
        /**
         * Maximum lifecycle of message in topic. After the period specified by this parameter has elapsed since a message is sent to the topic, the message will be deleted no matter whether it has been successfully pushed to the user. This parameter is measured in seconds and defaulted to one day (86,400 seconds), which cannot be modified.
         */
        msgRetentionSeconds: number;
        /**
         * Namespace name.
         */
        namespaceName: string;
        /**
         * Number of messages published per second.
         */
        qps: number;
        /**
         * Cluster status. `0`: creating; `1`: normal; `2`: terminating; `3`: deleted; `4`: isolated; `5`: creation failed; `6`: deletion failed.
         */
        status: number;
        /**
         * Associated tag.
         */
        tags: outputs.Tcmq.GetTopicTopicListTag[];
        /**
         * Tenant ID.
         */
        tenantId: string;
        /**
         * Topic ID.
         */
        topicId: string;
        /**
         * Fuzzy search by TopicName.
         */
        topicName: string;
        /**
         * Message trace. true: enabled; false: not enabled.
         */
        trace: boolean;
    }

    export interface GetTopicTopicListTag {
        /**
         * Value of the tag key.
         */
        tagKey: string;
        /**
         * Value of the tag value.
         */
        tagValue: string;
    }

}

export namespace Tcr {
    export interface GetImagesImageInfoList {
        /**
         * specify image digest for lookup.
         */
        digest: string;
        /**
         * image version name, default is fuzzy match.
         */
        imageVersion: string;
        /**
         * product type,note: this field may return null, indicating that no valid value can be obtained.
         */
        kind: string;
        /**
         * kms signature information,note: this field may return null, indicating that no valid value can be obtained.
         */
        kmsSignature: string;
        /**
         * image size (unit: byte).
         */
        size: number;
        /**
         * update time.
         */
        updateTime: string;
    }

    export interface GetInstancesInstanceList {
        /**
         * ID of the TCR instance.
         */
        id: string;
        /**
         * Instance type.
         */
        instanceType: string;
        /**
         * Internal address for access of the TCR instance.
         */
        internalEndPoint: string;
        /**
         * Name of the TCR instance to query.
         */
        name: string;
        /**
         * Public address for access of the TCR instance.
         */
        publicDomain: string;
        /**
         * Status of the TCR instance.
         */
        status: string;
        /**
         * Tags of the TCR instance.
         */
        tags: {[key: string]: any};
    }

    export interface GetNamespacesNamespaceList {
        /**
         * ID of TCR namespace.
         */
        id: number;
        /**
         * Indicate that the namespace is public or not.
         */
        isPublic: boolean;
        /**
         * Name of TCR namespace.
         */
        name: string;
    }

    export interface GetRepositoriesRepositoryList {
        /**
         * Brief description of the repository.
         */
        briefDesc: string;
        /**
         * Create time.
         */
        createTime: string;
        /**
         * Description of the repository.
         */
        description: string;
        /**
         * Indicate that the repository is public or not.
         */
        isPublic: boolean;
        /**
         * Name of repository.
         */
        name: string;
        /**
         * Name of the namespace that the repository belongs to.
         */
        namespaceName: string;
        /**
         * Last update time.
         */
        updateTime: string;
        /**
         * URL of the repository.
         */
        url: string;
    }

    export interface GetTokensTokenList {
        /**
         * Create time.
         */
        createTime: string;
        /**
         * Description of the token.
         */
        description: string;
        /**
         * Indicate that the token is enabled or not.
         */
        enable: boolean;
        /**
         * ID of the TCR token to query.
         */
        tokenId: string;
    }

    export interface GetVpcAttachmentsVpcAttachmentList {
        /**
         * IP address of this VPC access.
         */
        accessIp: string;
        /**
         * Whether to enable public domain dns.
         */
        enablePublicDomainDns: boolean;
        /**
         * Whether to enable vpc domain dns.
         */
        enableVpcDomainDns: boolean;
        /**
         * Status of this VPC access.
         */
        status: string;
        /**
         * ID of subnet to query.
         */
        subnetId: string;
        /**
         * ID of VPC to query.
         */
        vpcId: string;
    }

    export interface GetWebhookTriggerLogsLog {
        /**
         * creation time.
         */
        creationTime: string;
        /**
         * webhook trigger detail.
         */
        detail: string;
        /**
         * event type.
         */
        eventType: string;
        /**
         * log id.
         */
        id: number;
        /**
         * notification type.
         */
        notifyType: string;
        /**
         * status.
         */
        status: string;
        /**
         * trigger id.
         */
        triggerId: number;
        /**
         * update time.
         */
        updateTime: string;
    }

    export interface ImmutableTagRuleRule {
        /**
         * disable rule.
         */
        disabled?: boolean;
        /**
         * ID of the resource.
         */
        id: number;
        nsName: string;
        /**
         * repository decoration type:repoMatches or repoExcludes.
         */
        repositoryDecoration: string;
        /**
         * repository matching rules.
         */
        repositoryPattern: string;
        /**
         * tag decoration type: matches or excludes.
         */
        tagDecoration: string;
        /**
         * tag matching rules.
         */
        tagPattern: string;
    }

    export interface InstanceReplication {
        /**
         * ID of the resource.
         */
        id: string;
        /**
         * Replication region ID, check the example at the top of page to find out id of region.
         */
        regionId?: number;
        /**
         * Specify whether to sync TCR cloud tags to COS Bucket. NOTE: You have to specify when adding, modifying will be ignored for now.
         */
        synTag?: boolean;
    }

    export interface InstanceSecurityPolicy {
        /**
         * The public network IP address of the access source.
         */
        cidrBlock?: string;
        /**
         * Remarks of policy.
         */
        description?: string;
        index: number;
        version: string;
    }

    export interface ManageReplicationOperationPeerReplicationOption {
        /**
         * whether to enable cross-master account instance synchronization.
         */
        enablePeerReplication: boolean;
        /**
         * access permanent token of the instance to be synchronized.
         */
        peerRegistryToken: string;
        /**
         * uin of the instance to be synchronized.
         */
        peerRegistryUin: string;
    }

    export interface ManageReplicationOperationRule {
        /**
         * target namespace.
         */
        destNamespace: string;
        /**
         * sync filters.
         */
        filters: outputs.Tcr.ManageReplicationOperationRuleFilter[];
        /**
         * synchronization rule names.
         */
        name: string;
        /**
         * whether to cover.
         */
        override: boolean;
    }

    export interface ManageReplicationOperationRuleFilter {
        /**
         * type (name, tag, and resource).
         */
        type: string;
        /**
         * empty by default.
         */
        value?: string;
    }

    export interface NamespaceCveWhitelistItem {
        /**
         * Vulnerability Whitelist ID.
         */
        cveId?: string;
    }

    export interface TagRetentionRuleRetentionRule {
        /**
         * The supported policies are latestPushedK (retain the latest `k` pushed versions) and nDaysSinceLastPush (retain pushed versions within the last `n` days).
         */
        key: string;
        /**
         * corresponding values for rule settings.
         */
        value: number;
    }

    export interface WebhookTriggerTrigger {
        /**
         * trigger rule.
         */
        condition: string;
        /**
         * trigger description.
         */
        description?: string;
        /**
         * enable trigger.
         */
        enabled: boolean;
        /**
         * trigger action.
         */
        eventTypes: string[];
        /**
         * ID of the resource.
         */
        id: number;
        /**
         * trigger name.
         */
        name: string;
        /**
         * the namespace Id to which the trigger belongs.
         */
        namespaceId: number;
        /**
         * trigger target.
         */
        targets: outputs.Tcr.WebhookTriggerTriggerTarget[];
    }

    export interface WebhookTriggerTriggerTarget {
        /**
         * target address.
         */
        address: string;
        /**
         * custom Headers.
         */
        headers?: outputs.Tcr.WebhookTriggerTriggerTargetHeader[];
    }

    export interface WebhookTriggerTriggerTargetHeader {
        /**
         * Header Key.
         */
        key: string;
        /**
         * Header Values.
         */
        values: string[];
    }
}

export namespace Tdcpg {
    export interface GetClustersList {
        /**
         * auto renew flag.
         */
        autoRenewFlag: number;
        /**
         * cluster id.
         */
        clusterId: string;
        /**
         * cluster name.
         */
        clusterName: string;
        /**
         * create time.
         */
        createTime: string;
        /**
         * db charset.
         */
        dbCharset: string;
        /**
         * db kernel version.
         */
        dbKernelVersion: string;
        /**
         * db major version.
         */
        dbMajorVersion: string;
        /**
         * db version.
         */
        dbVersion: string;
        /**
         * endpoint set.
         */
        endpointSets: outputs.Tdcpg.GetClustersListEndpointSet[];
        /**
         * instance count.
         */
        instanceCount: number;
        /**
         * pay mode.
         */
        payMode: string;
        /**
         * pay period expired time.
         */
        payPeriodEndTime: string;
        /**
         * project id, default to 0, means default project.
         */
        projectId: number;
        /**
         * region.
         */
        region: string;
        /**
         * cluster status.
         */
        status: string;
        /**
         * status description.
         */
        statusDesc: string;
        /**
         * storage limit, unit is GB.
         */
        storageLimit: number;
        /**
         * storage pay mode, optional value is PREPAID or POSTPAID_BY_HOUR.
         */
        storagePayMode: string;
        /**
         * storage used, unit is GB.
         */
        storageUsed: number;
        /**
         * zone.
         */
        zone: string;
    }

    export interface GetClustersListEndpointSet {
        /**
         * cluster id.
         */
        clusterId: string;
        /**
         * endpoint id.
         */
        endpointId: string;
        /**
         * endpoint name.
         */
        endpointName: string;
        /**
         * endpoint type.
         */
        endpointType: string;
        /**
         * private ip.
         */
        privateIp: string;
        /**
         * private port.
         */
        privatePort: number;
        /**
         * subnet id.
         */
        subnetId: string;
        /**
         * vpc id.
         */
        vpcId: string;
        /**
         * wan domain.
         */
        wanDomain: string;
        /**
         * wan ip.
         */
        wanIp: string;
        /**
         * wan port.
         */
        wanPort: number;
    }

    export interface GetInstancesList {
        /**
         * instance id.
         */
        clusterId: string;
        /**
         * cpu cores.
         */
        cpu: number;
        /**
         * create time.
         */
        createTime: string;
        /**
         * db kernel version.
         */
        dbKernelVersion: string;
        /**
         * db major version.
         */
        dbMajorVersion: string;
        /**
         * db version.
         */
        dbVersion: string;
        /**
         * endpoint id.
         */
        endpointId: string;
        /**
         * instance id.
         */
        instanceId: string;
        /**
         * instance name.
         */
        instanceName: string;
        /**
         * instance type.
         */
        instanceType: string;
        /**
         * memory size, unit is GiB.
         */
        memory: number;
        /**
         * pay mode.
         */
        payMode: string;
        /**
         * pay period expired time.
         */
        payPeriodEndTime: string;
        /**
         * region.
         */
        region: string;
        /**
         * instance status.
         */
        status: string;
        /**
         * status description.
         */
        statusDesc: string;
        /**
         * zone.
         */
        zone: string;
    }

}

export namespace Tdmq {
    export interface GetRocketmqClusterClusterList {
        /**
         * Cluster configuration information.
         */
        configs: outputs.Tdmq.GetRocketmqClusterClusterListConfig[];
        /**
         * Basic cluster information.
         */
        infos: outputs.Tdmq.GetRocketmqClusterClusterListInfo[];
        /**
         * Cluster status. `0`: Creating; `1`: Normal; `2`: Terminating; `3`: Deleted; `4`: Isolated; `5`: Creation failed; `6`: Deletion failed.
         */
        status: number;
    }

    export interface GetRocketmqClusterClusterListConfig {
        /**
         * Maximum number of groups.
         */
        maxGroupNum: number;
        /**
         * Maximum message delay in millisecond.
         */
        maxLatencyTime: number;
        /**
         * Maximum number of namespaces.
         */
        maxNamespaceNum: number;
        /**
         * Maximum message retention period in milliseconds.
         */
        maxRetentionTime: number;
        /**
         * Maximum number of topics.
         */
        maxTopicNum: number;
        /**
         * Maximum TPS per namespace.
         */
        maxTpsPerNamespace: number;
        /**
         * Number of used groups.
         */
        usedGroupNum: number;
        /**
         * Number of used namespaces.
         */
        usedNamespaceNum: number;
        /**
         * Number of used topics.
         */
        usedTopicNum: number;
    }

    export interface GetRocketmqClusterClusterListInfo {
        /**
         * Cluster ID.
         */
        clusterId: string;
        /**
         * Cluster name.
         */
        clusterName: string;
        /**
         * Creation time in milliseconds.
         */
        createTime: number;
        /**
         * Whether it is an exclusive instance.
         */
        isVip: boolean;
        /**
         * Public network access address.
         */
        publicEndPoint: string;
        /**
         * Region information.
         */
        region: string;
        /**
         * Cluster description (up to 128 characters).
         */
        remark: string;
        /**
         * Rocketmq cluster identification.
         */
        rocketmqFlag: boolean;
        /**
         * Whether the namespace access point is supported.
         */
        supportNamespaceEndpoint: boolean;
        /**
         * VPC access address.
         */
        vpcEndPoint: string;
        /**
         * Vpc list.
         */
        vpcs: outputs.Tdmq.GetRocketmqClusterClusterListInfoVpc[];
    }

    export interface GetRocketmqClusterClusterListInfoVpc {
        /**
         * Subnet ID.
         */
        subnetId: string;
        /**
         * Vpc ID.
         */
        vpcId: string;
    }

    export interface GetRocketmqGroupGroup {
        /**
         * Whether to enable broadcast consumption.
         */
        broadcastEnable: boolean;
        /**
         * Client protocol.
         */
        clientProtocol: string;
        /**
         * The number of online consumers.
         */
        consumerNum: number;
        /**
         * Consumer type. Enumerated values: ACTIVELY or PASSIVELY.
         */
        consumerType: string;
        /**
         * `0`: Cluster consumption mode; `1`: Broadcast consumption mode; `-1`: Unknown.
         */
        consumptionMode: number;
        /**
         * Creation time in milliseconds.
         */
        createTime: number;
        /**
         * Consumer group name.
         */
        name: string;
        /**
         * Whether to enable consumption.
         */
        readEnable: boolean;
        /**
         * Remarks (up to 128 characters).
         */
        remark: string;
        /**
         * The number of partitions in a retry topic.
         */
        retryPartitionNum: number;
        /**
         * The total number of heaped messages.
         */
        totalAccumulative: number;
        /**
         * Consumption TPS.
         */
        tps: number;
        /**
         * Modification time in milliseconds.
         */
        updateTime: number;
    }

    export interface GetRocketmqNamespaceNamespace {
        /**
         * Namespace name, which can contain 3-64 letters, digits, hyphens, and underscores.
         */
        namespaceId: string;
        /**
         * Public network access point address.
         */
        publicEndpoint: string;
        /**
         * Remarks (up to 128 characters).
         */
        remark: string;
        /**
         * Retention time of persisted messages in milliseconds.
         */
        retentionTime: number;
        /**
         * Retention time of unconsumed messages in milliseconds. Value range: 60 seconds-15 days.
         */
        ttl: number;
        /**
         * VPC access point address.
         */
        vpcEndpoint: string;
    }

    export interface GetRocketmqRoleRoleSet {
        /**
         * Creation time.
         */
        createTime: string;
        /**
         * Remarks.
         */
        remark: string;
        /**
         * Fuzzy query by role name.
         */
        roleName: string;
        /**
         * Value of the role token.
         */
        token: string;
        /**
         * Update time.
         */
        updateTime: string;
    }

    export interface GetRocketmqTopicTopic {
        /**
         * Creation time in milliseconds.
         */
        createTime: number;
        /**
         * Topic name.
         */
        name: string;
        /**
         * The number of read/write partitions.
         */
        partitionNum: number;
        /**
         * Topic name.
         */
        remark: string;
        /**
         * Update time in milliseconds.
         */
        updateTime: number;
    }

    export interface RocketmqClusterVpc {
        /**
         * Subnet ID.
         */
        subnetId: string;
        /**
         * Vpc ID.
         */
        vpcId: string;
    }
}

export namespace Tem {
    export interface AppConfigConfigData {
        /**
         * key.
         */
        key: string;
        /**
         * value.
         */
        value: string;
    }

    export interface ApplicationServiceService {
        ip: string;
        /**
         * port mapping item list.
         */
        portMappingItemLists?: outputs.Tem.ApplicationServiceServicePortMappingItemList[];
        /**
         * application service name.
         */
        serviceName?: string;
        /**
         * ID of subnet instance, required when type is `VPC`.
         */
        subnetId?: string;
        /**
         * application service type: EXTERNAL | VPC | CLUSTER.
         */
        type?: string;
        /**
         * ID of vpc instance, required when type is `VPC`.
         */
        vpcId?: string;
    }

    export interface ApplicationServiceServicePortMappingItemList {
        /**
         * container port.
         */
        port?: number;
        /**
         * UDP or TCP.
         */
        protocol?: string;
        /**
         * application listen port.
         */
        targetPort?: number;
    }

    export interface GatewayIngress {
        /**
         * ip version, support IPV4.
         */
        addressIpVersion: string;
        /**
         * related CLB ID, support binding existing clb, does not support modification.
         */
        clbId: string;
        createTime: string;
        /**
         * environment ID.
         */
        environmentId: string;
        /**
         * gateway name.
         */
        ingressName: string;
        /**
         * mixing HTTP and HTTPS.
         */
        mixed: boolean;
        /**
         * redirect mode, support AUTO and NONE.
         */
        rewriteType?: string;
        /**
         * proxy rules.
         */
        rules: outputs.Tem.GatewayIngressRule[];
        /**
         * ingress TLS configurations.
         */
        tls?: outputs.Tem.GatewayIngressTl[];
        vip: string;
    }

    export interface GatewayIngressRule {
        /**
         * host name.
         */
        host?: string;
        /**
         * rule payload.
         */
        http: outputs.Tem.GatewayIngressRuleHttp;
        /**
         * protocol.
         */
        protocol?: string;
    }

    export interface GatewayIngressRuleHttp {
        /**
         * path payload.
         */
        paths: outputs.Tem.GatewayIngressRuleHttpPath[];
    }

    export interface GatewayIngressRuleHttpPath {
        /**
         * backend payload.
         */
        backend: outputs.Tem.GatewayIngressRuleHttpPathBackend;
        /**
         * path.
         */
        path: string;
    }

    export interface GatewayIngressRuleHttpPathBackend {
        /**
         * backend name.
         */
        serviceName: string;
        /**
         * backend port.
         */
        servicePort: number;
    }

    export interface GatewayIngressTl {
        /**
         * certificate ID.
         */
        certificateId: string;
        /**
         * host names.
         */
        hosts: string[];
        /**
         * secret name, if you use a certificate, you don't need to fill in this field.
         */
        secretName: string;
    }

    export interface ScaleRuleAutoscaler {
        /**
         * name.
         */
        autoscalerName: string;
        /**
         * scaler based on cron configuration.
         */
        cronHorizontalAutoscalers?: outputs.Tem.ScaleRuleAutoscalerCronHorizontalAutoscaler[];
        /**
         * description.
         */
        description?: string;
        /**
         * enable AutoScaler.
         */
        enabled: boolean;
        /**
         * scaler based on metrics.
         */
        horizontalAutoscalers?: outputs.Tem.ScaleRuleAutoscalerHorizontalAutoscaler[];
        /**
         * maximal replica number.
         */
        maxReplicas: number;
        /**
         * minimal replica number.
         */
        minReplicas: number;
    }

    export interface ScaleRuleAutoscalerCronHorizontalAutoscaler {
        /**
         * enable scaler.
         */
        enabled: boolean;
        /**
         * name.
         */
        name: string;
        /**
         * period.
         */
        period: string;
        /**
         * priority.
         */
        priority: number;
        /**
         * schedule payload.
         */
        schedules: outputs.Tem.ScaleRuleAutoscalerCronHorizontalAutoscalerSchedule[];
    }

    export interface ScaleRuleAutoscalerCronHorizontalAutoscalerSchedule {
        /**
         * start time.
         */
        startAt: string;
        /**
         * target replica number.
         */
        targetReplicas: number;
    }

    export interface ScaleRuleAutoscalerHorizontalAutoscaler {
        /**
         * enable scaler.
         */
        enabled: boolean;
        /**
         * maximal replica number.
         */
        maxReplicas: number;
        /**
         * metric name.
         */
        metrics: string;
        /**
         * minimal replica number.
         */
        minReplicas: number;
        /**
         * metric threshold.
         */
        threshold: number;
    }

    export interface WorkloadDeployStrategyConf {
        /**
         * interval between batches.
         */
        batchInterval?: number;
        /**
         * beta batch number.
         */
        betaBatchNum?: number;
        /**
         * strategy type, 0 means auto, 1 means manual, 2 means manual with beta batch.
         */
        deployStrategyType: number;
        /**
         * force update.
         */
        force?: boolean;
        /**
         * minimal available instances duration deployment.
         */
        minAvailable?: number;
        /**
         * total batch number.
         */
        totalBatchCount: number;
    }

    export interface WorkloadEnvConf {
        /**
         * referenced config name when type=referenced.
         */
        config?: string;
        /**
         * env key.
         */
        key: string;
        /**
         * referenced secret name when type=referenced.
         */
        secret?: string;
        /**
         * env type, support default, referenced.
         */
        type?: string;
        /**
         * env value.
         */
        value: string;
    }

    export interface WorkloadLiveness {
        /**
         * script.
         */
        exec?: string;
        /**
         * initial delay seconds for liveness check.
         */
        initialDelaySeconds?: number;
        /**
         * path.
         */
        path?: string;
        /**
         * period seconds for liveness check.
         */
        periodSeconds?: number;
        /**
         * liveness check port.
         */
        port?: number;
        /**
         * protocol.
         */
        protocol?: string;
        /**
         * timeout seconds for liveness check.
         */
        timeoutSeconds?: number;
        /**
         * check type, support HttpGet, TcpSocket and Exec.
         */
        type: string;
    }

    export interface WorkloadReadiness {
        /**
         * script.
         */
        exec?: string;
        /**
         * initial delay seconds for readiness check.
         */
        initialDelaySeconds?: number;
        /**
         * path.
         */
        path?: string;
        /**
         * period seconds for readiness check.
         */
        periodSeconds?: number;
        /**
         * readiness check port.
         */
        port?: number;
        /**
         * protocol.
         */
        protocol?: string;
        /**
         * timeout seconds for readiness check.
         */
        timeoutSeconds?: number;
        /**
         * check type, support HttpGet, TcpSocket and Exec.
         */
        type: string;
    }

    export interface WorkloadStartupProbe {
        /**
         * script.
         */
        exec?: string;
        /**
         * initial delay seconds for startup check.
         */
        initialDelaySeconds?: number;
        /**
         * path.
         */
        path?: string;
        /**
         * period seconds for startup check.
         */
        periodSeconds?: number;
        /**
         * startup check port.
         */
        port?: number;
        /**
         * protocol.
         */
        protocol?: string;
        /**
         * timeout seconds for startup check.
         */
        timeoutSeconds?: number;
        /**
         * check type, support HttpGet, TcpSocket and Exec.
         */
        type: string;
    }

    export interface WorkloadStorageConf {
        /**
         * volume ip.
         */
        storageVolIp: string;
        /**
         * volume name.
         */
        storageVolName: string;
        /**
         * volume path.
         */
        storageVolPath: string;
    }

    export interface WorkloadStorageMountConf {
        /**
         * mount path.
         */
        mountPath: string;
        /**
         * volume name.
         */
        volumeName: string;
    }

}

export namespace Teo {
    export interface ApplicationProxyIpv6 {
        /**
         * - `on`: Enable.- `off`: Disable.
         */
        switch: string;
    }

    export interface DdosPolicyDdosRule {
        /**
         * DDoS ACL rule configuration.
         */
        acl: outputs.Teo.DdosPolicyDdosRuleAcl;
        /**
         * DDoS black-white list.
         */
        allowBlock: outputs.Teo.DdosPolicyDdosRuleAllowBlock;
        /**
         * DDoS protocol and connection protection.
         */
        antiPly: outputs.Teo.DdosPolicyDdosRuleAntiPly;
        /**
         * DDoS Protection by Geo Info.
         */
        geoIp: outputs.Teo.DdosPolicyDdosRuleGeoIp;
        /**
         * DDoS feature filtering configuration.
         */
        packetFilter: outputs.Teo.DdosPolicyDdosRulePacketFilter;
        /**
         * DDoS access origin site speed limit configuration.
         */
        speedLimit: outputs.Teo.DdosPolicyDdosRuleSpeedLimit;
        /**
         * DDoS protection level.
         */
        statusInfo: outputs.Teo.DdosPolicyDdosRuleStatusInfo;
        /**
         * DDoS protection switch. Valid values:- `on`: Enable.- `off`: Disable.
         */
        switch: string;
    }

    export interface DdosPolicyDdosRuleAcl {
        /**
         * DDoS ACL rule configuration detail.
         */
        acls?: outputs.Teo.DdosPolicyDdosRuleAclAcl[];
        /**
         * - `on`: Enable. `Acl` parameter is require.- `off`: Disable.
         */
        switch: string;
    }

    export interface DdosPolicyDdosRuleAclAcl {
        /**
         * Action to take. Valid values: `drop`, `transmit`, `forward`.
         */
        action?: string;
        /**
         * End of the dest port range. Valid value range: 0-65535.
         */
        dportEnd?: number;
        /**
         * Start of the dest port range. Valid value range: 0-65535.
         */
        dportStart?: number;
        /**
         * Valid values: `tcp`, `udp`, `all`.
         */
        protocol?: string;
        /**
         * End of the source port range. Valid value range: 0-65535.
         */
        sportEnd?: number;
        /**
         * Start of the source port range. Valid value range: 0-65535.
         */
        sportStart?: number;
    }

    export interface DdosPolicyDdosRuleAllowBlock {
        /**
         * DDoS black-white list detail.
         */
        allowBlockIps: outputs.Teo.DdosPolicyDdosRuleAllowBlockAllowBlockIp[];
        /**
         * - `on`: Enable. `AllowBlockIps` parameter is required.- `off`: Disable.
         */
        switch: string;
    }

    export interface DdosPolicyDdosRuleAllowBlockAllowBlockIp {
        /**
         * Valid value format:- ip, for example 1.1.1.1- ip range, for example 1.1.1.2-1.1.1.3- network segment, for example 1.2.1.0/24- network segment range, for example 1.2.1.0/24-1.2.2.0/24.
         */
        ip?: string;
        /**
         * Valid values: `block`, `allow`.
         */
        type: string;
        updateTime: number;
    }

    export interface DdosPolicyDdosRuleAntiPly {
        /**
         * Abnormal connections threshold. Valid value range: 0-4294967295.
         */
        abnormalConnectNum: number;
        /**
         * Abnormal syn packet number threshold. Valid value range: 0-65535.
         */
        abnormalSynNum: number;
        /**
         * Abnormal syn packet ratio threshold. Valid value range: 0-100.
         */
        abnormalSynRatio: number;
        /**
         * Connection timeout detection per second. Valid value range: 0-65535.
         */
        connectTimeout: number;
        /**
         * Limitation of connections to dest port. Valid value range: 0-4294967295.
         */
        destinationConnectLimit: number;
        /**
         * Limitation of new connection to dest port per second. Valid value range: 0-4294967295.
         */
        destinationCreateLimit: number;
        /**
         * Block ICMP protocol. Valid values: `on`, `off`.
         */
        dropIcmp: string;
        /**
         * Block other protocols. Valid values: `on`, `off`.
         */
        dropOther: string;
        /**
         * Block TCP protocol. Valid values: `on`, `off`.
         */
        dropTcp: string;
        /**
         * Block UDP protocol. Valid values: `on`, `off`.
         */
        dropUdp: string;
        /**
         * Empty connection protection switch. Valid values: `on`, `off`.
         */
        emptyConnectProtect: string;
        /**
         * Limitation of connections to origin site. Valid value range: 0-4294967295.
         */
        sourceConnectLimit: number;
        /**
         * Limitation of new connection to origin site per second. Valid value range: 0-4294967295.
         */
        sourceCreateLimit: number;
        /**
         * UDP shard protection switch. Valid values: `on`, `off`.
         */
        udpShard: string;
    }

    export interface DdosPolicyDdosRuleGeoIp {
        /**
         * Region ID. See details in data source `securityPolicyRegions`.
         */
        regionIds: number[];
        /**
         * - `on`: Enable.- `off`: Disable.
         */
        switch: string;
    }

    export interface DdosPolicyDdosRulePacketFilter {
        /**
         * DDoS feature filtering configuration detail.
         */
        packetFilters: outputs.Teo.DdosPolicyDdosRulePacketFilterPacketFilter[];
        /**
         * - `on`: Enable. `PacketFilters` parameter is required.- `off`: Disable.
         */
        switch: string;
    }

    export interface DdosPolicyDdosRulePacketFilterPacketFilter {
        /**
         * Action to take. Valid values: `drop`, `transmit`, `dropBlock`, `forward`.
         */
        action?: string;
        /**
         * Packet character depth to check of feature 1. Valid value range: 1-1500.
         */
        depth?: number;
        /**
         * Packet character depth to check of feature 2. Valid value range: 1-1500.
         */
        depth2?: number;
        /**
         * End of the dest port range. Valid value range: 0-65535.
         */
        dportEnd?: number;
        /**
         * Start of the dest port range. Valid value range: 0-65535.
         */
        dportStart?: number;
        /**
         * Negate the match condition of feature 1. Valid values:- `0`: match.- `1`: not match.
         */
        isNot?: number;
        /**
         * Negate the match condition of feature 2. Valid values:- `0`: match.- `1`: not match.
         */
        isNot2?: number;
        /**
         * Packet layer for matching begin of feature 1. Valid values:- `beginL5`: matching from packet payload.- `beginL4`: matching from TCP/UDP header.- `beginL3`: matching from IP header.
         */
        matchBegin?: string;
        /**
         * Packet layer for matching begin of feature 2. Valid values:- `beginL5`: matching from packet payload.- `beginL4`: matching from TCP/UDP header.- `beginL3`: matching from IP header.
         */
        matchBegin2?: string;
        /**
         * Relation between multi features. Valid values: `and`, `or`, `none` (only feature 1 is used).
         */
        matchLogic?: string;
        /**
         * Match type of feature 1. Valid values:- `pcre`: regex expression.- `sunday`: string match.
         */
        matchType?: string;
        /**
         * Match type of feature 2. Valid values:- `pcre`: regex expression.- `sunday`: string match.
         */
        matchType2?: string;
        /**
         * Offset of feature 1. Valid value range: 1-1500.
         */
        offset?: number;
        /**
         * Offset of feature 2. Valid value range: 1-1500.
         */
        offset2?: number;
        /**
         * Max packet size. Valid value range: 0-1500.
         */
        packetMax?: number;
        /**
         * Min packet size. Valid value range: 0-1500.
         */
        packetMin?: number;
        /**
         * Valid value: `tcp`, `udp`, `icmp`, `all`.
         */
        protocol?: string;
        /**
         * End of the source port range. Valid value range: 0-65535.
         */
        sportEnd?: number;
        /**
         * Start of the source port range. Valid value range: 0-65535.
         */
        sportStart?: number;
        /**
         * Regex expression or string to match.
         */
        str?: string;
        /**
         * Regex expression or string to match.
         */
        str2?: string;
    }

    export interface DdosPolicyDdosRuleSpeedLimit {
        /**
         * Limit the number of fluxes. Valid range: 1 bps-10000 Gbps, 0 means no limitation, supported units: `pps`,`Kpps`,`Mpps`,`Gpps`.
         */
        fluxLimit?: string;
        /**
         * Limit the number of packages. Valid range: 1 pps-10000 Gpps, 0 means no limitation, supported units: `pps`,`Kpps`,`Mpps`,`Gpps`.
         */
        packageLimit?: string;
    }

    export interface DdosPolicyDdosRuleStatusInfo {
        /**
         * Policy level. Valid values:- `low`: loose.- `middle`: moderate.- `high`: strict.
         */
        plyLevel: string;
    }

    export interface DnsSecDnssec {
        algorithm: string;
        dS: string;
        digest: string;
        digestAlgorithm: string;
        digestType: string;
        flags: number;
        keyTag: number;
        keyType: string;
        publicKey: string;
    }

    export interface GetBotManagedRulesRule {
        /**
         * Description of the rule.
         */
        description: string;
        /**
         * Rule ID.
         */
        ruleId: number;
        /**
         * Type of the rule.
         */
        ruleTypeName: string;
        /**
         * Status of the rule.
         */
        status: string;
    }

    export interface GetBotPortraitRulesRule {
        /**
         * Classification of the rule. Note: This field may return null, indicating that no valid value can be obtained.
         */
        classificationId: number;
        /**
         * Description of the rule. Note: This field may return null, indicating that no valid value can be obtained.
         */
        description: string;
        /**
         * Rule ID.
         */
        ruleId: number;
        /**
         * Type of the rule. Note: This field may return null, indicating that no valid value can be obtained.
         */
        ruleTypeName: string;
        /**
         * Status of the rule. Note: This field may return null, indicating that no valid value can be obtained.
         */
        status: string;
    }

    export interface GetRuleEngineSettingsAction {
        /**
         * Action name.
         */
        action: string;
        /**
         * Action properties.
         */
        properties: outputs.Teo.GetRuleEngineSettingsActionProperty[];
    }

    export interface GetRuleEngineSettingsActionProperty {
        /**
         * Associative properties of this property, they are all required. Note: This field may return null, indicating that no valid value can be obtained.
         */
        choiceProperties: outputs.Teo.GetRuleEngineSettingsActionPropertyChoiceProperty[];
        /**
         * The choices which can be used. This list may be empty.
         */
        choicesValues: string[];
        /**
         * Special parameter. Note: This field may return null, indicating that no valid value can be obtained.
         */
        extraParameters: outputs.Teo.GetRuleEngineSettingsActionPropertyExtraParameter[];
        /**
         * Whether this property is allowed to set empty.
         */
        isAllowEmpty: boolean;
        /**
         * Whether this property is allowed to set multiple values.
         */
        isMultiple: boolean;
        /**
         * Max integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
         */
        max: number;
        /**
         * Min integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
         */
        min: number;
        /**
         * Property name.
         */
        name: string;
        /**
         * Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
         */
        type: string;
    }

    export interface GetRuleEngineSettingsActionPropertyChoiceProperty {
        /**
         * The choices which can be used. This list may be empty.
         */
        choicesValues: string[];
        /**
         * Special parameter. Note: This field may return null, indicating that no valid value can be obtained.
         */
        extraParameters: outputs.Teo.GetRuleEngineSettingsActionPropertyChoicePropertyExtraParameter[];
        /**
         * Whether this property is allowed to set empty.
         */
        isAllowEmpty: boolean;
        /**
         * Whether this property is allowed to set multiple values.
         */
        isMultiple: boolean;
        /**
         * Max integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
         */
        max: number;
        /**
         * Min integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
         */
        min: number;
        /**
         * Property name.
         */
        name: string;
        /**
         * Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
         */
        type: string;
    }

    export interface GetRuleEngineSettingsActionPropertyChoicePropertyExtraParameter {
        /**
         * A list of choices which can be used when `Type` is `CHOICE`.
         */
        choices: string[];
        /**
         * Parameter name. Valid values:- `Action`: this extra parameter is required when modify HTTP header, this action should be a `RewriteAction`.- `StatusCode`: this extra parameter is required when modify HTTP status code, this action should be a `CodeAction`.- `NULL`: this action should be a `NormalAction`.
         */
        id: string;
        /**
         * Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
         */
        type: string;
    }

    export interface GetRuleEngineSettingsActionPropertyExtraParameter {
        /**
         * A list of choices which can be used when `Type` is `CHOICE`.
         */
        choices: string[];
        /**
         * Parameter name. Valid values:- `Action`: this extra parameter is required when modify HTTP header, this action should be a `RewriteAction`.- `StatusCode`: this extra parameter is required when modify HTTP status code, this action should be a `CodeAction`.- `NULL`: this action should be a `NormalAction`.
         */
        id: string;
        /**
         * Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
         */
        type: string;
    }

    export interface GetSecurityPolicyRegionsGeoIp {
        /**
         * Name of the continent.
         */
        continent: string;
        /**
         * Name of the country.
         */
        country: string;
        /**
         * Province of the region. Note: This field may return null, indicating that no valid value can be obtained.
         */
        province: string;
        /**
         * Region ID.
         */
        regionId: number;
    }

    export interface GetWafRuleGroupsWafRuleGroup {
        /**
         * Description of rule type in this group.
         */
        ruleTypeDesc: string;
        /**
         * Type id of rules in this group.
         */
        ruleTypeId: number;
        /**
         * Type name of rules in this group.
         */
        ruleTypeName: string;
        /**
         * Rules detail.
         */
        rules: outputs.Teo.GetWafRuleGroupsWafRuleGroupRule[];
    }

    export interface GetWafRuleGroupsWafRuleGroupRule {
        /**
         * Description of the rule.
         */
        description: string;
        /**
         * WAF managed rule id.
         */
        ruleId: number;
        /**
         * System default level of the rule.
         */
        ruleLevelDesc: string;
        /**
         * Tags of the rule. Note: This field may return null, indicating that no valid value can be obtained.
         */
        ruleTags: string[];
    }

    export interface GetZoneAvailablePlansPlanInfoList {
        /**
         * Acceleration area of the plan. Valid value: `mainland`, `overseas`.
         */
        area: string;
        /**
         * Settlement Currency Type. Valid values: `CNY`, `USD`.
         */
        currency: string;
        /**
         * The number of fluxes included in the zone plan. Unit: Byte.
         */
        flux: number;
        /**
         * Billing cycle. Valid values:- `y`: Billed by the year.- `m`: Billed by the month.- `h`: Billed by the hour.- `M`: Billed by the minute.- `s`: Billed by the second.
         */
        frequency: string;
        /**
         * Plan type.
         */
        planType: string;
        /**
         * Price of the plan. Unit: cent.
         */
        price: number;
        /**
         * The number of requests included in the zone plan.
         */
        request: number;
        /**
         * The number of zones this zone plan can bind.
         */
        siteNumber: number;
    }

    export interface GetZoneDdosPolicyDomain {
        /**
         * Acceleration function switch. Valid values:- `on`: Enable.- `off`: Disable.
         */
        accelerateType: string;
        /**
         * Subdomain.
         */
        host: string;
        /**
         * Security function switch. Valid values:- `on`: Enable.- `off`: Disable.
         */
        securityType: string;
        /**
         * Status of the subdomain. Valid values:- `init`: waiting to config NS.- `offline`: need to enable site accelerating.- `process`: processing the config deployment.- `online`: normal status. Note: This field may return null, indicating that no valid value can be obtained.
         */
        status: string;
    }

    export interface GetZoneDdosPolicyShieldArea {
        /**
         * DDoS layer 7 application.
         */
        applications: outputs.Teo.GetZoneDdosPolicyShieldAreaApplication[];
        /**
         * When `Type` is `domain`, this field is `ZoneId`. When `Type` is `application`, this field is `ProxyId`. Note: This field may return null, indicating that no valid value can be obtained.
         */
        entity: string;
        /**
         * When `Type` is `domain`, this field is `ZoneName`. When `Type` is `application`, this field is `ProxyName`. Note: This field may return null, indicating that no valid value can be obtained.
         */
        entityName: string;
        /**
         * Policy ID.
         */
        policyId: number;
        /**
         * TCP forwarding rule number of layer 4 application.
         */
        tcpNum: number;
        /**
         * Valid values: `domain`, `application`.
         */
        type: string;
        /**
         * UDP forwarding rule number of layer 4 application.
         */
        udpNum: number;
        /**
         * Site ID.
         */
        zoneId: string;
    }

    export interface GetZoneDdosPolicyShieldAreaApplication {
        /**
         * Acceleration function switch. Valid values:- `on`: Enable.- `off`: Disable.
         */
        accelerateType: string;
        /**
         * Subdomain.
         */
        host: string;
        /**
         * Security function switch. Valid values:- `on`: Enable.- `off`: Disable.
         */
        securityType: string;
        /**
         * Status of the subdomain. Valid values:- `init`: waiting to config NS.- `offline`: need to enable site accelerating.- `process`: processing the config deployment.- `online`: normal status. Note: This field may return null, indicating that no valid value can be obtained.
         */
        status: string;
    }

    export interface OriginGroupOriginRecord {
        /**
         * Indicating origin site&#39;s area when `Type` field is `area`. An empty List indicate the default area. Valid value:- Asia, Americas, Europe, Africa or Oceania.- 2 characters ISO 3166 area code.
         */
        areas?: string[];
        /**
         * Port of the origin site. Valid value range: 1-65535.
         */
        port: number;
        /**
         * Whether origin site is using private authentication. Only valid when `OriginType` is `thirdParty`.
         */
        private?: boolean;
        /**
         * Parameters for private authentication. Only valid when `Private` is `true`.
         */
        privateParameters?: outputs.Teo.OriginGroupOriginRecordPrivateParameter[];
        /**
         * Record value, which could be an IPv4/IPv6 address or a domain.
         */
        record: string;
        recordId: string;
        /**
         * Indicating origin site&#39;s weight when `Type` field is `weight`. Valid value range: 1-100. Sum of all weights should be 100.
         */
        weight?: number;
    }

    export interface OriginGroupOriginRecordPrivateParameter {
        /**
         * Parameter Name. Valid values:- AccessKeyId:Access Key ID.- SecretAccessKey:Secret Access Key.
         */
        name: string;
        /**
         * Parameter value.
         */
        value: string;
    }

    export interface RuleEnginePriorityRulesPriority {
        /**
         * Priority order of rules.
         */
        index: number;
        /**
         * Priority of rules id.
         */
        value: string;
    }

    export interface RuleEngineRule {
        /**
         * Actions list of the rule. See details in data source `ruleEngineSetting`.
         */
        actions: outputs.Teo.RuleEngineRuleAction[];
        /**
         * OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
         */
        ors: outputs.Teo.RuleEngineRuleOr[];
        /**
         * Actions list of the rule. See details in data source `ruleEngineSetting`.
         */
        subRules?: outputs.Teo.RuleEngineRuleSubRule[];
    }

    export interface RuleEngineRuleAction {
        /**
         * Define a code action.
         */
        codeAction?: outputs.Teo.RuleEngineRuleActionCodeAction;
        /**
         * Define a normal action.
         */
        normalAction?: outputs.Teo.RuleEngineRuleActionNormalAction;
        /**
         * Define a rewrite action.
         */
        rewriteAction?: outputs.Teo.RuleEngineRuleActionRewriteAction;
    }

    export interface RuleEngineRuleActionCodeAction {
        /**
         * Action name.
         */
        action: string;
        /**
         * Action parameters.
         */
        parameters: outputs.Teo.RuleEngineRuleActionCodeActionParameter[];
    }

    export interface RuleEngineRuleActionCodeActionParameter {
        /**
         * Parameter Name.
         */
        name: string;
        /**
         * HTTP status code to use.
         */
        statusCode: number;
        /**
         * Parameter Values.
         */
        values: string[];
    }

    export interface RuleEngineRuleActionNormalAction {
        /**
         * Action name.
         */
        action: string;
        /**
         * Action parameters.
         */
        parameters: outputs.Teo.RuleEngineRuleActionNormalActionParameter[];
    }

    export interface RuleEngineRuleActionNormalActionParameter {
        /**
         * Parameter Name.
         */
        name: string;
        /**
         * Parameter Values.
         */
        values: string[];
    }

    export interface RuleEngineRuleActionRewriteAction {
        /**
         * Action name.
         */
        action: string;
        /**
         * Action parameters.
         */
        parameters: outputs.Teo.RuleEngineRuleActionRewriteActionParameter[];
    }

    export interface RuleEngineRuleActionRewriteActionParameter {
        /**
         * Action to take on the HEADER. Valid values: `add`, `del`, `set`.
         */
        action: string;
        /**
         * Parameter Name.
         */
        name: string;
        /**
         * Parameter Values.
         */
        values: string[];
    }

    export interface RuleEngineRuleOr {
        /**
         * AND Conditions list of the rule. Rule would be triggered if all conditions are true.
         */
        ands: outputs.Teo.RuleEngineRuleOrAnd[];
    }

    export interface RuleEngineRuleOrAnd {
        /**
         * Whether to ignore the case of the parameter value, the default value is false.
         */
        ignoreCase?: boolean;
        /**
         * The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: `queryString` (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; `requestHeader` (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
         */
        name?: string;
        /**
         * Condition operator. Valid values are `equal`, `notequal`.
         */
        operator: string;
        /**
         * Condition target. Valid values:- `host`: Host of the URL.- `filename`: filename of the URL.- `extension`: file extension of the URL.- `fullUrl`: full url.- `url`: path of the URL.
         */
        target: string;
        /**
         * Condition Value.
         */
        values: string[];
    }

    export interface RuleEngineRuleSubRule {
        /**
         * Rule items list.
         */
        rules: outputs.Teo.RuleEngineRuleSubRuleRule[];
        /**
         * rule tag list.
         */
        tags?: string[];
    }

    export interface RuleEngineRuleSubRuleRule {
        /**
         * Actions list of the rule. See details in data source `ruleEngineSetting`.
         */
        actions: outputs.Teo.RuleEngineRuleSubRuleRuleAction[];
        /**
         * OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
         */
        ors: outputs.Teo.RuleEngineRuleSubRuleRuleOr[];
    }

    export interface RuleEngineRuleSubRuleRuleAction {
        /**
         * Define a code action.
         */
        codeAction?: outputs.Teo.RuleEngineRuleSubRuleRuleActionCodeAction;
        /**
         * Define a normal action.
         */
        normalAction?: outputs.Teo.RuleEngineRuleSubRuleRuleActionNormalAction;
        /**
         * Define a rewrite action.
         */
        rewriteAction?: outputs.Teo.RuleEngineRuleSubRuleRuleActionRewriteAction;
    }

    export interface RuleEngineRuleSubRuleRuleActionCodeAction {
        /**
         * Action name.
         */
        action: string;
        /**
         * Action parameters.
         */
        parameters: outputs.Teo.RuleEngineRuleSubRuleRuleActionCodeActionParameter[];
    }

    export interface RuleEngineRuleSubRuleRuleActionCodeActionParameter {
        /**
         * Parameter Name.
         */
        name: string;
        /**
         * HTTP status code to use.
         */
        statusCode: number;
        /**
         * Parameter Values.
         */
        values: string[];
    }

    export interface RuleEngineRuleSubRuleRuleActionNormalAction {
        /**
         * Action name.
         */
        action: string;
        /**
         * Action parameters.
         */
        parameters: outputs.Teo.RuleEngineRuleSubRuleRuleActionNormalActionParameter[];
    }

    export interface RuleEngineRuleSubRuleRuleActionNormalActionParameter {
        /**
         * Parameter Name.
         */
        name: string;
        /**
         * Parameter Values.
         */
        values: string[];
    }

    export interface RuleEngineRuleSubRuleRuleActionRewriteAction {
        /**
         * Action name.
         */
        action: string;
        /**
         * Action parameters.
         */
        parameters: outputs.Teo.RuleEngineRuleSubRuleRuleActionRewriteActionParameter[];
    }

    export interface RuleEngineRuleSubRuleRuleActionRewriteActionParameter {
        /**
         * Action to take on the HEADER. Valid values: `add`, `del`, `set`.
         */
        action: string;
        /**
         * Parameter Name.
         */
        name: string;
        /**
         * Parameter Values.
         */
        values: string[];
    }

    export interface RuleEngineRuleSubRuleRuleOr {
        /**
         * AND Conditions list of the rule. Rule would be triggered if all conditions are true.
         */
        ands: outputs.Teo.RuleEngineRuleSubRuleRuleOrAnd[];
    }

    export interface RuleEngineRuleSubRuleRuleOrAnd {
        /**
         * Whether to ignore the case of the parameter value, the default value is false.
         */
        ignoreCase?: boolean;
        /**
         * The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: `queryString` (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; `requestHeader` (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
         */
        name?: string;
        /**
         * Condition operator. Valid values are `equal`, `notequal`.
         */
        operator: string;
        /**
         * Condition target. Valid values:- `host`: Host of the URL.- `filename`: filename of the URL.- `extension`: file extension of the URL.- `fullUrl`: full url.- `url`: path of the URL.
         */
        target: string;
        /**
         * Condition Value.
         */
        values: string[];
    }

    export interface SecurityPolicyConfig {
        /**
         * ACL configuration.
         */
        aclConfig: outputs.Teo.SecurityPolicyConfigAclConfig;
        /**
         * Bot Configuration.
         */
        botConfig: outputs.Teo.SecurityPolicyConfigBotConfig;
        /**
         * Custom drop page configuration.
         */
        dropPageConfig: outputs.Teo.SecurityPolicyConfigDropPageConfig;
        /**
         * Exception rule configuration.
         */
        exceptConfig: outputs.Teo.SecurityPolicyConfigExceptConfig;
        /**
         * Basic access control.
         */
        ipTableConfig: outputs.Teo.SecurityPolicyConfigIpTableConfig;
        /**
         * RateLimit Configuration.
         */
        rateLimitConfig: outputs.Teo.SecurityPolicyConfigRateLimitConfig;
        /**
         * Main switch of 7-layer security.
         */
        switchConfig: outputs.Teo.SecurityPolicyConfigSwitchConfig;
        /**
         * WAF (Web Application Firewall) Configuration.
         */
        wafConfig: outputs.Teo.SecurityPolicyConfigWafConfig;
    }

    export interface SecurityPolicyConfigAclConfig {
        /**
         * - `on`: Enable.- `off`: Disable.
         */
        switch: string;
        /**
         * Custom configuration.
         */
        userRules: outputs.Teo.SecurityPolicyConfigAclConfigUserRule[];
    }

    export interface SecurityPolicyConfigAclConfigUserRule {
        /**
         * Valid values: `monitor`, `drop`.
         */
        action: string;
        /**
         * Conditions of the rule.
         */
        conditions: outputs.Teo.SecurityPolicyConfigAclConfigUserRuleCondition[];
        /**
         * Name of the custom response page.
         */
        name: string;
        /**
         * ID of the custom response page.
         */
        pageId?: number;
        /**
         * Punish time, Valid value range: 0-2 days.
         */
        punishTime?: number;
        /**
         * Time unit of the punish time. Valid values: `second`, `minutes`, `hour`.
         */
        punishTimeUnit?: string;
        /**
         * Redirect target URL, must be an sub-domain from one of the account&#39;s site.
         */
        redirectUrl?: string;
        /**
         * Response code to use when redirecting.
         */
        responseCode?: number;
        ruleId: number;
        /**
         * Rule Name.
         */
        ruleName: string;
        /**
         * Priority of the rule. Valid value range: 1-100.
         */
        rulePriority: number;
        /**
         * Status of the rule. Valid values: `on`, `off`, `hour`.
         */
        ruleStatus: string;
        updateTime: string;
    }

    export interface SecurityPolicyConfigAclConfigUserRuleCondition {
        /**
         * Content to match.
         */
        matchContent: string;
        /**
         * Items to match. Valid values:- `host`: Host of the request.- `sip`: Client IP.- `ua`: User-Agent.- `cookie`: Session cookie.- `cgi`: CGI script.- `xff`: XFF extension header.- `url`: URL of the request.- `accept`: Accept encoding of the request.- `method`: HTTP method of the request.- `header`: HTTP header of the request.- `sipProto`: Network protocol of the request.
         */
        matchFrom: string;
        /**
         * Parameter for match item. For example, when match from header, match parameter can be set to a header key.
         */
        matchParam: string;
        /**
         * Valid values:- `equal`: string equal.- `notEqual`: string not equal.- `include`: string include.- `notInclude`: string not include.- `match`: ip match.- `notMatch`: ip not match.- `includeArea`: area include.- `isEmpty`: field existed but empty.- `notExists`: field is not existed.- `regexp`: regex match.- `lenGt`: value greater than.- `lenLt`: value less than.- `lenEq`: value equal.- `matchPrefix`: string prefix match.- `matchSuffix`: string suffix match.- `wildcard`: wildcard match.
         */
        operator: string;
    }

    export interface SecurityPolicyConfigBotConfig {
        /**
         * Bot intelligent rule configuration.
         */
        intelligenceRule: outputs.Teo.SecurityPolicyConfigBotConfigIntelligenceRule;
        /**
         * Preset rules.
         */
        managedRule: outputs.Teo.SecurityPolicyConfigBotConfigManagedRule;
        /**
         * Portrait rule.
         */
        portraitRule: outputs.Teo.SecurityPolicyConfigBotConfigPortraitRule;
        /**
         * - `on`: Enable.- `off`: Disable.
         */
        switch: string;
    }

    export interface SecurityPolicyConfigBotConfigIntelligenceRule {
        /**
         * Configuration detail.
         */
        items?: outputs.Teo.SecurityPolicyConfigBotConfigIntelligenceRuleItem[];
        /**
         * - `on`: Enable.- `off`: Disable.
         */
        switch?: string;
    }

    export interface SecurityPolicyConfigBotConfigIntelligenceRuleItem {
        /**
         * Action to take. Valid values: `trans`, `monitor`, `alg`, `captcha`, `drop`.
         */
        action?: string;
        /**
         * Bot label, valid values: `evilBot`, `suspectBot`, `goodBot`, `normal`.
         */
        label?: string;
    }

    export interface SecurityPolicyConfigBotConfigManagedRule {
        /**
         * Action to take. Valid values: `drop`, `trans`, `monitor`, `alg`.
         */
        action?: string;
        /**
         * Rules to enable when action is `alg`. See details in data source `botManagedRules`.
         */
        algManagedIds?: number[];
        /**
         * Rules to enable when action is `captcha`. See details in data source `botManagedRules`.
         */
        capManagedIds?: number[];
        /**
         * Rules to enable when action is `drop`. See details in data source `botManagedRules`.
         */
        dropManagedIds?: number[];
        /**
         * Rules to enable when action is `monitor`. See details in data source `botManagedRules`.
         */
        monManagedIds?: number[];
        /**
         * Name of the custom response page.
         */
        name?: string;
        /**
         * ID of the custom response page.
         */
        pageId?: number;
        /**
         * Punish time.
         */
        punishTime?: number;
        /**
         * Time unit of the punish time.
         */
        punishTimeUnit?: string;
        /**
         * Redirect target URL, must be an sub-domain from one of the account&#39;s site.
         */
        redirectUrl?: string;
        /**
         * Response code to use when redirecting.
         */
        responseCode?: number;
        ruleId: number;
        /**
         * Rules to enable when action is `trans`. See details in data source `botManagedRules`.
         */
        transManagedIds?: number[];
    }

    export interface SecurityPolicyConfigBotConfigPortraitRule {
        /**
         * Rules to enable when action is `alg`. See details in data source `botPortraitRules`.
         */
        algManagedIds?: number[];
        /**
         * Rules to enable when action is `captcha`. See details in data source `botPortraitRules`.
         */
        capManagedIds?: number[];
        /**
         * Rules to enable when action is `drop`. See details in data source `botPortraitRules`.
         */
        dropManagedIds?: number[];
        /**
         * Rules to enable when action is `monitor`. See details in data source `botPortraitRules`.
         */
        monManagedIds?: number[];
        ruleId: number;
        /**
         * - `on`: Enable.- `off`: Disable.
         */
        switch?: string;
    }

    export interface SecurityPolicyConfigDropPageConfig {
        /**
         * Custom error page of ACL rules.
         */
        aclDropPageDetail: outputs.Teo.SecurityPolicyConfigDropPageConfigAclDropPageDetail;
        /**
         * - `on`: Enable.- `off`: Disable.
         */
        switch: string;
        /**
         * Custom error page of WAF rules.
         */
        wafDropPageDetail: outputs.Teo.SecurityPolicyConfigDropPageConfigWafDropPageDetail;
    }

    export interface SecurityPolicyConfigDropPageConfigAclDropPageDetail {
        /**
         * File name or URL.
         */
        name: string;
        /**
         * ID of the custom error page. when set to 0, use system default error page.
         */
        pageId: number;
        /**
         * HTTP status code to use. Valid range: 100-600.
         */
        statusCode: number;
        /**
         * Type of the custom error page. Valid values: `file`, `url`.
         */
        type: string;
    }

    export interface SecurityPolicyConfigDropPageConfigWafDropPageDetail {
        /**
         * File name or URL.
         */
        name: string;
        /**
         * ID of the custom error page. when set to 0, use system default error page.
         */
        pageId: number;
        /**
         * HTTP status code to use. Valid range: 100-600.
         */
        statusCode: number;
        /**
         * Type of the custom error page. Valid values: `file`, `url`.
         */
        type: string;
    }

    export interface SecurityPolicyConfigExceptConfig {
        /**
         * Exception rules.
         */
        exceptUserRules: outputs.Teo.SecurityPolicyConfigExceptConfigExceptUserRule[];
        /**
         * - `on`: Enable.- `off`: Disable.
         */
        switch: string;
    }

    export interface SecurityPolicyConfigExceptConfigExceptUserRule {
        /**
         * Action to take. Valid values: `skip`.
         */
        action: string;
        /**
         * Conditions of the rule.
         */
        exceptUserRuleConditions: outputs.Teo.SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleCondition[];
        /**
         * Scope of the rule in effect.
         */
        exceptUserRuleScope: outputs.Teo.SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleScope;
        ruleId: number;
        /**
         * Rule name.
         */
        ruleName: string;
        /**
         * Priority of the rule. Valid value range: 0-100.
         */
        rulePriority: number;
        /**
         * Status of the rule. Valid values:- `on`: Enabled.- `off`: Disabled.
         */
        ruleStatus: string;
        updateTime: string;
    }

    export interface SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleCondition {
        /**
         * Content to match.
         */
        matchContent: string;
        /**
         * Items to match. Valid values:- `host`: Host of the request.- `sip`: Client IP.- `ua`: User-Agent.- `cookie`: Session cookie.- `cgi`: CGI script.- `xff`: XFF extension header.- `url`: URL of the request.- `accept`: Accept encoding of the request.- `method`: HTTP method of the request.- `header`: HTTP header of the request.- `sipProto`: Network protocol of the request.
         */
        matchFrom: string;
        /**
         * Parameter for match item. For example, when match from header, match parameter can be set to a header key.
         */
        matchParam: string;
        /**
         * Valid values:- `equal`: string equal.- `notEqual`: string not equal.- `include`: string include.- `notInclude`: string not include.- `match`: ip match.- `notMatch`: ip not match.- `includeArea`: area include.- `isEmpty`: field existed but empty.- `notExists`: field is not existed.- `regexp`: regex match.- `lenGt`: value greater than.- `lenLt`: value less than.- `lenEq`: value equal.- `matchPrefix`: string prefix match.- `matchSuffix`: string suffix match.- `wildcard`: wildcard match.
         */
        operator: string;
    }

    export interface SecurityPolicyConfigExceptConfigExceptUserRuleExceptUserRuleScope {
        /**
         * Modules in which the rule take effect. Valid values: `waf`.
         */
        modules: string[];
    }

    export interface SecurityPolicyConfigIpTableConfig {
        /**
         * Rules list.
         */
        rules: outputs.Teo.SecurityPolicyConfigIpTableConfigRule[];
        /**
         * - `on`: Enable.- `off`: Disable.
         */
        switch: string;
    }

    export interface SecurityPolicyConfigIpTableConfigRule {
        /**
         * Actions to take. Valid values: `drop`, `trans`, `monitor`.
         */
        action?: string;
        /**
         * Matching content.
         */
        matchContent?: string;
        /**
         * Matching type. Valid values: `ip`, `area`.
         */
        matchFrom?: string;
        ruleId: number;
        updateTime: string;
    }

    export interface SecurityPolicyConfigRateLimitConfig {
        /**
         * Intelligent client filter.
         */
        intelligence?: outputs.Teo.SecurityPolicyConfigRateLimitConfigIntelligence;
        /**
         * - `on`: Enable.- `off`: Disable.
         */
        switch: string;
        /**
         * Default Template. Note: This field may return null, indicating that no valid value can be obtained.
         */
        template: outputs.Teo.SecurityPolicyConfigRateLimitConfigTemplate;
        /**
         * Custom configuration.
         */
        userRules: outputs.Teo.SecurityPolicyConfigRateLimitConfigUserRule[];
    }

    export interface SecurityPolicyConfigRateLimitConfigIntelligence {
        /**
         * Action to take. Valid values: `monitor`, `alg`.
         */
        action?: string;
        /**
         * - `on`: Enable.- `off`: Disable.
         */
        switch?: string;
    }

    export interface SecurityPolicyConfigRateLimitConfigTemplate {
        /**
         * Detail of the template.
         */
        detail: outputs.Teo.SecurityPolicyConfigRateLimitConfigTemplateDetail;
        /**
         * Template Name. Note: This field may return null, indicating that no valid value can be obtained.
         */
        mode: string;
    }

    export interface SecurityPolicyConfigRateLimitConfigTemplateDetail {
        /**
         * Action to take.
         */
        action: string;
        /**
         * Template ID. Note: This field may return null, indicating that no valid value can be obtained.
         */
        id: number;
        /**
         * Template Name. Note: This field may return null, indicating that no valid value can be obtained.
         */
        mode: string;
        /**
         * Period.
         */
        period: number;
        /**
         * Punish time.
         */
        punishTime: number;
        /**
         * Threshold.
         */
        threshold: number;
    }

    export interface SecurityPolicyConfigRateLimitConfigUserRule {
        /**
         * Valid values: `monitor`, `drop`.
         */
        action: string;
        /**
         * Conditions of the rule.
         */
        conditions: outputs.Teo.SecurityPolicyConfigRateLimitConfigUserRuleCondition[];
        /**
         * Filter words.
         */
        freqFields?: string[];
        /**
         * Period of the rate limit. Valid values: 10, 20, 30, 40, 50, 60 (in seconds).
         */
        period: number;
        /**
         * Punish time, Valid value range: 0-2 days.
         */
        punishTime: number;
        /**
         * Time unit of the punish time. Valid values: `second`, `minutes`, `hour`.
         */
        punishTimeUnit: string;
        ruleId: number;
        /**
         * Rule Name.
         */
        ruleName: string;
        /**
         * Priority of the rule. Valid value range: 1-100.
         */
        rulePriority: number;
        /**
         * Status of the rule. Valid values: `on`, `off`, `hour`.
         */
        ruleStatus: string;
        /**
         * Threshold of the rate limit. Valid value range: 0-4294967294.
         */
        threshold: number;
        updateTime: string;
    }

    export interface SecurityPolicyConfigRateLimitConfigUserRuleCondition {
        /**
         * Content to match.
         */
        matchContent: string;
        /**
         * Items to match. Valid values:- `host`: Host of the request.- `sip`: Client IP.- `ua`: User-Agent.- `cookie`: Session cookie.- `cgi`: CGI script.- `xff`: XFF extension header.- `url`: URL of the request.- `accept`: Accept encoding of the request.- `method`: HTTP method of the request.- `header`: HTTP header of the request.- `sipProto`: Network protocol of the request.
         */
        matchFrom: string;
        /**
         * Parameter for match item. For example, when match from header, match parameter can be set to a header key.
         */
        matchParam: string;
        /**
         * Valid values:- `equal`: string equal.- `notEqual`: string not equal.- `include`: string include.- `notInclude`: string not include.- `match`: ip match.- `notMatch`: ip not match.- `includeArea`: area include.- `isEmpty`: field existed but empty.- `notExists`: field is not existed.- `regexp`: regex match.- `lenGt`: value greater than.- `lenLt`: value less than.- `lenEq`: value equal.- `matchPrefix`: string prefix match.- `matchSuffix`: string suffix match.- `wildcard`: wildcard match.
         */
        operator: string;
    }

    export interface SecurityPolicyConfigSwitchConfig {
        /**
         * - `on`: Enable.- `off`: Disable.
         */
        webSwitch?: string;
    }

    export interface SecurityPolicyConfigWafConfig {
        /**
         * AI based rules configuration.
         */
        aiRule: outputs.Teo.SecurityPolicyConfigWafConfigAiRule;
        /**
         * Protection level. Valid values: `loose`, `normal`, `strict`, `stricter`, `custom`.
         */
        level: string;
        /**
         * Protection mode. Valid values:- `block`: use block mode globally, you still can set a group of rules to use observe mode.- `observe`: use observe mode globally.
         */
        mode: string;
        /**
         * Whether to enable WAF rules. Valid values:- `on`: Enable.- `off`: Disable.
         */
        switch: string;
        /**
         * WAF Rules Configuration.
         */
        wafRules: outputs.Teo.SecurityPolicyConfigWafConfigWafRules;
    }

    export interface SecurityPolicyConfigWafConfigAiRule {
        /**
         * Valid values:- `smartStatusClose`: disabled.- `smartStatusOpen`: blocked.- `smartStatusObserve`: observed.
         */
        mode: string;
    }

    export interface SecurityPolicyConfigWafConfigWafRules {
        /**
         * Block mode rules list. See details in data source `wafManagedRules`.
         */
        blockRuleIds: number[];
        /**
         * Observe rules list. See details in data source `wafManagedRules`.
         */
        observeRuleIds: number[];
        /**
         * Whether to host the rules&#39; configuration.- `on`: Enable.- `off`: Disable.
         */
        switch: string;
    }

    export interface ZoneResource {
        /**
         * Valid values: `mainland`, `overseas`.
         */
        area: string;
        /**
         * Whether to automatically renew. Valid values:- `0`: Default.- `1`: Enable automatic renewal.- `2`: Disable automatic renewal.
         */
        autoRenewFlag: number;
        /**
         * Resource creation date.
         */
        createTime: string;
        /**
         * Enable time of the resource.
         */
        enableTime: string;
        /**
         * Expire time of the resource.
         */
        expireTime: string;
        /**
         * Resource ID.
         */
        id: string;
        /**
         * Resource pay mode. Valid values:- `0`: post pay mode.
         */
        payMode: number;
        /**
         * Associated plan ID.
         */
        planId: string;
        /**
         * Site status. Valid values:- `active`: NS is switched.- `pending`: NS is not switched.- `moved`: NS is moved.- `deactivated`: this site is blocked.
         */
        status: string;
        /**
         * Price inquiry parameters.
         */
        svs: outputs.Teo.ZoneResourceSv[];
    }

    export interface ZoneResourceSv {
        /**
         * Parameter Key.
         */
        key: string;
        /**
         * Parameter Value.
         */
        value: string;
    }

    export interface ZoneSettingCache {
        /**
         * Cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
         */
        cache: outputs.Teo.ZoneSettingCacheCache;
        /**
         * Follows the origin server configuration. Note: This field may return null, indicating that no valid value can be obtained.
         */
        followOrigin: outputs.Teo.ZoneSettingCacheFollowOrigin;
        /**
         * No-cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
         */
        noCache: outputs.Teo.ZoneSettingCacheNoCache;
    }

    export interface ZoneSettingCacheCache {
        /**
         * Cache expiration time settings.Unit: second. The maximum value is 365 days. Note: This field may return null, indicating that no valid value can be obtained.
         */
        cacheTime: number;
        /**
         * Specifies whether to enable force cache.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
         */
        ignoreCacheControl: string;
        /**
         * Cache configuration switch.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
         */
        switch: string;
    }

    export interface ZoneSettingCacheFollowOrigin {
        /**
         * Specifies whether to follow the origin server configuration.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
         */
        switch: string;
    }

    export interface ZoneSettingCacheKey {
        /**
         * Specifies whether to enable full-path cache.- `on`: Enable full-path cache (i.e., disable Ignore Query String).- `off`: Disable full-path cache (i.e., enable Ignore Query String). Note: This field may return null, indicating that no valid value can be obtained.
         */
        fullUrlCache?: string;
        /**
         * Specifies whether the cache key is case-sensitive. Note: This field may return null, indicating that no valid value can be obtained.
         */
        ignoreCase?: string;
        /**
         * Request parameter contained in CacheKey. Note: This field may return null, indicating that no valid value can be obtained.
         */
        queryString?: outputs.Teo.ZoneSettingCacheKeyQueryString;
    }

    export interface ZoneSettingCacheKeyQueryString {
        /**
         * - `includeCustom`: Include the specified query strings.- `excludeCustom`: Exclude the specified query strings. Note: This field may return null, indicating that no valid value can be obtained.
         */
        action?: string;
        /**
         * Whether to use QueryString as part of CacheKey.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
         */
        switch: string;
        /**
         * Array of query strings used/excluded. Note: This field may return null, indicating that no valid value can be obtained.
         */
        values?: string[];
    }

    export interface ZoneSettingCacheNoCache {
        /**
         * Whether to cache the configuration.- `on`: Do not cache.- `off`: Cache. Note: This field may return null, indicating that no valid value can be obtained.
         */
        switch: string;
    }

    export interface ZoneSettingCachePrefresh {
        /**
         * Percentage of cache time before try to prefresh. Valid value range: 1-99.
         */
        percent?: number;
        /**
         * Specifies whether to enable cache prefresh.- `on`: Enable.- `off`: Disable.
         */
        switch: string;
    }

    export interface ZoneSettingClientIpHeader {
        /**
         * Name of the origin-pull client IP request header. Note: This field may return null, indicating that no valid value can be obtained.
         */
        headerName?: string;
        /**
         * Specifies whether to enable client IP header.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
         */
        switch: string;
    }

    export interface ZoneSettingCompression {
        /**
         * Compression algorithms to select. Valid values: `brotli`, `gzip`.
         */
        algorithms: string[];
        /**
         * Whether to enable Smart compression.- `on`: Enable.- `off`: Disable.
         */
        switch: string;
    }

    export interface ZoneSettingForceRedirect {
        /**
         * Redirection status code.- 301- 302 Note: This field may return null, indicating that no valid value can be obtained.
         */
        redirectStatusCode?: number;
        /**
         * Whether to enable force redirect.- `on`: Enable.- `off`: Disable.
         */
        switch: string;
    }

    export interface ZoneSettingHttps {
        /**
         * HSTS Configuration. Note: This field may return null, indicating that no valid value can be obtained.
         */
        hsts?: outputs.Teo.ZoneSettingHttpsHsts;
        /**
         * HTTP2 configuration switch.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
         */
        http2?: string;
        /**
         * OCSP configuration switch.- `on`: Enable.- `off`: Disable.It is disabled by default. Note: This field may return null, indicating that no valid value can be obtained.
         */
        ocspStapling?: string;
        /**
         * TLS version settings. Valid values: `TLSv1`, `TLSV1.1`, `TLSV1.2`, and `TLSv1.3`.Only consecutive versions can be enabled at the same time. Note: This field may return null, indicating that no valid value can be obtained.
         */
        tlsVersions?: string[];
    }

    export interface ZoneSettingHttpsHsts {
        /**
         * Specifies whether to include subdomain names. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
         */
        includeSubDomains?: string;
        /**
         * MaxAge value in seconds, should be no more than 1 day. Note: This field may return null, indicating that no valid value can be obtained.
         */
        maxAge?: number;
        /**
         * Specifies whether to preload. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
         */
        preload?: string;
        /**
         * - `on`: Enable.- `off`: Disable.
         */
        switch: string;
    }

    export interface ZoneSettingIpv6 {
        /**
         * Specifies whether to enable cache prefresh.- `on`: Enable.- `off`: Disable.
         */
        switch: string;
    }

    export interface ZoneSettingMaxAge {
        /**
         * Specifies whether to follow the max cache age of the origin server.- `on`: Enable.- `off`: Disable.If it&#39;s on, MaxAgeTime is ignored. Note: This field may return null, indicating that no valid value can be obtained.
         */
        followOrigin?: string;
        /**
         * Specifies the max age of the cache (in seconds). The maximum value is 365 days. Note: the value 0 means not to cache. Note: This field may return null, indicating that no valid value can be obtained.
         */
        maxAgeTime?: number;
    }

    export interface ZoneSettingOfflineCache {
        /**
         * Whether to enable offline cache.- `on`: Enable.- `off`: Disable. Note: This field may return null, indicating that no valid value can be obtained.
         */
        switch: string;
    }

    export interface ZoneSettingOrigin {
        /**
         * Backup origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
         */
        backupOrigins: string[];
        /**
         * Whether access private cos bucket is allowed when `OriginType` is cos. Note: This field may return null, indicating that no valid value can be obtained.
         */
        cosPrivateAccess: string;
        /**
         * Origin-pull protocol.- `http`: Switch HTTPS requests to HTTP.- `follow`: Follow the protocol of the request.- `https`: Switch HTTP requests to HTTPS. This only supports port 443 on the origin server. Note: This field may return null, indicating that no valid value can be obtained.
         */
        originPullProtocol: string;
        /**
         * Origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
         */
        origins: string[];
    }

    export interface ZoneSettingPostMaxSize {
        /**
         * Maximum size. Value range: 1-500 MB. Note: This field may return null, indicating that no valid value can be obtained.
         */
        maxSize?: number;
        /**
         * Specifies whether to enable custom setting of the maximum file size.- `on`: Enable. You can set a custom max size.- `off`: Disable. In this case, the max size defaults to 32 MB.
         */
        switch: string;
    }

    export interface ZoneSettingQuic {
        /**
         * Whether to enable QUIC.- `on`: Enable.- `off`: Disable.
         */
        switch: string;
    }

    export interface ZoneSettingSmartRouting {
        /**
         * Whether to enable HTTP2 origin-pull.- `on`: Enable.- `off`: Disable.
         */
        switch: string;
    }

    export interface ZoneSettingUpstreamHttp2 {
        /**
         * Specifies whether to enable cache prefresh.- `on`: Enable.- `off`: Disable.
         */
        switch: string;
    }

    export interface ZoneSettingWebSocket {
        /**
         * Whether to enable custom WebSocket timeout setting. When it&#39;s off: it means to keep the default WebSocket connection timeout period, which is 15 seconds. To change the timeout period, please set it to on.
         */
        switch: string;
        /**
         * Sets timeout period in seconds. Maximum value: 120.
         */
        timeout?: number;
    }

    export interface ZoneVanityNameServers {
        /**
         * List of custom name servers.
         */
        servers?: string[];
        /**
         * Whether to enable the custom name server.- `on`: Enable.- `off`: Disable.
         */
        switch: string;
    }

    export interface ZoneVanityNameServersIp {
        /**
         * IPv4 address of the custom name server.
         */
        ipv4: string;
        /**
         * Name of the custom name server.
         */
        name: string;
    }

}

export namespace Tsf {
    export interface ApiGroupBindedGatewayDeployGroup {
        /**
         * application ID.
         */
        applicationId: string;
        /**
         * Application Name.
         */
        applicationName: string;
        /**
         * Application classification: V: virtual machine application, C: container application.
         */
        applicationType: string;
        /**
         * Cluster type, C: container, V: virtual machine.
         */
        clusterType: string;
        /**
         * Gateway deployment group ID.
         */
        deployGroupId: string;
        /**
         * Gateway deployment group name.
         */
        deployGroupName: string;
        /**
         * Deployment group application status, values: Running, Waiting, Paused, Updating, RollingBack, Abnormal, Unknown.
         */
        groupStatus: string;
    }

    export interface ApplicationServiceConfigList {
        /**
         * Health check configuration.
         */
        healthCheck?: outputs.Tsf.ApplicationServiceConfigListHealthCheck;
        /**
         * Service name.
         */
        name: string;
        /**
         * List of port information.
         */
        ports: outputs.Tsf.ApplicationServiceConfigListPort[];
    }

    export interface ApplicationServiceConfigListHealthCheck {
        /**
         * Health check path.
         */
        path?: string;
    }

    export interface ApplicationServiceConfigListPort {
        /**
         * Port protocol.
         */
        protocol: string;
        /**
         * Service port.
         */
        targetPort: number;
    }

    export interface ClusterOperationInfo {
        /**
         * Add the control information of the instance button.
         */
        addInstances: outputs.Tsf.ClusterOperationInfoAddInstance[];
        /**
         * Destroy the control information of the machine.
         */
        destroys: outputs.Tsf.ClusterOperationInfoDestroy[];
        /**
         * Initialize the control information of the button.
         */
        inits: outputs.Tsf.ClusterOperationInfoInit[];
    }

    export interface ClusterOperationInfoAddInstance {
        /**
         * Reason for not showing.
         */
        disabledReason: string;
        /**
         * Is the button clickable.
         */
        enabled: boolean;
        /**
         * whether to show the button.
         */
        supported: boolean;
    }

    export interface ClusterOperationInfoDestroy {
        /**
         * Reason for not showing.
         */
        disabledReason: string;
        /**
         * Is the button clickable.
         */
        enabled: boolean;
        /**
         * whether to show the button.
         */
        supported: boolean;
    }

    export interface ClusterOperationInfoInit {
        /**
         * Reason for not showing.
         */
        disabledReason: string;
        /**
         * Is the button clickable.
         */
        enabled: boolean;
        /**
         * whether to show the button.
         */
        supported: boolean;
    }

    export interface ContainGroupEnv {
        /**
         * environment variable name.
         */
        name: string;
        /**
         * environment variable value.
         */
        value: string;
        /**
         * k8s ValueFrom.
         */
        valueFroms: outputs.Tsf.ContainGroupEnvValueFrom[];
    }

    export interface ContainGroupEnvValueFrom {
        /**
         * FieldRef for k8s env.
         */
        fieldReves: outputs.Tsf.ContainGroupEnvValueFromFieldRef[];
        /**
         * ResourceFieldRef of k8s env.
         */
        resourceFieldReves: outputs.Tsf.ContainGroupEnvValueFromResourceFieldRef[];
    }

    export interface ContainGroupEnvValueFromFieldRef {
        /**
         * FieldPath of k8s.
         */
        fieldPath: string;
    }

    export interface ContainGroupEnvValueFromResourceFieldRef {
        /**
         * Resource of k8s.
         */
        resource: string;
    }

    export interface ContainGroupHealthCheckSetting {
        /**
         * live health check.
         */
        livenessProbes: outputs.Tsf.ContainGroupHealthCheckSettingLivenessProbe[];
        /**
         * readiness health check.
         */
        readinessProbes: outputs.Tsf.ContainGroupHealthCheckSettingReadinessProbe[];
    }

    export interface ContainGroupHealthCheckSettingLivenessProbe {
        /**
         * health check method. HTTP: check by HTTP interface; CMD: check by executing command; TCP: check by establishing TCP connection.
         */
        actionType: string;
        /**
         * Execute command check mode, the command to execute.
         */
        commands: string[];
        /**
         * Indicates the number of consecutive health check successes for the backend container from success to failure.
         */
        failureThreshold: number;
        /**
         * The time for the container to delay starting the health check.
         */
        initialDelaySeconds: number;
        /**
         * The request path of the HTTP health check interface.
         */
        path: string;
        /**
         * The interval at which health checks are performed.
         */
        periodSeconds: number;
        /**
         * service port.
         */
        port: number;
        /**
         * The inspection protocol used by the HTTP health check method. HTTP and HTTPS are supported.
         */
        scheme: string;
        /**
         * Indicates the number of consecutive health check successes for the backend container from failure to success.
         */
        successThreshold: number;
        /**
         * The maximum timeout for each health check response.
         */
        timeoutSeconds: number;
        /**
         * TSF_DEFAULT: tsf default readiness probe. K8S_NATIVE: k8s native probe. If not filled, it defaults to k8s native probe.
         */
        type: string;
    }

    export interface ContainGroupHealthCheckSettingReadinessProbe {
        /**
         * health check method. HTTP: check by HTTP interface; CMD: check by executing command; TCP: check by establishing TCP connection.
         */
        actionType: string;
        /**
         * Execute command check mode, the command to execute.
         */
        commands: string[];
        /**
         * Indicates the number of consecutive health check successes for the backend container from success to failure.
         */
        failureThreshold: number;
        /**
         * The time for the container to delay starting the health check.
         */
        initialDelaySeconds: number;
        /**
         * The request path of the HTTP health check interface.
         */
        path: string;
        /**
         * The interval at which health checks are performed.
         */
        periodSeconds: number;
        /**
         * service port.
         */
        port: number;
        /**
         * The inspection protocol used by the HTTP health check method. HTTP and HTTPS are supported.
         */
        scheme: string;
        /**
         * Indicates the number of consecutive health check successes for the backend container from failure to success.
         */
        successThreshold: number;
        /**
         * The maximum timeout for each health check response.
         */
        timeoutSeconds: number;
        /**
         * TSF_DEFAULT: tsf default readiness probe. K8S_NATIVE: k8s native probe. If not filled, it defaults to k8s native probe.
         */
        type: string;
    }

    export interface ContainGroupProtocolPort {
        /**
         * host port.
         */
        nodePort: number;
        /**
         * service port.
         */
        port: number;
        /**
         * TCP UDP.
         */
        protocol: string;
        /**
         * container port.
         */
        targetPort: number;
    }

    export interface GetApplicationConfigResult {
        /**
         * Configuration item list.
         */
        contents: outputs.Tsf.GetApplicationConfigResultContent[];
        /**
         * TsfPageConfig.
         */
        totalCount: number;
    }

    export interface GetApplicationConfigResultContent {
        /**
         * Application ID, query all when not provided.
         */
        applicationId: string;
        /**
         * application Id. Note: This field may return null, indicating that no valid values can be obtained.
         */
        applicationName: string;
        /**
         * Configuration ID, query all with higher priority when not provided.
         */
        configId: string;
        /**
         * Configuration name, precise query, query all when not provided.
         */
        configName: string;
        /**
         * Configuration type. Note: This field may return null, indicating that no valid values can be obtained.
         */
        configType: string;
        /**
         * Configuration value. Note: This field may return null, indicating that no valid values can be obtained.
         */
        configValue: string;
        /**
         * Configuration version, precise query, query all when not provided.
         */
        configVersion: string;
        /**
         * config version count.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        configVersionCount: number;
        /**
         * Configuration version description. Note: This field may return null, indicating that no valid values can be obtained.
         */
        configVersionDesc: string;
        /**
         * CreationTime. Note: This field may return null, indicating that no valid values can be obtained.
         */
        creationTime: string;
        /**
         * delete flag, true: allow delete; false: delete prohibit.
         */
        deleteFlag: boolean;
        /**
         * last update time.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        lastUpdateTime: string;
    }

    export interface GetApplicationFileConfigResult {
        /**
         * File configuration array. Note: This field may return null, indicating that no valid values can be obtained.
         */
        contents: outputs.Tsf.GetApplicationFileConfigResultContent[];
        /**
         * total count.
         */
        totalCount: number;
    }

    export interface GetApplicationFileConfigResultContent {
        /**
         * Application ID.
         */
        applicationId: string;
        /**
         * application name. Note: This field may return null, indicating that no valid values can be obtained.
         */
        applicationName: string;
        /**
         * Configuration file code. Note: This field may return null, indicating that no valid values can be obtained.
         */
        configFileCode: string;
        /**
         * Configuration item file name. Note: This field may return null, indicating that no valid values can be obtained.
         */
        configFileName: string;
        /**
         * file config path. Note: This field may return null, indicating that no valid values can be obtained.
         */
        configFilePath: string;
        /**
         * Configuration file content. Note: This field may return null, indicating that no valid values can be obtained.
         */
        configFileValue: string;
        /**
         * config item content length.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        configFileValueLength: number;
        /**
         * Configuration ID.
         */
        configId: string;
        /**
         * Configuration item name.
         */
        configName: string;
        /**
         * last update time.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        configPostCmd: string;
        /**
         * Configuration item version.
         */
        configVersion: string;
        /**
         * config version count.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        configVersionCount: number;
        /**
         * Configuration item version description. Note: This field may return null, indicating that no valid values can be obtained.
         */
        configVersionDesc: string;
        /**
         * CreationTime. Note: This field may return null, indicating that no valid values can be obtained.
         */
        creationTime: string;
        /**
         * delete flag, true: allow delete; false: delete prohibit.
         */
        deleteFlag: boolean;
        /**
         * last update time.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        lastUpdateTime: string;
    }

    export interface GetApplicationPublicConfigResult {
        /**
         * Config list.
         */
        contents: outputs.Tsf.GetApplicationPublicConfigResultContent[];
        /**
         * TsfPageConfig.
         */
        totalCount: number;
    }

    export interface GetApplicationPublicConfigResultContent {
        /**
         * application Id. Note: This field may return null, indicating that no valid values can be obtained.
         */
        applicationId: string;
        /**
         * application Id. Note: This field may return null, indicating that no valid values can be obtained.
         */
        applicationName: string;
        /**
         * Config ID. Query all items if not passed, high priority.
         */
        configId: string;
        /**
         * Config name. Exact query. Query all items if not passed.
         */
        configName: string;
        /**
         * Config type. Note: This field may return null, indicating that no valid value can be obtained.
         */
        configType: string;
        /**
         * Config value. Note: This field may return null, indicating that no valid value can be obtained.
         */
        configValue: string;
        /**
         * Config version. Exact query. Query all items if not passed.
         */
        configVersion: string;
        /**
         * config version count.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        configVersionCount: number;
        /**
         * Config version description. Note: This field may return null, indicating that no valid value can be obtained.
         */
        configVersionDesc: string;
        /**
         * CreationTime. Note: This field may return null, indicating that no valid values can be obtained.
         */
        creationTime: string;
        /**
         * delete flag, true: allow delete; false: delete prohibit.
         */
        deleteFlag: boolean;
        /**
         * last update time.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        lastUpdateTime: string;
    }

    export interface GetApplicationResult {
        /**
         * The list of application information.
         */
        contents: outputs.Tsf.GetApplicationResultContent[];
        /**
         * The total number of applications.
         */
        totalCount: number;
    }

    export interface GetApplicationResultContent {
        /**
         * gateway service id.
         */
        apigatewayServiceId: string;
        /**
         * The description of the application.
         */
        applicationDesc: string;
        /**
         * The ID of the application.
         */
        applicationId: string;
        /**
         * The name of the application.
         */
        applicationName: string;
        /**
         * remark name.
         */
        applicationRemarkName: string;
        /**
         * application resource type.
         */
        applicationResourceType: string;
        /**
         * application runtime type.
         */
        applicationRuntimeType: string;
        /**
         * The application type. V OR C, V means VM, C means container.
         */
        applicationType: string;
        /**
         * create time.
         */
        createTime: string;
        /**
         * whether ignore create image repository.
         */
        ignoreCreateImageRepository: boolean;
        /**
         * The microservice type of the application.
         */
        microserviceType: string;
        /**
         * Programming language.
         */
        progLang: string;
        /**
         * service config list.
         */
        serviceConfigLists: outputs.Tsf.GetApplicationResultContentServiceConfigList[];
        /**
         * update time.
         */
        updateTime: string;
    }

    export interface GetApplicationResultContentServiceConfigList {
        /**
         * health check setting.
         */
        healthChecks: outputs.Tsf.GetApplicationResultContentServiceConfigListHealthCheck[];
        /**
         * serviceName.
         */
        name: string;
        /**
         * port list.
         */
        ports: outputs.Tsf.GetApplicationResultContentServiceConfigListPort[];
    }

    export interface GetApplicationResultContentServiceConfigListHealthCheck {
        /**
         * health check path.
         */
        path: string;
    }

    export interface GetApplicationResultContentServiceConfigListPort {
        /**
         * protocol.
         */
        protocol: string;
        /**
         * service port.
         */
        targetPort: number;
    }

    export interface GetClusterResult {
        /**
         * Cluster list. Note: This field may return null, indicating no valid values.
         */
        contents: outputs.Tsf.GetClusterResultContent[];
        /**
         * Total number of items. Note: This field may return null, indicating that no valid value was found.
         */
        totalCount: number;
    }

    export interface GetClusterResultContent {
        /**
         * cluster CIDR. Note: This field may return null, indicating no valid value.
         */
        clusterCidr: string;
        /**
         * Cluster description. Note: This field may return null, indicating no valid value.
         */
        clusterDesc: string;
        /**
         * Cluster ID. Note: This field may return null, indicating no valid value.
         */
        clusterId: string;
        /**
         * Maximum CPU limit of the cluster, in cores. This field may return null, indicating that no valid value was found.
         */
        clusterLimitCpu: number;
        /**
         * Cluster maximum memory limit in GB. This field may return null, indicating that no valid value was found.
         */
        clusterLimitMem: number;
        /**
         * Cluster name. Note: This field may return null, indicating no valid value.
         */
        clusterName: string;
        /**
         * cluster status. Note: This field may return null, indicating no valid value.
         */
        clusterStatus: string;
        /**
         * Total CPU of the cluster, unit: cores. Note: This field may return null, indicating that no valid value was found.
         */
        clusterTotalCpu: number;
        /**
         * Total memory of the cluster, unit: G. Note: This field may return null, indicating that no valid value is obtained.
         */
        clusterTotalMem: number;
        /**
         * The type of cluster to be queried, if left blank or not passed, all content will be queried. C: container, V: virtual machine.
         */
        clusterType: string;
        /**
         * Used CPU of the cluster, in cores. This field may return null, indicating no valid value.
         */
        clusterUsedCpu: number;
        /**
         * Cluster used memory in GB. This field may return null, indicating no valid value.
         */
        clusterUsedMem: number;
        /**
         * The cluster version, may return null if not applicable.
         */
        clusterVersion: string;
        /**
         * CreationTime. Note: This field may return null, indicating that no valid values can be obtained.
         */
        createTime: string;
        /**
         * Deletion tag: true means it can be deleted, false means it cannot be deleted. Note: This field may return null, indicating no valid value.
         */
        deleteFlag: boolean;
        /**
         * Reason why the cluster cannot be deleted.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        deleteFlagReason: string;
        /**
         * Cluster instance number. This field may return null, indicating no valid value.
         */
        instanceCount: number;
        /**
         * Cluster normal instance number. This field may return null, indicating no valid value.
         */
        normalInstanceCount: number;
        /**
         * Control information returned to the frontend. This field may return null, indicating no valid value.
         */
        operationInfos: outputs.Tsf.GetClusterResultContentOperationInfo[];
        /**
         * Cluster running instance number. This field may return null, indicating no valid value.
         */
        runInstanceCount: number;
        /**
         * Number of available service instances in the cluster. Note: This field may return null, indicating no valid value.
         */
        runServiceInstanceCount: number;
        /**
         * Cluster subnet ID. Note: This field may return null, indicating no valid values.
         */
        subnetId: string;
        /**
         * region ID of TSF.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        tsfRegionId: string;
        /**
         * region name of TSF.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        tsfRegionName: string;
        /**
         * Zone Id of TSF.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        tsfZoneId: string;
        /**
         * Zone name of TSF.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        tsfZoneName: string;
        /**
         * last update time.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        updateTime: string;
        /**
         * Private network ID of the cluster. Note: This field may return null, indicating no valid value.
         */
        vpcId: string;
    }

    export interface GetClusterResultContentOperationInfo {
        /**
         * Add instance button control information, Note: This field may return null, indicating that no valid value is obtained.
         */
        addInstances: outputs.Tsf.GetClusterResultContentOperationInfoAddInstance[];
        /**
         * Control information for destroying machine, may return null if no valid value is obtained.
         */
        destroys: outputs.Tsf.GetClusterResultContentOperationInfoDestroy[];
        /**
         * Control information of the initialization button returned to the front end. Note: This field may return null, indicating no valid value.
         */
        inits: outputs.Tsf.GetClusterResultContentOperationInfoInit[];
    }

    export interface GetClusterResultContentOperationInfoAddInstance {
        /**
         * Reason for not displaying. Note: This field may return null, indicating no valid value.
         */
        disabledReason: string;
        /**
         * The availability of the button (whether it is clickable) may return null indicating that the information is not available.
         */
        enabled: boolean;
        /**
         * Whether to display the button. Note: This field may return null, indicating that no valid value was found.
         */
        supported: boolean;
    }

    export interface GetClusterResultContentOperationInfoDestroy {
        /**
         * Reason for not displaying. Note: This field may return null, indicating no valid value.
         */
        disabledReason: string;
        /**
         * The availability of the button (whether it is clickable) may return null indicating that the information is not available.
         */
        enabled: boolean;
        /**
         * Whether to display the button. Note: This field may return null, indicating that no valid value was found.
         */
        supported: boolean;
    }

    export interface GetClusterResultContentOperationInfoInit {
        /**
         * Reason for not displaying. Note: This field may return null, indicating no valid value.
         */
        disabledReason: string;
        /**
         * The availability of the button (whether it is clickable) may return null indicating that the information is not available.
         */
        enabled: boolean;
        /**
         * Whether to display the button. Note: This field may return null, indicating that no valid value was found.
         */
        supported: boolean;
    }

    export interface GetMicroserviceResult {
        /**
         * Microservice list information. Note: This field may return null, indicating that no valid value can be obtained.
         */
        contents: outputs.Tsf.GetMicroserviceResultContent[];
        /**
         * Microservice paging list information. Note: This field may return null, indicating that no valid value can be obtained.
         */
        totalCount: number;
    }

    export interface GetMicroserviceResultContent {
        /**
         * CreationTime. Note: This field may return null, indicating that no valid values can be obtained.
         */
        createTime: number;
        /**
         * offline instance count.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        criticalInstanceCount: number;
        /**
         * Microservice description. Note: This field may return null, indicating that no valid value can be obtained.
         */
        microserviceDesc: string;
        /**
         * Microservice Id. Note: This field may return null, indicating that no valid value can be obtained.
         */
        microserviceId: string;
        /**
         * Microservice name. Note: This field may return null, indicating that no valid value can be obtained.
         */
        microserviceName: string;
        /**
         * namespace id.
         */
        namespaceId: string;
        /**
         * run instance count in namespace.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        runInstanceCount: number;
        /**
         * last update time.  Note: This field may return null, indicating that no valid values can be obtained.
         */
        updateTime: number;
    }

    export interface GetUnitRulesResult {
        /**
         * record entity list.
         */
        contents: outputs.Tsf.GetUnitRulesResultContent[];
        /**
         * total number of records.
         */
        totalCount: number;
    }

    export interface GetUnitRulesResultContent {
        /**
         * created time.
         */
        createdTime: string;
        /**
         * Rule description.
         */
        description: string;
        /**
         * gateway instance id.
         */
        gatewayInstanceId: string;
        /**
         * rule ID.
         */
        id: string;
        /**
         * rule item name.
         */
        name: string;
        /**
         * Enabled state, disabled: unpublished, enabled: published.
         */
        status: string;
        /**
         * list of rule items.
         */
        unitRuleItemLists: outputs.Tsf.GetUnitRulesResultContentUnitRuleItemList[];
        /**
         * Updated time.
         */
        updatedTime: string;
    }

    export interface GetUnitRulesResultContentUnitRuleItemList {
        /**
         * Rule description.
         */
        description: string;
        /**
         * Destination Namespace ID.
         */
        destNamespaceId: string;
        /**
         * destination namespace name.
         */
        destNamespaceName: string;
        /**
         * rule ID.
         */
        id: string;
        /**
         * rule item name.
         */
        name: string;
        /**
         * Rule order, the smaller the higher the priority: the default is 0.
         */
        priority: number;
        /**
         * Logical relationship: AND/OR.
         */
        relationship: string;
        /**
         * Unitization rule ID.
         */
        unitRuleId: string;
        /**
         * List of rule labels.
         */
        unitRuleTagLists: outputs.Tsf.GetUnitRulesResultContentUnitRuleItemListUnitRuleTagList[];
    }

    export interface GetUnitRulesResultContentUnitRuleItemListUnitRuleTagList {
        /**
         * rule ID.
         */
        id: string;
        /**
         * tag name.
         */
        tagField: string;
        /**
         * Operator: IN/NOT_IN/EQUAL/NOT_EQUAL/REGEX.
         */
        tagOperator: string;
        /**
         * Tag Type: U(User Tag).
         */
        tagType: string;
        /**
         * tag value.
         */
        tagValue: string;
        /**
         * Unitization rule item ID.
         */
        unitRuleItemId: string;
    }

    export interface InstancesAttachmentInstanceAdvancedSettings {
        /**
         * Dockerd --graph specifies the value, default is /var/lib/docker Note: This field may return null, indicating that no valid values can be obtained.
         */
        dockerGraphPath: string;
        /**
         * Data disk mount point, data disks are not mounted by default. Data disks with formatted ext3, ext4, xfs file systems will be mounted directly, other file systems or unformatted data disks will be automatically formatted as ext4 and mounted. Please back up your data! This setting does not take effect for cloud servers with no data disks or multiple data disks. Note: This field may return null, indicating that no valid values can be obtained.
         */
        mountTarget: string;
    }

    export interface LaneLaneGroupList {
        /**
         * application ID.
         */
        applicationId?: string;
        /**
         * application name.
         */
        applicationName?: string;
        /**
         * cluster type.
         */
        clusterType?: string;
        /**
         * creation time.
         */
        createTime?: number;
        /**
         * Whether to enter the application.
         */
        entrance: boolean;
        /**
         * Deployment group ID.
         */
        groupId: string;
        /**
         * deployment group name.
         */
        groupName?: string;
        /**
         * Swimlane deployment group ID.
         */
        laneGroupId?: string;
        /**
         * Lane ID.
         */
        laneId?: string;
        /**
         * Namespace ID.
         */
        namespaceId?: string;
        /**
         * namespace name.
         */
        namespaceName?: string;
        /**
         * update time.
         */
        updateTime?: number;
    }

    export interface LaneRuleRuleTagList {
        /**
         * creation time.
         */
        createTime: number;
        /**
         * lane rule ID.
         */
        laneRuleId: string;
        /**
         * label ID.
         */
        tagId: string;
        /**
         * label name.
         */
        tagName: string;
        /**
         * label operator.
         */
        tagOperator: string;
        /**
         * tag value.
         */
        tagValue: string;
        /**
         * update time.
         */
        updateTime: number;
    }

    export interface TaskAdvanceSettings {
        /**
         * Subtask single-machine concurrency limit, the default value is 2.
         */
        subTaskConcurrency?: number;
    }

    export interface TaskShardArgument {
        /**
         * Sharding parameter KEY, integer, range [1,1000].
         */
        shardKey: number;
        /**
         * Shard parameter VALUE.
         */
        shardValue: string;
    }

    export interface TaskTaskRule {
        /**
         * Cron type rule, cron expression.
         */
        expression?: string;
        /**
         * time interval, in milliseconds.
         */
        repeatInterval?: number;
        /**
         * trigger rule type, Cron/Repeat.
         */
        ruleType: string;
    }

    export interface UnitRuleUnitRuleItemList {
        /**
         * rule description.
         */
        description?: string;
        /**
         * destination namespace ID.
         */
        destNamespaceId: string;
        /**
         * destination namespace name.
         */
        destNamespaceName: string;
        /**
         * rule item name.
         */
        name: string;
        /**
         * rule order, the smaller the higher the priority: the default is 0.
         */
        priority?: number;
        /**
         * logical relationship: AND/OR.
         */
        relationship: string;
        /**
         * rule item ID.
         */
        ruleId: string;
        /**
         * Unitization rule ID.
         */
        unitRuleId: string;
        /**
         * list of rule labels.
         */
        unitRuleTagLists?: outputs.Tsf.UnitRuleUnitRuleItemListUnitRuleTagList[];
    }

    export interface UnitRuleUnitRuleItemListUnitRuleTagList {
        /**
         * rule ID.
         */
        ruleId: string;
        /**
         * label name.
         */
        tagField: string;
        /**
         * Operator: IN/NOT_IN/EQUAL/NOT_EQUAL/REGEX.
         */
        tagOperator: string;
        /**
         * Tag Type: U(User Tag).
         */
        tagType: string;
        /**
         * tag value.
         */
        tagValue: string;
        /**
         * Unitization rule item ID.
         */
        unitRuleItemId: string;
    }
}

export namespace Vod {
    export interface AdaptiveDynamicStreamingTemplateStreamInfo {
        /**
         * Audio parameter information.
         */
        audio: outputs.Vod.AdaptiveDynamicStreamingTemplateStreamInfoAudio;
        /**
         * Whether to remove audio stream. Valid values: `false`: no, `true`: yes. `false` by default.
         */
        removeAudio?: boolean;
        /**
         * Video parameter information.
         */
        video: outputs.Vod.AdaptiveDynamicStreamingTemplateStreamInfoVideo;
    }

    export interface AdaptiveDynamicStreamingTemplateStreamInfoAudio {
        /**
         * Audio channel system. Valid values: mono, dual, stereo. Default value: dual.
         */
        audioChannel?: string;
        /**
         * Audio stream bitrate in Kbps. Value range: `0` and `[26, 256]`. If the value is `0`, the bitrate of the audio stream will be the same as that of the original audio.
         */
        bitrate: number;
        /**
         * Audio stream encoder. Valid value are: `libfdkAac` and `libmp3lame`. while `libfdkAac` is recommended.
         */
        codec: string;
        /**
         * Audio stream sample rate. Valid values: `32000`, `44100`, `48000`Hz.
         */
        sampleRate: number;
    }

    export interface AdaptiveDynamicStreamingTemplateStreamInfoVideo {
        /**
         * Bitrate of video stream in Kbps. Value range: `0` and `[128, 35000]`. If the value is `0`, the bitrate of the video will be the same as that of the source video.
         */
        bitrate: number;
        /**
         * Video stream encoder. Valid values: `libx264`,`libx265`,`av1`. `libx264`: H.264, `libx265`: H.265, `av1`: AOMedia Video 1. Currently, a resolution within 640x480 must be specified for `H.265`. and the `av1` container only supports mp4.
         */
        codec: string;
        /**
         * Fill type. Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. Default value: black. Note: this field may return null, indicating that no valid values can be obtained.
         */
        fillType?: string;
        /**
         * Video frame rate in Hz. Value range: `[0, 60]`. If the value is `0`, the frame rate will be the same as that of the source video.
         */
        fps: number;
        /**
         * Maximum value of the height (or short side) of a video stream in px. Value range: `0` and `[128, 4096]`. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`. Note: this field may return null, indicating that no valid values can be obtained.
         */
        height?: number;
        /**
         * Resolution adaption. Valid values: `true`,`false`. `true`: enabled. In this case, `width` represents the long side of a video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while `height` the height. Default value: `true`. Note: this field may return null, indicating that no valid values can be obtained.
         */
        resolutionAdaptive?: boolean;
        /**
         * Maximum value of the width (or long side) of a video stream in px. Value range: `0` and `[128, 4096]`. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`. Note: this field may return null, indicating that no valid values can be obtained.
         */
        width?: number;
    }

    export interface GetAdaptiveDynamicStreamingTemplatesTemplateList {
        /**
         * Template description.
         */
        comment: string;
        /**
         * Creation time of template in ISO date format.
         */
        createTime: string;
        /**
         * Unique ID filter of adaptive dynamic streaming template.
         */
        definition: string;
        /**
         * Whether to prohibit transcoding video from low bitrate to high bitrate. `false`: no, `true`: yes.
         */
        disableHigherVideoBitrate: boolean;
        /**
         * Whether to prohibit transcoding from low resolution to high resolution. `false`: no, `true`: yes.
         */
        disableHigherVideoResolution: boolean;
        /**
         * DRM scheme type.
         */
        drmType: string;
        /**
         * Adaptive bitstream format.
         */
        format: string;
        /**
         * Template name.
         */
        name: string;
        /**
         * List of AdaptiveStreamTemplate parameter information of output substream for adaptive bitrate streaming.
         */
        streamInfos: outputs.Vod.GetAdaptiveDynamicStreamingTemplatesTemplateListStreamInfo[];
        /**
         * Template type filter. Valid values: `Preset`, `Custom`. `Preset`: preset template; `Custom`: custom template.
         */
        type: string;
        /**
         * Last modified time of template in ISO date format.
         */
        updateTime: string;
    }

    export interface GetAdaptiveDynamicStreamingTemplatesTemplateListStreamInfo {
        /**
         * Audio parameter information.
         */
        audios: outputs.Vod.GetAdaptiveDynamicStreamingTemplatesTemplateListStreamInfoAudio[];
        /**
         * Whether to remove audio stream. `false`: no, `true`: yes.
         */
        removeAudio: boolean;
        /**
         * Video parameter information.
         */
        videos: outputs.Vod.GetAdaptiveDynamicStreamingTemplatesTemplateListStreamInfoVideo[];
    }

    export interface GetAdaptiveDynamicStreamingTemplatesTemplateListStreamInfoAudio {
        /**
         * Audio channel system. Valid values: mono, dual, stereo.
         */
        audioChannel: string;
        /**
         * Bitrate of video stream in Kbps. Value range: `0` and `[128, 35000]`. If the value is `0`, the bitrate of the video will be the same as that of the source video.
         */
        bitrate: number;
        /**
         * Video stream encoder. Valid values: `libx264`, `libx265`, `av1`.`libx264`: H.264, `libx265`: H.265, `av1`: AOMedia Video 1. Currently, a resolution within 640x480 must be specified for `H.265`. and the `av1` container only supports mp4.
         */
        codec: string;
        /**
         * Audio stream sample rate. Valid values: `32000`, `44100`, `48000`. Unit is HZ.
         */
        sampleRate: number;
    }

    export interface GetAdaptiveDynamicStreamingTemplatesTemplateListStreamInfoVideo {
        /**
         * Bitrate of video stream in Kbps. Value range: `0` and `[128, 35000]`. If the value is `0`, the bitrate of the video will be the same as that of the source video.
         */
        bitrate: number;
        /**
         * Video stream encoder. Valid values: `libx264`, `libx265`, `av1`.`libx264`: H.264, `libx265`: H.265, `av1`: AOMedia Video 1. Currently, a resolution within 640x480 must be specified for `H.265`. and the `av1` container only supports mp4.
         */
        codec: string;
        /**
         * Fill type. Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        fillType: string;
        /**
         * Video frame rate in Hz. Value range: `[0, 60]`. If the value is `0`, the frame rate will be the same as that of the source video.
         */
        fps: number;
        /**
         * Maximum value of the height (or short side) of a video stream in px. Value range: `0` and `[128, 4096]`. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Note: this field may return null, indicating that no valid values can be obtained.
         */
        height: number;
        /**
         * Resolution adaption. Valid values: `true`,`false`. `true`: enabled. In this case, `width` represents the long side of a video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while `height` the height. Note: this field may return null, indicating that no valid values can be obtained.
         */
        resolutionAdaptive: boolean;
        /**
         * Maximum value of the width (or long side) of a video stream in px. Value range: `0` and `[128, 4096]`. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Note: this field may return null, indicating that no valid values can be obtained.
         */
        width: number;
    }

    export interface GetImageSpriteTemplatesTemplateList {
        /**
         * Subimage column count of an image sprite.
         */
        columnCount: number;
        /**
         * Template description.
         */
        comment: string;
        /**
         * Creation time of template in ISO date format.
         */
        createTime: string;
        /**
         * Unique ID filter of image sprite template.
         */
        definition: string;
        /**
         * Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks.
         */
        fillType: string;
        /**
         * Maximum value of the `height` (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used.
         */
        height: number;
        /**
         * Name of a time point screen capturing template.
         */
        name: string;
        /**
         * Resolution adaption. Valid values: `true`: enabled. In this case, `width` represents the long side of a video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while `height` the height.
         */
        resolutionAdaptive: boolean;
        /**
         * Subimage row count of an image sprite.
         */
        rowCount: number;
        /**
         * Sampling interval. If `sampleType` is `Percent`, sampling will be performed at an interval of the specified percentage. If `sampleType` is `Time`, sampling will be performed at the specified time interval in seconds.
         */
        sampleInterval: number;
        /**
         * Sampling type. Valid values: `Percent`, `Time`. `Percent`: by percent. `Time`: by time interval.
         */
        sampleType: string;
        /**
         * Template type filter. Valid values: `Preset`, `Custom`. `Preset`: preset template; `Custom`: custom template.
         */
        type: string;
        /**
         * Last modified time of template in ISO date format.
         */
        updateTime: string;
        /**
         * Maximum value of the `width` (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, width will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used.
         */
        width: number;
    }

    export interface GetProcedureTemplatesTemplateList {
        /**
         * Template description.
         */
        comment: string;
        /**
         * Creation time of template in ISO date format.
         */
        createTime: string;
        /**
         * Parameter of video processing task.
         */
        mediaProcessTasks: outputs.Vod.GetProcedureTemplatesTemplateListMediaProcessTask[];
        /**
         * Name of procedure template.
         */
        name: string;
        /**
         * Template type filter. Valid values: `Preset`, `Custom`. `Preset`: preset template; `Custom`: custom template.
         */
        type: string;
        /**
         * Last modified time of template in ISO date format.
         */
        updateTime: string;
    }

    export interface GetProcedureTemplatesTemplateListMediaProcessTask {
        /**
         * List of adaptive bitrate streaming tasks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        adaptiveDynamicStreamingTaskLists: outputs.Vod.GetProcedureTemplatesTemplateListMediaProcessTaskAdaptiveDynamicStreamingTaskList[];
        /**
         * List of animated image generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        animatedGraphicTaskLists: outputs.Vod.GetProcedureTemplatesTemplateListMediaProcessTaskAnimatedGraphicTaskList[];
        /**
         * List of cover generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        coverBySnapshotTaskLists: outputs.Vod.GetProcedureTemplatesTemplateListMediaProcessTaskCoverBySnapshotTaskList[];
        /**
         * List of image sprite generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        imageSpriteTaskLists: outputs.Vod.GetProcedureTemplatesTemplateListMediaProcessTaskImageSpriteTaskList[];
        /**
         * List of sampled screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        sampleSnapshotTaskLists: outputs.Vod.GetProcedureTemplatesTemplateListMediaProcessTaskSampleSnapshotTaskList[];
        /**
         * List of time point screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        snapshotByTimeOffsetTaskLists: outputs.Vod.GetProcedureTemplatesTemplateListMediaProcessTaskSnapshotByTimeOffsetTaskList[];
        /**
         * List of transcoding tasks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        transcodeTaskLists: outputs.Vod.GetProcedureTemplatesTemplateListMediaProcessTaskTranscodeTaskList[];
    }

    export interface GetProcedureTemplatesTemplateListMediaProcessTaskAdaptiveDynamicStreamingTaskList {
        /**
         * Video transcoding template ID.
         */
        definition: string;
        /**
         * List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        watermarkLists: outputs.Vod.GetProcedureTemplatesTemplateListMediaProcessTaskAdaptiveDynamicStreamingTaskListWatermarkList[];
    }

    export interface GetProcedureTemplatesTemplateListMediaProcessTaskAdaptiveDynamicStreamingTaskListWatermarkList {
        /**
         * Video transcoding template ID.
         */
        definition: string;
        /**
         * End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
         */
        endTimeOffset?: number;
        /**
         * Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
         */
        startTimeOffset?: number;
        svgContent?: string;
        textContent?: string;
    }

    export interface GetProcedureTemplatesTemplateListMediaProcessTaskAnimatedGraphicTaskList {
        /**
         * Video transcoding template ID.
         */
        definition: string;
        /**
         * End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
         */
        endTimeOffset: number;
        /**
         * Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
         */
        startTimeOffset: number;
    }

    export interface GetProcedureTemplatesTemplateListMediaProcessTaskCoverBySnapshotTaskList {
        /**
         * Video transcoding template ID.
         */
        definition: string;
        /**
         * Screen capturing mode. Valid values: `Time`, `Percent`. `Time`: screen captures by time point, `Percent`: screen captures by percentage.
         */
        positionType: string;
        /**
         * Screenshot position: For time point screen capturing, this means to take a screenshot at a specified time point (in seconds) and use it as the cover. For percentage screen capturing, this value means to take a screenshot at a specified percentage of the video duration and use it as the cover.
         */
        positionValue: number;
        /**
         * List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        watermarkLists: outputs.Vod.GetProcedureTemplatesTemplateListMediaProcessTaskCoverBySnapshotTaskListWatermarkList[];
    }

    export interface GetProcedureTemplatesTemplateListMediaProcessTaskCoverBySnapshotTaskListWatermarkList {
        /**
         * Video transcoding template ID.
         */
        definition: string;
        /**
         * End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
         */
        endTimeOffset?: number;
        /**
         * Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
         */
        startTimeOffset?: number;
        svgContent?: string;
        textContent?: string;
    }

    export interface GetProcedureTemplatesTemplateListMediaProcessTaskImageSpriteTaskList {
        /**
         * Video transcoding template ID.
         */
        definition: string;
    }

    export interface GetProcedureTemplatesTemplateListMediaProcessTaskSampleSnapshotTaskList {
        /**
         * Video transcoding template ID.
         */
        definition: string;
        /**
         * List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        watermarkLists: outputs.Vod.GetProcedureTemplatesTemplateListMediaProcessTaskSampleSnapshotTaskListWatermarkList[];
    }

    export interface GetProcedureTemplatesTemplateListMediaProcessTaskSampleSnapshotTaskListWatermarkList {
        /**
         * Video transcoding template ID.
         */
        definition: string;
        /**
         * End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
         */
        endTimeOffset?: number;
        /**
         * Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
         */
        startTimeOffset?: number;
        svgContent?: string;
        textContent?: string;
    }

    export interface GetProcedureTemplatesTemplateListMediaProcessTaskSnapshotByTimeOffsetTaskList {
        /**
         * Video transcoding template ID.
         */
        definition: string;
        /**
         * The list of screenshot time points. `s` and `%` formats are supported: When a time point string ends with `s`, its unit is second. For example, `3.5s` means the 3.5th second of the video; When a time point string ends with `%`, it is marked with corresponding percentage of the video duration. For example, `10%` means that the time point is at the 10% of the video entire duration.
         */
        extTimeOffsetLists: string[];
        /**
         * List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        watermarkLists: outputs.Vod.GetProcedureTemplatesTemplateListMediaProcessTaskSnapshotByTimeOffsetTaskListWatermarkList[];
    }

    export interface GetProcedureTemplatesTemplateListMediaProcessTaskSnapshotByTimeOffsetTaskListWatermarkList {
        /**
         * Video transcoding template ID.
         */
        definition: string;
        /**
         * End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
         */
        endTimeOffset?: number;
        /**
         * Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
         */
        startTimeOffset?: number;
        svgContent?: string;
        textContent?: string;
    }

    export interface GetProcedureTemplatesTemplateListMediaProcessTaskTranscodeTaskList {
        /**
         * Video transcoding template ID.
         */
        definition: string;
        /**
         * List of blurs. Up to 10 ones can be supported.
         */
        mosaicLists: outputs.Vod.GetProcedureTemplatesTemplateListMediaProcessTaskTranscodeTaskListMosaicList[];
        /**
         * List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        watermarkLists: outputs.Vod.GetProcedureTemplatesTemplateListMediaProcessTaskTranscodeTaskListWatermarkList[];
    }

    export interface GetProcedureTemplatesTemplateListMediaProcessTaskTranscodeTaskListMosaicList {
        /**
         * Origin position, which currently can only be: `TopLeft`: the origin of coordinates is in the top-left corner of the video, and the origin of the blur is in the top-left corner of the image or text.
         */
        coordinateOrigin: string;
        /**
         * End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
         */
        endTimeOffset: number;
        /**
         * Blur height. `%` and `px` formats are supported: If the string ends in `%`, the `height` of the blur will be the specified percentage of the video height; for example, 10% means that Height is 10% of the video height; If the string ends in `px`, the `height` of the blur will be in px; for example, 100px means that Height is 100 px.
         */
        height: string;
        /**
         * Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
         */
        startTimeOffset: number;
        /**
         * Blur width. `%` and `px` formats are supported: If the string ends in `%`, the `width` of the blur will be the specified percentage of the video width; for example, 10% means that `width` is 10% of the video width; If the string ends in `px`, the `width` of the blur will be in px; for example, 100px means that Width is 100 px.
         */
        width: string;
        /**
         * The horizontal position of the origin of the blur relative to the origin of coordinates of the video. `%` and `px` formats are supported: If the string ends in `%`, the XPos of the blur will be the specified percentage of the video width; for example, 10% means that XPos is 10% of the video width; If the string ends in `px`, the XPos of the blur will be the specified px; for example, 100px means that XPos is 100 px.
         */
        xPos: string;
        /**
         * Vertical position of the origin of blur relative to the origin of coordinates of video. `%` and `px` formats are supported: If the string ends in `%`, the YPos of the blur will be the specified percentage of the video height; for example, 10% means that YPos is 10% of the video height; If the string ends in `px`, the YPos of the blur will be the specified px; for example, 100px means that YPos is 100 px.
         */
        yPos: string;
    }

    export interface GetProcedureTemplatesTemplateListMediaProcessTaskTranscodeTaskListWatermarkList {
        /**
         * Video transcoding template ID.
         */
        definition: string;
        /**
         * End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
         */
        endTimeOffset?: number;
        /**
         * Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
         */
        startTimeOffset?: number;
        svgContent?: string;
        textContent?: string;
    }

    export interface GetSnapshotByTimeOffsetTemplatesTemplateList {
        /**
         * Template description.
         */
        comment: string;
        /**
         * Creation time of template in ISO date format.
         */
        createTime: string;
        /**
         * Unique ID filter of snapshot by time offset template.
         */
        definition: string;
        /**
         * Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot `shorter` or `longer`; `black`: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. `white`: fill with white. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with white color blocks. `gauss`: fill with Gaussian blur. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with Gaussian blur.
         */
        fillType: string;
        /**
         * Image format. Valid values: `jpg`, `png`.
         */
        format: string;
        /**
         * Maximum value of the `height` (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used.
         */
        height: number;
        /**
         * Name of a time point screen capturing template.
         */
        name: string;
        /**
         * Resolution adaption. Valid values: `true`, `false`. `true`: enabled. In this case, `width` represents the long side of a video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while `height` the height.
         */
        resolutionAdaptive: boolean;
        /**
         * Template type filter. Valid values: `Preset`, `Custom`. `Preset`: preset template; `Custom`: custom template.
         */
        type: string;
        /**
         * Last modified time of template in ISO date format.
         */
        updateTime: string;
        /**
         * Maximum value of the `width` (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, width will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used.
         */
        width: number;
    }

    export interface GetSuperPlayerConfigsConfigList {
        /**
         * ID of the unencrypted adaptive bitrate streaming template that allows output, which is required if `drmSwitch` is `false`.
         */
        adaptiveDynamicStreamingDefinition: string;
        /**
         * Template description.
         */
        comment: string;
        /**
         * Creation time of template in ISO date format.
         */
        createTime: string;
        /**
         * Domain name used for playback. If it is left empty or set to `Default`, the domain name configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used.
         */
        domain: string;
        /**
         * Content of the DRM-protected adaptive bitrate streaming template that allows output, which is required if `drmSwitch` is `true`.
         */
        drmStreamingInfos: outputs.Vod.GetSuperPlayerConfigsConfigListDrmStreamingInfo[];
        /**
         * Switch of DRM-protected adaptive bitstream playback: `true`: enabled, indicating to play back only output adaptive bitstreams protected by DRM; `false`: disabled, indicating to play back unencrypted output adaptive bitstreams.
         */
        drmSwitch: boolean;
        /**
         * ID of the image sprite template that allows output.
         */
        imageSpriteDefinition: string;
        /**
         * Name of super player config.
         */
        name: string;
        /**
         * Display name of player for substreams with different resolutions. If this parameter is left empty or an empty array, the default configuration will be used: `min_edge_length: 240, name: LD`; `min_edge_length: 480, name: SD`; `min_edge_length: 720, name: HD`; `min_edge_length: 1080, name: FHD`; `min_edge_length: 1440, name: 2K`; `min_edge_length: 2160, name: 4K`; `min_edge_length: 4320, name: 8K`.
         */
        resolutionNames: outputs.Vod.GetSuperPlayerConfigsConfigListResolutionName[];
        /**
         * Scheme used for playback. If it is left empty or set to `Default`, the scheme configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. Other valid values: `HTTP`; `HTTPS`.
         */
        scheme: string;
        /**
         * Config type filter. Valid values: `Preset`, `Custom`. `Preset`: preset template; `Custom`: custom template.
         */
        type: string;
        /**
         * Last modified time of template in ISO date format.
         */
        updateTime: string;
    }

    export interface GetSuperPlayerConfigsConfigListDrmStreamingInfo {
        /**
         * ID of the adaptive dynamic streaming template whose protection type is `SimpleAES`.
         */
        simpleAesDefinition: string;
    }

    export interface GetSuperPlayerConfigsConfigListResolutionName {
        /**
         * Length of video short side in px.
         */
        minEdgeLength: number;
        /**
         * Name of super player config.
         */
        name: string;
    }

    export interface ProcedureTemplateMediaProcessTask {
        /**
         * List of adaptive bitrate streaming tasks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        adaptiveDynamicStreamingTaskLists?: outputs.Vod.ProcedureTemplateMediaProcessTaskAdaptiveDynamicStreamingTaskList[];
        /**
         * List of animated image generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        animatedGraphicTaskLists?: outputs.Vod.ProcedureTemplateMediaProcessTaskAnimatedGraphicTaskList[];
        /**
         * List of cover generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        coverBySnapshotTaskLists?: outputs.Vod.ProcedureTemplateMediaProcessTaskCoverBySnapshotTaskList[];
        /**
         * List of image sprite generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        imageSpriteTaskLists?: outputs.Vod.ProcedureTemplateMediaProcessTaskImageSpriteTaskList[];
        /**
         * List of sampled screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        sampleSnapshotTaskLists?: outputs.Vod.ProcedureTemplateMediaProcessTaskSampleSnapshotTaskList[];
        /**
         * List of time point screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        snapshotByTimeOffsetTaskLists?: outputs.Vod.ProcedureTemplateMediaProcessTaskSnapshotByTimeOffsetTaskList[];
        /**
         * List of transcoding tasks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        transcodeTaskLists?: outputs.Vod.ProcedureTemplateMediaProcessTaskTranscodeTaskList[];
    }

    export interface ProcedureTemplateMediaProcessTaskAdaptiveDynamicStreamingTaskList {
        /**
         * Adaptive bitrate streaming template ID.
         */
        definition: string;
        /**
         * List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        watermarkLists?: outputs.Vod.ProcedureTemplateMediaProcessTaskAdaptiveDynamicStreamingTaskListWatermarkList[];
    }

    export interface ProcedureTemplateMediaProcessTaskAdaptiveDynamicStreamingTaskListWatermarkList {
        /**
         * Watermarking template ID.
         */
        definition: string;
        /**
         * End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
         */
        endTimeOffset?: number;
        /**
         * Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
         */
        startTimeOffset?: number;
        /**
         * SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
         */
        svgContent?: string;
        /**
         * Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
         */
        textContent?: string;
    }

    export interface ProcedureTemplateMediaProcessTaskAnimatedGraphicTaskList {
        /**
         * Animated image generating template ID.
         */
        definition: string;
        /**
         * End time of animated image in video in seconds.
         */
        endTimeOffset: number;
        /**
         * Start time of animated image in video in seconds.
         */
        startTimeOffset: number;
    }

    export interface ProcedureTemplateMediaProcessTaskCoverBySnapshotTaskList {
        /**
         * Time point screen capturing template ID.
         */
        definition: string;
        /**
         * Screen capturing mode. Valid values: `Time`, `Percent`. `Time`: screen captures by time point, `Percent`: screen captures by percentage.
         */
        positionType: string;
        /**
         * Screenshot position: For time point screen capturing, this means to take a screenshot at a specified time point (in seconds) and use it as the cover. For percentage screen capturing, this value means to take a screenshot at a specified percentage of the video duration and use it as the cover.
         */
        positionValue: number;
        /**
         * List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        watermarkLists?: outputs.Vod.ProcedureTemplateMediaProcessTaskCoverBySnapshotTaskListWatermarkList[];
    }

    export interface ProcedureTemplateMediaProcessTaskCoverBySnapshotTaskListWatermarkList {
        /**
         * Watermarking template ID.
         */
        definition: string;
        /**
         * End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
         */
        endTimeOffset?: number;
        /**
         * Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
         */
        startTimeOffset?: number;
        /**
         * SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
         */
        svgContent?: string;
        /**
         * Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
         */
        textContent?: string;
    }

    export interface ProcedureTemplateMediaProcessTaskImageSpriteTaskList {
        /**
         * Image sprite generating template ID.
         */
        definition: string;
    }

    export interface ProcedureTemplateMediaProcessTaskSampleSnapshotTaskList {
        /**
         * Sampled screen capturing template ID.
         */
        definition: string;
        /**
         * List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        watermarkLists?: outputs.Vod.ProcedureTemplateMediaProcessTaskSampleSnapshotTaskListWatermarkList[];
    }

    export interface ProcedureTemplateMediaProcessTaskSampleSnapshotTaskListWatermarkList {
        /**
         * Watermarking template ID.
         */
        definition: string;
        /**
         * End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
         */
        endTimeOffset?: number;
        /**
         * Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
         */
        startTimeOffset?: number;
        /**
         * SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
         */
        svgContent?: string;
        /**
         * Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
         */
        textContent?: string;
    }

    export interface ProcedureTemplateMediaProcessTaskSnapshotByTimeOffsetTaskList {
        /**
         * Time point screen capturing template ID.
         */
        definition: string;
        /**
         * The list of screenshot time points. `s` and `%` formats are supported: When a time point string ends with `s`, its unit is second. For example, `3.5s` means the 3.5th second of the video; When a time point string ends with `%`, it is marked with corresponding percentage of the video duration. For example, `10%` means that the time point is at the 10% of the video entire duration.
         */
        extTimeOffsetLists?: string[];
        /**
         * List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        watermarkLists?: outputs.Vod.ProcedureTemplateMediaProcessTaskSnapshotByTimeOffsetTaskListWatermarkList[];
    }

    export interface ProcedureTemplateMediaProcessTaskSnapshotByTimeOffsetTaskListWatermarkList {
        /**
         * Watermarking template ID.
         */
        definition: string;
        /**
         * End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
         */
        endTimeOffset?: number;
        /**
         * Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
         */
        startTimeOffset?: number;
        /**
         * SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
         */
        svgContent?: string;
        /**
         * Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
         */
        textContent?: string;
    }

    export interface ProcedureTemplateMediaProcessTaskTranscodeTaskList {
        /**
         * Video transcoding template ID.
         */
        definition: string;
        /**
         * List of blurs. Up to 10 ones can be supported.
         */
        mosaicLists?: outputs.Vod.ProcedureTemplateMediaProcessTaskTranscodeTaskListMosaicList[];
        /**
         * List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
         */
        watermarkLists?: outputs.Vod.ProcedureTemplateMediaProcessTaskTranscodeTaskListWatermarkList[];
    }

    export interface ProcedureTemplateMediaProcessTaskTranscodeTaskListMosaicList {
        /**
         * Origin position, which currently can only be: `TopLeft`: the origin of coordinates is in the top-left corner of the video, and the origin of the blur is in the top-left corner of the image or text. Default value: TopLeft.
         */
        coordinateOrigin?: string;
        /**
         * End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
         */
        endTimeOffset?: number;
        /**
         * Blur height. `%` and `px` formats are supported: If the string ends in `%`, the `height` of the blur will be the specified percentage of the video height; for example, 10% means that Height is 10% of the video height; If the string ends in `px`, the `height` of the blur will be in px; for example, 100px means that Height is 100 px. Default value: `10%`.
         */
        height?: string;
        /**
         * Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
         */
        startTimeOffset?: number;
        /**
         * Blur width. `%` and `px` formats are supported: If the string ends in `%`, the `width` of the blur will be the specified percentage of the video width; for example, 10% means that `width` is 10% of the video width; If the string ends in `px`, the `width` of the blur will be in px; for example, 100px means that Width is 100 px. Default value: `10%`.
         */
        width?: string;
        /**
         * The horizontal position of the origin of the blur relative to the origin of coordinates of the video. `%` and `px` formats are supported: If the string ends in `%`, the XPos of the blur will be the specified percentage of the video width; for example, 10% means that XPos is 10% of the video width; If the string ends in `px`, the XPos of the blur will be the specified px; for example, 100px means that XPos is 100 px. Default value: `0px`.
         */
        xPos?: string;
        /**
         * Vertical position of the origin of blur relative to the origin of coordinates of video. `%` and `px` formats are supported: If the string ends in `%`, the YPos of the blur will be the specified percentage of the video height; for example, 10% means that YPos is 10% of the video height; If the string ends in `px`, the YPos of the blur will be the specified px; for example, 100px means that YPos is 100 px. Default value: `0px`.
         */
        yPos?: string;
    }

    export interface ProcedureTemplateMediaProcessTaskTranscodeTaskListWatermarkList {
        /**
         * Watermarking template ID.
         */
        definition: string;
        /**
         * End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
         */
        endTimeOffset?: number;
        /**
         * Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
         */
        startTimeOffset?: number;
        /**
         * SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
         */
        svgContent?: string;
        /**
         * Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
         */
        textContent?: string;
    }

    export interface SuperPlayerConfigDrmStreamingInfo {
        /**
         * ID of the adaptive dynamic streaming template whose protection type is `SimpleAES`.
         */
        simpleAesDefinition?: string;
    }

    export interface SuperPlayerConfigResolutionName {
        /**
         * Length of video short side in px.
         */
        minEdgeLength: number;
        /**
         * Display name.
         */
        name: string;
    }

}

export namespace Vpc {
    export interface FlowLogFlowLogStorage {
        /**
         * Specify storage instance id, required while `storageType` is `ckafka`.
         */
        storageId: string;
        /**
         * Specify storage topic id, required while `storageType` is `ckafka`.
         */
        storageTopic: string;
    }

    export interface GetAclsAclList {
        /**
         * Creation time.
         */
        createTime: string;
        /**
         * Outbound rules of the network ACL.
         */
        egresses: outputs.Vpc.GetAclsAclListEgress[];
        /**
         * ID of the network ACL instance.
         */
        id: string;
        /**
         * Inbound rules of the network ACL.
         */
        ingresses: outputs.Vpc.GetAclsAclListIngress[];
        /**
         * Name of the network ACL.
         */
        name: string;
        /**
         * Subnets associated with the network ACL.
         */
        subnets: outputs.Vpc.GetAclsAclListSubnet[];
        /**
         * ID of the VPC instance.
         */
        vpcId: string;
    }

    export interface GetAclsAclListEgress {
        /**
         * The IPv4 CIDR of the subnet.
         */
        cidrBlock: string;
        /**
         * Rule description.
         */
        description: string;
        /**
         * Rule policy of Network ACL.
         */
        policy: string;
        /**
         * Range of the port.
         */
        port: string;
        /**
         * Type of IP protocol.
         */
        protocol: string;
    }

    export interface GetAclsAclListIngress {
        /**
         * The IPv4 CIDR of the subnet.
         */
        cidrBlock: string;
        /**
         * Rule description.
         */
        description: string;
        /**
         * Rule policy of Network ACL.
         */
        policy: string;
        /**
         * Range of the port.
         */
        port: string;
        /**
         * Type of IP protocol.
         */
        protocol: string;
    }

    export interface GetAclsAclListSubnet {
        /**
         * The IPv4 CIDR of the subnet.
         */
        cidrBlock: string;
        /**
         * Subnet instance ID.
         */
        subnetId: string;
        /**
         * Subnet name.
         */
        subnetName: string;
        /**
         * Tags of the subnet.
         */
        tags: {[key: string]: any};
        /**
         * ID of the VPC instance.
         */
        vpcId: string;
    }

    export interface GetInstancesInstanceList {
        /**
         * Filter VPC with this CIDR.
         */
        cidrBlock: string;
        /**
         * Creation time of VPC.
         */
        createTime: string;
        /**
         * A list of DNS servers which can be used within the VPC.
         */
        dnsServers: string[];
        /**
         * Filter default or no default VPC.
         */
        isDefault: boolean;
        /**
         * Indicates whether VPC multicast is enabled.
         */
        isMulticast: boolean;
        /**
         * Name of the VPC to be queried.
         */
        name: string;
        /**
         * A ID list of subnets within this VPC.
         */
        subnetIds: string[];
        /**
         * Tags of the VPC to be queried.
         */
        tags: {[key: string]: any};
        /**
         * ID of the VPC to be queried.
         */
        vpcId: string;
    }

    export interface GetRouteTablesInstanceList {
        /**
         * Creation time of the routing table.
         */
        createTime: string;
        /**
         * Indicates whether it is the default routing table.
         */
        isDefault: boolean;
        /**
         * Name of the routing table to be queried.
         */
        name: string;
        /**
         * Detailed information of each entry of the route table.
         */
        routeEntryInfos: outputs.Vpc.GetRouteTablesInstanceListRouteEntryInfo[];
        /**
         * ID of the routing table to be queried.
         */
        routeTableId: string;
        /**
         * List of subnet IDs bound to the route table.
         */
        subnetIds: string[];
        /**
         * Tags of the routing table to be queried.
         */
        tags: {[key: string]: any};
        /**
         * ID of the VPC to be queried.
         */
        vpcId: string;
    }

    export interface GetRouteTablesInstanceListRouteEntryInfo {
        /**
         * Description information user defined for a route table rule.
         */
        description: string;
        /**
         * The destination address block.
         */
        destinationCidrBlock: string;
        /**
         * ID of next-hop gateway. Note: when 'next_type' is EIP, GatewayId will fix the value `0`.
         */
        nextHub: string;
        /**
         * Type of next-hop, and available values include `CVM`, `VPN`, `DIRECTCONNECT`, `PEERCONNECTION`, `SSLVPN`, `NAT`, `NORMAL_CVM`, `EIP` and `CCN`.
         */
        nextType: string;
        /**
         * ID of a route table entry.
         */
        routeEntryId: string;
    }

    export interface GetSubnetsInstanceList {
        /**
         * Zone of the subnet to be queried.
         */
        availabilityZone: string;
        /**
         * The number of available IPs.
         */
        availableIpCount: number;
        /**
         * Filter subnet with this CIDR.
         */
        cidrBlock: string;
        /**
         * Creation time of the subnet resource.
         */
        createTime: string;
        /**
         * Filter default or no default subnets.
         */
        isDefault: boolean;
        /**
         * Indicates whether multicast is enabled.
         */
        isMulticast: boolean;
        /**
         * Name of the subnet to be queried.
         */
        name: string;
        /**
         * ID of the routing table.
         */
        routeTableId: string;
        /**
         * ID of the subnet to be queried.
         */
        subnetId: string;
        /**
         * Tags of the subnet to be queried.
         */
        tags: {[key: string]: any};
        /**
         * ID of the VPC to be queried.
         */
        vpcId: string;
    }

}

export namespace Vpn {
    export interface ConnectionSecurityGroupPolicy {
        /**
         * Local cidr block.
         */
        localCidrBlock: string;
        /**
         * Remote cidr block list.
         */
        remoteCidrBlocks: string[];
    }

    export interface CustomerGatewayConfigurationDownloadCustomerGatewayVendor {
        /**
         * Platform.
         */
        platform: string;
        /**
         * SoftwareVersion.
         */
        softwareVersion: string;
        /**
         * VendorName.
         */
        vendorName: string;
    }

    export interface GetConnectionsConnectionList {
        /**
         * Create time of the VPN connection.
         */
        createTime: string;
        /**
         * Customer gateway ID of the VPN connection.
         */
        customerGatewayId: string;
        /**
         * Encrypt proto of the VPN connection.
         */
        encryptProto: string;
        /**
         * ID of the VPN connection.
         */
        id: string;
        /**
         * DH group name of the IKE operation specification.
         */
        ikeDhGroupName: string;
        /**
         * Exchange mode of the IKE operation specification.
         */
        ikeExchangeMode: string;
        /**
         * Local address of the IKE operation specification.
         */
        ikeLocalAddress: string;
        /**
         * Local FQDN name of the IKE operation specification.
         */
        ikeLocalFqdnName: string;
        /**
         * Local identity of the IKE operation specification.
         */
        ikeLocalIdentity: string;
        /**
         * Proto authenticate algorithm of the IKE operation specification.
         */
        ikeProtoAuthenAlgorithm: string;
        /**
         * Proto encrypt algorithm of the IKE operation specification.
         */
        ikeProtoEncryAlgorithm: string;
        /**
         * Remote address of the IKE operation specification.
         */
        ikeRemoteAddress: string;
        /**
         * Remote FQDN name of the IKE operation specification.
         */
        ikeRemoteFqdnName: string;
        /**
         * Remote identity of the IKE operation specification.
         */
        ikeRemoteIdentity: string;
        /**
         * SA lifetime of the IKE operation specification, unit is `second`.
         */
        ikeSaLifetimeSeconds: number;
        /**
         * Version of the IKE operation specification.
         */
        ikeVersion: string;
        /**
         * Encrypt algorithm of the IPSEC operation specification.
         */
        ipsecEncryptAlgorithm: string;
        /**
         * Integrity algorithm of the IPSEC operation specification.
         */
        ipsecIntegrityAlgorithm: string;
        /**
         * PFS DH group name of the IPSEC operation specification.
         */
        ipsecPfsDhGroup: string;
        /**
         * SA lifetime of the IPSEC operation specification, unit is `second`.
         */
        ipsecSaLifetimeSeconds: number;
        /**
         * SA lifetime traffic of the IPSEC operation specification, unit is `KB`.
         */
        ipsecSaLifetimeTraffic: number;
        /**
         * Name of the VPN connection. The length of character is limited to 1-60.
         */
        name: string;
        /**
         * Net status of the VPN connection.
         */
        netStatus: string;
        /**
         * Pre-shared key of the VPN connection.
         */
        preShareKey: string;
        /**
         * Route type of the VPN connection.
         */
        routeType: string;
        /**
         * Security group policy of the VPN connection.
         */
        securityGroupPolicies: outputs.Vpn.GetConnectionsConnectionListSecurityGroupPolicy[];
        /**
         * State of the VPN connection.
         */
        state: string;
        /**
         * Tags of the VPN connection to be queried.
         */
        tags: {[key: string]: any};
        /**
         * ID of the VPC.
         */
        vpcId: string;
        /**
         * VPN gateway ID of the VPN connection.
         */
        vpnGatewayId: string;
        /**
         * Vpn proto of the VPN connection.
         */
        vpnProto: string;
    }

    export interface GetConnectionsConnectionListSecurityGroupPolicy {
        /**
         * Local cidr block.
         */
        localCidrBlock: string;
        /**
         * Remote cidr block list.
         */
        remoteCidrBlocks: string[];
    }

    export interface GetCustomerGatewayVendorsCustomerGatewayVendorSet {
        /**
         * Platform.
         */
        platform: string;
        /**
         * SoftwareVersion.
         */
        softwareVersion: string;
        /**
         * VendorName.
         */
        vendorName: string;
    }

    export interface GetCustomerGatewaysGatewayList {
        /**
         * Create time of the VPN customer gateway.
         */
        createTime: string;
        /**
         * ID of the VPN customer gateway.
         */
        id: string;
        /**
         * Name of the customer gateway. The length of character is limited to 1-60.
         */
        name: string;
        /**
         * Public ip address of the VPN customer gateway.
         */
        publicIpAddress: string;
        /**
         * Tags of the VPN customer gateway to be queried.
         */
        tags: {[key: string]: any};
    }

    export interface GetGatewayRoutesVpnGatewayRouteList {
        /**
         * Create time.
         */
        createTime: string;
        destinationCidrBlock: string;
        /**
         * Instance ID of the next hop.
         */
        instanceId: string;
        /**
         * Next hop type (type of the associated instance). Valid values: VPNCONN (VPN tunnel) and CCN (CCN instance).
         */
        instanceType: string;
        priority: number;
        /**
         * Route ID.
         */
        routeId: string;
        status: string;
        /**
         * Route type. Default value: Static.
         */
        type: string;
        /**
         * Update time.
         */
        updateTime: string;
        /**
         * VPN gateway ID.
         */
        vpnGatewayId: string;
    }

    export interface GetGatewaysGatewayList {
        /**
         * The maximum public network output bandwidth of VPN gateway (unit: Mbps).
         */
        bandwidth: number;
        /**
         * Charge Type of the VPN gateway.
         */
        chargeType: string;
        /**
         * Create time of the VPN gateway.
         */
        createTime: string;
        /**
         * Expired time of the VPN gateway when charge type is `PREPAID`.
         */
        expiredTime: string;
        /**
         * ID of the VPN gateway.
         */
        id: string;
        /**
         * Indicates whether ip address is blocked.
         */
        isAddressBlocked: boolean;
        /**
         * Name of the VPN gateway. The length of character is limited to 1-60.
         */
        name: string;
        /**
         * The plan of new purchase.
         */
        newPurchasePlan: string;
        /**
         * Flag indicates whether to renew or not.
         */
        prepaidRenewFlag: string;
        /**
         * Public ip address of the VPN gateway.
         */
        publicIpAddress: string;
        /**
         * Restrict state of VPN gateway.
         */
        restrictState: string;
        /**
         * State of the VPN gateway.
         */
        state: string;
        /**
         * Tags of the VPN gateway to be queried.
         */
        tags: {[key: string]: any};
        /**
         * Type of gateway instance.
         */
        type: string;
        /**
         * ID of the VPC.
         */
        vpcId: string;
        /**
         * Zone of the VPN gateway.
         */
        zone: string;
    }

}

export namespace config {
    export interface AssumeRole {
        policy?: string;
        roleArn: string;
        sessionDuration: number;
        sessionName: string;
    }

}
