// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of tcr images
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const images = pulumi.output(tencentcloud.Tcr.getImages({
 *     digest: "sha256:xxxxx",
 *     exactMatch: false,
 *     imageVersion: "v1",
 *     namespaceName: "ns",
 *     registryId: "tcr-xxx",
 *     repositoryName: "repo",
 * }));
 * ```
 */
export function getImages(args: GetImagesArgs, opts?: pulumi.InvokeOptions): Promise<GetImagesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("tencentcloud:Tcr/getImages:getImages", {
        "digest": args.digest,
        "exactMatch": args.exactMatch,
        "imageVersion": args.imageVersion,
        "namespaceName": args.namespaceName,
        "registryId": args.registryId,
        "repositoryName": args.repositoryName,
        "resultOutputFile": args.resultOutputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getImages.
 */
export interface GetImagesArgs {
    /**
     * specify image digest for lookup.
     */
    digest?: string;
    /**
     * specifies whether it is an exact match, true is an exact match, and not filled is a fuzzy match.
     */
    exactMatch?: boolean;
    /**
     * image version name, default is fuzzy match.
     */
    imageVersion?: string;
    /**
     * namespace name.
     */
    namespaceName: string;
    /**
     * instance id.
     */
    registryId: string;
    /**
     * repository name.
     */
    repositoryName: string;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
}

/**
 * A collection of values returned by getImages.
 */
export interface GetImagesResult {
    /**
     * hash value.
     */
    readonly digest?: string;
    readonly exactMatch?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * container image information list.
     */
    readonly imageInfoLists: outputs.Tcr.GetImagesImageInfoList[];
    /**
     * tag name.
     */
    readonly imageVersion?: string;
    readonly namespaceName: string;
    readonly registryId: string;
    readonly repositoryName: string;
    readonly resultOutputFile?: string;
}

export function getImagesOutput(args: GetImagesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetImagesResult> {
    return pulumi.output(args).apply(a => getImages(a, opts))
}

/**
 * A collection of arguments for invoking getImages.
 */
export interface GetImagesOutputArgs {
    /**
     * specify image digest for lookup.
     */
    digest?: pulumi.Input<string>;
    /**
     * specifies whether it is an exact match, true is an exact match, and not filled is a fuzzy match.
     */
    exactMatch?: pulumi.Input<boolean>;
    /**
     * image version name, default is fuzzy match.
     */
    imageVersion?: pulumi.Input<string>;
    /**
     * namespace name.
     */
    namespaceName: pulumi.Input<string>;
    /**
     * instance id.
     */
    registryId: pulumi.Input<string>;
    /**
     * repository name.
     */
    repositoryName: pulumi.Input<string>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
}
