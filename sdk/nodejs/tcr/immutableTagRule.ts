// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a tcr immutable tag rule.
 *
 * ## Example Usage
 * ### Create a immutable tag rule with specified tags and exclude specified repositories
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 *
 * const exampleInstance = new tencentcloud.tcr.Instance("exampleInstance", {
 *     instanceType: "premium",
 *     deleteBucket: true,
 * });
 * const exampleNamespace = new tencentcloud.tcr.Namespace("exampleNamespace", {
 *     instanceId: exampleInstance.id,
 *     isPublic: true,
 *     isAutoScan: true,
 *     isPreventVul: true,
 *     severity: "medium",
 *     cveWhitelistItems: [{
 *         cveId: "cve-xxxxx",
 *     }],
 * });
 * const exampleImmutableTagRule = new tencentcloud.tcr.ImmutableTagRule("exampleImmutableTagRule", {
 *     registryId: exampleInstance.id,
 *     namespaceName: exampleNamespace.name,
 *     rule: {
 *         repositoryPattern: "deprecated_repo",
 *         tagPattern: "**",
 *         repositoryDecoration: "repoExcludes",
 *         tagDecoration: "matches",
 *         disabled: false,
 *     },
 *     tags: {
 *         createdBy: "terraform",
 *     },
 * });
 * ```
 * ### With specified repositories and exclude specified version tag
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 *
 * const example = new tencentcloud.tcr.ImmutableTagRule("example", {
 *     registryId: tencentcloud_tcr_instance.example.id,
 *     namespaceName: tencentcloud_tcr_namespace.example.name,
 *     rule: {
 *         repositoryPattern: "**",
 *         tagPattern: "v1",
 *         repositoryDecoration: "repoMatches",
 *         tagDecoration: "excludes",
 *         disabled: false,
 *     },
 *     tags: {
 *         createdBy: "terraform",
 *     },
 * });
 * ```
 * ### Disabled the specified rule
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 *
 * const exampleRuleA = new tencentcloud.tcr.ImmutableTagRule("exampleRuleA", {
 *     registryId: tencentcloud_tcr_instance.example.id,
 *     namespaceName: tencentcloud_tcr_namespace.example.name,
 *     rule: {
 *         repositoryPattern: "deprecated_repo",
 *         tagPattern: "**",
 *         repositoryDecoration: "repoExcludes",
 *         tagDecoration: "matches",
 *         disabled: false,
 *     },
 *     tags: {
 *         createdBy: "terraform",
 *     },
 * });
 * const exampleRuleB = new tencentcloud.tcr.ImmutableTagRule("exampleRuleB", {
 *     registryId: tencentcloud_tcr_instance.example.id,
 *     namespaceName: tencentcloud_tcr_namespace.example.name,
 *     rule: {
 *         repositoryPattern: "**",
 *         tagPattern: "v1",
 *         repositoryDecoration: "repoMatches",
 *         tagDecoration: "excludes",
 *         disabled: true,
 *     },
 *     tags: {
 *         createdBy: "terraform",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * tcr immutable_tag_rule can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:Tcr/immutableTagRule:ImmutableTagRule immutable_tag_rule immutable_tag_rule_id
 * ```
 */
export class ImmutableTagRule extends pulumi.CustomResource {
    /**
     * Get an existing ImmutableTagRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImmutableTagRuleState, opts?: pulumi.CustomResourceOptions): ImmutableTagRule {
        return new ImmutableTagRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tcr/immutableTagRule:ImmutableTagRule';

    /**
     * Returns true if the given object is an instance of ImmutableTagRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImmutableTagRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImmutableTagRule.__pulumiType;
    }

    /**
     * namespace name.
     */
    public readonly namespaceName!: pulumi.Output<string>;
    /**
     * instance id.
     */
    public readonly registryId!: pulumi.Output<string>;
    /**
     * rule.
     */
    public readonly rule!: pulumi.Output<outputs.Tcr.ImmutableTagRuleRule>;
    /**
     * Tag description list.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a ImmutableTagRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImmutableTagRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImmutableTagRuleArgs | ImmutableTagRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImmutableTagRuleState | undefined;
            resourceInputs["namespaceName"] = state ? state.namespaceName : undefined;
            resourceInputs["registryId"] = state ? state.registryId : undefined;
            resourceInputs["rule"] = state ? state.rule : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ImmutableTagRuleArgs | undefined;
            if ((!args || args.namespaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceName'");
            }
            if ((!args || args.registryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryId'");
            }
            if ((!args || args.rule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rule'");
            }
            resourceInputs["namespaceName"] = args ? args.namespaceName : undefined;
            resourceInputs["registryId"] = args ? args.registryId : undefined;
            resourceInputs["rule"] = args ? args.rule : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImmutableTagRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImmutableTagRule resources.
 */
export interface ImmutableTagRuleState {
    /**
     * namespace name.
     */
    namespaceName?: pulumi.Input<string>;
    /**
     * instance id.
     */
    registryId?: pulumi.Input<string>;
    /**
     * rule.
     */
    rule?: pulumi.Input<inputs.Tcr.ImmutableTagRuleRule>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a ImmutableTagRule resource.
 */
export interface ImmutableTagRuleArgs {
    /**
     * namespace name.
     */
    namespaceName: pulumi.Input<string>;
    /**
     * instance id.
     */
    registryId: pulumi.Input<string>;
    /**
     * rule.
     */
    rule: pulumi.Input<inputs.Tcr.ImmutableTagRuleRule>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
}
