// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of TCR repositories.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const name = pulumi.output(tencentcloud.Tcr.getRepositories({
 *     name: "test",
 * }));
 * ```
 */
export function getRepositories(args: GetRepositoriesArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoriesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("tencentcloud:Tcr/getRepositories:getRepositories", {
        "instanceId": args.instanceId,
        "namespaceName": args.namespaceName,
        "repositoryName": args.repositoryName,
        "resultOutputFile": args.resultOutputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getRepositories.
 */
export interface GetRepositoriesArgs {
    /**
     * ID of the TCR instance that the repository belongs to.
     */
    instanceId: string;
    /**
     * Name of the namespace that the repository belongs to.
     */
    namespaceName: string;
    /**
     * ID of the TCR repositories to query.
     */
    repositoryName?: string;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
}

/**
 * A collection of values returned by getRepositories.
 */
export interface GetRepositoriesResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: string;
    /**
     * Name of the namespace that the repository belongs to.
     */
    readonly namespaceName: string;
    /**
     * Information list of the dedicated TCR repositories.
     */
    readonly repositoryLists: outputs.Tcr.GetRepositoriesRepositoryList[];
    readonly repositoryName?: string;
    readonly resultOutputFile?: string;
}

export function getRepositoriesOutput(args: GetRepositoriesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRepositoriesResult> {
    return pulumi.output(args).apply(a => getRepositories(a, opts))
}

/**
 * A collection of arguments for invoking getRepositories.
 */
export interface GetRepositoriesOutputArgs {
    /**
     * ID of the TCR instance that the repository belongs to.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Name of the namespace that the repository belongs to.
     */
    namespaceName: pulumi.Input<string>;
    /**
     * ID of the TCR repositories to query.
     */
    repositoryName?: pulumi.Input<string>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
}
