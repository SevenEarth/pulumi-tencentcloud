// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of mps mediaMetaData
 *
 * ## Example Usage
 *
 * ### Query the mps media meta data through COS
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const object = tencentcloud.Cos.getBucketObject({
 *     bucket: `keep-bucket-${local.app_id}`,
 *     key: "/mps-test/test.mov",
 * });
 * const metadata = Promise.all([object, object]).then(([object, object1]) => tencentcloud.Mps.getMediaMetaData({
 *     inputInfo: {
 *         type: "COS",
 *         cosInputInfo: {
 *             bucket: object.bucket,
 *             region: "%s",
 *             object: object1.key,
 *         },
 *     },
 * }));
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getMediaMetaData(args: GetMediaMetaDataArgs, opts?: pulumi.InvokeOptions): Promise<GetMediaMetaDataResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:Mps/getMediaMetaData:getMediaMetaData", {
        "inputInfo": args.inputInfo,
        "resultOutputFile": args.resultOutputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getMediaMetaData.
 */
export interface GetMediaMetaDataArgs {
    /**
     * Input information of file for metadata getting.
     */
    inputInfo: inputs.Mps.GetMediaMetaDataInputInfo;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
}

/**
 * A collection of values returned by getMediaMetaData.
 */
export interface GetMediaMetaDataResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly inputInfo: outputs.Mps.GetMediaMetaDataInputInfo;
    /**
     * Media metadata.
     */
    readonly metaDatas: outputs.Mps.GetMediaMetaDataMetaData[];
    readonly resultOutputFile?: string;
}
/**
 * Use this data source to query detailed information of mps mediaMetaData
 *
 * ## Example Usage
 *
 * ### Query the mps media meta data through COS
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const object = tencentcloud.Cos.getBucketObject({
 *     bucket: `keep-bucket-${local.app_id}`,
 *     key: "/mps-test/test.mov",
 * });
 * const metadata = Promise.all([object, object]).then(([object, object1]) => tencentcloud.Mps.getMediaMetaData({
 *     inputInfo: {
 *         type: "COS",
 *         cosInputInfo: {
 *             bucket: object.bucket,
 *             region: "%s",
 *             object: object1.key,
 *         },
 *     },
 * }));
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getMediaMetaDataOutput(args: GetMediaMetaDataOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMediaMetaDataResult> {
    return pulumi.output(args).apply((a: any) => getMediaMetaData(a, opts))
}

/**
 * A collection of arguments for invoking getMediaMetaData.
 */
export interface GetMediaMetaDataOutputArgs {
    /**
     * Input information of file for metadata getting.
     */
    inputInfo: pulumi.Input<inputs.Mps.GetMediaMetaDataInputInfoArgs>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
}
