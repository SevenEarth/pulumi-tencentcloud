// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of mps parseNotification
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const parseNotification = tencentcloud.Mps.getParseNotification({
 *     content: "your_content",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getParseNotification(args: GetParseNotificationArgs, opts?: pulumi.InvokeOptions): Promise<GetParseNotificationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:Mps/getParseNotification:getParseNotification", {
        "content": args.content,
        "resultOutputFile": args.resultOutputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getParseNotification.
 */
export interface GetParseNotificationArgs {
    /**
     * Event notification obtained from CMQ.
     */
    content: string;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
}

/**
 * A collection of values returned by getParseNotification.
 */
export interface GetParseNotificationResult {
    readonly content: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly resultOutputFile?: string;
}
/**
 * Use this data source to query detailed information of mps parseNotification
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const parseNotification = tencentcloud.Mps.getParseNotification({
 *     content: "your_content",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getParseNotificationOutput(args: GetParseNotificationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetParseNotificationResult> {
    return pulumi.output(args).apply((a: any) => getParseNotification(a, opts))
}

/**
 * A collection of arguments for invoking getParseNotification.
 */
export interface GetParseNotificationOutputArgs {
    /**
     * Event notification obtained from CMQ.
     */
    content: pulumi.Input<string>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
}
