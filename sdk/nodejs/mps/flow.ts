// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a mps flow
 *
 * ## Example Usage
 *
 * ### Create a mps RTP flow
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const event = new tencentcloud.mps.Event("event", {
 *     eventName: "tf_test_event_srt_%d",
 *     description: "tf test mps event description",
 * });
 * const flow = new tencentcloud.mps.Flow("flow", {
 *     flowName: "tf_test_mps_flow_srt_%d",
 *     maxBandwidth: 10000000,
 *     inputGroups: [{
 *         inputName: "test_inputname",
 *         protocol: "SRT",
 *         description: "input name Description",
 *         allowIpLists: ["0.0.0.0/0"],
 *         srtSettings: {
 *             mode: "LISTENER",
 *             streamId: "#!::u=johnny,r=resource,h=xxx.com,t=stream,m=play",
 *             latency: 1000,
 *             recvLatency: 1000,
 *             peerLatency: 1000,
 *             peerIdleTimeout: 1000,
 *         },
 *     }],
 *     eventId: event.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Create a mps RTP flow
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const eventRtp = new tencentcloud.mps.Event("eventRtp", {
 *     eventName: "tf_test_event_rtp_%d",
 *     description: "tf test mps event description",
 * });
 * const flowRtp = new tencentcloud.mps.Flow("flowRtp", {
 *     flowName: "tf_test_mps_flow_rtp_%d",
 *     maxBandwidth: 10000000,
 *     inputGroups: [{
 *         inputName: "test_inputname",
 *         protocol: "RTP",
 *         description: "input name Description",
 *         allowIpLists: ["0.0.0.0/0"],
 *         rtpSettings: {
 *             fec: "none",
 *             idleTimeout: 1000,
 *         },
 *     }],
 *     eventId: eventRtp.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Create a mps RTP flow and start it
 *
 * Before you start a mps flow, you need to create a output first.
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const eventRtp = new tencentcloud.mps.Event("eventRtp", {
 *     eventName: "your_event_name",
 *     description: "tf test mps event description",
 * });
 * const flowRtp = new tencentcloud.mps.Flow("flowRtp", {
 *     flowName: "your_flow_name",
 *     maxBandwidth: 10000000,
 *     inputGroups: [{
 *         inputName: "test_inputname",
 *         protocol: "RTP",
 *         description: "input name Description",
 *         allowIpLists: ["0.0.0.0/0"],
 *         rtpSettings: {
 *             fec: "none",
 *             idleTimeout: 1000,
 *         },
 *     }],
 *     eventId: eventRtp.id,
 * });
 * const output = new tencentcloud.mps.Output("output", {
 *     flowId: flowRtp.id,
 *     output: {
 *         outputName: "your_output_name",
 *         description: "tf mps output group",
 *         protocol: "RTP",
 *         outputRegion: "ap-guangzhou",
 *         rtpSettings: {
 *             destinations: [{
 *                 ip: "203.205.141.84",
 *                 port: 65535,
 *             }],
 *             fec: "none",
 *             idleTimeout: 1000,
 *         },
 *     },
 * });
 * const operation = new tencentcloud.mps.StartFlowOperation("operation", {
 *     flowId: flowRtp.id,
 *     start: true,
 * }, {
 *     dependsOn: [output],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * mps flow can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Mps/flow:Flow flow flow_id
 * ```
 */
export class Flow extends pulumi.CustomResource {
    /**
     * Get an existing Flow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlowState, opts?: pulumi.CustomResourceOptions): Flow {
        return new Flow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Mps/flow:Flow';

    /**
     * Returns true if the given object is an instance of Flow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Flow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Flow.__pulumiType;
    }

    /**
     * The event ID associated with this Flow. Each flow can only be associated with one Event.
     */
    public readonly eventId!: pulumi.Output<string | undefined>;
    /**
     * Flow name.
     */
    public readonly flowName!: pulumi.Output<string>;
    /**
     * The input group for the flow.
     */
    public readonly inputGroups!: pulumi.Output<outputs.Mps.FlowInputGroup[]>;
    /**
     * Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
     */
    public readonly maxBandwidth!: pulumi.Output<number>;

    /**
     * Create a Flow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlowArgs | FlowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlowState | undefined;
            resourceInputs["eventId"] = state ? state.eventId : undefined;
            resourceInputs["flowName"] = state ? state.flowName : undefined;
            resourceInputs["inputGroups"] = state ? state.inputGroups : undefined;
            resourceInputs["maxBandwidth"] = state ? state.maxBandwidth : undefined;
        } else {
            const args = argsOrState as FlowArgs | undefined;
            if ((!args || args.flowName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flowName'");
            }
            if ((!args || args.maxBandwidth === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxBandwidth'");
            }
            resourceInputs["eventId"] = args ? args.eventId : undefined;
            resourceInputs["flowName"] = args ? args.flowName : undefined;
            resourceInputs["inputGroups"] = args ? args.inputGroups : undefined;
            resourceInputs["maxBandwidth"] = args ? args.maxBandwidth : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Flow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Flow resources.
 */
export interface FlowState {
    /**
     * The event ID associated with this Flow. Each flow can only be associated with one Event.
     */
    eventId?: pulumi.Input<string>;
    /**
     * Flow name.
     */
    flowName?: pulumi.Input<string>;
    /**
     * The input group for the flow.
     */
    inputGroups?: pulumi.Input<pulumi.Input<inputs.Mps.FlowInputGroup>[]>;
    /**
     * Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
     */
    maxBandwidth?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Flow resource.
 */
export interface FlowArgs {
    /**
     * The event ID associated with this Flow. Each flow can only be associated with one Event.
     */
    eventId?: pulumi.Input<string>;
    /**
     * Flow name.
     */
    flowName: pulumi.Input<string>;
    /**
     * The input group for the flow.
     */
    inputGroups?: pulumi.Input<pulumi.Input<inputs.Mps.FlowInputGroup>[]>;
    /**
     * Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
     */
    maxBandwidth: pulumi.Input<number>;
}
