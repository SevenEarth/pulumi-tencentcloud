// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a clickhouse backup strategy
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const backup = new tencentcloud.Clickhouse.Backup("backup", {
 *     cosBucketName: "xxxxxx",
 *     instanceId: "cdwch-xxxxxx",
 * });
 * const backupStrategy = new tencentcloud.Clickhouse.BackupStrategy("backup_strategy", {
 *     dataBackupStrategies: [{
 *         backUpTables: [{
 *             database: "iac",
 *             ips: "10.0.0.35",
 *             table: "my_table",
 *             totalBytes: 0,
 *             vCluster: "default_cluster",
 *         }],
 *         executeHour: 1,
 *         retainDays: 2,
 *         weekDays: "3",
 *     }],
 *     instanceId: "cdwch-xxxxxx",
 *     metaBackupStrategies: [{
 *         executeHour: 3,
 *         retainDays: 2,
 *         weekDays: "1",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * clickhouse backup_strategy can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:Clickhouse/backupStrategy:BackupStrategy backup_strategy instance_id
 * ```
 */
export class BackupStrategy extends pulumi.CustomResource {
    /**
     * Get an existing BackupStrategy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupStrategyState, opts?: pulumi.CustomResourceOptions): BackupStrategy {
        return new BackupStrategy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Clickhouse/backupStrategy:BackupStrategy';

    /**
     * Returns true if the given object is an instance of BackupStrategy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupStrategy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupStrategy.__pulumiType;
    }

    /**
     * Data backup strategy.
     */
    public readonly dataBackupStrategies!: pulumi.Output<outputs.Clickhouse.BackupStrategyDataBackupStrategy[]>;
    /**
     * Instance id.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Metadata backup strategy.
     */
    public readonly metaBackupStrategies!: pulumi.Output<outputs.Clickhouse.BackupStrategyMetaBackupStrategy[]>;

    /**
     * Create a BackupStrategy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupStrategyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupStrategyArgs | BackupStrategyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupStrategyState | undefined;
            resourceInputs["dataBackupStrategies"] = state ? state.dataBackupStrategies : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["metaBackupStrategies"] = state ? state.metaBackupStrategies : undefined;
        } else {
            const args = argsOrState as BackupStrategyArgs | undefined;
            if ((!args || args.dataBackupStrategies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataBackupStrategies'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["dataBackupStrategies"] = args ? args.dataBackupStrategies : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["metaBackupStrategies"] = args ? args.metaBackupStrategies : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackupStrategy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BackupStrategy resources.
 */
export interface BackupStrategyState {
    /**
     * Data backup strategy.
     */
    dataBackupStrategies?: pulumi.Input<pulumi.Input<inputs.Clickhouse.BackupStrategyDataBackupStrategy>[]>;
    /**
     * Instance id.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Metadata backup strategy.
     */
    metaBackupStrategies?: pulumi.Input<pulumi.Input<inputs.Clickhouse.BackupStrategyMetaBackupStrategy>[]>;
}

/**
 * The set of arguments for constructing a BackupStrategy resource.
 */
export interface BackupStrategyArgs {
    /**
     * Data backup strategy.
     */
    dataBackupStrategies: pulumi.Input<pulumi.Input<inputs.Clickhouse.BackupStrategyDataBackupStrategy>[]>;
    /**
     * Instance id.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Metadata backup strategy.
     */
    metaBackupStrategies?: pulumi.Input<pulumi.Input<inputs.Clickhouse.BackupStrategyMetaBackupStrategy>[]>;
}
