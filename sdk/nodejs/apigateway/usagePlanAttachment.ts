// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this resource to attach API gateway usage plan to service.
 *
 * > **NOTE:** If the `authType` parameter of API is not `SECRET`, it cannot be bound access key.
 *
 * ## Example Usage
 * ### Normal creation
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 *
 * const exampleUsagePlan = new tencentcloud.apigateway.UsagePlan("exampleUsagePlan", {
 *     usagePlanName: "tf_example",
 *     usagePlanDesc: "desc.",
 *     maxRequestNum: 100,
 *     maxRequestNumPreSec: 10,
 * });
 * const exampleService = new tencentcloud.apigateway.Service("exampleService", {
 *     serviceName: "tf_example",
 *     protocol: "http&https",
 *     serviceDesc: "desc.",
 *     netTypes: [
 *         "INNER",
 *         "OUTER",
 *     ],
 *     ipVersion: "IPv4",
 * });
 * const exampleApi = new tencentcloud.apigateway.Api("exampleApi", {
 *     serviceId: exampleService.id,
 *     apiName: "tf_example",
 *     apiDesc: "my hello api update",
 *     authType: "SECRET",
 *     protocol: "HTTP",
 *     enableCors: true,
 *     requestConfigPath: "/user/info",
 *     requestConfigMethod: "POST",
 *     requestParameters: [{
 *         name: "email",
 *         position: "QUERY",
 *         type: "string",
 *         desc: "desc.",
 *         defaultValue: "test@qq.com",
 *         required: true,
 *     }],
 *     serviceConfigType: "HTTP",
 *     serviceConfigTimeout: 10,
 *     serviceConfigUrl: "http://www.tencent.com",
 *     serviceConfigPath: "/user",
 *     serviceConfigMethod: "POST",
 *     responseType: "XML",
 *     responseSuccessExample: "<note>success</note>",
 *     responseFailExample: "<note>fail</note>",
 *     responseErrorCodes: [{
 *         code: 500,
 *         msg: "system error",
 *         desc: "system error code",
 *         convertedCode: 5000,
 *         needConvert: true,
 *     }],
 * });
 * const exampleUsagePlanAttachment = new tencentcloud.apigateway.UsagePlanAttachment("exampleUsagePlanAttachment", {
 *     usagePlanId: exampleUsagePlan.id,
 *     serviceId: exampleService.id,
 *     environment: "release",
 *     bindType: "API",
 *     apiId: exampleApi.id,
 * });
 * ```
 * ### Bind the key to a usage plan
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 *
 * const exampleApiKey = new tencentcloud.apigateway.ApiKey("exampleApiKey", {
 *     secretName: "tf_example",
 *     status: "on",
 * });
 * const exampleUsagePlanAttachment = new tencentcloud.apigateway.UsagePlanAttachment("exampleUsagePlanAttachment", {
 *     usagePlanId: tencentcloud_api_gateway_usage_plan.example.id,
 *     serviceId: tencentcloud_api_gateway_service.example.id,
 *     environment: "release",
 *     bindType: "API",
 *     apiId: tencentcloud_api_gateway_api.example.id,
 *     accessKeyIds: [exampleApiKey.id],
 * });
 * ```
 *
 * ## Import
 *
 * API gateway usage plan attachment can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:ApiGateway/usagePlanAttachment:UsagePlanAttachment attach_service usagePlan-pe7fbdgn#service-kuqd6xqk#release#API#api-p8gtanvy
 * ```
 */
export class UsagePlanAttachment extends pulumi.CustomResource {
    /**
     * Get an existing UsagePlanAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UsagePlanAttachmentState, opts?: pulumi.CustomResourceOptions): UsagePlanAttachment {
        return new UsagePlanAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:ApiGateway/usagePlanAttachment:UsagePlanAttachment';

    /**
     * Returns true if the given object is an instance of UsagePlanAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UsagePlanAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UsagePlanAttachment.__pulumiType;
    }

    /**
     * Array of key IDs to be bound.
     */
    public readonly accessKeyIds!: pulumi.Output<string[] | undefined>;
    /**
     * ID of the API. This parameter will be required when `bindType` is `API`.
     */
    public readonly apiId!: pulumi.Output<string | undefined>;
    /**
     * Binding type. Valid values: `API`, `SERVICE`. Default value is `SERVICE`.
     */
    public readonly bindType!: pulumi.Output<string | undefined>;
    /**
     * The environment to be bound. Valid values: `test`, `prepub`, `release`.
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * ID of the service.
     */
    public readonly serviceId!: pulumi.Output<string>;
    /**
     * ID of the usage plan.
     */
    public readonly usagePlanId!: pulumi.Output<string>;

    /**
     * Create a UsagePlanAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UsagePlanAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UsagePlanAttachmentArgs | UsagePlanAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UsagePlanAttachmentState | undefined;
            resourceInputs["accessKeyIds"] = state ? state.accessKeyIds : undefined;
            resourceInputs["apiId"] = state ? state.apiId : undefined;
            resourceInputs["bindType"] = state ? state.bindType : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["usagePlanId"] = state ? state.usagePlanId : undefined;
        } else {
            const args = argsOrState as UsagePlanAttachmentArgs | undefined;
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            if ((!args || args.usagePlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'usagePlanId'");
            }
            resourceInputs["accessKeyIds"] = args ? args.accessKeyIds : undefined;
            resourceInputs["apiId"] = args ? args.apiId : undefined;
            resourceInputs["bindType"] = args ? args.bindType : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["usagePlanId"] = args ? args.usagePlanId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UsagePlanAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UsagePlanAttachment resources.
 */
export interface UsagePlanAttachmentState {
    /**
     * Array of key IDs to be bound.
     */
    accessKeyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the API. This parameter will be required when `bindType` is `API`.
     */
    apiId?: pulumi.Input<string>;
    /**
     * Binding type. Valid values: `API`, `SERVICE`. Default value is `SERVICE`.
     */
    bindType?: pulumi.Input<string>;
    /**
     * The environment to be bound. Valid values: `test`, `prepub`, `release`.
     */
    environment?: pulumi.Input<string>;
    /**
     * ID of the service.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * ID of the usage plan.
     */
    usagePlanId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UsagePlanAttachment resource.
 */
export interface UsagePlanAttachmentArgs {
    /**
     * Array of key IDs to be bound.
     */
    accessKeyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the API. This parameter will be required when `bindType` is `API`.
     */
    apiId?: pulumi.Input<string>;
    /**
     * Binding type. Valid values: `API`, `SERVICE`. Default value is `SERVICE`.
     */
    bindType?: pulumi.Input<string>;
    /**
     * The environment to be bound. Valid values: `test`, `prepub`, `release`.
     */
    environment: pulumi.Input<string>;
    /**
     * ID of the service.
     */
    serviceId: pulumi.Input<string>;
    /**
     * ID of the usage plan.
     */
    usagePlanId: pulumi.Input<string>;
}
