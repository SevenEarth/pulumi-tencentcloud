// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a apigateway upstream
 *
 * ## Example Usage
 *
 * ### Create a basic VPC channel
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const zones = tencentcloud.Availability.getZonesByProduct({
 *     product: "cvm",
 * });
 * const images = tencentcloud.Images.getInstance({
 *     imageTypes: ["PUBLIC_IMAGE"],
 *     imageNameRegex: "Final",
 * });
 * const instanceTypes = tencentcloud.Instance.getTypes({
 *     filters: [{
 *         name: "instance-family",
 *         values: ["S5"],
 *     }],
 *     cpuCoreCount: 2,
 *     excludeSoldOut: true,
 * });
 * const vpc = new tencentcloud.vpc.Instance("vpc", {cidrBlock: "10.0.0.0/16"});
 * const subnet = new tencentcloud.subnet.Instance("subnet", {
 *     availabilityZone: zones.then(zones => zones.zones?.[3]?.name),
 *     vpcId: vpc.id,
 *     cidrBlock: "10.0.0.0/16",
 *     isMulticast: false,
 * });
 * const exampleInstance = new tencentcloud.instance.Instance("exampleInstance", {
 *     instanceName: "tf_example",
 *     availabilityZone: zones.then(zones => zones.zones?.[3]?.name),
 *     imageId: images.then(images => images.images?.[0]?.imageId),
 *     instanceType: instanceTypes.then(instanceTypes => instanceTypes.instanceTypes?.[0]?.instanceType),
 *     systemDiskType: "CLOUD_PREMIUM",
 *     systemDiskSize: 50,
 *     hostname: "terraform",
 *     projectId: 0,
 *     vpcId: vpc.id,
 *     subnetId: subnet.id,
 *     dataDisks: [{
 *         dataDiskType: "CLOUD_PREMIUM",
 *         dataDiskSize: 50,
 *         encrypt: false,
 *     }],
 *     tags: {
 *         tagKey: "tagValue",
 *     },
 * });
 * const exampleUpstream = new tencentcloud.apigateway.Upstream("exampleUpstream", {
 *     scheme: "HTTP",
 *     algorithm: "ROUND-ROBIN",
 *     uniqVpcId: vpc.id,
 *     upstreamName: "tf_example",
 *     upstreamDescription: "desc.",
 *     upstreamType: "IP_PORT",
 *     retries: 5,
 *     nodes: [{
 *         host: "1.1.1.1",
 *         port: 9090,
 *         weight: 10,
 *         vmInstanceId: exampleInstance.id,
 *         tags: ["tags"],
 *     }],
 *     tags: {
 *         createdBy: "terraform",
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Create a complete VPC channel
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const example = new tencentcloud.apigateway.Upstream("example", {
 *     scheme: "HTTP",
 *     algorithm: "ROUND-ROBIN",
 *     uniqVpcId: tencentcloud_vpc.vpc.id,
 *     upstreamName: "tf_example",
 *     upstreamDescription: "desc.",
 *     upstreamType: "IP_PORT",
 *     retries: 5,
 *     nodes: [{
 *         host: "1.1.1.1",
 *         port: 9090,
 *         weight: 10,
 *         vmInstanceId: tencentcloud_instance.example.id,
 *         tags: ["tags"],
 *     }],
 *     healthChecker: {
 *         enableActiveCheck: true,
 *         enablePassiveCheck: true,
 *         healthyHttpStatus: "200",
 *         unhealthyHttpStatus: "500",
 *         tcpFailureThreshold: 5,
 *         timeoutThreshold: 5,
 *         httpFailureThreshold: 3,
 *         activeCheckHttpPath: "/",
 *         activeCheckTimeout: 5,
 *         activeCheckInterval: 5,
 *         unhealthyTimeout: 30,
 *     },
 *     tags: {
 *         createdBy: "terraform",
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * apigateway upstream can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:ApiGateway/upstream:Upstream upstream upstream_id
 * ```
 */
export class Upstream extends pulumi.CustomResource {
    /**
     * Get an existing Upstream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UpstreamState, opts?: pulumi.CustomResourceOptions): Upstream {
        return new Upstream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:ApiGateway/upstream:Upstream';

    /**
     * Returns true if the given object is an instance of Upstream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Upstream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Upstream.__pulumiType;
    }

    /**
     * Load balancing algorithm, value range: ROUND-ROBIN.
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * Health check configuration, currently only supports VPC channels.
     */
    public readonly healthChecker!: pulumi.Output<outputs.ApiGateway.UpstreamHealthChecker | undefined>;
    /**
     * Configuration of K8S container service.
     */
    public readonly k8sServices!: pulumi.Output<outputs.ApiGateway.UpstreamK8sService[] | undefined>;
    /**
     * Backend nodes.
     */
    public readonly nodes!: pulumi.Output<outputs.ApiGateway.UpstreamNode[] | undefined>;
    /**
     * Request retry count, default to 3 times.
     */
    public readonly retries!: pulumi.Output<number | undefined>;
    /**
     * Backend protocol, value range: HTTP, HTTPS, gRPC, gRPCs.
     */
    public readonly scheme!: pulumi.Output<string>;
    /**
     * Tag description list.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * VPC Unique ID.
     */
    public readonly uniqVpcId!: pulumi.Output<string>;
    /**
     * Backend channel description.
     */
    public readonly upstreamDescription!: pulumi.Output<string | undefined>;
    /**
     * Host request header forwarded by gateway to backend.
     */
    public readonly upstreamHost!: pulumi.Output<string | undefined>;
    /**
     * Backend channel name.
     */
    public readonly upstreamName!: pulumi.Output<string | undefined>;
    /**
     * Backend access type, value range: IP_PORT, K8S.
     */
    public readonly upstreamType!: pulumi.Output<string | undefined>;

    /**
     * Create a Upstream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UpstreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UpstreamArgs | UpstreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UpstreamState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["healthChecker"] = state ? state.healthChecker : undefined;
            resourceInputs["k8sServices"] = state ? state.k8sServices : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["retries"] = state ? state.retries : undefined;
            resourceInputs["scheme"] = state ? state.scheme : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["uniqVpcId"] = state ? state.uniqVpcId : undefined;
            resourceInputs["upstreamDescription"] = state ? state.upstreamDescription : undefined;
            resourceInputs["upstreamHost"] = state ? state.upstreamHost : undefined;
            resourceInputs["upstreamName"] = state ? state.upstreamName : undefined;
            resourceInputs["upstreamType"] = state ? state.upstreamType : undefined;
        } else {
            const args = argsOrState as UpstreamArgs | undefined;
            if ((!args || args.algorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'algorithm'");
            }
            if ((!args || args.scheme === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheme'");
            }
            if ((!args || args.uniqVpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uniqVpcId'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["healthChecker"] = args ? args.healthChecker : undefined;
            resourceInputs["k8sServices"] = args ? args.k8sServices : undefined;
            resourceInputs["nodes"] = args ? args.nodes : undefined;
            resourceInputs["retries"] = args ? args.retries : undefined;
            resourceInputs["scheme"] = args ? args.scheme : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["uniqVpcId"] = args ? args.uniqVpcId : undefined;
            resourceInputs["upstreamDescription"] = args ? args.upstreamDescription : undefined;
            resourceInputs["upstreamHost"] = args ? args.upstreamHost : undefined;
            resourceInputs["upstreamName"] = args ? args.upstreamName : undefined;
            resourceInputs["upstreamType"] = args ? args.upstreamType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Upstream.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Upstream resources.
 */
export interface UpstreamState {
    /**
     * Load balancing algorithm, value range: ROUND-ROBIN.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * Health check configuration, currently only supports VPC channels.
     */
    healthChecker?: pulumi.Input<inputs.ApiGateway.UpstreamHealthChecker>;
    /**
     * Configuration of K8S container service.
     */
    k8sServices?: pulumi.Input<pulumi.Input<inputs.ApiGateway.UpstreamK8sService>[]>;
    /**
     * Backend nodes.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.ApiGateway.UpstreamNode>[]>;
    /**
     * Request retry count, default to 3 times.
     */
    retries?: pulumi.Input<number>;
    /**
     * Backend protocol, value range: HTTP, HTTPS, gRPC, gRPCs.
     */
    scheme?: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * VPC Unique ID.
     */
    uniqVpcId?: pulumi.Input<string>;
    /**
     * Backend channel description.
     */
    upstreamDescription?: pulumi.Input<string>;
    /**
     * Host request header forwarded by gateway to backend.
     */
    upstreamHost?: pulumi.Input<string>;
    /**
     * Backend channel name.
     */
    upstreamName?: pulumi.Input<string>;
    /**
     * Backend access type, value range: IP_PORT, K8S.
     */
    upstreamType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Upstream resource.
 */
export interface UpstreamArgs {
    /**
     * Load balancing algorithm, value range: ROUND-ROBIN.
     */
    algorithm: pulumi.Input<string>;
    /**
     * Health check configuration, currently only supports VPC channels.
     */
    healthChecker?: pulumi.Input<inputs.ApiGateway.UpstreamHealthChecker>;
    /**
     * Configuration of K8S container service.
     */
    k8sServices?: pulumi.Input<pulumi.Input<inputs.ApiGateway.UpstreamK8sService>[]>;
    /**
     * Backend nodes.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.ApiGateway.UpstreamNode>[]>;
    /**
     * Request retry count, default to 3 times.
     */
    retries?: pulumi.Input<number>;
    /**
     * Backend protocol, value range: HTTP, HTTPS, gRPC, gRPCs.
     */
    scheme: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * VPC Unique ID.
     */
    uniqVpcId: pulumi.Input<string>;
    /**
     * Backend channel description.
     */
    upstreamDescription?: pulumi.Input<string>;
    /**
     * Host request header forwarded by gateway to backend.
     */
    upstreamHost?: pulumi.Input<string>;
    /**
     * Backend channel name.
     */
    upstreamName?: pulumi.Input<string>;
    /**
     * Backend access type, value range: IP_PORT, K8S.
     */
    upstreamType?: pulumi.Input<string>;
}
