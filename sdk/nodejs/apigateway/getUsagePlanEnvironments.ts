// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Used to query the environment list bound by the plan.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const plan = new tencentcloud.apigateway.UsagePlan("plan", {
 *     usagePlanName: "my_plan",
 *     usagePlanDesc: "nice plan",
 *     maxRequestNum: 100,
 *     maxRequestNumPreSec: 10,
 * });
 * const service = new tencentcloud.apigateway.Service("service", {
 *     serviceName: "niceservice",
 *     protocol: "http&https",
 *     serviceDesc: "your nice service",
 *     netTypes: [
 *         "INNER",
 *         "OUTER",
 *     ],
 *     ipVersion: "IPv4",
 * });
 * const attachService = new tencentcloud.apigateway.UsagePlanAttachment("attachService", {
 *     usagePlanId: plan.id,
 *     serviceId: service.id,
 *     environment: "test",
 *     bindType: "SERVICE",
 * });
 * const environmentTest = tencentcloud.ApiGateway.getUsagePlanEnvironmentsOutput({
 *     usagePlanId: attachService.usagePlanId,
 *     bindType: "SERVICE",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getUsagePlanEnvironments(args: GetUsagePlanEnvironmentsArgs, opts?: pulumi.InvokeOptions): Promise<GetUsagePlanEnvironmentsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:ApiGateway/getUsagePlanEnvironments:getUsagePlanEnvironments", {
        "bindType": args.bindType,
        "resultOutputFile": args.resultOutputFile,
        "usagePlanId": args.usagePlanId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUsagePlanEnvironments.
 */
export interface GetUsagePlanEnvironmentsArgs {
    /**
     * Binding type. Valid values: `API`, `SERVICE`. Default value: `SERVICE`.
     */
    bindType?: string;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
    /**
     * ID of the usage plan to be queried.
     */
    usagePlanId: string;
}

/**
 * A collection of values returned by getUsagePlanEnvironments.
 */
export interface GetUsagePlanEnvironmentsResult {
    readonly bindType?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A list of usage plan binding details.
     */
    readonly lists: outputs.ApiGateway.GetUsagePlanEnvironmentsList[];
    readonly resultOutputFile?: string;
    readonly usagePlanId: string;
}
/**
 * Used to query the environment list bound by the plan.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const plan = new tencentcloud.apigateway.UsagePlan("plan", {
 *     usagePlanName: "my_plan",
 *     usagePlanDesc: "nice plan",
 *     maxRequestNum: 100,
 *     maxRequestNumPreSec: 10,
 * });
 * const service = new tencentcloud.apigateway.Service("service", {
 *     serviceName: "niceservice",
 *     protocol: "http&https",
 *     serviceDesc: "your nice service",
 *     netTypes: [
 *         "INNER",
 *         "OUTER",
 *     ],
 *     ipVersion: "IPv4",
 * });
 * const attachService = new tencentcloud.apigateway.UsagePlanAttachment("attachService", {
 *     usagePlanId: plan.id,
 *     serviceId: service.id,
 *     environment: "test",
 *     bindType: "SERVICE",
 * });
 * const environmentTest = tencentcloud.ApiGateway.getUsagePlanEnvironmentsOutput({
 *     usagePlanId: attachService.usagePlanId,
 *     bindType: "SERVICE",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getUsagePlanEnvironmentsOutput(args: GetUsagePlanEnvironmentsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUsagePlanEnvironmentsResult> {
    return pulumi.output(args).apply((a: any) => getUsagePlanEnvironments(a, opts))
}

/**
 * A collection of arguments for invoking getUsagePlanEnvironments.
 */
export interface GetUsagePlanEnvironmentsOutputArgs {
    /**
     * Binding type. Valid values: `API`, `SERVICE`. Default value: `SERVICE`.
     */
    bindType?: pulumi.Input<string>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * ID of the usage plan to be queried.
     */
    usagePlanId: pulumi.Input<string>;
}
