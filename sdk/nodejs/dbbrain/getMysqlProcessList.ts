// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of dbbrain mysqlProcessList
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const mysqlProcessList = tencentcloud.Dbbrain.getMysqlProcessList({
 *     instanceId: local.mysql_id,
 *     product: "mysql",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getMysqlProcessList(args: GetMysqlProcessListArgs, opts?: pulumi.InvokeOptions): Promise<GetMysqlProcessListResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:Dbbrain/getMysqlProcessList:getMysqlProcessList", {
        "command": args.command,
        "db": args.db,
        "host": args.host,
        "id": args.id,
        "info": args.info,
        "instanceId": args.instanceId,
        "product": args.product,
        "resultOutputFile": args.resultOutputFile,
        "state": args.state,
        "time": args.time,
        "user": args.user,
    }, opts);
}

/**
 * A collection of arguments for invoking getMysqlProcessList.
 */
export interface GetMysqlProcessListArgs {
    /**
     * The execution type of the thread, used to filter the thread list.
     */
    command?: string;
    /**
     * The threads operations database, used to filter the thread list.
     */
    db?: string;
    /**
     * The operating host address of the thread, used to filter the thread list.
     */
    host?: string;
    /**
     * thread ID, used to filter the thread list.
     */
    id?: number;
    /**
     * The threads operation statement is used to filter the thread list.
     */
    info?: string;
    /**
     * instance id.
     */
    instanceId: string;
    /**
     * Service product type, supported values: `mysql` - cloud database MySQL; `cynosdb` - cloud database TDSQL-C for MySQL, the default is `mysql`.
     */
    product?: string;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
    /**
     * The operational state of the thread, used to filter the thread list.
     */
    state?: string;
    /**
     * The minimum value of the operation duration of a thread, in seconds, used to filter the list of threads whose operation duration is longer than this value.
     */
    time?: number;
    /**
     * The operating account name of the thread, used to filter the thread list.
     */
    user?: string;
}

/**
 * A collection of values returned by getMysqlProcessList.
 */
export interface GetMysqlProcessListResult {
    /**
     * The execution type of the thread.
     */
    readonly command?: string;
    /**
     * The thread that operates the database.
     */
    readonly db?: string;
    /**
     * The operating host address of the thread.
     */
    readonly host?: string;
    /**
     * thread ID.
     */
    readonly id?: number;
    /**
     * The operation statement for the thread.
     */
    readonly info?: string;
    readonly instanceId: string;
    /**
     * Live thread list.
     */
    readonly processLists: outputs.Dbbrain.GetMysqlProcessListProcessList[];
    readonly product?: string;
    readonly resultOutputFile?: string;
    /**
     * The operational state of the thread.
     */
    readonly state?: string;
    /**
     * The operation duration of the thread, in seconds.
     */
    readonly time?: number;
    /**
     * The operating account name of the thread.
     */
    readonly user?: string;
}
/**
 * Use this data source to query detailed information of dbbrain mysqlProcessList
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const mysqlProcessList = tencentcloud.Dbbrain.getMysqlProcessList({
 *     instanceId: local.mysql_id,
 *     product: "mysql",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getMysqlProcessListOutput(args: GetMysqlProcessListOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMysqlProcessListResult> {
    return pulumi.output(args).apply((a: any) => getMysqlProcessList(a, opts))
}

/**
 * A collection of arguments for invoking getMysqlProcessList.
 */
export interface GetMysqlProcessListOutputArgs {
    /**
     * The execution type of the thread, used to filter the thread list.
     */
    command?: pulumi.Input<string>;
    /**
     * The threads operations database, used to filter the thread list.
     */
    db?: pulumi.Input<string>;
    /**
     * The operating host address of the thread, used to filter the thread list.
     */
    host?: pulumi.Input<string>;
    /**
     * thread ID, used to filter the thread list.
     */
    id?: pulumi.Input<number>;
    /**
     * The threads operation statement is used to filter the thread list.
     */
    info?: pulumi.Input<string>;
    /**
     * instance id.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Service product type, supported values: `mysql` - cloud database MySQL; `cynosdb` - cloud database TDSQL-C for MySQL, the default is `mysql`.
     */
    product?: pulumi.Input<string>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * The operational state of the thread, used to filter the thread list.
     */
    state?: pulumi.Input<string>;
    /**
     * The minimum value of the operation duration of a thread, in seconds, used to filter the list of threads whose operation duration is longer than this value.
     */
    time?: pulumi.Input<number>;
    /**
     * The operating account name of the thread, used to filter the thread list.
     */
    user?: pulumi.Input<string>;
}
