// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of dbbrain securityAuditLogExportTasks
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const task = new tencentcloud.dbbrain.SecurityAuditLogExportTask("task", {
 *     secAuditGroupId: "sec_audit_group_id",
 *     startTime: "start_time",
 *     endTime: "end_time",
 *     product: "mysql",
 *     dangerLevels: [
 *         0,
 *         1,
 *         2,
 *     ],
 * });
 * const tasks = tencentcloud.Dbbrain.getSecurityAuditLogExportTasksOutput({
 *     secAuditGroupId: "sec_audit_group_id",
 *     product: "mysql",
 *     asyncRequestIds: [task.asyncRequestId],
 * });
 * ```
 */
export function getSecurityAuditLogExportTasks(args: GetSecurityAuditLogExportTasksArgs, opts?: pulumi.InvokeOptions): Promise<GetSecurityAuditLogExportTasksResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("tencentcloud:Dbbrain/getSecurityAuditLogExportTasks:getSecurityAuditLogExportTasks", {
        "asyncRequestIds": args.asyncRequestIds,
        "product": args.product,
        "resultOutputFile": args.resultOutputFile,
        "secAuditGroupId": args.secAuditGroupId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityAuditLogExportTasks.
 */
export interface GetSecurityAuditLogExportTasksArgs {
    /**
     * async request id list.
     */
    asyncRequestIds?: number[];
    /**
     * product, optional value is mysql.
     */
    product: string;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
    /**
     * security audit group id.
     */
    secAuditGroupId: string;
}

/**
 * A collection of values returned by getSecurityAuditLogExportTasks.
 */
export interface GetSecurityAuditLogExportTasksResult {
    readonly asyncRequestIds?: number[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * security audit log export task list.
     */
    readonly lists: outputs.Dbbrain.GetSecurityAuditLogExportTasksList[];
    readonly product: string;
    readonly resultOutputFile?: string;
    readonly secAuditGroupId: string;
}

export function getSecurityAuditLogExportTasksOutput(args: GetSecurityAuditLogExportTasksOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSecurityAuditLogExportTasksResult> {
    return pulumi.output(args).apply(a => getSecurityAuditLogExportTasks(a, opts))
}

/**
 * A collection of arguments for invoking getSecurityAuditLogExportTasks.
 */
export interface GetSecurityAuditLogExportTasksOutputArgs {
    /**
     * async request id list.
     */
    asyncRequestIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * product, optional value is mysql.
     */
    product: pulumi.Input<string>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * security audit group id.
     */
    secAuditGroupId: pulumi.Input<string>;
}
