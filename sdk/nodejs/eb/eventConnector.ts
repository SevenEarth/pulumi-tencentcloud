// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a eb eventConnector
 *
 * > **NOTE:** When the type is `apigw`, the import function is not supported.
 *
 * ## Example Usage
 * ### Create ckafka event connector
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const fooInfo = tencentcloud.User.getInfo({});
 * const fooEventBus = new tencentcloud.eb.EventBus("fooEventBus", {
 *     eventBusName: "tf-event_bus",
 *     description: "event bus desc",
 *     enableStore: false,
 *     saveDays: 1,
 *     tags: {
 *         createdBy: "terraform",
 *     },
 * });
 * const kafkaInstance = new tencentcloud.ckafka.Instance("kafkaInstance", {
 *     instanceName: "ckafka-instance-maz-tf-test",
 *     zoneId: 100003,
 *     multiZoneFlag: true,
 *     zoneIds: [
 *         100003,
 *         100006,
 *     ],
 *     period: 1,
 *     vpcId: _var.vpc_id,
 *     subnetId: _var.subnet_id,
 *     msgRetentionTime: 1300,
 *     renewFlag: 0,
 *     kafkaVersion: "1.1.1",
 *     diskSize: 500,
 *     diskType: "CLOUD_BASIC",
 *     config: {
 *         autoCreateTopicEnable: true,
 *         defaultNumPartitions: 3,
 *         defaultReplicationFactor: 3,
 *     },
 *     dynamicRetentionConfig: {
 *         enable: 1,
 *     },
 * });
 * const ckafkaId = kafkaInstance.id;
 * const uin = fooInfo.then(fooInfo => fooInfo.ownerUin);
 * const eventConnector = new tencentcloud.eb.EventConnector("eventConnector", {
 *     eventBusId: fooEventBus.id,
 *     connectionName: "tf-event-connector",
 *     description: "event connector desc1",
 *     enable: true,
 *     type: "ckafka",
 *     connectionDescription: {
 *         resourceDescription: pulumi.all([uin, uin, ckafkaId]).apply(([uin, uin1, ckafkaId]) => `qcs::ckafka:ap-guangzhou:uin/${uin}:ckafkaId/uin/${uin1}/${ckafkaId}`),
 *         ckafkaParams: {
 *             offset: "latest",
 *             topicName: "dasdasd",
 *         },
 *     },
 * });
 * ```
 * ### Create apiGateway event connector
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const fooInfo = tencentcloud.User.getInfo({});
 * const fooEventBus = new tencentcloud.eb.EventBus("fooEventBus", {
 *     eventBusName: "tf-event_bus",
 *     description: "event bus desc",
 *     enableStore: false,
 *     saveDays: 1,
 *     tags: {
 *         createdBy: "terraform",
 *     },
 * });
 * const service = new tencentcloud.apigateway.Service("service", {
 *     serviceName: "tf-eb-service",
 *     protocol: "http&https",
 *     serviceDesc: "your nice service",
 *     netTypes: [
 *         "INNER",
 *         "OUTER",
 *     ],
 *     ipVersion: "IPv4",
 * });
 * const uin = fooInfo.then(fooInfo => fooInfo.ownerUin);
 * const serviceId = service.id;
 * const eventConnector = new tencentcloud.eb.EventConnector("eventConnector", {
 *     eventBusId: fooEventBus.id,
 *     connectionName: "tf-event-connector",
 *     description: "event connector desc1",
 *     enable: false,
 *     type: "apigw",
 *     connectionDescription: {
 *         resourceDescription: pulumi.all([uin, serviceId]).apply(([uin, serviceId]) => `qcs::apigw:ap-guangzhou:uin/${uin}:serviceid/${serviceId}`),
 *         apiGwParams: {
 *             protocol: "HTTP",
 *             method: "GET",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * eb event_connector can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:Eb/eventConnector:EventConnector event_connector eventBusId#connectionId
 * ```
 */
export class EventConnector extends pulumi.CustomResource {
    /**
     * Get an existing EventConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventConnectorState, opts?: pulumi.CustomResourceOptions): EventConnector {
        return new EventConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Eb/eventConnector:EventConnector';

    /**
     * Returns true if the given object is an instance of EventConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventConnector.__pulumiType;
    }

    /**
     * Connector description.
     */
    public readonly connectionDescription!: pulumi.Output<outputs.Eb.EventConnectorConnectionDescription>;
    /**
     * connector name.
     */
    public readonly connectionName!: pulumi.Output<string>;
    /**
     * description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * switch.
     */
    public readonly enable!: pulumi.Output<boolean | undefined>;
    /**
     * event bus Id.
     */
    public readonly eventBusId!: pulumi.Output<string>;
    /**
     * type.
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a EventConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventConnectorArgs | EventConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventConnectorState | undefined;
            resourceInputs["connectionDescription"] = state ? state.connectionDescription : undefined;
            resourceInputs["connectionName"] = state ? state.connectionName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["eventBusId"] = state ? state.eventBusId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as EventConnectorArgs | undefined;
            if ((!args || args.connectionDescription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionDescription'");
            }
            if ((!args || args.connectionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionName'");
            }
            if ((!args || args.eventBusId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventBusId'");
            }
            resourceInputs["connectionDescription"] = args ? args.connectionDescription : undefined;
            resourceInputs["connectionName"] = args ? args.connectionName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["eventBusId"] = args ? args.eventBusId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventConnector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EventConnector resources.
 */
export interface EventConnectorState {
    /**
     * Connector description.
     */
    connectionDescription?: pulumi.Input<inputs.Eb.EventConnectorConnectionDescription>;
    /**
     * connector name.
     */
    connectionName?: pulumi.Input<string>;
    /**
     * description.
     */
    description?: pulumi.Input<string>;
    /**
     * switch.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * event bus Id.
     */
    eventBusId?: pulumi.Input<string>;
    /**
     * type.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EventConnector resource.
 */
export interface EventConnectorArgs {
    /**
     * Connector description.
     */
    connectionDescription: pulumi.Input<inputs.Eb.EventConnectorConnectionDescription>;
    /**
     * connector name.
     */
    connectionName: pulumi.Input<string>;
    /**
     * description.
     */
    description?: pulumi.Input<string>;
    /**
     * switch.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * event bus Id.
     */
    eventBusId: pulumi.Input<string>;
    /**
     * type.
     */
    type?: pulumi.Input<string>;
}
