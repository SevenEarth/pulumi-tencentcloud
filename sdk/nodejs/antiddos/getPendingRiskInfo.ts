// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of antiddos pending risk info
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const pendingRiskInfo = pulumi.output(tencentcloud.Antiddos.getPendingRiskInfo());
 * ```
 */
export function getPendingRiskInfo(args?: GetPendingRiskInfoArgs, opts?: pulumi.InvokeOptions): Promise<GetPendingRiskInfoResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("tencentcloud:Antiddos/getPendingRiskInfo:getPendingRiskInfo", {
        "resultOutputFile": args.resultOutputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getPendingRiskInfo.
 */
export interface GetPendingRiskInfoArgs {
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
}

/**
 * A collection of values returned by getPendingRiskInfo.
 */
export interface GetPendingRiskInfoResult {
    /**
     * Number of resources in the attack.
     */
    readonly attackingCount: number;
    /**
     * Number of resources in blockage.
     */
    readonly blockingCount: number;
    /**
     * Number of expired resources.
     */
    readonly expiredCount: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Is it a paid user? True: paid user, false: regular user.
     */
    readonly isPaidUsr: boolean;
    readonly resultOutputFile?: string;
    /**
     * Total number of all pending risk events.
     */
    readonly total: number;
}

export function getPendingRiskInfoOutput(args?: GetPendingRiskInfoOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPendingRiskInfoResult> {
    return pulumi.output(args).apply(a => getPendingRiskInfo(a, opts))
}

/**
 * A collection of arguments for invoking getPendingRiskInfo.
 */
export interface GetPendingRiskInfoOutputArgs {
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
}
