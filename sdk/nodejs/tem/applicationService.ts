// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a tem applicationService
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const applicationService = new tencentcloud.Tem.ApplicationService("application_service", {
 *     applicationId: "app-jrl3346j",
 *     environmentId: "en-dpxyydl5",
 *     service: {
 *         portMappingItemLists: [{
 *             port: 80,
 *             protocol: "TCP",
 *             targetPort: 80,
 *         }],
 *         serviceName: "test0-1",
 *         type: "CLUSTER",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * tem application_service can be imported using the environmentId#applicationId#serviceName, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:Tem/applicationService:ApplicationService application_service en-dpxyydl5#app-jrl3346j#test0-1
 * ```
 */
export class ApplicationService extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationServiceState, opts?: pulumi.CustomResourceOptions): ApplicationService {
        return new ApplicationService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tem/applicationService:ApplicationService';

    /**
     * Returns true if the given object is an instance of ApplicationService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationService.__pulumiType;
    }

    /**
     * application ID.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * environment ID.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * service detail list.
     */
    public readonly service!: pulumi.Output<outputs.Tem.ApplicationServiceService | undefined>;

    /**
     * Create a ApplicationService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationServiceArgs | ApplicationServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationServiceState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
        } else {
            const args = argsOrState as ApplicationServiceArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationService resources.
 */
export interface ApplicationServiceState {
    /**
     * application ID.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * environment ID.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * service detail list.
     */
    service?: pulumi.Input<inputs.Tem.ApplicationServiceService>;
}

/**
 * The set of arguments for constructing a ApplicationService resource.
 */
export interface ApplicationServiceArgs {
    /**
     * application ID.
     */
    applicationId: pulumi.Input<string>;
    /**
     * environment ID.
     */
    environmentId: pulumi.Input<string>;
    /**
     * service detail list.
     */
    service?: pulumi.Input<inputs.Tem.ApplicationServiceService>;
}
