// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a NAT Gateway SNat rule.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const zones = tencentcloud.Availability.getZonesByProduct({
 *     product: "nat",
 * });
 * const image = tencentcloud.Images.getInstance({
 *     osName: "centos",
 * });
 * const instanceTypes = zones.then(zones => tencentcloud.Instance.getTypes({
 *     filters: [
 *         {
 *             name: "zone",
 *             values: [zones.zones?.[0]?.name],
 *         },
 *         {
 *             name: "instance-family",
 *             values: ["S5"],
 *         },
 *     ],
 *     cpuCoreCount: 2,
 *     excludeSoldOut: true,
 * }));
 * const vpc = new tencentcloud.vpc.Instance("vpc", {cidrBlock: "10.0.0.0/16"});
 * // Create route_table and entry
 * const routeTable = new tencentcloud.route.Table("routeTable", {vpcId: vpc.id});
 * const subnet = new tencentcloud.subnet.Instance("subnet", {
 *     vpcId: vpc.id,
 *     cidrBlock: "10.0.0.0/16",
 *     availabilityZone: zones.then(zones => zones.zones?.[0]?.name),
 *     routeTableId: routeTable.id,
 * });
 * const eipExample1 = new tencentcloud.eip.Instance("eipExample1", {});
 * const eipExample2 = new tencentcloud.eip.Instance("eipExample2", {});
 * // Create NAT Gateway
 * const myNat = new tencentcloud.nat.Gateway("myNat", {
 *     vpcId: vpc.id,
 *     maxConcurrent: 3000000,
 *     bandwidth: 500,
 *     assignedEipSets: [
 *         eipExample1.publicIp,
 *         eipExample2.publicIp,
 *     ],
 * });
 * const routeEntry = new tencentcloud.route.TableEntry("routeEntry", {
 *     routeTableId: routeTable.id,
 *     destinationCidrBlock: "10.0.0.0/8",
 *     nextType: "NAT",
 *     nextHub: myNat.id,
 * });
 * // Subnet Nat gateway snat
 * const subnetSnat = new tencentcloud.nat.GatewaySnat("subnetSnat", {
 *     natGatewayId: myNat.id,
 *     resourceType: "SUBNET",
 *     subnetId: subnet.id,
 *     subnetCidrBlock: subnet.cidrBlock,
 *     description: "terraform test",
 *     publicIpAddrs: [
 *         eipExample1.publicIp,
 *         eipExample2.publicIp,
 *     ],
 * });
 * // Create instance
 * const example = new tencentcloud.instance.Instance("example", {
 *     instanceName: "tf_example",
 *     availabilityZone: zones.then(zones => zones.zones?.[0]?.name),
 *     imageId: image.then(image => image.images?.[0]?.imageId),
 *     instanceType: instanceTypes.then(instanceTypes => instanceTypes.instanceTypes?.[0]?.instanceType),
 *     systemDiskType: "CLOUD_PREMIUM",
 *     systemDiskSize: 50,
 *     hostname: "user",
 *     projectId: 0,
 *     vpcId: vpc.id,
 *     subnetId: subnet.id,
 * });
 * // NetWorkInterface Nat gateway snat
 * const myInstanceSnat = new tencentcloud.nat.GatewaySnat("myInstanceSnat", {
 *     natGatewayId: myNat.id,
 *     resourceType: "NETWORKINTERFACE",
 *     instanceId: example.id,
 *     instancePrivateIpAddr: example.privateIp,
 *     description: "terraform test",
 *     publicIpAddrs: [eipExample1.publicIp],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * VPN gateway route can be imported using the id, the id format must be '{nat_gateway_id}#{resource_id}', resource_id range `subnet_id`, `instance_id`, e.g.
 *
 * SUBNET SNat
 *
 * ```sh
 * $ pulumi import tencentcloud:Nat/gatewaySnat:GatewaySnat my_snat nat-r4ip1cwt#subnet-2ap74y35
 * ```
 * NETWORKINTERFACT SNat
 *
 * ```sh
 * $ pulumi import tencentcloud:Nat/gatewaySnat:GatewaySnat my_snat nat-r4ip1cwt#ins-da412f5a
 * ```
 */
export class GatewaySnat extends pulumi.CustomResource {
    /**
     * Get an existing GatewaySnat resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewaySnatState, opts?: pulumi.CustomResourceOptions): GatewaySnat {
        return new GatewaySnat(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Nat/gatewaySnat:GatewaySnat';

    /**
     * Returns true if the given object is an instance of GatewaySnat.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewaySnat {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewaySnat.__pulumiType;
    }

    /**
     * Create time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Instance ID, required when `resourceType` is NETWORKINTERFACE.
     */
    public readonly instanceId!: pulumi.Output<string | undefined>;
    /**
     * Private IPs of the instance's primary ENI, required when `resourceType` is NETWORKINTERFACE.
     */
    public readonly instancePrivateIpAddr!: pulumi.Output<string | undefined>;
    /**
     * NAT gateway ID.
     */
    public readonly natGatewayId!: pulumi.Output<string>;
    /**
     * Elastic IP address pool.
     */
    public readonly publicIpAddrs!: pulumi.Output<string[]>;
    /**
     * Resource type. Valid values: SUBNET, NETWORKINTERFACE.
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * SNAT rule ID.
     */
    public /*out*/ readonly snatId!: pulumi.Output<string>;
    /**
     * The IPv4 CIDR of the subnet, required when `resourceType` is SUBNET.
     */
    public readonly subnetCidrBlock!: pulumi.Output<string | undefined>;
    /**
     * Subnet instance ID, required when `resourceType` is SUBNET.
     */
    public readonly subnetId!: pulumi.Output<string | undefined>;

    /**
     * Create a GatewaySnat resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewaySnatArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewaySnatArgs | GatewaySnatState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewaySnatState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instancePrivateIpAddr"] = state ? state.instancePrivateIpAddr : undefined;
            resourceInputs["natGatewayId"] = state ? state.natGatewayId : undefined;
            resourceInputs["publicIpAddrs"] = state ? state.publicIpAddrs : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["snatId"] = state ? state.snatId : undefined;
            resourceInputs["subnetCidrBlock"] = state ? state.subnetCidrBlock : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
        } else {
            const args = argsOrState as GatewaySnatArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.natGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'natGatewayId'");
            }
            if ((!args || args.publicIpAddrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicIpAddrs'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["instancePrivateIpAddr"] = args ? args.instancePrivateIpAddr : undefined;
            resourceInputs["natGatewayId"] = args ? args.natGatewayId : undefined;
            resourceInputs["publicIpAddrs"] = args ? args.publicIpAddrs : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["subnetCidrBlock"] = args ? args.subnetCidrBlock : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["snatId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GatewaySnat.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GatewaySnat resources.
 */
export interface GatewaySnatState {
    /**
     * Create time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * Instance ID, required when `resourceType` is NETWORKINTERFACE.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Private IPs of the instance's primary ENI, required when `resourceType` is NETWORKINTERFACE.
     */
    instancePrivateIpAddr?: pulumi.Input<string>;
    /**
     * NAT gateway ID.
     */
    natGatewayId?: pulumi.Input<string>;
    /**
     * Elastic IP address pool.
     */
    publicIpAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Resource type. Valid values: SUBNET, NETWORKINTERFACE.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * SNAT rule ID.
     */
    snatId?: pulumi.Input<string>;
    /**
     * The IPv4 CIDR of the subnet, required when `resourceType` is SUBNET.
     */
    subnetCidrBlock?: pulumi.Input<string>;
    /**
     * Subnet instance ID, required when `resourceType` is SUBNET.
     */
    subnetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GatewaySnat resource.
 */
export interface GatewaySnatArgs {
    /**
     * Description.
     */
    description: pulumi.Input<string>;
    /**
     * Instance ID, required when `resourceType` is NETWORKINTERFACE.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Private IPs of the instance's primary ENI, required when `resourceType` is NETWORKINTERFACE.
     */
    instancePrivateIpAddr?: pulumi.Input<string>;
    /**
     * NAT gateway ID.
     */
    natGatewayId: pulumi.Input<string>;
    /**
     * Elastic IP address pool.
     */
    publicIpAddrs: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Resource type. Valid values: SUBNET, NETWORKINTERFACE.
     */
    resourceType: pulumi.Input<string>;
    /**
     * The IPv4 CIDR of the subnet, required when `resourceType` is SUBNET.
     */
    subnetCidrBlock?: pulumi.Input<string>;
    /**
     * Subnet instance ID, required when `resourceType` is SUBNET.
     */
    subnetId?: pulumi.Input<string>;
}
