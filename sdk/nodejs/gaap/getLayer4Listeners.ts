// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query gaap layer4 listeners.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const fooProxy = new tencentcloud.gaap.Proxy("fooProxy", {
 *     bandwidth: 10,
 *     concurrent: 2,
 *     accessRegion: "SouthChina",
 *     realserverRegion: "NorthChina",
 * });
 * const fooRealserver = new tencentcloud.gaap.Realserver("fooRealserver", {ip: "1.1.1.1"});
 * const fooLayer4Listener = new tencentcloud.gaap.Layer4Listener("fooLayer4Listener", {
 *     protocol: "TCP",
 *     port: 80,
 *     realserverType: "IP",
 *     proxyId: fooProxy.id,
 *     healthCheck: true,
 *     interval: 5,
 *     connectTimeout: 2,
 *     realserverBindSets: [{
 *         id: fooRealserver.id,
 *         ip: fooRealserver.ip,
 *         port: 80,
 *     }],
 * });
 * const fooLayer4Listeners = tencentcloud.Gaap.getLayer4ListenersOutput({
 *     protocol: "TCP",
 *     proxyId: fooProxy.id,
 *     listenerId: fooLayer4Listener.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getLayer4Listeners(args: GetLayer4ListenersArgs, opts?: pulumi.InvokeOptions): Promise<GetLayer4ListenersResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:Gaap/getLayer4Listeners:getLayer4Listeners", {
        "listenerId": args.listenerId,
        "listenerName": args.listenerName,
        "port": args.port,
        "protocol": args.protocol,
        "proxyId": args.proxyId,
        "resultOutputFile": args.resultOutputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getLayer4Listeners.
 */
export interface GetLayer4ListenersArgs {
    /**
     * ID of the layer4 listener to be queried.
     */
    listenerId?: string;
    /**
     * Name of the layer4 listener to be queried.
     */
    listenerName?: string;
    /**
     * Port of the layer4 listener to be queried.
     */
    port?: number;
    /**
     * Protocol of the layer4 listener to be queried. Valid values: `TCP` and `UDP`.
     */
    protocol: string;
    /**
     * ID of the GAAP proxy to be queried.
     */
    proxyId?: string;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
}

/**
 * A collection of values returned by getLayer4Listeners.
 */
export interface GetLayer4ListenersResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly listenerId?: string;
    readonly listenerName?: string;
    /**
     * An information list of layer4 listeners. Each element contains the following attributes:
     */
    readonly listeners: outputs.Gaap.GetLayer4ListenersListener[];
    /**
     * Port of the layer4 listener.
     */
    readonly port?: number;
    /**
     * Protocol of the layer4 listener.
     */
    readonly protocol: string;
    /**
     * ID of the GAAP proxy.
     */
    readonly proxyId?: string;
    readonly resultOutputFile?: string;
}
/**
 * Use this data source to query gaap layer4 listeners.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const fooProxy = new tencentcloud.gaap.Proxy("fooProxy", {
 *     bandwidth: 10,
 *     concurrent: 2,
 *     accessRegion: "SouthChina",
 *     realserverRegion: "NorthChina",
 * });
 * const fooRealserver = new tencentcloud.gaap.Realserver("fooRealserver", {ip: "1.1.1.1"});
 * const fooLayer4Listener = new tencentcloud.gaap.Layer4Listener("fooLayer4Listener", {
 *     protocol: "TCP",
 *     port: 80,
 *     realserverType: "IP",
 *     proxyId: fooProxy.id,
 *     healthCheck: true,
 *     interval: 5,
 *     connectTimeout: 2,
 *     realserverBindSets: [{
 *         id: fooRealserver.id,
 *         ip: fooRealserver.ip,
 *         port: 80,
 *     }],
 * });
 * const fooLayer4Listeners = tencentcloud.Gaap.getLayer4ListenersOutput({
 *     protocol: "TCP",
 *     proxyId: fooProxy.id,
 *     listenerId: fooLayer4Listener.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getLayer4ListenersOutput(args: GetLayer4ListenersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLayer4ListenersResult> {
    return pulumi.output(args).apply((a: any) => getLayer4Listeners(a, opts))
}

/**
 * A collection of arguments for invoking getLayer4Listeners.
 */
export interface GetLayer4ListenersOutputArgs {
    /**
     * ID of the layer4 listener to be queried.
     */
    listenerId?: pulumi.Input<string>;
    /**
     * Name of the layer4 listener to be queried.
     */
    listenerName?: pulumi.Input<string>;
    /**
     * Port of the layer4 listener to be queried.
     */
    port?: pulumi.Input<number>;
    /**
     * Protocol of the layer4 listener to be queried. Valid values: `TCP` and `UDP`.
     */
    protocol: pulumi.Input<string>;
    /**
     * ID of the GAAP proxy to be queried.
     */
    proxyId?: pulumi.Input<string>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
}
