// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a dts syncConfig
 *
 * ## Example Usage
 * ### Sync mysql database to cynosdb through cdb access type
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 *
 * const foo = new tencentcloud.cynosdb.Cluster("foo", {
 *     availableZone: _var.availability_zone,
 *     vpcId: local.vpc_id,
 *     subnetId: local.subnet_id,
 *     dbType: "MYSQL",
 *     dbVersion: "5.7",
 *     storageLimit: 1000,
 *     clusterName: "tf-cynosdb-mysql-sync-dst",
 *     password: "*",
 *     instanceMaintainDuration: 3600,
 *     instanceMaintainStartTime: 10800,
 *     instanceMaintainWeekdays: [
 *         "Fri",
 *         "Mon",
 *         "Sat",
 *         "Sun",
 *         "Thu",
 *         "Wed",
 *         "Tue",
 *     ],
 *     instanceCpuCore: 1,
 *     instanceMemorySize: 2,
 *     paramItems: [
 *         {
 *             name: "character_set_server",
 *             currentValue: "utf8",
 *         },
 *         {
 *             name: "time_zone",
 *             currentValue: "+09:00",
 *         },
 *         {
 *             name: "lower_case_table_names",
 *             currentValue: "1",
 *         },
 *     ],
 *     forceDelete: true,
 *     rwGroupSgs: [local.sg_id],
 *     roGroupSgs: [local.sg_id],
 *     prarmTemplateId: _var.my_param_template,
 * });
 * const syncJob = new tencentcloud.dts.SyncJob("syncJob", {
 *     payMode: "PostPay",
 *     srcDatabaseType: "mysql",
 *     srcRegion: "ap-guangzhou",
 *     dstDatabaseType: "cynosdbmysql",
 *     dstRegion: "ap-guangzhou",
 *     tags: [{
 *         tagKey: "aaa",
 *         tagValue: "bbb",
 *     }],
 *     autoRenew: 0,
 *     instanceClass: "micro",
 * });
 * const syncConfig = new tencentcloud.dts.SyncConfig("syncConfig", {
 *     jobId: syncJob.jobId,
 *     srcAccessType: "cdb",
 *     dstAccessType: "cdb",
 *     jobName: "tf_test_sync_config",
 *     jobMode: "liteMode",
 *     runMode: "Immediate",
 *     objects: {
 *         mode: "Partial",
 *         databases: [{
 *             dbName: "tf_ci_test",
 *             newDbName: "tf_ci_test_new",
 *             dbMode: "Partial",
 *             tableMode: "All",
 *             tables: [{
 *                 tableName: "test",
 *                 newTableName: "test_new",
 *             }],
 *         }],
 *     },
 *     srcInfo: {
 *         region: "ap-guangzhou",
 *         instanceId: "cdb-fitq5t9h",
 *         user: "your_user_name",
 *         password: "*",
 *         dbName: "tf_ci_test",
 *         vpcId: local.vpc_id,
 *         subnetId: local.subnet_id,
 *     },
 *     dstInfo: {
 *         region: "ap-guangzhou",
 *         instanceId: foo.id,
 *         user: "root",
 *         password: "*",
 *         dbName: "tf_ci_test_new",
 *         vpcId: local.vpc_id,
 *         subnetId: local.subnet_id,
 *     },
 *     autoRetryTimeRangeMinutes: 0,
 * });
 * ```
 * ### Sync mysql database using CCN to route from ap-shanghai to ap-guangzhou
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const vpcIdSh = "vpc-evtcyb3g";
 * const subnetIdSh = "subnet-1t83cxkp";
 * const srcMysql = tencentcloud.Mysql.getInstance({
 *     instanceName: "your_user_name_mysql_src",
 * });
 * const srcIp = srcMysql.then(srcMysql => srcMysql.instanceLists?[0]?.intranetIp);
 * const srcPort = srcMysql.then(srcMysql => srcMysql.instanceLists?[0]?.intranetPort);
 * const ccns = tencentcloud.Ccn.getInstances({
 *     name: "keep-ccn-dts-sh",
 * });
 * const ccnId = ccns.then(ccns => ccns.instanceLists?[0]?.ccnId);
 * const dstMysql = tencentcloud.Mysql.getInstance({
 *     instanceName: "your_user_name_mysql_src",
 * });
 * const dstMysqlId = dstMysql.then(dstMysql => dstMysql.instanceLists?[0]?.mysqlId);
 * const config = new pulumi.Config();
 * const srcAzSh = config.get("srcAzSh") || "ap-shanghai";
 * const dstAzGz = config.get("dstAzGz") || "ap-guangzhou";
 * const syncJobs = tencentcloud.Dts.getSyncJobs({
 *     jobName: "keep_sync_config_ccn_2_cdb",
 * });
 * const syncConfig = new tencentcloud.dts.SyncConfig("syncConfig", {
 *     jobId: syncJobs.then(syncJobs => syncJobs.lists?[0]?.jobId),
 *     srcAccessType: "ccn",
 *     dstAccessType: "cdb",
 *     jobMode: "liteMode",
 *     runMode: "Immediate",
 *     objects: {
 *         mode: "Partial",
 *         databases: [{
 *             dbName: "tf_ci_test",
 *             newDbName: "tf_ci_test_new",
 *             dbMode: "Partial",
 *             tableMode: "All",
 *             tables: [{
 *                 tableName: "test",
 *                 newTableName: "test_new",
 *             }],
 *         }],
 *     },
 *     srcInfo: {
 *         region: srcAzSh,
 *         user: "your_user_name",
 *         password: "your_pass_word",
 *         ip: srcIp,
 *         port: srcPort,
 *         vpcId: vpcIdSh,
 *         subnetId: subnetIdSh,
 *         ccnId: ccnId,
 *         databaseNetEnv: "TencentVPC",
 *     },
 *     dstInfo: {
 *         region: dstAzGz,
 *         instanceId: dstMysqlId,
 *         user: "your_user_name",
 *         password: "your_pass_word",
 *     },
 *     autoRetryTimeRangeMinutes: 0,
 * });
 * ```
 *
 * ## Import
 *
 * dts sync_config can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:Dts/syncConfig:SyncConfig sync_config sync_config_id
 * ```
 */
export class SyncConfig extends pulumi.CustomResource {
    /**
     * Get an existing SyncConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SyncConfigState, opts?: pulumi.CustomResourceOptions): SyncConfig {
        return new SyncConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Dts/syncConfig:SyncConfig';

    /**
     * Returns true if the given object is an instance of SyncConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SyncConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SyncConfig.__pulumiType;
    }

    /**
     * The time period of automatic retry, can be set from 5 to 720 minutes, 0 means no retry.
     */
    public readonly autoRetryTimeRangeMinutes!: pulumi.Output<number | undefined>;
    /**
     * Target end access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
     */
    public readonly dstAccessType!: pulumi.Output<string>;
    /**
     * Target information, single-node database use.
     */
    public readonly dstInfo!: pulumi.Output<outputs.Dts.SyncConfigDstInfo>;
    /**
     * Expected start time, when the value of RunMode is Timed, this value is required, such as: 2006-01-02 15:04:05.
     */
    public readonly expectRunTime!: pulumi.Output<string>;
    /**
     * Synchronization instance id (i.e. identifies a synchronization job).
     */
    public readonly jobId!: pulumi.Output<string>;
    /**
     * The enumeration values are liteMode and fullMode, corresponding to lite mode or normal mode respectively.
     */
    public readonly jobMode!: pulumi.Output<string | undefined>;
    /**
     * Sync job name.
     */
    public readonly jobName!: pulumi.Output<string>;
    /**
     * Synchronize database table object information.
     */
    public readonly objects!: pulumi.Output<outputs.Dts.SyncConfigObjects>;
    /**
     * Sync Task Options.
     */
    public readonly options!: pulumi.Output<outputs.Dts.SyncConfigOptions>;
    /**
     * Operation mode, such as: Immediate (indicates immediate operation, the default value is this value), Timed (indicates scheduled operation).
     */
    public readonly runMode!: pulumi.Output<string | undefined>;
    /**
     * Source access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
     */
    public readonly srcAccessType!: pulumi.Output<string>;
    /**
     * Source information, single-node database use.
     */
    public readonly srcInfo!: pulumi.Output<outputs.Dts.SyncConfigSrcInfo>;

    /**
     * Create a SyncConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SyncConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SyncConfigArgs | SyncConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SyncConfigState | undefined;
            resourceInputs["autoRetryTimeRangeMinutes"] = state ? state.autoRetryTimeRangeMinutes : undefined;
            resourceInputs["dstAccessType"] = state ? state.dstAccessType : undefined;
            resourceInputs["dstInfo"] = state ? state.dstInfo : undefined;
            resourceInputs["expectRunTime"] = state ? state.expectRunTime : undefined;
            resourceInputs["jobId"] = state ? state.jobId : undefined;
            resourceInputs["jobMode"] = state ? state.jobMode : undefined;
            resourceInputs["jobName"] = state ? state.jobName : undefined;
            resourceInputs["objects"] = state ? state.objects : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["runMode"] = state ? state.runMode : undefined;
            resourceInputs["srcAccessType"] = state ? state.srcAccessType : undefined;
            resourceInputs["srcInfo"] = state ? state.srcInfo : undefined;
        } else {
            const args = argsOrState as SyncConfigArgs | undefined;
            if ((!args || args.dstAccessType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstAccessType'");
            }
            if ((!args || args.jobId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jobId'");
            }
            if ((!args || args.objects === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objects'");
            }
            if ((!args || args.srcAccessType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcAccessType'");
            }
            resourceInputs["autoRetryTimeRangeMinutes"] = args ? args.autoRetryTimeRangeMinutes : undefined;
            resourceInputs["dstAccessType"] = args ? args.dstAccessType : undefined;
            resourceInputs["dstInfo"] = args ? args.dstInfo : undefined;
            resourceInputs["expectRunTime"] = args ? args.expectRunTime : undefined;
            resourceInputs["jobId"] = args ? args.jobId : undefined;
            resourceInputs["jobMode"] = args ? args.jobMode : undefined;
            resourceInputs["jobName"] = args ? args.jobName : undefined;
            resourceInputs["objects"] = args ? args.objects : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["runMode"] = args ? args.runMode : undefined;
            resourceInputs["srcAccessType"] = args ? args.srcAccessType : undefined;
            resourceInputs["srcInfo"] = args ? args.srcInfo : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SyncConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SyncConfig resources.
 */
export interface SyncConfigState {
    /**
     * The time period of automatic retry, can be set from 5 to 720 minutes, 0 means no retry.
     */
    autoRetryTimeRangeMinutes?: pulumi.Input<number>;
    /**
     * Target end access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
     */
    dstAccessType?: pulumi.Input<string>;
    /**
     * Target information, single-node database use.
     */
    dstInfo?: pulumi.Input<inputs.Dts.SyncConfigDstInfo>;
    /**
     * Expected start time, when the value of RunMode is Timed, this value is required, such as: 2006-01-02 15:04:05.
     */
    expectRunTime?: pulumi.Input<string>;
    /**
     * Synchronization instance id (i.e. identifies a synchronization job).
     */
    jobId?: pulumi.Input<string>;
    /**
     * The enumeration values are liteMode and fullMode, corresponding to lite mode or normal mode respectively.
     */
    jobMode?: pulumi.Input<string>;
    /**
     * Sync job name.
     */
    jobName?: pulumi.Input<string>;
    /**
     * Synchronize database table object information.
     */
    objects?: pulumi.Input<inputs.Dts.SyncConfigObjects>;
    /**
     * Sync Task Options.
     */
    options?: pulumi.Input<inputs.Dts.SyncConfigOptions>;
    /**
     * Operation mode, such as: Immediate (indicates immediate operation, the default value is this value), Timed (indicates scheduled operation).
     */
    runMode?: pulumi.Input<string>;
    /**
     * Source access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
     */
    srcAccessType?: pulumi.Input<string>;
    /**
     * Source information, single-node database use.
     */
    srcInfo?: pulumi.Input<inputs.Dts.SyncConfigSrcInfo>;
}

/**
 * The set of arguments for constructing a SyncConfig resource.
 */
export interface SyncConfigArgs {
    /**
     * The time period of automatic retry, can be set from 5 to 720 minutes, 0 means no retry.
     */
    autoRetryTimeRangeMinutes?: pulumi.Input<number>;
    /**
     * Target end access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
     */
    dstAccessType: pulumi.Input<string>;
    /**
     * Target information, single-node database use.
     */
    dstInfo?: pulumi.Input<inputs.Dts.SyncConfigDstInfo>;
    /**
     * Expected start time, when the value of RunMode is Timed, this value is required, such as: 2006-01-02 15:04:05.
     */
    expectRunTime?: pulumi.Input<string>;
    /**
     * Synchronization instance id (i.e. identifies a synchronization job).
     */
    jobId: pulumi.Input<string>;
    /**
     * The enumeration values are liteMode and fullMode, corresponding to lite mode or normal mode respectively.
     */
    jobMode?: pulumi.Input<string>;
    /**
     * Sync job name.
     */
    jobName?: pulumi.Input<string>;
    /**
     * Synchronize database table object information.
     */
    objects: pulumi.Input<inputs.Dts.SyncConfigObjects>;
    /**
     * Sync Task Options.
     */
    options?: pulumi.Input<inputs.Dts.SyncConfigOptions>;
    /**
     * Operation mode, such as: Immediate (indicates immediate operation, the default value is this value), Timed (indicates scheduled operation).
     */
    runMode?: pulumi.Input<string>;
    /**
     * Source access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
     */
    srcAccessType: pulumi.Input<string>;
    /**
     * Source information, single-node database use.
     */
    srcInfo?: pulumi.Input<inputs.Dts.SyncConfigSrcInfo>;
}
