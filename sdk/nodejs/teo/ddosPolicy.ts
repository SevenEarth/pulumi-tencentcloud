// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a teo ddosPolicy
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const ddosPolicy = new tencentcloud.Teo.DdosPolicy("ddos_policy", {
 *     ddosRule: {
 *         acl: {
 *             switch: "on",
 *         },
 *         allowBlock: {
 *             switch: "on",
 *         },
 *         antiPly: {
 *             abnormalConnectNum: 0,
 *             abnormalSynNum: 0,
 *             abnormalSynRatio: 0,
 *             connectTimeout: 0,
 *             destinationConnectLimit: 0,
 *             destinationCreateLimit: 0,
 *             dropIcmp: "off",
 *             dropOther: "off",
 *             dropTcp: "off",
 *             dropUdp: "off",
 *             emptyConnectProtect: "off",
 *             sourceConnectLimit: 0,
 *             sourceCreateLimit: 0,
 *             udpShard: "off",
 *         },
 *         geoIp: {
 *             regionIds: [],
 *             switch: "on",
 *         },
 *         packetFilter: {
 *             switch: "on",
 *         },
 *         speedLimit: {
 *             fluxLimit: "0 bps",
 *             packageLimit: "0 pps",
 *         },
 *         statusInfo: {
 *             plyLevel: "middle",
 *         },
 *         switch: "on",
 *     },
 *     policyId: 1278,
 *     zoneId: "zone-2983wizgxqvm",
 * });
 * ```
 *
 * ## Import
 *
 * teo ddos_policy can be imported using the id#ddosPolicy_id, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:Teo/ddosPolicy:DdosPolicy ddos_policy zone-2a1u0y616jz6#11587
 * ```
 */
export class DdosPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DdosPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosPolicyState, opts?: pulumi.CustomResourceOptions): DdosPolicy {
        return new DdosPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Teo/ddosPolicy:DdosPolicy';

    /**
     * Returns true if the given object is an instance of DdosPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosPolicy.__pulumiType;
    }

    /**
     * DDoS Configuration of the zone.
     */
    public readonly ddosRule!: pulumi.Output<outputs.Teo.DdosPolicyDdosRule>;
    /**
     * Policy ID.
     */
    public readonly policyId!: pulumi.Output<number>;
    /**
     * Site ID.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a DdosPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosPolicyArgs | DdosPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosPolicyState | undefined;
            resourceInputs["ddosRule"] = state ? state.ddosRule : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as DdosPolicyArgs | undefined;
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["ddosRule"] = args ? args.ddosRule : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DdosPolicy resources.
 */
export interface DdosPolicyState {
    /**
     * DDoS Configuration of the zone.
     */
    ddosRule?: pulumi.Input<inputs.Teo.DdosPolicyDdosRule>;
    /**
     * Policy ID.
     */
    policyId?: pulumi.Input<number>;
    /**
     * Site ID.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosPolicy resource.
 */
export interface DdosPolicyArgs {
    /**
     * DDoS Configuration of the zone.
     */
    ddosRule?: pulumi.Input<inputs.Teo.DdosPolicyDdosRule>;
    /**
     * Policy ID.
     */
    policyId: pulumi.Input<number>;
    /**
     * Site ID.
     */
    zoneId: pulumi.Input<string>;
}
