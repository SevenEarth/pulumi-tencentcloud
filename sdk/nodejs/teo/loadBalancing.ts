// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a teo loadBalancing
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const loadBalancing = new tencentcloud.Teo.LoadBalancing("load_balancing", {
 *     //  backup_origin_group_id = "origin-a499ca4b-3721-11ed-b9c1-5254005a52aa"
 *     host: "www.toutiao2.com",
 *     originGroupId: "origin-4f8a30b2-3720-11ed-b66b-525400dceb86",
 *     status: "online",
 *     tags: [{}],
 *     ttl: 600,
 *     type: "proxied",
 *     zoneId: "zone-297z8rf93cfw",
 * });
 * ```
 *
 * ## Import
 *
 * teo load_balancing can be imported using the zone_id#loadBalancing_id, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:Teo/loadBalancing:LoadBalancing load_balancing zone-297z8rf93cfw#lb-2a93c649-3719-11ed-b9c1-5254005a52aa
 * ```
 */
export class LoadBalancing extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancingState, opts?: pulumi.CustomResourceOptions): LoadBalancing {
        return new LoadBalancing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Teo/loadBalancing:LoadBalancing';

    /**
     * Returns true if the given object is an instance of LoadBalancing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancing.__pulumiType;
    }

    /**
     * ID of the backup origin group to use.
     */
    public readonly backupOriginGroupId!: pulumi.Output<string>;
    /**
     * Schedules domain names. Note: This field may return null, indicating that no valid value can be obtained.
     */
    public /*out*/ readonly cname!: pulumi.Output<string>;
    /**
     * Subdomain name. You can use @ to represent the root domain.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * Load balancer instance ID.
     */
    public /*out*/ readonly loadBalancingId!: pulumi.Output<string>;
    /**
     * ID of the origin group to use.
     */
    public readonly originGroupId!: pulumi.Output<string>;
    /**
     * Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Indicates DNS TTL time when `Type` is dns_only.
     */
    public readonly ttl!: pulumi.Output<number>;
    /**
     * Proxy mode.- `dnsOnly`: Only DNS.- `proxied`: Enable proxy.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Last modification date.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Site ID.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a LoadBalancing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancingArgs | LoadBalancingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancingState | undefined;
            resourceInputs["backupOriginGroupId"] = state ? state.backupOriginGroupId : undefined;
            resourceInputs["cname"] = state ? state.cname : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["loadBalancingId"] = state ? state.loadBalancingId : undefined;
            resourceInputs["originGroupId"] = state ? state.originGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as LoadBalancingArgs | undefined;
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.originGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'originGroupId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["backupOriginGroupId"] = args ? args.backupOriginGroupId : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["originGroupId"] = args ? args.originGroupId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["cname"] = undefined /*out*/;
            resourceInputs["loadBalancingId"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancing.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancing resources.
 */
export interface LoadBalancingState {
    /**
     * ID of the backup origin group to use.
     */
    backupOriginGroupId?: pulumi.Input<string>;
    /**
     * Schedules domain names. Note: This field may return null, indicating that no valid value can be obtained.
     */
    cname?: pulumi.Input<string>;
    /**
     * Subdomain name. You can use @ to represent the root domain.
     */
    host?: pulumi.Input<string>;
    /**
     * Load balancer instance ID.
     */
    loadBalancingId?: pulumi.Input<string>;
    /**
     * ID of the origin group to use.
     */
    originGroupId?: pulumi.Input<string>;
    /**
     * Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
     */
    status?: pulumi.Input<string>;
    /**
     * Indicates DNS TTL time when `Type` is dns_only.
     */
    ttl?: pulumi.Input<number>;
    /**
     * Proxy mode.- `dnsOnly`: Only DNS.- `proxied`: Enable proxy.
     */
    type?: pulumi.Input<string>;
    /**
     * Last modification date.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Site ID.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadBalancing resource.
 */
export interface LoadBalancingArgs {
    /**
     * ID of the backup origin group to use.
     */
    backupOriginGroupId?: pulumi.Input<string>;
    /**
     * Subdomain name. You can use @ to represent the root domain.
     */
    host: pulumi.Input<string>;
    /**
     * ID of the origin group to use.
     */
    originGroupId: pulumi.Input<string>;
    /**
     * Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
     */
    status?: pulumi.Input<string>;
    /**
     * Indicates DNS TTL time when `Type` is dns_only.
     */
    ttl?: pulumi.Input<number>;
    /**
     * Proxy mode.- `dnsOnly`: Only DNS.- `proxied`: Enable proxy.
     */
    type: pulumi.Input<string>;
    /**
     * Site ID.
     */
    zoneId: pulumi.Input<string>;
}
