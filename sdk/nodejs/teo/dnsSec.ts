// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

export class DnsSec extends pulumi.CustomResource {
    /**
     * Get an existing DnsSec resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsSecState, opts?: pulumi.CustomResourceOptions): DnsSec {
        return new DnsSec(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Teo/dnsSec:DnsSec';

    /**
     * Returns true if the given object is an instance of DnsSec.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsSec {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsSec.__pulumiType;
    }

    /**
     * DNSSEC infos.
     */
    public readonly dnssec!: pulumi.Output<outputs.Teo.DnsSecDnssec>;
    /**
     * Last modification date.
     */
    public /*out*/ readonly modifiedOn!: pulumi.Output<string>;
    /**
     * DNSSEC status. Valid values: `enabled`, `disabled`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Site ID.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a DnsSec resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsSecArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsSecArgs | DnsSecState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsSecState | undefined;
            resourceInputs["dnssec"] = state ? state.dnssec : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as DnsSecArgs | undefined;
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["dnssec"] = args ? args.dnssec : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["modifiedOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsSec.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsSec resources.
 */
export interface DnsSecState {
    /**
     * DNSSEC infos.
     */
    dnssec?: pulumi.Input<inputs.Teo.DnsSecDnssec>;
    /**
     * Last modification date.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * DNSSEC status. Valid values: `enabled`, `disabled`.
     */
    status?: pulumi.Input<string>;
    /**
     * Site ID.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsSec resource.
 */
export interface DnsSecArgs {
    /**
     * DNSSEC infos.
     */
    dnssec?: pulumi.Input<inputs.Teo.DnsSecDnssec>;
    /**
     * DNSSEC status. Valid values: `enabled`, `disabled`.
     */
    status: pulumi.Input<string>;
    /**
     * Site ID.
     */
    zoneId: pulumi.Input<string>;
}
