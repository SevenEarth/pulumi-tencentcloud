// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const dnsRecord = new tencentcloud.Teo.DnsRecord("dns_record", {
 *     content: "150.109.8.2",
 *     mode: "proxied",
 *     priority: 1,
 *     ttl: 1,
 *     type: "A",
 *     zoneId: "zone-297z8rf93cfw",
 * });
 * ```
 *
 * ## Import
 *
 * teo dns_record can be imported using the zone_id#dns_record_id, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:Teo/dnsRecord:DnsRecord dns_record zone-297z8rf93cfw#record-297z9ei9b9oc
 * ```
 */
export class DnsRecord extends pulumi.CustomResource {
    /**
     * Get an existing DnsRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsRecordState, opts?: pulumi.CustomResourceOptions): DnsRecord {
        return new DnsRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Teo/dnsRecord:DnsRecord';

    /**
     * Returns true if the given object is an instance of DnsRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRecord.__pulumiType;
    }

    /**
     * CNAME address. Note: This field may return null, indicating that no valid value can be obtained.
     */
    public /*out*/ readonly cname!: pulumi.Output<string>;
    /**
     * DNS record Content.
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * Creation date.
     */
    public /*out*/ readonly createdOn!: pulumi.Output<string>;
    /**
     * DNS record ID.
     */
    public /*out*/ readonly dnsRecordId!: pulumi.Output<string>;
    /**
     * Whether this domain enable load balancing, security, or l4 proxy capability. Valid values: `lb`, `security`, `l4`.
     */
    public /*out*/ readonly domainStatuses!: pulumi.Output<string[]>;
    /**
     * Whether the DNS record is locked.
     */
    public /*out*/ readonly locked!: pulumi.Output<boolean>;
    /**
     * Proxy mode. Valid values:- `dnsOnly`: only DNS resolution of the subdomain is enabled.- `proxied`: subdomain is proxied and accelerated.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * Last modification date.
     */
    public /*out*/ readonly modifiedOn!: pulumi.Output<string>;
    /**
     * DNS record Name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Priority of the record. Valid value range: 1-50, the smaller value, the higher priority.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Resolution status. Valid values: `active`, `pending`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Time to live of the DNS record cache in seconds.
     */
    public readonly ttl!: pulumi.Output<number>;
    /**
     * DNS record Type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `NS`, `CAA`, `SRV`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Site ID.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a DnsRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsRecordArgs | DnsRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsRecordState | undefined;
            resourceInputs["cname"] = state ? state.cname : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["dnsRecordId"] = state ? state.dnsRecordId : undefined;
            resourceInputs["domainStatuses"] = state ? state.domainStatuses : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as DnsRecordArgs | undefined;
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["cname"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["dnsRecordId"] = undefined /*out*/;
            resourceInputs["domainStatuses"] = undefined /*out*/;
            resourceInputs["locked"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsRecord.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsRecord resources.
 */
export interface DnsRecordState {
    /**
     * CNAME address. Note: This field may return null, indicating that no valid value can be obtained.
     */
    cname?: pulumi.Input<string>;
    /**
     * DNS record Content.
     */
    content?: pulumi.Input<string>;
    /**
     * Creation date.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * DNS record ID.
     */
    dnsRecordId?: pulumi.Input<string>;
    /**
     * Whether this domain enable load balancing, security, or l4 proxy capability. Valid values: `lb`, `security`, `l4`.
     */
    domainStatuses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the DNS record is locked.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Proxy mode. Valid values:- `dnsOnly`: only DNS resolution of the subdomain is enabled.- `proxied`: subdomain is proxied and accelerated.
     */
    mode?: pulumi.Input<string>;
    /**
     * Last modification date.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * DNS record Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Priority of the record. Valid value range: 1-50, the smaller value, the higher priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * Resolution status. Valid values: `active`, `pending`.
     */
    status?: pulumi.Input<string>;
    /**
     * Time to live of the DNS record cache in seconds.
     */
    ttl?: pulumi.Input<number>;
    /**
     * DNS record Type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `NS`, `CAA`, `SRV`.
     */
    type?: pulumi.Input<string>;
    /**
     * Site ID.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsRecord resource.
 */
export interface DnsRecordArgs {
    /**
     * DNS record Content.
     */
    content: pulumi.Input<string>;
    /**
     * Proxy mode. Valid values:- `dnsOnly`: only DNS resolution of the subdomain is enabled.- `proxied`: subdomain is proxied and accelerated.
     */
    mode: pulumi.Input<string>;
    /**
     * DNS record Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Priority of the record. Valid value range: 1-50, the smaller value, the higher priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * Resolution status. Valid values: `active`, `pending`.
     */
    status?: pulumi.Input<string>;
    /**
     * Time to live of the DNS record cache in seconds.
     */
    ttl?: pulumi.Input<number>;
    /**
     * DNS record Type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `NS`, `CAA`, `SRV`.
     */
    type: pulumi.Input<string>;
    /**
     * Site ID.
     */
    zoneId: pulumi.Input<string>;
}
