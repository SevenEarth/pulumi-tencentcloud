// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of dcdb instances
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const instances1 = pulumi.output(tencentcloud.Dcdb.getInstances({
 *     exclusterType: 0,
 *     instanceIds: "your_dcdb_instance1_id",
 *     isFilterExcluster: true,
 *     isFilterVpc: true,
 *     projectIds: [0],
 *     searchKey: "search_key",
 *     searchName: "instancename",
 *     subnetId: "your_subnet_id",
 *     vpcId: "your_vpc_id",
 * }));
 * const instances2 = pulumi.output(tencentcloud.Dcdb.getInstances({
 *     instanceIds: ["your_dcdb_instance2_id"],
 * }));
 * const instances3 = pulumi.output(tencentcloud.Dcdb.getInstances({
 *     exclusterType: 2,
 *     isFilterExcluster: false,
 *     searchKey: "instances3",
 *     searchName: "instancename",
 * }));
 * ```
 */
export function getInstances(args?: GetInstancesArgs, opts?: pulumi.InvokeOptions): Promise<GetInstancesResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("tencentcloud:Dcdb/getInstances:getInstances", {
        "exclusterType": args.exclusterType,
        "instanceIds": args.instanceIds,
        "isFilterExcluster": args.isFilterExcluster,
        "isFilterVpc": args.isFilterVpc,
        "projectIds": args.projectIds,
        "resultOutputFile": args.resultOutputFile,
        "searchKey": args.searchKey,
        "searchName": args.searchName,
        "subnetId": args.subnetId,
        "vpcId": args.vpcId,
    }, opts);
}

/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesArgs {
    /**
     * cluster excluster type.
     */
    exclusterType?: number;
    /**
     * instance ids.
     */
    instanceIds?: string[];
    /**
     * search according to the cluster excluter type.
     */
    isFilterExcluster?: boolean;
    /**
     * search according to the vpc.
     */
    isFilterVpc?: boolean;
    /**
     * project ids.
     */
    projectIds?: number[];
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
    /**
     * search key, support fuzzy query.
     */
    searchKey?: string;
    /**
     * search name, support instancename, vip, all.
     */
    searchName?: string;
    /**
     * subnet id, valid when IsFilterVpc is true.
     */
    subnetId?: string;
    /**
     * vpc id, valid when IsFilterVpc is true.
     */
    vpcId?: string;
}

/**
 * A collection of values returned by getInstances.
 */
export interface GetInstancesResult {
    readonly exclusterType?: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceIds?: string[];
    readonly isFilterExcluster?: boolean;
    readonly isFilterVpc?: boolean;
    /**
     * instance list.
     */
    readonly lists: outputs.Dcdb.GetInstancesList[];
    readonly projectIds?: number[];
    readonly resultOutputFile?: string;
    readonly searchKey?: string;
    readonly searchName?: string;
    /**
     * subnet id.
     */
    readonly subnetId?: string;
    /**
     * vpc id.
     */
    readonly vpcId: string;
}

export function getInstancesOutput(args?: GetInstancesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInstancesResult> {
    return pulumi.output(args).apply(a => getInstances(a, opts))
}

/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesOutputArgs {
    /**
     * cluster excluster type.
     */
    exclusterType?: pulumi.Input<number>;
    /**
     * instance ids.
     */
    instanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * search according to the cluster excluter type.
     */
    isFilterExcluster?: pulumi.Input<boolean>;
    /**
     * search according to the vpc.
     */
    isFilterVpc?: pulumi.Input<boolean>;
    /**
     * project ids.
     */
    projectIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * search key, support fuzzy query.
     */
    searchKey?: pulumi.Input<string>;
    /**
     * search name, support instancename, vip, all.
     */
    searchName?: pulumi.Input<string>;
    /**
     * subnet id, valid when IsFilterVpc is true.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * vpc id, valid when IsFilterVpc is true.
     */
    vpcId?: pulumi.Input<string>;
}
