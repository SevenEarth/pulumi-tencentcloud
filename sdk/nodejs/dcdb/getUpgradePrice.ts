// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of dcdb upgradePrice
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const addUpgradePrice = tencentcloud.Dcdb.getUpgradePrice({
 *     instanceId: local.dcdb_id,
 *     upgradeType: "ADD",
 *     addShardConfig: {
 *         shardCount: 2,
 *         shardMemory: 2,
 *         shardStorage: 100,
 *     },
 *     amountUnit: "pent",
 * });
 * const expandUpgradePrice = tencentcloud.Dcdb.getUpgradePrice({
 *     instanceId: local.dcdb_id,
 *     upgradeType: "EXPAND",
 *     expandShardConfig: {
 *         shardInstanceIds: ["shard-1b5r04az"],
 *         shardMemory: 2,
 *         shardStorage: 40,
 *         shardNodeCount: 2,
 *     },
 *     amountUnit: "pent",
 * });
 * const splitUpgradePrice = tencentcloud.Dcdb.getUpgradePrice({
 *     instanceId: local.dcdb_id,
 *     upgradeType: "SPLIT",
 *     splitShardConfig: {
 *         shardInstanceIds: ["shard-1b5r04az"],
 *         splitRate: 50,
 *         shardMemory: 2,
 *         shardStorage: 100,
 *     },
 *     amountUnit: "pent",
 * });
 * ```
 */
export function getUpgradePrice(args: GetUpgradePriceArgs, opts?: pulumi.InvokeOptions): Promise<GetUpgradePriceResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("tencentcloud:Dcdb/getUpgradePrice:getUpgradePrice", {
        "addShardConfig": args.addShardConfig,
        "amountUnit": args.amountUnit,
        "expandShardConfig": args.expandShardConfig,
        "instanceId": args.instanceId,
        "resultOutputFile": args.resultOutputFile,
        "splitShardConfig": args.splitShardConfig,
        "upgradeType": args.upgradeType,
    }, opts);
}

/**
 * A collection of arguments for invoking getUpgradePrice.
 */
export interface GetUpgradePriceArgs {
    /**
     * Config for adding new shard.
     */
    addShardConfig?: inputs.Dcdb.GetUpgradePriceAddShardConfig;
    /**
     * Price unit. Valid values: `pent` (cent), `microPent` (microcent).
     */
    amountUnit?: string;
    /**
     * Config for expanding existing shard.
     */
    expandShardConfig?: inputs.Dcdb.GetUpgradePriceExpandShardConfig;
    /**
     * Instance ID.
     */
    instanceId: string;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
    /**
     * Config for splitting existing shard.
     */
    splitShardConfig?: inputs.Dcdb.GetUpgradePriceSplitShardConfig;
    /**
     * Upgrade type, ADD: add new shard, EXPAND: upgrade the existing shard, SPLIT: split existing shard.
     */
    upgradeType: string;
}

/**
 * A collection of values returned by getUpgradePrice.
 */
export interface GetUpgradePriceResult {
    readonly addShardConfig?: outputs.Dcdb.GetUpgradePriceAddShardConfig;
    readonly amountUnit?: string;
    readonly expandShardConfig?: outputs.Dcdb.GetUpgradePriceExpandShardConfig;
    /**
     * Price calculation formula.
     */
    readonly formula: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: string;
    /**
     * Original price. Unit: Cent (default). If the request parameter contains `AmountUnit`, see `AmountUnit` description. Currency: CNY (Chinese site), USD (international site).
     */
    readonly originalPrice: number;
    /**
     * The actual price may be different from the original price due to discounts. Unit: Cent (default). If the request parameter contains `AmountUnit`, see `AmountUnit` description. Currency: CNY (Chinese site), USD (international site).
     */
    readonly price: number;
    readonly resultOutputFile?: string;
    readonly splitShardConfig?: outputs.Dcdb.GetUpgradePriceSplitShardConfig;
    readonly upgradeType: string;
}

export function getUpgradePriceOutput(args: GetUpgradePriceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUpgradePriceResult> {
    return pulumi.output(args).apply(a => getUpgradePrice(a, opts))
}

/**
 * A collection of arguments for invoking getUpgradePrice.
 */
export interface GetUpgradePriceOutputArgs {
    /**
     * Config for adding new shard.
     */
    addShardConfig?: pulumi.Input<inputs.Dcdb.GetUpgradePriceAddShardConfigArgs>;
    /**
     * Price unit. Valid values: `pent` (cent), `microPent` (microcent).
     */
    amountUnit?: pulumi.Input<string>;
    /**
     * Config for expanding existing shard.
     */
    expandShardConfig?: pulumi.Input<inputs.Dcdb.GetUpgradePriceExpandShardConfigArgs>;
    /**
     * Instance ID.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * Config for splitting existing shard.
     */
    splitShardConfig?: pulumi.Input<inputs.Dcdb.GetUpgradePriceSplitShardConfigArgs>;
    /**
     * Upgrade type, ADD: add new shard, EXPAND: upgrade the existing shard, SPLIT: split existing shard.
     */
    upgradeType: pulumi.Input<string>;
}
