// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of dcdb databaseTables
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const databaseTables = pulumi.output(tencentcloud.Dcdb.getDatabaseTables({
 *     cols: [{
 *         col: "",
 *         gt: [
 *             {},
 *             {},
 *         ],
 *         lt: [
 *             {},
 *             {},
 *         ],
 *         nil: [
 *             {},
 *             {},
 *         ],
 *         type: "",
 *     }],
 *     dbName: "",
 *     gt: [
 *         {},
 *         {},
 *         {},
 *     ],
 *     instanceId: "dcdbt-ow7t8lmc",
 *     lt: [
 *         {},
 *         {},
 *         {},
 *     ],
 *     nil: [
 *         {},
 *         {},
 *         {},
 *     ],
 *     table: "",
 * }));
 * ```
 */
export function getDatabaseTables(args: GetDatabaseTablesArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseTablesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("tencentcloud:Dcdb/getDatabaseTables:getDatabaseTables", {
        "dbName": args.dbName,
        "instanceId": args.instanceId,
        "resultOutputFile": args.resultOutputFile,
        "table": args.table,
    }, opts);
}

/**
 * A collection of arguments for invoking getDatabaseTables.
 */
export interface GetDatabaseTablesArgs {
    /**
     * Database name, obtained through the DescribeDatabases api.
     */
    dbName: string;
    /**
     * The ID of instance.
     */
    instanceId: string;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
    /**
     * Table name, obtained through the DescribeDatabaseObjects api.
     */
    table: string;
}

/**
 * A collection of values returned by getDatabaseTables.
 */
export interface GetDatabaseTablesResult {
    /**
     * Column information.
     */
    readonly cols: outputs.Dcdb.GetDatabaseTablesCol[];
    readonly dbName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: string;
    readonly resultOutputFile?: string;
    readonly table: string;
}

export function getDatabaseTablesOutput(args: GetDatabaseTablesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseTablesResult> {
    return pulumi.output(args).apply(a => getDatabaseTables(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseTables.
 */
export interface GetDatabaseTablesOutputArgs {
    /**
     * Database name, obtained through the DescribeDatabases api.
     */
    dbName: pulumi.Input<string>;
    /**
     * The ID of instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * Table name, obtained through the DescribeDatabaseObjects api.
     */
    table: pulumi.Input<string>;
}
