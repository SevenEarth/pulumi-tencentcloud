// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query Publish Subscribe resources for the specific SQL Server instance.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const zones = tencentcloud.Availability.getZonesByProduct({
 *     product: "sqlserver",
 * });
 * const vpc = new tencentcloud.vpc.Instance("vpc", {cidrBlock: "10.0.0.0/16"});
 * const subnet = new tencentcloud.subnet.Instance("subnet", {
 *     availabilityZone: zones.then(zones => zones.zones?.[4]?.name),
 *     vpcId: vpc.id,
 *     cidrBlock: "10.0.0.0/16",
 *     isMulticast: false,
 * });
 * const securityGroup = new tencentcloud.security.Group("securityGroup", {description: "desc."});
 * const examplePubGeneralCloudInstance = new tencentcloud.sqlserver.GeneralCloudInstance("examplePubGeneralCloudInstance", {
 *     zone: zones.then(zones => zones.zones?.[4]?.name),
 *     memory: 4,
 *     storage: 100,
 *     cpu: 2,
 *     machineType: "CLOUD_HSSD",
 *     instanceChargeType: "POSTPAID",
 *     projectId: 0,
 *     subnetId: subnet.id,
 *     vpcId: vpc.id,
 *     dbVersion: "2008R2",
 *     securityGroupLists: [securityGroup.id],
 *     weeklies: [
 *         1,
 *         2,
 *         3,
 *         5,
 *         6,
 *         7,
 *     ],
 *     startTime: "00:00",
 *     span: 6,
 *     resourceTags: [{
 *         tagKey: "test",
 *         tagValue: "test",
 *     }],
 *     collation: "Chinese_PRC_CI_AS",
 *     timeZone: "China Standard Time",
 * });
 * const exampleSubGeneralCloudInstance = new tencentcloud.sqlserver.GeneralCloudInstance("exampleSubGeneralCloudInstance", {
 *     zone: zones.then(zones => zones.zones?.[4]?.name),
 *     memory: 4,
 *     storage: 100,
 *     cpu: 2,
 *     machineType: "CLOUD_HSSD",
 *     instanceChargeType: "POSTPAID",
 *     projectId: 0,
 *     subnetId: subnet.id,
 *     vpcId: vpc.id,
 *     dbVersion: "2008R2",
 *     securityGroupLists: [securityGroup.id],
 *     weeklies: [
 *         1,
 *         2,
 *         3,
 *         5,
 *         6,
 *         7,
 *     ],
 *     startTime: "00:00",
 *     span: 6,
 *     resourceTags: [{
 *         tagKey: "test",
 *         tagValue: "test",
 *     }],
 *     collation: "Chinese_PRC_CI_AS",
 *     timeZone: "China Standard Time",
 * });
 * const examplePubDb = new tencentcloud.sqlserver.Db("examplePubDb", {
 *     instanceId: examplePubGeneralCloudInstance.id,
 *     charset: "Chinese_PRC_BIN",
 *     remark: "test-remark",
 * });
 * const exampleSubDb = new tencentcloud.sqlserver.Db("exampleSubDb", {
 *     instanceId: exampleSubGeneralCloudInstance.id,
 *     charset: "Chinese_PRC_BIN",
 *     remark: "test-remark",
 * });
 * const examplePublishSubscribe = new tencentcloud.sqlserver.PublishSubscribe("examplePublishSubscribe", {
 *     publishInstanceId: examplePubGeneralCloudInstance.id,
 *     subscribeInstanceId: exampleSubGeneralCloudInstance.id,
 *     publishSubscribeName: "example",
 *     deleteSubscribeDb: false,
 *     databaseTuples: [{
 *         publishDatabase: examplePubDb.name,
 *         subscribeDatabase: exampleSubDb.name,
 *     }],
 * });
 * const examplePublishSubscribes = tencentcloud.Sqlserver.getPublishSubscribesOutput({
 *     instanceId: examplePublishSubscribe.publishInstanceId,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getPublishSubscribes(args: GetPublishSubscribesArgs, opts?: pulumi.InvokeOptions): Promise<GetPublishSubscribesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:Sqlserver/getPublishSubscribes:getPublishSubscribes", {
        "instanceId": args.instanceId,
        "pubOrSubInstanceId": args.pubOrSubInstanceId,
        "pubOrSubInstanceIp": args.pubOrSubInstanceIp,
        "publishDatabase": args.publishDatabase,
        "publishSubscribeId": args.publishSubscribeId,
        "publishSubscribeName": args.publishSubscribeName,
        "resultOutputFile": args.resultOutputFile,
        "subscribeDatabase": args.subscribeDatabase,
    }, opts);
}

/**
 * A collection of arguments for invoking getPublishSubscribes.
 */
export interface GetPublishSubscribesArgs {
    /**
     * ID of the SQL Server instance.
     */
    instanceId: string;
    /**
     * The subscribe/publish instance ID. It is related to whether the `instanceId` is a publish instance or a subscribe instance. when `instanceId` is a publish instance, this field is filtered according to the subscribe instance ID; when `instanceId` is a subscribe instance, this field is filtering according to the publish instance ID.
     */
    pubOrSubInstanceId?: string;
    /**
     * The intranet IP of the subscribe/publish instance. It is related to whether the `instanceId` is a publish instance or a subscribe instance. when `instanceId` is a publish instance, this field is filtered according to the intranet IP of the subscribe instance; when `instanceId` is a subscribe instance, this field is based on the publish instance intranet IP filter.
     */
    pubOrSubInstanceIp?: string;
    /**
     * Name of publish database.
     */
    publishDatabase?: string;
    /**
     * The id of the Publish and Subscribe.
     */
    publishSubscribeId?: number;
    /**
     * The name of the Publish and Subscribe.
     */
    publishSubscribeName?: string;
    /**
     * Used to store results.
     */
    resultOutputFile?: string;
    /**
     * Name of subscribe database.
     */
    subscribeDatabase?: string;
}

/**
 * A collection of values returned by getPublishSubscribes.
 */
export interface GetPublishSubscribesResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: string;
    readonly pubOrSubInstanceId?: string;
    readonly pubOrSubInstanceIp?: string;
    /**
     * Name of the publish SQL Server instance.
     */
    readonly publishDatabase?: string;
    /**
     * The id of the Publish and Subscribe.
     */
    readonly publishSubscribeId?: number;
    /**
     * Publish and subscribe list. Each element contains the following attributes.
     */
    readonly publishSubscribeLists: outputs.Sqlserver.GetPublishSubscribesPublishSubscribeList[];
    /**
     * The name of the Publish and Subscribe.
     */
    readonly publishSubscribeName?: string;
    readonly resultOutputFile?: string;
    /**
     * Name of the subscribe SQL Server instance.
     */
    readonly subscribeDatabase?: string;
}
/**
 * Use this data source to query Publish Subscribe resources for the specific SQL Server instance.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const zones = tencentcloud.Availability.getZonesByProduct({
 *     product: "sqlserver",
 * });
 * const vpc = new tencentcloud.vpc.Instance("vpc", {cidrBlock: "10.0.0.0/16"});
 * const subnet = new tencentcloud.subnet.Instance("subnet", {
 *     availabilityZone: zones.then(zones => zones.zones?.[4]?.name),
 *     vpcId: vpc.id,
 *     cidrBlock: "10.0.0.0/16",
 *     isMulticast: false,
 * });
 * const securityGroup = new tencentcloud.security.Group("securityGroup", {description: "desc."});
 * const examplePubGeneralCloudInstance = new tencentcloud.sqlserver.GeneralCloudInstance("examplePubGeneralCloudInstance", {
 *     zone: zones.then(zones => zones.zones?.[4]?.name),
 *     memory: 4,
 *     storage: 100,
 *     cpu: 2,
 *     machineType: "CLOUD_HSSD",
 *     instanceChargeType: "POSTPAID",
 *     projectId: 0,
 *     subnetId: subnet.id,
 *     vpcId: vpc.id,
 *     dbVersion: "2008R2",
 *     securityGroupLists: [securityGroup.id],
 *     weeklies: [
 *         1,
 *         2,
 *         3,
 *         5,
 *         6,
 *         7,
 *     ],
 *     startTime: "00:00",
 *     span: 6,
 *     resourceTags: [{
 *         tagKey: "test",
 *         tagValue: "test",
 *     }],
 *     collation: "Chinese_PRC_CI_AS",
 *     timeZone: "China Standard Time",
 * });
 * const exampleSubGeneralCloudInstance = new tencentcloud.sqlserver.GeneralCloudInstance("exampleSubGeneralCloudInstance", {
 *     zone: zones.then(zones => zones.zones?.[4]?.name),
 *     memory: 4,
 *     storage: 100,
 *     cpu: 2,
 *     machineType: "CLOUD_HSSD",
 *     instanceChargeType: "POSTPAID",
 *     projectId: 0,
 *     subnetId: subnet.id,
 *     vpcId: vpc.id,
 *     dbVersion: "2008R2",
 *     securityGroupLists: [securityGroup.id],
 *     weeklies: [
 *         1,
 *         2,
 *         3,
 *         5,
 *         6,
 *         7,
 *     ],
 *     startTime: "00:00",
 *     span: 6,
 *     resourceTags: [{
 *         tagKey: "test",
 *         tagValue: "test",
 *     }],
 *     collation: "Chinese_PRC_CI_AS",
 *     timeZone: "China Standard Time",
 * });
 * const examplePubDb = new tencentcloud.sqlserver.Db("examplePubDb", {
 *     instanceId: examplePubGeneralCloudInstance.id,
 *     charset: "Chinese_PRC_BIN",
 *     remark: "test-remark",
 * });
 * const exampleSubDb = new tencentcloud.sqlserver.Db("exampleSubDb", {
 *     instanceId: exampleSubGeneralCloudInstance.id,
 *     charset: "Chinese_PRC_BIN",
 *     remark: "test-remark",
 * });
 * const examplePublishSubscribe = new tencentcloud.sqlserver.PublishSubscribe("examplePublishSubscribe", {
 *     publishInstanceId: examplePubGeneralCloudInstance.id,
 *     subscribeInstanceId: exampleSubGeneralCloudInstance.id,
 *     publishSubscribeName: "example",
 *     deleteSubscribeDb: false,
 *     databaseTuples: [{
 *         publishDatabase: examplePubDb.name,
 *         subscribeDatabase: exampleSubDb.name,
 *     }],
 * });
 * const examplePublishSubscribes = tencentcloud.Sqlserver.getPublishSubscribesOutput({
 *     instanceId: examplePublishSubscribe.publishInstanceId,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getPublishSubscribesOutput(args: GetPublishSubscribesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPublishSubscribesResult> {
    return pulumi.output(args).apply((a: any) => getPublishSubscribes(a, opts))
}

/**
 * A collection of arguments for invoking getPublishSubscribes.
 */
export interface GetPublishSubscribesOutputArgs {
    /**
     * ID of the SQL Server instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The subscribe/publish instance ID. It is related to whether the `instanceId` is a publish instance or a subscribe instance. when `instanceId` is a publish instance, this field is filtered according to the subscribe instance ID; when `instanceId` is a subscribe instance, this field is filtering according to the publish instance ID.
     */
    pubOrSubInstanceId?: pulumi.Input<string>;
    /**
     * The intranet IP of the subscribe/publish instance. It is related to whether the `instanceId` is a publish instance or a subscribe instance. when `instanceId` is a publish instance, this field is filtered according to the intranet IP of the subscribe instance; when `instanceId` is a subscribe instance, this field is based on the publish instance intranet IP filter.
     */
    pubOrSubInstanceIp?: pulumi.Input<string>;
    /**
     * Name of publish database.
     */
    publishDatabase?: pulumi.Input<string>;
    /**
     * The id of the Publish and Subscribe.
     */
    publishSubscribeId?: pulumi.Input<number>;
    /**
     * The name of the Publish and Subscribe.
     */
    publishSubscribeName?: pulumi.Input<string>;
    /**
     * Used to store results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * Name of subscribe database.
     */
    subscribeDatabase?: pulumi.Input<string>;
}
