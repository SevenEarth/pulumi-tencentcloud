// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to query Publish Subscribe resources for the specific SQL Server instance.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 *
 * const example = new tencentcloud.sqlserver.PublishSubscribe("example", {
 *     publishInstanceId: tencentcloud_sqlserver_instance.publish_instance.id,
 *     subscribeInstanceId: tencentcloud_sqlserver_instance.subscribe_instance.id,
 *     publishSubscribeName: "example",
 *     deleteSubscribeDb: false,
 *     databaseTuples: [{
 *         publishDatabase: tencentcloud_sqlserver_db.test_publish_subscribe.name,
 *     }],
 * });
 * ```
 */
export function getPublishSubscribes(args: GetPublishSubscribesArgs, opts?: pulumi.InvokeOptions): Promise<GetPublishSubscribesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("tencentcloud:Sqlserver/getPublishSubscribes:getPublishSubscribes", {
        "instanceId": args.instanceId,
        "pubOrSubInstanceId": args.pubOrSubInstanceId,
        "pubOrSubInstanceIp": args.pubOrSubInstanceIp,
        "publishDatabase": args.publishDatabase,
        "publishSubscribeId": args.publishSubscribeId,
        "publishSubscribeName": args.publishSubscribeName,
        "resultOutputFile": args.resultOutputFile,
        "subscribeDatabase": args.subscribeDatabase,
    }, opts);
}

/**
 * A collection of arguments for invoking getPublishSubscribes.
 */
export interface GetPublishSubscribesArgs {
    /**
     * ID of the SQL Server instance.
     */
    instanceId: string;
    /**
     * The subscribe/publish instance ID. It is related to whether the `instanceId` is a publish instance or a subscribe instance. when `instanceId` is a publish instance, this field is filtered according to the subscribe instance ID; when `instanceId` is a subscribe instance, this field is filtering according to the publish instance ID.
     */
    pubOrSubInstanceId?: string;
    /**
     * The intranet IP of the subscribe/publish instance. It is related to whether the `instanceId` is a publish instance or a subscribe instance. when `instanceId` is a publish instance, this field is filtered according to the intranet IP of the subscribe instance; when `instanceId` is a subscribe instance, this field is based on the publish instance intranet IP filter.
     */
    pubOrSubInstanceIp?: string;
    /**
     * Name of publish database.
     */
    publishDatabase?: string;
    /**
     * The id of the Publish and Subscribe.
     */
    publishSubscribeId?: number;
    /**
     * The name of the Publish and Subscribe.
     */
    publishSubscribeName?: string;
    /**
     * Used to store results.
     */
    resultOutputFile?: string;
    /**
     * Name of subscribe database.
     */
    subscribeDatabase?: string;
}

/**
 * A collection of values returned by getPublishSubscribes.
 */
export interface GetPublishSubscribesResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: string;
    readonly pubOrSubInstanceId?: string;
    readonly pubOrSubInstanceIp?: string;
    /**
     * Name of the publish SQL Server instance.
     */
    readonly publishDatabase?: string;
    /**
     * The id of the Publish and Subscribe.
     */
    readonly publishSubscribeId?: number;
    /**
     * Publish and subscribe list. Each element contains the following attributes.
     */
    readonly publishSubscribeLists: outputs.Sqlserver.GetPublishSubscribesPublishSubscribeList[];
    /**
     * The name of the Publish and Subscribe.
     */
    readonly publishSubscribeName?: string;
    readonly resultOutputFile?: string;
    /**
     * Name of the subscribe SQL Server instance.
     */
    readonly subscribeDatabase?: string;
}

export function getPublishSubscribesOutput(args: GetPublishSubscribesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPublishSubscribesResult> {
    return pulumi.output(args).apply(a => getPublishSubscribes(a, opts))
}

/**
 * A collection of arguments for invoking getPublishSubscribes.
 */
export interface GetPublishSubscribesOutputArgs {
    /**
     * ID of the SQL Server instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The subscribe/publish instance ID. It is related to whether the `instanceId` is a publish instance or a subscribe instance. when `instanceId` is a publish instance, this field is filtered according to the subscribe instance ID; when `instanceId` is a subscribe instance, this field is filtering according to the publish instance ID.
     */
    pubOrSubInstanceId?: pulumi.Input<string>;
    /**
     * The intranet IP of the subscribe/publish instance. It is related to whether the `instanceId` is a publish instance or a subscribe instance. when `instanceId` is a publish instance, this field is filtered according to the intranet IP of the subscribe instance; when `instanceId` is a subscribe instance, this field is based on the publish instance intranet IP filter.
     */
    pubOrSubInstanceIp?: pulumi.Input<string>;
    /**
     * Name of publish database.
     */
    publishDatabase?: pulumi.Input<string>;
    /**
     * The id of the Publish and Subscribe.
     */
    publishSubscribeId?: pulumi.Input<number>;
    /**
     * The name of the Publish and Subscribe.
     */
    publishSubscribeName?: pulumi.Input<string>;
    /**
     * Used to store results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * Name of subscribe database.
     */
    subscribeDatabase?: pulumi.Input<string>;
}
