// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a SQL Server PublishSubscribe resource belongs to SQL Server instance.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const zones = tencentcloud.Availability.getZonesByProduct({
 *     product: "sqlserver",
 * });
 * const vpc = new tencentcloud.vpc.Instance("vpc", {cidrBlock: "10.0.0.0/16"});
 * const subnet = new tencentcloud.subnet.Instance("subnet", {
 *     availabilityZone: zones.then(zones => zones.zones?.[4]?.name),
 *     vpcId: vpc.id,
 *     cidrBlock: "10.0.0.0/16",
 *     isMulticast: false,
 * });
 * const securityGroup = new tencentcloud.security.Group("securityGroup", {description: "desc."});
 * const examplePubGeneralCloudInstance = new tencentcloud.sqlserver.GeneralCloudInstance("examplePubGeneralCloudInstance", {
 *     zone: zones.then(zones => zones.zones?.[4]?.name),
 *     memory: 4,
 *     storage: 100,
 *     cpu: 2,
 *     machineType: "CLOUD_HSSD",
 *     instanceChargeType: "POSTPAID",
 *     projectId: 0,
 *     subnetId: subnet.id,
 *     vpcId: vpc.id,
 *     dbVersion: "2008R2",
 *     securityGroupLists: [securityGroup.id],
 *     weeklies: [
 *         1,
 *         2,
 *         3,
 *         5,
 *         6,
 *         7,
 *     ],
 *     startTime: "00:00",
 *     span: 6,
 *     resourceTags: [{
 *         tagKey: "test",
 *         tagValue: "test",
 *     }],
 *     collation: "Chinese_PRC_CI_AS",
 *     timeZone: "China Standard Time",
 * });
 * const exampleSubGeneralCloudInstance = new tencentcloud.sqlserver.GeneralCloudInstance("exampleSubGeneralCloudInstance", {
 *     zone: zones.then(zones => zones.zones?.[4]?.name),
 *     memory: 4,
 *     storage: 100,
 *     cpu: 2,
 *     machineType: "CLOUD_HSSD",
 *     instanceChargeType: "POSTPAID",
 *     projectId: 0,
 *     subnetId: subnet.id,
 *     vpcId: vpc.id,
 *     dbVersion: "2008R2",
 *     securityGroupLists: [securityGroup.id],
 *     weeklies: [
 *         1,
 *         2,
 *         3,
 *         5,
 *         6,
 *         7,
 *     ],
 *     startTime: "00:00",
 *     span: 6,
 *     resourceTags: [{
 *         tagKey: "test",
 *         tagValue: "test",
 *     }],
 *     collation: "Chinese_PRC_CI_AS",
 *     timeZone: "China Standard Time",
 * });
 * const examplePubDb = new tencentcloud.sqlserver.Db("examplePubDb", {
 *     instanceId: examplePubGeneralCloudInstance.id,
 *     charset: "Chinese_PRC_BIN",
 *     remark: "test-remark",
 * });
 * const exampleSubDb = new tencentcloud.sqlserver.Db("exampleSubDb", {
 *     instanceId: exampleSubGeneralCloudInstance.id,
 *     charset: "Chinese_PRC_BIN",
 *     remark: "test-remark",
 * });
 * const example = new tencentcloud.sqlserver.PublishSubscribe("example", {
 *     publishInstanceId: examplePubGeneralCloudInstance.id,
 *     subscribeInstanceId: exampleSubGeneralCloudInstance.id,
 *     publishSubscribeName: "example",
 *     deleteSubscribeDb: false,
 *     databaseTuples: [{
 *         publishDatabase: examplePubDb.name,
 *         subscribeDatabase: exampleSubDb.name,
 *     }],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * SQL Server PublishSubscribe can be imported using the publish_sqlserver_id#subscribe_sqlserver_id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Sqlserver/publishSubscribe:PublishSubscribe example publish_sqlserver_id#subscribe_sqlserver_id
 * ```
 */
export class PublishSubscribe extends pulumi.CustomResource {
    /**
     * Get an existing PublishSubscribe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PublishSubscribeState, opts?: pulumi.CustomResourceOptions): PublishSubscribe {
        return new PublishSubscribe(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Sqlserver/publishSubscribe:PublishSubscribe';

    /**
     * Returns true if the given object is an instance of PublishSubscribe.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PublishSubscribe {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PublishSubscribe.__pulumiType;
    }

    /**
     * Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
     */
    public readonly databaseTuples!: pulumi.Output<outputs.Sqlserver.PublishSubscribeDatabaseTuple[]>;
    /**
     * Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
     */
    public readonly deleteSubscribeDb!: pulumi.Output<boolean | undefined>;
    /**
     * ID of the SQL Server instance which publish.
     */
    public readonly publishInstanceId!: pulumi.Output<string>;
    /**
     * The name of the Publish and Subscribe. Default is `defaultName`.
     */
    public readonly publishSubscribeName!: pulumi.Output<string | undefined>;
    /**
     * ID of the SQL Server instance which subscribe.
     */
    public readonly subscribeInstanceId!: pulumi.Output<string>;

    /**
     * Create a PublishSubscribe resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PublishSubscribeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PublishSubscribeArgs | PublishSubscribeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PublishSubscribeState | undefined;
            resourceInputs["databaseTuples"] = state ? state.databaseTuples : undefined;
            resourceInputs["deleteSubscribeDb"] = state ? state.deleteSubscribeDb : undefined;
            resourceInputs["publishInstanceId"] = state ? state.publishInstanceId : undefined;
            resourceInputs["publishSubscribeName"] = state ? state.publishSubscribeName : undefined;
            resourceInputs["subscribeInstanceId"] = state ? state.subscribeInstanceId : undefined;
        } else {
            const args = argsOrState as PublishSubscribeArgs | undefined;
            if ((!args || args.databaseTuples === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseTuples'");
            }
            if ((!args || args.publishInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publishInstanceId'");
            }
            if ((!args || args.subscribeInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscribeInstanceId'");
            }
            resourceInputs["databaseTuples"] = args ? args.databaseTuples : undefined;
            resourceInputs["deleteSubscribeDb"] = args ? args.deleteSubscribeDb : undefined;
            resourceInputs["publishInstanceId"] = args ? args.publishInstanceId : undefined;
            resourceInputs["publishSubscribeName"] = args ? args.publishSubscribeName : undefined;
            resourceInputs["subscribeInstanceId"] = args ? args.subscribeInstanceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PublishSubscribe.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PublishSubscribe resources.
 */
export interface PublishSubscribeState {
    /**
     * Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
     */
    databaseTuples?: pulumi.Input<pulumi.Input<inputs.Sqlserver.PublishSubscribeDatabaseTuple>[]>;
    /**
     * Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
     */
    deleteSubscribeDb?: pulumi.Input<boolean>;
    /**
     * ID of the SQL Server instance which publish.
     */
    publishInstanceId?: pulumi.Input<string>;
    /**
     * The name of the Publish and Subscribe. Default is `defaultName`.
     */
    publishSubscribeName?: pulumi.Input<string>;
    /**
     * ID of the SQL Server instance which subscribe.
     */
    subscribeInstanceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PublishSubscribe resource.
 */
export interface PublishSubscribeArgs {
    /**
     * Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
     */
    databaseTuples: pulumi.Input<pulumi.Input<inputs.Sqlserver.PublishSubscribeDatabaseTuple>[]>;
    /**
     * Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
     */
    deleteSubscribeDb?: pulumi.Input<boolean>;
    /**
     * ID of the SQL Server instance which publish.
     */
    publishInstanceId: pulumi.Input<string>;
    /**
     * The name of the Publish and Subscribe. Default is `defaultName`.
     */
    publishSubscribeName?: pulumi.Input<string>;
    /**
     * ID of the SQL Server instance which subscribe.
     */
    subscribeInstanceId: pulumi.Input<string>;
}
