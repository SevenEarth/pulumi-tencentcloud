// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to query vpc subnets information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const config = new pulumi.Config();
 * const availabilityZone = config.get("availabilityZone") || "ap-guangzhou-3";
 * const foo = new tencentcloud.vpc.Instance("foo", {cidrBlock: "10.0.0.0/16"});
 * const subnet = new tencentcloud.subnet.Instance("subnet", {
 *     availabilityZone: availabilityZone,
 *     vpcId: foo.id,
 *     cidrBlock: "10.0.20.0/28",
 *     isMulticast: false,
 *     tags: {
 *         test: "test",
 *     },
 * });
 * const idInstances = tencentcloud.Vpc.getSubnetsOutput({
 *     subnetId: subnet.id,
 * });
 * const nameInstances = tencentcloud.Vpc.getSubnetsOutput({
 *     name: subnet.name,
 * });
 * const tagsInstances = subnet.tags.apply(tags => tencentcloud.Vpc.getSubnetsOutput({
 *     tags: tags,
 * }));
 * ```
 */
export function getSubnets(args?: GetSubnetsArgs, opts?: pulumi.InvokeOptions): Promise<GetSubnetsResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("tencentcloud:Vpc/getSubnets:getSubnets", {
        "availabilityZone": args.availabilityZone,
        "cidrBlock": args.cidrBlock,
        "isDefault": args.isDefault,
        "isRemoteVpcSnat": args.isRemoteVpcSnat,
        "name": args.name,
        "resultOutputFile": args.resultOutputFile,
        "subnetId": args.subnetId,
        "tagKey": args.tagKey,
        "tags": args.tags,
        "vpcId": args.vpcId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSubnets.
 */
export interface GetSubnetsArgs {
    /**
     * Zone of the subnet to be queried.
     */
    availabilityZone?: string;
    /**
     * Filter subnet with this CIDR.
     */
    cidrBlock?: string;
    /**
     * Filter default or no default subnets.
     */
    isDefault?: boolean;
    /**
     * Filter the VPC SNAT address pool subnet.
     */
    isRemoteVpcSnat?: boolean;
    /**
     * Name of the subnet to be queried.
     */
    name?: string;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
    /**
     * ID of the subnet to be queried.
     */
    subnetId?: string;
    /**
     * Filter if subnet has this tag.
     */
    tagKey?: string;
    /**
     * Tags of the subnet to be queried.
     */
    tags?: {[key: string]: any};
    /**
     * ID of the VPC to be queried.
     */
    vpcId?: string;
}

/**
 * A collection of values returned by getSubnets.
 */
export interface GetSubnetsResult {
    /**
     * The availability zone of the subnet.
     */
    readonly availabilityZone?: string;
    /**
     * A network address block of the subnet.
     */
    readonly cidrBlock?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * List of subnets.
     */
    readonly instanceLists: outputs.Vpc.GetSubnetsInstanceList[];
    /**
     * Indicates whether it is the default subnet of the VPC for this region.
     */
    readonly isDefault?: boolean;
    readonly isRemoteVpcSnat?: boolean;
    /**
     * Name of the subnet.
     */
    readonly name?: string;
    readonly resultOutputFile?: string;
    /**
     * ID of the subnet.
     */
    readonly subnetId?: string;
    readonly tagKey?: string;
    /**
     * Tags of the subnet resource.
     */
    readonly tags?: {[key: string]: any};
    /**
     * ID of the VPC.
     */
    readonly vpcId?: string;
}

export function getSubnetsOutput(args?: GetSubnetsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSubnetsResult> {
    return pulumi.output(args).apply(a => getSubnets(a, opts))
}

/**
 * A collection of arguments for invoking getSubnets.
 */
export interface GetSubnetsOutputArgs {
    /**
     * Zone of the subnet to be queried.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Filter subnet with this CIDR.
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * Filter default or no default subnets.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Filter the VPC SNAT address pool subnet.
     */
    isRemoteVpcSnat?: pulumi.Input<boolean>;
    /**
     * Name of the subnet to be queried.
     */
    name?: pulumi.Input<string>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * ID of the subnet to be queried.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Filter if subnet has this tag.
     */
    tagKey?: pulumi.Input<string>;
    /**
     * Tags of the subnet to be queried.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * ID of the VPC to be queried.
     */
    vpcId?: pulumi.Input<string>;
}
