// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of vpc netDetectStateCheck
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const netDetectStateCheck = pulumi.output(tencentcloud.Vpc.getNetDetectStateCheck({
 *     detectDestinationIps: [
 *         "10.0.0.3",
 *         "10.0.0.2",
 *     ],
 *     netDetectId: "netd-12345678",
 *     nextHopDestination: "10.0.0.4",
 *     nextHopType: "NORMAL_CVM",
 * }));
 * ```
 */
export function getNetDetectStateCheck(args: GetNetDetectStateCheckArgs, opts?: pulumi.InvokeOptions): Promise<GetNetDetectStateCheckResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("tencentcloud:Vpc/getNetDetectStateCheck:getNetDetectStateCheck", {
        "detectDestinationIps": args.detectDestinationIps,
        "netDetectId": args.netDetectId,
        "netDetectName": args.netDetectName,
        "nextHopDestination": args.nextHopDestination,
        "nextHopType": args.nextHopType,
        "resultOutputFile": args.resultOutputFile,
        "subnetId": args.subnetId,
        "vpcId": args.vpcId,
    }, opts);
}

/**
 * A collection of arguments for invoking getNetDetectStateCheck.
 */
export interface GetNetDetectStateCheckArgs {
    /**
     * The array of detection destination IPv4 addresses, which contains at most two IP addresses.
     */
    detectDestinationIps: string[];
    /**
     * ID of a network inspector instance, e.g. netd-12345678. Enter at least one of this parameter, VpcId, SubnetId, and NetDetectName. Use NetDetectId if it is present.
     */
    netDetectId?: string;
    /**
     * The name of a network inspector, up to 60 bytes in length. It is used together with VpcId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
     */
    netDetectName?: string;
    /**
     * The next-hop destination gateway. The value is related to NextHopType.If NextHopType is set to VPN, the value of this parameter is the VPN gateway ID, such as vpngw-12345678.If NextHopType is set to DIRECTCONNECT, the value of this parameter is the direct connect gateway ID, such as dcg-12345678.If NextHopType is set to PEERCONNECTION, the value of this parameter is the peering connection ID, such as pcx-12345678.If NextHopType is set to NAT, the value of this parameter is the NAT gateway ID, such as nat-12345678.If NextHopType is set to NORMAL_CVM, the value of this parameter is the IPv4 address of the CVM, such as 10.0.0.12.
     */
    nextHopDestination: string;
    /**
     * The type of the next hop. Currently supported types are:VPN: VPN gateway;DIRECTCONNECT: direct connect gateway;PEERCONNECTION: peering connection;NAT: NAT gateway;NORMAL_CVM: normal CVM.
     */
    nextHopType: string;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
    /**
     * ID of a subnet instance, e.g. `subnet-12345678`, which is used together with VpcId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
     */
    subnetId?: string;
    /**
     * ID of a `VPC` instance, e.g. `vpc-12345678`, which is used together with SubnetId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
     */
    vpcId?: string;
}

/**
 * A collection of values returned by getNetDetectStateCheck.
 */
export interface GetNetDetectStateCheckResult {
    /**
     * The destination IPv4 address of network detection.
     */
    readonly detectDestinationIps: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly netDetectId?: string;
    /**
     * The array of network detection verification results.
     */
    readonly netDetectIpStateSets: outputs.Vpc.GetNetDetectStateCheckNetDetectIpStateSet[];
    readonly netDetectName?: string;
    readonly nextHopDestination: string;
    readonly nextHopType: string;
    readonly resultOutputFile?: string;
    readonly subnetId?: string;
    readonly vpcId?: string;
}

export function getNetDetectStateCheckOutput(args: GetNetDetectStateCheckOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetDetectStateCheckResult> {
    return pulumi.output(args).apply(a => getNetDetectStateCheck(a, opts))
}

/**
 * A collection of arguments for invoking getNetDetectStateCheck.
 */
export interface GetNetDetectStateCheckOutputArgs {
    /**
     * The array of detection destination IPv4 addresses, which contains at most two IP addresses.
     */
    detectDestinationIps: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of a network inspector instance, e.g. netd-12345678. Enter at least one of this parameter, VpcId, SubnetId, and NetDetectName. Use NetDetectId if it is present.
     */
    netDetectId?: pulumi.Input<string>;
    /**
     * The name of a network inspector, up to 60 bytes in length. It is used together with VpcId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
     */
    netDetectName?: pulumi.Input<string>;
    /**
     * The next-hop destination gateway. The value is related to NextHopType.If NextHopType is set to VPN, the value of this parameter is the VPN gateway ID, such as vpngw-12345678.If NextHopType is set to DIRECTCONNECT, the value of this parameter is the direct connect gateway ID, such as dcg-12345678.If NextHopType is set to PEERCONNECTION, the value of this parameter is the peering connection ID, such as pcx-12345678.If NextHopType is set to NAT, the value of this parameter is the NAT gateway ID, such as nat-12345678.If NextHopType is set to NORMAL_CVM, the value of this parameter is the IPv4 address of the CVM, such as 10.0.0.12.
     */
    nextHopDestination: pulumi.Input<string>;
    /**
     * The type of the next hop. Currently supported types are:VPN: VPN gateway;DIRECTCONNECT: direct connect gateway;PEERCONNECTION: peering connection;NAT: NAT gateway;NORMAL_CVM: normal CVM.
     */
    nextHopType: pulumi.Input<string>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * ID of a subnet instance, e.g. `subnet-12345678`, which is used together with VpcId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * ID of a `VPC` instance, e.g. `vpc-12345678`, which is used together with SubnetId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
     */
    vpcId?: pulumi.Input<string>;
}
