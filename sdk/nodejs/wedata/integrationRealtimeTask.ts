// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a wedata integrationRealtimeTask
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const example = new tencentcloud.wedata.IntegrationRealtimeTask("example", {
 *     description: "description.",
 *     projectId: "1612982498218618880",
 *     syncType: 1,
 *     taskInfo: {
 *         configs: [
 *             {
 *                 name: "concurrency",
 *                 value: "1",
 *             },
 *             {
 *                 name: "TaskManager",
 *                 value: "1",
 *             },
 *             {
 *                 name: "JobManager",
 *                 value: "1",
 *             },
 *             {
 *                 name: "TolerateDirtyData",
 *                 value: "0",
 *             },
 *             {
 *                 name: "CheckpointingInterval",
 *                 value: "1",
 *             },
 *             {
 *                 name: "CheckpointingIntervalUnit",
 *                 value: "min",
 *             },
 *             {
 *                 name: "RestartStrategyFixedDelayAttempts",
 *                 value: "-1",
 *             },
 *             {
 *                 name: "ResourceAllocationType",
 *                 value: "0",
 *             },
 *             {
 *                 name: "TaskAlarmRegularList",
 *                 value: "35",
 *             },
 *         ],
 *         executorId: "20230313175748567418",
 *         incharge: "100028439226",
 *     },
 *     taskMode: "1",
 *     taskName: "tf_example",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * wedata integration_realtime_task can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Wedata/integrationRealtimeTask:IntegrationRealtimeTask example 1776563389209296896#h9d39630a-ae45-4460-90b2-0b093cbfef5d
 * ```
 */
export class IntegrationRealtimeTask extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationRealtimeTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationRealtimeTaskState, opts?: pulumi.CustomResourceOptions): IntegrationRealtimeTask {
        return new IntegrationRealtimeTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Wedata/integrationRealtimeTask:IntegrationRealtimeTask';

    /**
     * Returns true if the given object is an instance of IntegrationRealtimeTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationRealtimeTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationRealtimeTask.__pulumiType;
    }

    /**
     * Description information.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Project ID.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
     */
    public readonly syncType!: pulumi.Output<number>;
    /**
     * The task id to which the node belongs.
     */
    public /*out*/ readonly taskId!: pulumi.Output<string>;
    /**
     * Task Information.
     */
    public readonly taskInfo!: pulumi.Output<outputs.Wedata.IntegrationRealtimeTaskTaskInfo>;
    /**
     * Task display mode, 0: canvas mode, 1: form mode.
     */
    public readonly taskMode!: pulumi.Output<string>;
    /**
     * Task name.
     */
    public readonly taskName!: pulumi.Output<string>;

    /**
     * Create a IntegrationRealtimeTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationRealtimeTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationRealtimeTaskArgs | IntegrationRealtimeTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationRealtimeTaskState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["syncType"] = state ? state.syncType : undefined;
            resourceInputs["taskId"] = state ? state.taskId : undefined;
            resourceInputs["taskInfo"] = state ? state.taskInfo : undefined;
            resourceInputs["taskMode"] = state ? state.taskMode : undefined;
            resourceInputs["taskName"] = state ? state.taskName : undefined;
        } else {
            const args = argsOrState as IntegrationRealtimeTaskArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.syncType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syncType'");
            }
            if ((!args || args.taskInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskInfo'");
            }
            if ((!args || args.taskMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskMode'");
            }
            if ((!args || args.taskName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["syncType"] = args ? args.syncType : undefined;
            resourceInputs["taskInfo"] = args ? args.taskInfo : undefined;
            resourceInputs["taskMode"] = args ? args.taskMode : undefined;
            resourceInputs["taskName"] = args ? args.taskName : undefined;
            resourceInputs["taskId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationRealtimeTask.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntegrationRealtimeTask resources.
 */
export interface IntegrationRealtimeTaskState {
    /**
     * Description information.
     */
    description?: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
     */
    syncType?: pulumi.Input<number>;
    /**
     * The task id to which the node belongs.
     */
    taskId?: pulumi.Input<string>;
    /**
     * Task Information.
     */
    taskInfo?: pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfo>;
    /**
     * Task display mode, 0: canvas mode, 1: form mode.
     */
    taskMode?: pulumi.Input<string>;
    /**
     * Task name.
     */
    taskName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationRealtimeTask resource.
 */
export interface IntegrationRealtimeTaskArgs {
    /**
     * Description information.
     */
    description?: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId: pulumi.Input<string>;
    /**
     * Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
     */
    syncType: pulumi.Input<number>;
    /**
     * Task Information.
     */
    taskInfo: pulumi.Input<inputs.Wedata.IntegrationRealtimeTaskTaskInfo>;
    /**
     * Task display mode, 0: canvas mode, 1: form mode.
     */
    taskMode: pulumi.Input<string>;
    /**
     * Task name.
     */
    taskName: pulumi.Input<string>;
}
