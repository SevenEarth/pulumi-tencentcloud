// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of rum eventUrl
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const eventUrl = tencentcloud.Rum.getEventUrl({
 *     endTime: 1625454840,
 *     projectId: 1,
 *     startTime: 1625444040,
 *     type: "allcount",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getEventUrl(args: GetEventUrlArgs, opts?: pulumi.InvokeOptions): Promise<GetEventUrlResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:Rum/getEventUrl:getEventUrl", {
        "area": args.area,
        "brand": args.brand,
        "browser": args.browser,
        "device": args.device,
        "endTime": args.endTime,
        "engine": args.engine,
        "env": args.env,
        "extFirst": args.extFirst,
        "extSecond": args.extSecond,
        "extThird": args.extThird,
        "from": args.from,
        "isAbroad": args.isAbroad,
        "isp": args.isp,
        "level": args.level,
        "name": args.name,
        "netType": args.netType,
        "os": args.os,
        "platform": args.platform,
        "projectId": args.projectId,
        "resultOutputFile": args.resultOutputFile,
        "startTime": args.startTime,
        "type": args.type,
        "versionNum": args.versionNum,
    }, opts);
}

/**
 * A collection of arguments for invoking getEventUrl.
 */
export interface GetEventUrlArgs {
    /**
     * The region where the data reporting takes place.
     */
    area?: string;
    /**
     * The mobile phone brand used for data reporting.
     */
    brand?: string;
    /**
     * The browser type used for data reporting.
     */
    browser?: string;
    /**
     * The device used for data reporting.
     */
    device?: string;
    /**
     * End time but is represented using a timestamp in seconds.
     */
    endTime: number;
    /**
     * The browser engine used for data reporting.
     */
    engine?: string;
    /**
     * The code environment where the data reporting takes place.(`production`: production env, `development`: development env, `gray`: gray env, `pre`: pre env, `daily`: daily env, `local`: local env, `others`: others env).
     */
    env?: string;
    /**
     * First Expansion parameter.
     */
    extFirst?: string;
    /**
     * Second Expansion parameter.
     */
    extSecond?: string;
    /**
     * Third Expansion parameter.
     */
    extThird?: string;
    /**
     * The source page of the data reporting.
     */
    from?: string;
    /**
     * Whether it is non-China region.`1`: yes; `0`: no.
     */
    isAbroad?: string;
    /**
     * The internet service provider used for data reporting.
     */
    isp?: string;
    /**
     * Log level for data reporting(`1`: whitelist, `2`: normal, `4`: error, `8`: promise error, `16`: ajax request error, `32`: js resource load error, `64`: image resource load error, `128`: css resource load error, `256`: console.error, `512`: video resource load error, `1024`: request retcode error, `2048`: sdk self monitor error, `4096`: pv log, `8192`: event log).
     */
    level?: string;
    /**
     * Event name for data reporting.
     */
    name?: string;
    /**
     * The network type used for data reporting.(`1`: Wifi, `2`: 2G, `3`: 3G, `4`: 4G, `5`: 5G, `6`: 6G, `100`: Unknown).
     */
    netType?: string;
    /**
     * The operating system used for data reporting.
     */
    os?: string;
    /**
     * The platform where the data reporting takes place.(`1`: Android, `2`: IOS, `3`: Windows, `4`: Mac, `5`: Linux, `100`: Other).
     */
    platform?: string;
    /**
     * Project ID.
     */
    projectId: number;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
    /**
     * Start time but is represented using a timestamp in seconds.
     */
    startTime: number;
    /**
     * Query Data Type. `allcount`:CostType allcount, `day`:CostType group by day, `condition`:CostType group by condition, `ckuv`:CostType group by uv, `ckpv`:CostType group by pv, `nettype`: CostType sort by nettype, `version`: CostType sort by version, `platform`: CostType sort by platform, `isp`: CostType sort by isp, `region`: CostType sort by region, `device`: CostType sort by device, `browser`: CostType sort by browser, `ext1`: CostType sort by ext1, `ext2`: CostType sort by ext2, `ext3`: CostType sort by ext3, `ret`: CostType sort by ret, `status`: CostType sort by status, `from`: CostType sort by from, `url`: CostType sort by url, `env`: CostType sort by env.
     */
    type: string;
    /**
     * The SDK version used for data reporting.
     */
    versionNum?: string;
}

/**
 * A collection of values returned by getEventUrl.
 */
export interface GetEventUrlResult {
    readonly area?: string;
    readonly brand?: string;
    readonly browser?: string;
    readonly device?: string;
    readonly endTime: number;
    readonly engine?: string;
    readonly env?: string;
    readonly extFirst?: string;
    readonly extSecond?: string;
    readonly extThird?: string;
    readonly from?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly isAbroad?: string;
    readonly isp?: string;
    readonly level?: string;
    readonly name?: string;
    readonly netType?: string;
    readonly os?: string;
    readonly platform?: string;
    readonly projectId: number;
    /**
     * Return value.
     */
    readonly result: string;
    readonly resultOutputFile?: string;
    readonly startTime: number;
    readonly type: string;
    readonly versionNum?: string;
}
/**
 * Use this data source to query detailed information of rum eventUrl
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const eventUrl = tencentcloud.Rum.getEventUrl({
 *     endTime: 1625454840,
 *     projectId: 1,
 *     startTime: 1625444040,
 *     type: "allcount",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getEventUrlOutput(args: GetEventUrlOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEventUrlResult> {
    return pulumi.output(args).apply((a: any) => getEventUrl(a, opts))
}

/**
 * A collection of arguments for invoking getEventUrl.
 */
export interface GetEventUrlOutputArgs {
    /**
     * The region where the data reporting takes place.
     */
    area?: pulumi.Input<string>;
    /**
     * The mobile phone brand used for data reporting.
     */
    brand?: pulumi.Input<string>;
    /**
     * The browser type used for data reporting.
     */
    browser?: pulumi.Input<string>;
    /**
     * The device used for data reporting.
     */
    device?: pulumi.Input<string>;
    /**
     * End time but is represented using a timestamp in seconds.
     */
    endTime: pulumi.Input<number>;
    /**
     * The browser engine used for data reporting.
     */
    engine?: pulumi.Input<string>;
    /**
     * The code environment where the data reporting takes place.(`production`: production env, `development`: development env, `gray`: gray env, `pre`: pre env, `daily`: daily env, `local`: local env, `others`: others env).
     */
    env?: pulumi.Input<string>;
    /**
     * First Expansion parameter.
     */
    extFirst?: pulumi.Input<string>;
    /**
     * Second Expansion parameter.
     */
    extSecond?: pulumi.Input<string>;
    /**
     * Third Expansion parameter.
     */
    extThird?: pulumi.Input<string>;
    /**
     * The source page of the data reporting.
     */
    from?: pulumi.Input<string>;
    /**
     * Whether it is non-China region.`1`: yes; `0`: no.
     */
    isAbroad?: pulumi.Input<string>;
    /**
     * The internet service provider used for data reporting.
     */
    isp?: pulumi.Input<string>;
    /**
     * Log level for data reporting(`1`: whitelist, `2`: normal, `4`: error, `8`: promise error, `16`: ajax request error, `32`: js resource load error, `64`: image resource load error, `128`: css resource load error, `256`: console.error, `512`: video resource load error, `1024`: request retcode error, `2048`: sdk self monitor error, `4096`: pv log, `8192`: event log).
     */
    level?: pulumi.Input<string>;
    /**
     * Event name for data reporting.
     */
    name?: pulumi.Input<string>;
    /**
     * The network type used for data reporting.(`1`: Wifi, `2`: 2G, `3`: 3G, `4`: 4G, `5`: 5G, `6`: 6G, `100`: Unknown).
     */
    netType?: pulumi.Input<string>;
    /**
     * The operating system used for data reporting.
     */
    os?: pulumi.Input<string>;
    /**
     * The platform where the data reporting takes place.(`1`: Android, `2`: IOS, `3`: Windows, `4`: Mac, `5`: Linux, `100`: Other).
     */
    platform?: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId: pulumi.Input<number>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * Start time but is represented using a timestamp in seconds.
     */
    startTime: pulumi.Input<number>;
    /**
     * Query Data Type. `allcount`:CostType allcount, `day`:CostType group by day, `condition`:CostType group by condition, `ckuv`:CostType group by uv, `ckpv`:CostType group by pv, `nettype`: CostType sort by nettype, `version`: CostType sort by version, `platform`: CostType sort by platform, `isp`: CostType sort by isp, `region`: CostType sort by region, `device`: CostType sort by device, `browser`: CostType sort by browser, `ext1`: CostType sort by ext1, `ext2`: CostType sort by ext2, `ext3`: CostType sort by ext3, `ret`: CostType sort by ret, `status`: CostType sort by status, `from`: CostType sort by from, `url`: CostType sort by url, `env`: CostType sort by env.
     */
    type: pulumi.Input<string>;
    /**
     * The SDK version used for data reporting.
     */
    versionNum?: pulumi.Input<string>;
}
