// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a SSL certificate.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const foo = new tencentcloud.Ssl.Certificate("foo", {
 *     cert: `-----BEGIN CERTIFICATE-----
 * MIIERzCCAq+gAwIBAgIBAjANBgkqhkiG9w0BAQsFADAoMQ0wCwYDVQQDEwR0ZXN0
 * MRcwFQYDVQQKEw50ZXJyYWZvcm0gdGVzdDAeFw0xOTA4MTMwMzE5MzlaFw0yOTA4
 * MTAwMzE5MzlaMC4xEzARBgNVBAMTCnNlcnZlciBzc2wxFzAVBgNVBAoTDnRlcnJh
 * Zm9ybS10ZXN0MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEA1Ryp+DKK
 * SNFKZsPtwfR+jzOnQ8YFieIKYgakV688d8YgpolenbmeEPrzT87tunFD7G9f6ALG
 * ND8rj7npj0AowxhOL/h/v1D9u0UsIaj5i2GWJrqNAhGLaxWiEB/hy5WOiwxDrGei
 * gQqJkFM52Ep7G1Yx7PHJmKFGwN9FhIsFi1cNZfVRopZuCe/RMPNusNVZaIi+qcEf
 * fsE1cmfmuSlG3Ap0RKOIyR0ajDEzqZn9/0R7VwWCF97qy8TNYk94K/1tq3zyhVzR
 * Z83xOSfrTqEfb3so3AU2jyKgYdwr/FZS72VCHS8IslgnqJW4izIXZqgIKmHaRZtM
 * N4jUloi6l/6lktt6Lsgh9xECecxziSJtPMaog88aC8HnMqJJ3kScGCL36GYG+Kaw
 * 5PnDlWXBaeiDe8z/eWK9+Rr2M+rhTNxosAVGfDJyxAXyiX49LQ0v7f9qzwc/0JiD
 * bvsUv1cm6OgpoEMP9SXqqBdwGqeKbD2/2jlP48xlYP6l1SoJG3GgZ8dbAgMBAAGj
 * djB0MAwGA1UdEwEB/wQCMAAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDwYDVR0PAQH/
 * BAUDAweAADAdBgNVHQ4EFgQULwWKBQNLL9s3cb3tTnyPVg+mpCMwHwYDVR0jBBgw
 * FoAUKwfrmq791mY831S6UHARHtgYnlgwDQYJKoZIhvcNAQELBQADggGBAMo5RglS
 * AHdPgaicWJvmvjjexjF/42b7Rz4pPfMjYw6uYO8He/f4UZWv5CZLrbEe7MywaK3y
 * 0OsfH8AhyN29pv2x8g9wbmq7omZIOZ0oCAGduEXs/A/qY/hFaCohdkz/IN8qi6JW
 * VXreGli3SrpcHFchSwHTyJEXgkutcGAsOvdsOuVSmplOyrkLHc8uUe8SG4j8kGyg
 * EzaszFjHkR7g1dVyDVUedc588mjkQxYeAamJgfkgIhljWKMa2XzkVMcVfQHfNpM1
 * n+bu8SmqRt9Wma2bMijKRG/Blm756LoI+skY+WRZmlDnq8zj95TT0vceGP0FUWh5
 * hKyiocABmpQs9OK9HMi8vgSWISP+fYgkm/bKtKup2NbZBoO5/VL2vCEPInYzUhBO
 * jCbLMjNjtM5KriCaR7wDARgHiG0gBEPOEW1PIjZ9UOH+LtIxbNZ4eEIIINLHnBHf
 * L+doVeZtS/gJc4G4Adr5HYuaS9ZxJ0W2uy0eQlOHzjyxR6Mf/rpnilJlcQ==
 * -----END CERTIFICATE-----`,
 *     projectId: 0,
 *     type: "CA",
 * });
 * ```
 *
 * ## Import
 *
 * ssl certificate can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:Ssl/certificate:Certificate tencentcloud_ssl_certificate.cert GjTNRoK7
 * ```
 */
export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Ssl/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * Beginning time of the SSL certificate.
     */
    public /*out*/ readonly beginTime!: pulumi.Output<string>;
    /**
     * Content of the SSL certificate. Not allowed newline at the start and end.
     */
    public readonly cert!: pulumi.Output<string>;
    /**
     * Creation time of the SSL certificate.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Primary domain of the SSL certificate.
     */
    public /*out*/ readonly domain!: pulumi.Output<string>;
    /**
     * Ending time of the SSL certificate.
     */
    public /*out*/ readonly endTime!: pulumi.Output<string>;
    /**
     * Key of the SSL certificate and required when certificate type is `SVR`. Not allowed newline at the start and end.
     */
    public readonly key!: pulumi.Output<string | undefined>;
    /**
     * Name of the SSL certificate.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Certificate authority.
     */
    public /*out*/ readonly productZhName!: pulumi.Output<string>;
    /**
     * Project ID of the SSL certificate. Default is `0`.
     */
    public readonly projectId!: pulumi.Output<number | undefined>;
    /**
     * Status of the SSL certificate.
     */
    public /*out*/ readonly status!: pulumi.Output<number>;
    /**
     * ALL domains included in the SSL certificate. Including the primary domain name.
     */
    public /*out*/ readonly subjectNames!: pulumi.Output<string[]>;
    /**
     * Tags of the SSL certificate.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any}>;
    /**
     * Type of the SSL certificate. Valid values: `CA` and `SVR`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["beginTime"] = state ? state.beginTime : undefined;
            resourceInputs["cert"] = state ? state.cert : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["productZhName"] = state ? state.productZhName : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subjectNames"] = state ? state.subjectNames : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if ((!args || args.cert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cert'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["cert"] = args ? args.cert : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["beginTime"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["domain"] = undefined /*out*/;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["productZhName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subjectNames"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * Beginning time of the SSL certificate.
     */
    beginTime?: pulumi.Input<string>;
    /**
     * Content of the SSL certificate. Not allowed newline at the start and end.
     */
    cert?: pulumi.Input<string>;
    /**
     * Creation time of the SSL certificate.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Primary domain of the SSL certificate.
     */
    domain?: pulumi.Input<string>;
    /**
     * Ending time of the SSL certificate.
     */
    endTime?: pulumi.Input<string>;
    /**
     * Key of the SSL certificate and required when certificate type is `SVR`. Not allowed newline at the start and end.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the SSL certificate.
     */
    name?: pulumi.Input<string>;
    /**
     * Certificate authority.
     */
    productZhName?: pulumi.Input<string>;
    /**
     * Project ID of the SSL certificate. Default is `0`.
     */
    projectId?: pulumi.Input<number>;
    /**
     * Status of the SSL certificate.
     */
    status?: pulumi.Input<number>;
    /**
     * ALL domains included in the SSL certificate. Including the primary domain name.
     */
    subjectNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tags of the SSL certificate.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Type of the SSL certificate. Valid values: `CA` and `SVR`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * Content of the SSL certificate. Not allowed newline at the start and end.
     */
    cert: pulumi.Input<string>;
    /**
     * Key of the SSL certificate and required when certificate type is `SVR`. Not allowed newline at the start and end.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the SSL certificate.
     */
    name?: pulumi.Input<string>;
    /**
     * Project ID of the SSL certificate. Default is `0`.
     */
    projectId?: pulumi.Input<number>;
    /**
     * Tags of the SSL certificate.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Type of the SSL certificate. Valid values: `CA` and `SVR`.
     */
    type: pulumi.Input<string>;
}
