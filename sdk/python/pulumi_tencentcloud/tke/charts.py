# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ChartsResult',
    'AwaitableChartsResult',
    'charts',
    'charts_output',
]

@pulumi.output_type
class ChartsResult:
    """
    A collection of values returned by Charts.
    """
    def __init__(__self__, arch=None, chart_lists=None, cluster_type=None, id=None, kind=None, result_output_file=None):
        if arch and not isinstance(arch, str):
            raise TypeError("Expected argument 'arch' to be a str")
        pulumi.set(__self__, "arch", arch)
        if chart_lists and not isinstance(chart_lists, list):
            raise TypeError("Expected argument 'chart_lists' to be a list")
        pulumi.set(__self__, "chart_lists", chart_lists)
        if cluster_type and not isinstance(cluster_type, str):
            raise TypeError("Expected argument 'cluster_type' to be a str")
        pulumi.set(__self__, "cluster_type", cluster_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter(name="chartLists")
    def chart_lists(self) -> Sequence['outputs.ChartsChartListResult']:
        return pulumi.get(self, "chart_lists")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[str]:
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableChartsResult(ChartsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ChartsResult(
            arch=self.arch,
            chart_lists=self.chart_lists,
            cluster_type=self.cluster_type,
            id=self.id,
            kind=self.kind,
            result_output_file=self.result_output_file)


def charts(arch: Optional[str] = None,
           cluster_type: Optional[str] = None,
           kind: Optional[str] = None,
           result_output_file: Optional[str] = None,
           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableChartsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['arch'] = arch
    __args__['clusterType'] = cluster_type
    __args__['kind'] = kind
    __args__['resultOutputFile'] = result_output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tke/charts:Charts', __args__, opts=opts, typ=ChartsResult).value

    return AwaitableChartsResult(
        arch=__ret__.arch,
        chart_lists=__ret__.chart_lists,
        cluster_type=__ret__.cluster_type,
        id=__ret__.id,
        kind=__ret__.kind,
        result_output_file=__ret__.result_output_file)


@_utilities.lift_output_func(charts)
def charts_output(arch: Optional[pulumi.Input[Optional[str]]] = None,
                  cluster_type: Optional[pulumi.Input[Optional[str]]] = None,
                  kind: Optional[pulumi.Input[Optional[str]]] = None,
                  result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ChartsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
