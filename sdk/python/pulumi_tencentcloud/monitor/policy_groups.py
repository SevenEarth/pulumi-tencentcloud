# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'PolicyGroupsResult',
    'AwaitablePolicyGroupsResult',
    'policy_groups',
    'policy_groups_output',
]

@pulumi.output_type
class PolicyGroupsResult:
    """
    A collection of values returned by PolicyGroups.
    """
    def __init__(__self__, id=None, lists=None, name=None, policy_view_names=None, result_output_file=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_view_names and not isinstance(policy_view_names, list):
            raise TypeError("Expected argument 'policy_view_names' to be a list")
        pulumi.set(__self__, "policy_view_names", policy_view_names)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.PolicyGroupsListResult']:
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyViewNames")
    def policy_view_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_view_names")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitablePolicyGroupsResult(PolicyGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return PolicyGroupsResult(
            id=self.id,
            lists=self.lists,
            name=self.name,
            policy_view_names=self.policy_view_names,
            result_output_file=self.result_output_file)


def policy_groups(name: Optional[str] = None,
                  policy_view_names: Optional[Sequence[str]] = None,
                  result_output_file: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitablePolicyGroupsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['policyViewNames'] = policy_view_names
    __args__['resultOutputFile'] = result_output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Monitor/policyGroups:PolicyGroups', __args__, opts=opts, typ=PolicyGroupsResult).value

    return AwaitablePolicyGroupsResult(
        id=__ret__.id,
        lists=__ret__.lists,
        name=__ret__.name,
        policy_view_names=__ret__.policy_view_names,
        result_output_file=__ret__.result_output_file)


@_utilities.lift_output_func(policy_groups)
def policy_groups_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                         policy_view_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                         result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[PolicyGroupsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
