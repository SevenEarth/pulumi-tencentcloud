# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AlarmPolicyConditions',
    'AlarmPolicyConditionsRule',
    'AlarmPolicyConditionsRuleFilter',
    'AlarmPolicyEventCondition',
    'AlarmPolicyEventConditionFilter',
    'AlarmPolicyPolicyTag',
    'AlarmPolicyTriggerTask',
    'BindingAlarmReceiverReceivers',
    'BindingObjectDimension',
    'BindingObjectsListResult',
    'DataDimensionResult',
    'DataListResult',
    'PolicyBindingObjectDimension',
    'PolicyConditionsListResult',
    'PolicyConditionsListEventMetricResult',
    'PolicyConditionsListMetricResult',
    'PolicyGroupBindingObject',
    'PolicyGroupCondition',
    'PolicyGroupEventCondition',
    'PolicyGroupReceiver',
    'PolicyGroupsListResult',
    'PolicyGroupsListConditionResult',
    'PolicyGroupsListEventConditionResult',
    'PolicyGroupsListReceiverResult',
    'ProductEventDimensionResult',
    'ProductEventListResult',
    'ProductEventListAdditionMsgResult',
    'ProductEventListDimensionResult',
    'ProductEventListGroupInfoResult',
    'ProductNamespaceListResult',
]

@pulumi.output_type
class AlarmPolicyConditions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isUnionRule":
            suggest = "is_union_rule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmPolicyConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmPolicyConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmPolicyConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_union_rule: Optional[int] = None,
                 rules: Optional[Sequence['outputs.AlarmPolicyConditionsRule']] = None):
        if is_union_rule is not None:
            pulumi.set(__self__, "is_union_rule", is_union_rule)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="isUnionRule")
    def is_union_rule(self) -> Optional[int]:
        return pulumi.get(self, "is_union_rule")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.AlarmPolicyConditionsRule']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class AlarmPolicyConditionsRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuePeriod":
            suggest = "continue_period"
        elif key == "isPowerNotice":
            suggest = "is_power_notice"
        elif key == "metricName":
            suggest = "metric_name"
        elif key == "noticeFrequency":
            suggest = "notice_frequency"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmPolicyConditionsRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmPolicyConditionsRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmPolicyConditionsRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continue_period: Optional[int] = None,
                 description: Optional[str] = None,
                 filter: Optional['outputs.AlarmPolicyConditionsRuleFilter'] = None,
                 is_power_notice: Optional[int] = None,
                 metric_name: Optional[str] = None,
                 notice_frequency: Optional[int] = None,
                 operator: Optional[str] = None,
                 period: Optional[int] = None,
                 rule_type: Optional[str] = None,
                 unit: Optional[str] = None,
                 value: Optional[str] = None):
        if continue_period is not None:
            pulumi.set(__self__, "continue_period", continue_period)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if is_power_notice is not None:
            pulumi.set(__self__, "is_power_notice", is_power_notice)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if notice_frequency is not None:
            pulumi.set(__self__, "notice_frequency", notice_frequency)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> Optional[int]:
        return pulumi.get(self, "continue_period")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.AlarmPolicyConditionsRuleFilter']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="isPowerNotice")
    def is_power_notice(self) -> Optional[int]:
        return pulumi.get(self, "is_power_notice")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="noticeFrequency")
    def notice_frequency(self) -> Optional[int]:
        return pulumi.get(self, "notice_frequency")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class AlarmPolicyConditionsRuleFilter(dict):
    def __init__(__self__, *,
                 dimensions: Optional[str] = None,
                 type: Optional[str] = None):
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[str]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class AlarmPolicyEventCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuePeriod":
            suggest = "continue_period"
        elif key == "isPowerNotice":
            suggest = "is_power_notice"
        elif key == "metricName":
            suggest = "metric_name"
        elif key == "noticeFrequency":
            suggest = "notice_frequency"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmPolicyEventCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmPolicyEventCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmPolicyEventCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continue_period: Optional[int] = None,
                 description: Optional[str] = None,
                 filter: Optional['outputs.AlarmPolicyEventConditionFilter'] = None,
                 is_power_notice: Optional[int] = None,
                 metric_name: Optional[str] = None,
                 notice_frequency: Optional[int] = None,
                 operator: Optional[str] = None,
                 period: Optional[int] = None,
                 rule_type: Optional[str] = None,
                 unit: Optional[str] = None,
                 value: Optional[str] = None):
        if continue_period is not None:
            pulumi.set(__self__, "continue_period", continue_period)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if is_power_notice is not None:
            pulumi.set(__self__, "is_power_notice", is_power_notice)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if notice_frequency is not None:
            pulumi.set(__self__, "notice_frequency", notice_frequency)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> Optional[int]:
        return pulumi.get(self, "continue_period")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.AlarmPolicyEventConditionFilter']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="isPowerNotice")
    def is_power_notice(self) -> Optional[int]:
        return pulumi.get(self, "is_power_notice")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="noticeFrequency")
    def notice_frequency(self) -> Optional[int]:
        return pulumi.get(self, "notice_frequency")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class AlarmPolicyEventConditionFilter(dict):
    def __init__(__self__, *,
                 dimensions: Optional[str] = None,
                 type: Optional[str] = None):
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[str]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class AlarmPolicyPolicyTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class AlarmPolicyTriggerTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "taskConfig":
            suggest = "task_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmPolicyTriggerTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmPolicyTriggerTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmPolicyTriggerTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 task_config: str,
                 type: str):
        pulumi.set(__self__, "task_config", task_config)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="taskConfig")
    def task_config(self) -> str:
        return pulumi.get(self, "task_config")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class BindingAlarmReceiverReceivers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notifyWays":
            suggest = "notify_ways"
        elif key == "receiverType":
            suggest = "receiver_type"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "receiveLanguage":
            suggest = "receive_language"
        elif key == "receiverGroupLists":
            suggest = "receiver_group_lists"
        elif key == "receiverUserLists":
            suggest = "receiver_user_lists"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BindingAlarmReceiverReceivers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BindingAlarmReceiverReceivers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BindingAlarmReceiverReceivers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notify_ways: Sequence[str],
                 receiver_type: str,
                 end_time: Optional[int] = None,
                 receive_language: Optional[str] = None,
                 receiver_group_lists: Optional[Sequence[int]] = None,
                 receiver_user_lists: Optional[Sequence[int]] = None,
                 start_time: Optional[int] = None):
        pulumi.set(__self__, "notify_ways", notify_ways)
        pulumi.set(__self__, "receiver_type", receiver_type)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if receive_language is not None:
            pulumi.set(__self__, "receive_language", receive_language)
        if receiver_group_lists is not None:
            pulumi.set(__self__, "receiver_group_lists", receiver_group_lists)
        if receiver_user_lists is not None:
            pulumi.set(__self__, "receiver_user_lists", receiver_user_lists)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Sequence[str]:
        return pulumi.get(self, "notify_ways")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> str:
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[int]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="receiveLanguage")
    def receive_language(self) -> Optional[str]:
        return pulumi.get(self, "receive_language")

    @property
    @pulumi.getter(name="receiverGroupLists")
    def receiver_group_lists(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "receiver_group_lists")

    @property
    @pulumi.getter(name="receiverUserLists")
    def receiver_user_lists(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "receiver_user_lists")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class BindingObjectDimension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dimensionsJson":
            suggest = "dimensions_json"
        elif key == "uniqueId":
            suggest = "unique_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BindingObjectDimension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BindingObjectDimension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BindingObjectDimension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimensions_json: str,
                 unique_id: Optional[str] = None):
        pulumi.set(__self__, "dimensions_json", dimensions_json)
        if unique_id is not None:
            pulumi.set(__self__, "unique_id", unique_id)

    @property
    @pulumi.getter(name="dimensionsJson")
    def dimensions_json(self) -> str:
        return pulumi.get(self, "dimensions_json")

    @property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> Optional[str]:
        return pulumi.get(self, "unique_id")


@pulumi.output_type
class BindingObjectsListResult(dict):
    def __init__(__self__, *,
                 dimensions_json: str,
                 is_shielded: int,
                 region: str,
                 unique_id: str):
        pulumi.set(__self__, "dimensions_json", dimensions_json)
        pulumi.set(__self__, "is_shielded", is_shielded)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "unique_id", unique_id)

    @property
    @pulumi.getter(name="dimensionsJson")
    def dimensions_json(self) -> str:
        return pulumi.get(self, "dimensions_json")

    @property
    @pulumi.getter(name="isShielded")
    def is_shielded(self) -> int:
        return pulumi.get(self, "is_shielded")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> str:
        return pulumi.get(self, "unique_id")


@pulumi.output_type
class DataDimensionResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DataListResult(dict):
    def __init__(__self__, *,
                 timestamp: int,
                 value: float):
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def timestamp(self) -> int:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class PolicyBindingObjectDimension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dimensionsJson":
            suggest = "dimensions_json"
        elif key == "uniqueId":
            suggest = "unique_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyBindingObjectDimension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyBindingObjectDimension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyBindingObjectDimension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimensions_json: str,
                 unique_id: Optional[str] = None):
        pulumi.set(__self__, "dimensions_json", dimensions_json)
        if unique_id is not None:
            pulumi.set(__self__, "unique_id", unique_id)

    @property
    @pulumi.getter(name="dimensionsJson")
    def dimensions_json(self) -> str:
        return pulumi.get(self, "dimensions_json")

    @property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> Optional[str]:
        return pulumi.get(self, "unique_id")


@pulumi.output_type
class PolicyConditionsListResult(dict):
    def __init__(__self__, *,
                 event_metrics: Sequence['outputs.PolicyConditionsListEventMetricResult'],
                 is_support_multi_region: bool,
                 metrics: Sequence['outputs.PolicyConditionsListMetricResult'],
                 name: str,
                 policy_view_name: str,
                 support_regions: Sequence[str]):
        pulumi.set(__self__, "event_metrics", event_metrics)
        pulumi.set(__self__, "is_support_multi_region", is_support_multi_region)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_view_name", policy_view_name)
        pulumi.set(__self__, "support_regions", support_regions)

    @property
    @pulumi.getter(name="eventMetrics")
    def event_metrics(self) -> Sequence['outputs.PolicyConditionsListEventMetricResult']:
        return pulumi.get(self, "event_metrics")

    @property
    @pulumi.getter(name="isSupportMultiRegion")
    def is_support_multi_region(self) -> bool:
        return pulumi.get(self, "is_support_multi_region")

    @property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.PolicyConditionsListMetricResult']:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyViewName")
    def policy_view_name(self) -> str:
        return pulumi.get(self, "policy_view_name")

    @property
    @pulumi.getter(name="supportRegions")
    def support_regions(self) -> Sequence[str]:
        return pulumi.get(self, "support_regions")


@pulumi.output_type
class PolicyConditionsListEventMetricResult(dict):
    def __init__(__self__, *,
                 event_id: int,
                 event_show_name: str,
                 need_recovered: bool):
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "event_show_name", event_show_name)
        pulumi.set(__self__, "need_recovered", need_recovered)

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="eventShowName")
    def event_show_name(self) -> str:
        return pulumi.get(self, "event_show_name")

    @property
    @pulumi.getter(name="needRecovered")
    def need_recovered(self) -> bool:
        return pulumi.get(self, "need_recovered")


@pulumi.output_type
class PolicyConditionsListMetricResult(dict):
    def __init__(__self__, *,
                 calc_type_keys: Sequence[int],
                 calc_type_need: bool,
                 calc_value_default: str,
                 calc_value_fixed: str,
                 calc_value_max: str,
                 calc_value_min: str,
                 calc_value_need: bool,
                 continue_time_default: int,
                 continue_time_keys: Sequence[int],
                 continue_time_need: bool,
                 metric_id: int,
                 metric_show_name: str,
                 metric_unit: str,
                 period_default: int,
                 period_keys: Sequence[int],
                 period_need: bool,
                 period_num_default: int,
                 period_num_keys: Sequence[int],
                 period_num_need: bool,
                 stat_type_p10: str,
                 stat_type_p1800: str,
                 stat_type_p300: str,
                 stat_type_p3600: str,
                 stat_type_p5: str,
                 stat_type_p60: str,
                 stat_type_p600: str,
                 stat_type_p86400: str):
        pulumi.set(__self__, "calc_type_keys", calc_type_keys)
        pulumi.set(__self__, "calc_type_need", calc_type_need)
        pulumi.set(__self__, "calc_value_default", calc_value_default)
        pulumi.set(__self__, "calc_value_fixed", calc_value_fixed)
        pulumi.set(__self__, "calc_value_max", calc_value_max)
        pulumi.set(__self__, "calc_value_min", calc_value_min)
        pulumi.set(__self__, "calc_value_need", calc_value_need)
        pulumi.set(__self__, "continue_time_default", continue_time_default)
        pulumi.set(__self__, "continue_time_keys", continue_time_keys)
        pulumi.set(__self__, "continue_time_need", continue_time_need)
        pulumi.set(__self__, "metric_id", metric_id)
        pulumi.set(__self__, "metric_show_name", metric_show_name)
        pulumi.set(__self__, "metric_unit", metric_unit)
        pulumi.set(__self__, "period_default", period_default)
        pulumi.set(__self__, "period_keys", period_keys)
        pulumi.set(__self__, "period_need", period_need)
        pulumi.set(__self__, "period_num_default", period_num_default)
        pulumi.set(__self__, "period_num_keys", period_num_keys)
        pulumi.set(__self__, "period_num_need", period_num_need)
        pulumi.set(__self__, "stat_type_p10", stat_type_p10)
        pulumi.set(__self__, "stat_type_p1800", stat_type_p1800)
        pulumi.set(__self__, "stat_type_p300", stat_type_p300)
        pulumi.set(__self__, "stat_type_p3600", stat_type_p3600)
        pulumi.set(__self__, "stat_type_p5", stat_type_p5)
        pulumi.set(__self__, "stat_type_p60", stat_type_p60)
        pulumi.set(__self__, "stat_type_p600", stat_type_p600)
        pulumi.set(__self__, "stat_type_p86400", stat_type_p86400)

    @property
    @pulumi.getter(name="calcTypeKeys")
    def calc_type_keys(self) -> Sequence[int]:
        return pulumi.get(self, "calc_type_keys")

    @property
    @pulumi.getter(name="calcTypeNeed")
    def calc_type_need(self) -> bool:
        return pulumi.get(self, "calc_type_need")

    @property
    @pulumi.getter(name="calcValueDefault")
    def calc_value_default(self) -> str:
        return pulumi.get(self, "calc_value_default")

    @property
    @pulumi.getter(name="calcValueFixed")
    def calc_value_fixed(self) -> str:
        return pulumi.get(self, "calc_value_fixed")

    @property
    @pulumi.getter(name="calcValueMax")
    def calc_value_max(self) -> str:
        return pulumi.get(self, "calc_value_max")

    @property
    @pulumi.getter(name="calcValueMin")
    def calc_value_min(self) -> str:
        return pulumi.get(self, "calc_value_min")

    @property
    @pulumi.getter(name="calcValueNeed")
    def calc_value_need(self) -> bool:
        return pulumi.get(self, "calc_value_need")

    @property
    @pulumi.getter(name="continueTimeDefault")
    def continue_time_default(self) -> int:
        return pulumi.get(self, "continue_time_default")

    @property
    @pulumi.getter(name="continueTimeKeys")
    def continue_time_keys(self) -> Sequence[int]:
        return pulumi.get(self, "continue_time_keys")

    @property
    @pulumi.getter(name="continueTimeNeed")
    def continue_time_need(self) -> bool:
        return pulumi.get(self, "continue_time_need")

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> int:
        return pulumi.get(self, "metric_id")

    @property
    @pulumi.getter(name="metricShowName")
    def metric_show_name(self) -> str:
        return pulumi.get(self, "metric_show_name")

    @property
    @pulumi.getter(name="metricUnit")
    def metric_unit(self) -> str:
        return pulumi.get(self, "metric_unit")

    @property
    @pulumi.getter(name="periodDefault")
    def period_default(self) -> int:
        return pulumi.get(self, "period_default")

    @property
    @pulumi.getter(name="periodKeys")
    def period_keys(self) -> Sequence[int]:
        return pulumi.get(self, "period_keys")

    @property
    @pulumi.getter(name="periodNeed")
    def period_need(self) -> bool:
        return pulumi.get(self, "period_need")

    @property
    @pulumi.getter(name="periodNumDefault")
    def period_num_default(self) -> int:
        return pulumi.get(self, "period_num_default")

    @property
    @pulumi.getter(name="periodNumKeys")
    def period_num_keys(self) -> Sequence[int]:
        return pulumi.get(self, "period_num_keys")

    @property
    @pulumi.getter(name="periodNumNeed")
    def period_num_need(self) -> bool:
        return pulumi.get(self, "period_num_need")

    @property
    @pulumi.getter(name="statTypeP10")
    def stat_type_p10(self) -> str:
        return pulumi.get(self, "stat_type_p10")

    @property
    @pulumi.getter(name="statTypeP1800")
    def stat_type_p1800(self) -> str:
        return pulumi.get(self, "stat_type_p1800")

    @property
    @pulumi.getter(name="statTypeP300")
    def stat_type_p300(self) -> str:
        return pulumi.get(self, "stat_type_p300")

    @property
    @pulumi.getter(name="statTypeP3600")
    def stat_type_p3600(self) -> str:
        return pulumi.get(self, "stat_type_p3600")

    @property
    @pulumi.getter(name="statTypeP5")
    def stat_type_p5(self) -> str:
        return pulumi.get(self, "stat_type_p5")

    @property
    @pulumi.getter(name="statTypeP60")
    def stat_type_p60(self) -> str:
        return pulumi.get(self, "stat_type_p60")

    @property
    @pulumi.getter(name="statTypeP600")
    def stat_type_p600(self) -> str:
        return pulumi.get(self, "stat_type_p600")

    @property
    @pulumi.getter(name="statTypeP86400")
    def stat_type_p86400(self) -> str:
        return pulumi.get(self, "stat_type_p86400")


@pulumi.output_type
class PolicyGroupBindingObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dimensionsJson":
            suggest = "dimensions_json"
        elif key == "isShielded":
            suggest = "is_shielded"
        elif key == "uniqueId":
            suggest = "unique_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyGroupBindingObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyGroupBindingObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyGroupBindingObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimensions_json: Optional[str] = None,
                 is_shielded: Optional[int] = None,
                 region: Optional[str] = None,
                 unique_id: Optional[str] = None):
        if dimensions_json is not None:
            pulumi.set(__self__, "dimensions_json", dimensions_json)
        if is_shielded is not None:
            pulumi.set(__self__, "is_shielded", is_shielded)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if unique_id is not None:
            pulumi.set(__self__, "unique_id", unique_id)

    @property
    @pulumi.getter(name="dimensionsJson")
    def dimensions_json(self) -> Optional[str]:
        return pulumi.get(self, "dimensions_json")

    @property
    @pulumi.getter(name="isShielded")
    def is_shielded(self) -> Optional[int]:
        return pulumi.get(self, "is_shielded")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> Optional[str]:
        return pulumi.get(self, "unique_id")


@pulumi.output_type
class PolicyGroupCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alarmNotifyPeriod":
            suggest = "alarm_notify_period"
        elif key == "alarmNotifyType":
            suggest = "alarm_notify_type"
        elif key == "metricId":
            suggest = "metric_id"
        elif key == "calcPeriod":
            suggest = "calc_period"
        elif key == "calcType":
            suggest = "calc_type"
        elif key == "calcValue":
            suggest = "calc_value"
        elif key == "continuePeriod":
            suggest = "continue_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyGroupCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyGroupCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyGroupCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alarm_notify_period: int,
                 alarm_notify_type: int,
                 metric_id: int,
                 calc_period: Optional[int] = None,
                 calc_type: Optional[int] = None,
                 calc_value: Optional[float] = None,
                 continue_period: Optional[int] = None):
        pulumi.set(__self__, "alarm_notify_period", alarm_notify_period)
        pulumi.set(__self__, "alarm_notify_type", alarm_notify_type)
        pulumi.set(__self__, "metric_id", metric_id)
        if calc_period is not None:
            pulumi.set(__self__, "calc_period", calc_period)
        if calc_type is not None:
            pulumi.set(__self__, "calc_type", calc_type)
        if calc_value is not None:
            pulumi.set(__self__, "calc_value", calc_value)
        if continue_period is not None:
            pulumi.set(__self__, "continue_period", continue_period)

    @property
    @pulumi.getter(name="alarmNotifyPeriod")
    def alarm_notify_period(self) -> int:
        return pulumi.get(self, "alarm_notify_period")

    @property
    @pulumi.getter(name="alarmNotifyType")
    def alarm_notify_type(self) -> int:
        return pulumi.get(self, "alarm_notify_type")

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> int:
        return pulumi.get(self, "metric_id")

    @property
    @pulumi.getter(name="calcPeriod")
    def calc_period(self) -> Optional[int]:
        return pulumi.get(self, "calc_period")

    @property
    @pulumi.getter(name="calcType")
    def calc_type(self) -> Optional[int]:
        return pulumi.get(self, "calc_type")

    @property
    @pulumi.getter(name="calcValue")
    def calc_value(self) -> Optional[float]:
        return pulumi.get(self, "calc_value")

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> Optional[int]:
        return pulumi.get(self, "continue_period")


@pulumi.output_type
class PolicyGroupEventCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alarmNotifyPeriod":
            suggest = "alarm_notify_period"
        elif key == "alarmNotifyType":
            suggest = "alarm_notify_type"
        elif key == "eventId":
            suggest = "event_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyGroupEventCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyGroupEventCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyGroupEventCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alarm_notify_period: int,
                 alarm_notify_type: int,
                 event_id: int):
        pulumi.set(__self__, "alarm_notify_period", alarm_notify_period)
        pulumi.set(__self__, "alarm_notify_type", alarm_notify_type)
        pulumi.set(__self__, "event_id", event_id)

    @property
    @pulumi.getter(name="alarmNotifyPeriod")
    def alarm_notify_period(self) -> int:
        return pulumi.get(self, "alarm_notify_period")

    @property
    @pulumi.getter(name="alarmNotifyType")
    def alarm_notify_type(self) -> int:
        return pulumi.get(self, "alarm_notify_type")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        return pulumi.get(self, "event_id")


@pulumi.output_type
class PolicyGroupReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "needSendNotice":
            suggest = "need_send_notice"
        elif key == "notifyWays":
            suggest = "notify_ways"
        elif key == "personInterval":
            suggest = "person_interval"
        elif key == "receiveLanguage":
            suggest = "receive_language"
        elif key == "receiverGroupLists":
            suggest = "receiver_group_lists"
        elif key == "receiverType":
            suggest = "receiver_type"
        elif key == "receiverUserLists":
            suggest = "receiver_user_lists"
        elif key == "recoverNotifies":
            suggest = "recover_notifies"
        elif key == "roundInterval":
            suggest = "round_interval"
        elif key == "roundNumber":
            suggest = "round_number"
        elif key == "sendFors":
            suggest = "send_fors"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "uidLists":
            suggest = "uid_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyGroupReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyGroupReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyGroupReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: Optional[int] = None,
                 need_send_notice: Optional[int] = None,
                 notify_ways: Optional[Sequence[str]] = None,
                 person_interval: Optional[int] = None,
                 receive_language: Optional[str] = None,
                 receiver_group_lists: Optional[Sequence[int]] = None,
                 receiver_type: Optional[str] = None,
                 receiver_user_lists: Optional[Sequence[int]] = None,
                 recover_notifies: Optional[Sequence[str]] = None,
                 round_interval: Optional[int] = None,
                 round_number: Optional[int] = None,
                 send_fors: Optional[Sequence[str]] = None,
                 start_time: Optional[int] = None,
                 uid_lists: Optional[Sequence[int]] = None):
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if need_send_notice is not None:
            pulumi.set(__self__, "need_send_notice", need_send_notice)
        if notify_ways is not None:
            pulumi.set(__self__, "notify_ways", notify_ways)
        if person_interval is not None:
            pulumi.set(__self__, "person_interval", person_interval)
        if receive_language is not None:
            pulumi.set(__self__, "receive_language", receive_language)
        if receiver_group_lists is not None:
            pulumi.set(__self__, "receiver_group_lists", receiver_group_lists)
        if receiver_type is not None:
            pulumi.set(__self__, "receiver_type", receiver_type)
        if receiver_user_lists is not None:
            pulumi.set(__self__, "receiver_user_lists", receiver_user_lists)
        if recover_notifies is not None:
            pulumi.set(__self__, "recover_notifies", recover_notifies)
        if round_interval is not None:
            pulumi.set(__self__, "round_interval", round_interval)
        if round_number is not None:
            pulumi.set(__self__, "round_number", round_number)
        if send_fors is not None:
            pulumi.set(__self__, "send_fors", send_fors)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if uid_lists is not None:
            pulumi.set(__self__, "uid_lists", uid_lists)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[int]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="needSendNotice")
    def need_send_notice(self) -> Optional[int]:
        return pulumi.get(self, "need_send_notice")

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "notify_ways")

    @property
    @pulumi.getter(name="personInterval")
    def person_interval(self) -> Optional[int]:
        return pulumi.get(self, "person_interval")

    @property
    @pulumi.getter(name="receiveLanguage")
    def receive_language(self) -> Optional[str]:
        return pulumi.get(self, "receive_language")

    @property
    @pulumi.getter(name="receiverGroupLists")
    def receiver_group_lists(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "receiver_group_lists")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> Optional[str]:
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="receiverUserLists")
    def receiver_user_lists(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "receiver_user_lists")

    @property
    @pulumi.getter(name="recoverNotifies")
    def recover_notifies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "recover_notifies")

    @property
    @pulumi.getter(name="roundInterval")
    def round_interval(self) -> Optional[int]:
        return pulumi.get(self, "round_interval")

    @property
    @pulumi.getter(name="roundNumber")
    def round_number(self) -> Optional[int]:
        return pulumi.get(self, "round_number")

    @property
    @pulumi.getter(name="sendFors")
    def send_fors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "send_fors")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="uidLists")
    def uid_lists(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "uid_lists")


@pulumi.output_type
class PolicyGroupsListResult(dict):
    def __init__(__self__, *,
                 can_set_default: bool,
                 conditions: Sequence['outputs.PolicyGroupsListConditionResult'],
                 event_conditions: Sequence['outputs.PolicyGroupsListEventConditionResult'],
                 group_id: int,
                 group_name: str,
                 insert_time: int,
                 is_default: int,
                 is_open: bool,
                 last_edit_uin: str,
                 no_shielded_sum: int,
                 parent_group_id: int,
                 policy_view_name: str,
                 project_id: int,
                 receivers: Sequence['outputs.PolicyGroupsListReceiverResult'],
                 remark: str,
                 update_time: int,
                 use_sum: int):
        pulumi.set(__self__, "can_set_default", can_set_default)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "event_conditions", event_conditions)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "insert_time", insert_time)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "last_edit_uin", last_edit_uin)
        pulumi.set(__self__, "no_shielded_sum", no_shielded_sum)
        pulumi.set(__self__, "parent_group_id", parent_group_id)
        pulumi.set(__self__, "policy_view_name", policy_view_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "receivers", receivers)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "use_sum", use_sum)

    @property
    @pulumi.getter(name="canSetDefault")
    def can_set_default(self) -> bool:
        return pulumi.get(self, "can_set_default")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.PolicyGroupsListConditionResult']:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="eventConditions")
    def event_conditions(self) -> Sequence['outputs.PolicyGroupsListEventConditionResult']:
        return pulumi.get(self, "event_conditions")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> int:
        return pulumi.get(self, "insert_time")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> int:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> bool:
        return pulumi.get(self, "is_open")

    @property
    @pulumi.getter(name="lastEditUin")
    def last_edit_uin(self) -> str:
        return pulumi.get(self, "last_edit_uin")

    @property
    @pulumi.getter(name="noShieldedSum")
    def no_shielded_sum(self) -> int:
        return pulumi.get(self, "no_shielded_sum")

    @property
    @pulumi.getter(name="parentGroupId")
    def parent_group_id(self) -> int:
        return pulumi.get(self, "parent_group_id")

    @property
    @pulumi.getter(name="policyViewName")
    def policy_view_name(self) -> str:
        return pulumi.get(self, "policy_view_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def receivers(self) -> Sequence['outputs.PolicyGroupsListReceiverResult']:
        return pulumi.get(self, "receivers")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="useSum")
    def use_sum(self) -> int:
        return pulumi.get(self, "use_sum")


@pulumi.output_type
class PolicyGroupsListConditionResult(dict):
    def __init__(__self__, *,
                 alarm_notify_period: int,
                 alarm_notify_type: int,
                 calc_type: int,
                 calc_value: str,
                 continue_time: int,
                 metric_id: int,
                 metric_show_name: str,
                 metric_unit: str,
                 period: int,
                 rule_id: int):
        pulumi.set(__self__, "alarm_notify_period", alarm_notify_period)
        pulumi.set(__self__, "alarm_notify_type", alarm_notify_type)
        pulumi.set(__self__, "calc_type", calc_type)
        pulumi.set(__self__, "calc_value", calc_value)
        pulumi.set(__self__, "continue_time", continue_time)
        pulumi.set(__self__, "metric_id", metric_id)
        pulumi.set(__self__, "metric_show_name", metric_show_name)
        pulumi.set(__self__, "metric_unit", metric_unit)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter(name="alarmNotifyPeriod")
    def alarm_notify_period(self) -> int:
        return pulumi.get(self, "alarm_notify_period")

    @property
    @pulumi.getter(name="alarmNotifyType")
    def alarm_notify_type(self) -> int:
        return pulumi.get(self, "alarm_notify_type")

    @property
    @pulumi.getter(name="calcType")
    def calc_type(self) -> int:
        return pulumi.get(self, "calc_type")

    @property
    @pulumi.getter(name="calcValue")
    def calc_value(self) -> str:
        return pulumi.get(self, "calc_value")

    @property
    @pulumi.getter(name="continueTime")
    def continue_time(self) -> int:
        return pulumi.get(self, "continue_time")

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> int:
        return pulumi.get(self, "metric_id")

    @property
    @pulumi.getter(name="metricShowName")
    def metric_show_name(self) -> str:
        return pulumi.get(self, "metric_show_name")

    @property
    @pulumi.getter(name="metricUnit")
    def metric_unit(self) -> str:
        return pulumi.get(self, "metric_unit")

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> int:
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class PolicyGroupsListEventConditionResult(dict):
    def __init__(__self__, *,
                 alarm_notify_period: int,
                 alarm_notify_type: int,
                 event_id: int,
                 event_show_name: str,
                 rule_id: int):
        pulumi.set(__self__, "alarm_notify_period", alarm_notify_period)
        pulumi.set(__self__, "alarm_notify_type", alarm_notify_type)
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "event_show_name", event_show_name)
        pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter(name="alarmNotifyPeriod")
    def alarm_notify_period(self) -> int:
        return pulumi.get(self, "alarm_notify_period")

    @property
    @pulumi.getter(name="alarmNotifyType")
    def alarm_notify_type(self) -> int:
        return pulumi.get(self, "alarm_notify_type")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="eventShowName")
    def event_show_name(self) -> str:
        return pulumi.get(self, "event_show_name")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> int:
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class PolicyGroupsListReceiverResult(dict):
    def __init__(__self__, *,
                 end_time: int,
                 need_send_notice: int,
                 notify_ways: Sequence[str],
                 person_interval: int,
                 receive_language: str,
                 receiver_group_lists: Sequence[int],
                 receiver_type: str,
                 receiver_user_lists: Sequence[int],
                 recover_notifies: Sequence[str],
                 round_interval: int,
                 round_number: int,
                 send_fors: Sequence[str],
                 start_time: int,
                 uid_lists: Sequence[int]):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "need_send_notice", need_send_notice)
        pulumi.set(__self__, "notify_ways", notify_ways)
        pulumi.set(__self__, "person_interval", person_interval)
        pulumi.set(__self__, "receive_language", receive_language)
        pulumi.set(__self__, "receiver_group_lists", receiver_group_lists)
        pulumi.set(__self__, "receiver_type", receiver_type)
        pulumi.set(__self__, "receiver_user_lists", receiver_user_lists)
        pulumi.set(__self__, "recover_notifies", recover_notifies)
        pulumi.set(__self__, "round_interval", round_interval)
        pulumi.set(__self__, "round_number", round_number)
        pulumi.set(__self__, "send_fors", send_fors)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "uid_lists", uid_lists)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="needSendNotice")
    def need_send_notice(self) -> int:
        return pulumi.get(self, "need_send_notice")

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Sequence[str]:
        return pulumi.get(self, "notify_ways")

    @property
    @pulumi.getter(name="personInterval")
    def person_interval(self) -> int:
        return pulumi.get(self, "person_interval")

    @property
    @pulumi.getter(name="receiveLanguage")
    def receive_language(self) -> str:
        return pulumi.get(self, "receive_language")

    @property
    @pulumi.getter(name="receiverGroupLists")
    def receiver_group_lists(self) -> Sequence[int]:
        return pulumi.get(self, "receiver_group_lists")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> str:
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="receiverUserLists")
    def receiver_user_lists(self) -> Sequence[int]:
        return pulumi.get(self, "receiver_user_lists")

    @property
    @pulumi.getter(name="recoverNotifies")
    def recover_notifies(self) -> Sequence[str]:
        return pulumi.get(self, "recover_notifies")

    @property
    @pulumi.getter(name="roundInterval")
    def round_interval(self) -> int:
        return pulumi.get(self, "round_interval")

    @property
    @pulumi.getter(name="roundNumber")
    def round_number(self) -> int:
        return pulumi.get(self, "round_number")

    @property
    @pulumi.getter(name="sendFors")
    def send_fors(self) -> Sequence[str]:
        return pulumi.get(self, "send_fors")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="uidLists")
    def uid_lists(self) -> Sequence[int]:
        return pulumi.get(self, "uid_lists")


@pulumi.output_type
class ProductEventDimensionResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ProductEventListResult(dict):
    def __init__(__self__, *,
                 addition_msgs: Sequence['outputs.ProductEventListAdditionMsgResult'],
                 dimensions: Sequence['outputs.ProductEventListDimensionResult'],
                 event_cname: str,
                 event_ename: str,
                 event_id: int,
                 event_name: str,
                 group_infos: Sequence['outputs.ProductEventListGroupInfoResult'],
                 instance_id: str,
                 instance_name: str,
                 is_alarm_config: int,
                 product_cname: str,
                 product_ename: str,
                 product_name: str,
                 project_id: str,
                 region: str,
                 start_time: int,
                 status: str,
                 support_alarm: int,
                 type: str,
                 update_time: int):
        pulumi.set(__self__, "addition_msgs", addition_msgs)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "event_cname", event_cname)
        pulumi.set(__self__, "event_ename", event_ename)
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "event_name", event_name)
        pulumi.set(__self__, "group_infos", group_infos)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "is_alarm_config", is_alarm_config)
        pulumi.set(__self__, "product_cname", product_cname)
        pulumi.set(__self__, "product_ename", product_ename)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_alarm", support_alarm)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="additionMsgs")
    def addition_msgs(self) -> Sequence['outputs.ProductEventListAdditionMsgResult']:
        return pulumi.get(self, "addition_msgs")

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.ProductEventListDimensionResult']:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="eventCname")
    def event_cname(self) -> str:
        return pulumi.get(self, "event_cname")

    @property
    @pulumi.getter(name="eventEname")
    def event_ename(self) -> str:
        return pulumi.get(self, "event_ename")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="eventName")
    def event_name(self) -> str:
        return pulumi.get(self, "event_name")

    @property
    @pulumi.getter(name="groupInfos")
    def group_infos(self) -> Sequence['outputs.ProductEventListGroupInfoResult']:
        return pulumi.get(self, "group_infos")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="isAlarmConfig")
    def is_alarm_config(self) -> int:
        return pulumi.get(self, "is_alarm_config")

    @property
    @pulumi.getter(name="productCname")
    def product_cname(self) -> str:
        return pulumi.get(self, "product_cname")

    @property
    @pulumi.getter(name="productEname")
    def product_ename(self) -> str:
        return pulumi.get(self, "product_ename")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportAlarm")
    def support_alarm(self) -> int:
        return pulumi.get(self, "support_alarm")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        return pulumi.get(self, "update_time")


@pulumi.output_type
class ProductEventListAdditionMsgResult(dict):
    def __init__(__self__, *,
                 key: str,
                 name: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ProductEventListDimensionResult(dict):
    def __init__(__self__, *,
                 key: str,
                 name: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ProductEventListGroupInfoResult(dict):
    def __init__(__self__, *,
                 group_id: str,
                 group_name: str):
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        return pulumi.get(self, "group_name")


@pulumi.output_type
class ProductNamespaceListResult(dict):
    def __init__(__self__, *,
                 namespace: str,
                 product_chinese_name: str,
                 product_name: str):
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "product_chinese_name", product_chinese_name)
        pulumi.set(__self__, "product_name", product_name)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="productChineseName")
    def product_chinese_name(self) -> str:
        return pulumi.get(self, "product_chinese_name")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        return pulumi.get(self, "product_name")


