# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'CosBucketCorsRuleArgs',
    'CosBucketLifecycleRuleArgs',
    'CosBucketLifecycleRuleExpirationArgs',
    'CosBucketLifecycleRuleNonCurrentExpirationArgs',
    'CosBucketLifecycleRuleNonCurrentTransitionArgs',
    'CosBucketLifecycleRuleTransitionArgs',
    'CosBucketOriginDomainRuleArgs',
    'CosBucketOriginPullRuleArgs',
    'CosBucketReplicaRuleArgs',
    'CosBucketWebsiteArgs',
]

@pulumi.input_type
class CosBucketCorsRuleArgs:
    def __init__(__self__, *,
                 allowed_headers: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allowed_methods: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allowed_origins: pulumi.Input[Sequence[pulumi.Input[str]]],
                 expose_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_age_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "allowed_headers", allowed_headers)
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        if expose_headers is not None:
            pulumi.set(__self__, "expose_headers", expose_headers)
        if max_age_seconds is not None:
            pulumi.set(__self__, "max_age_seconds", max_age_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "allowed_headers")

    @allowed_headers.setter
    def allowed_headers(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_headers", value)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "allowed_methods")

    @allowed_methods.setter
    def allowed_methods(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_methods", value)

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "allowed_origins")

    @allowed_origins.setter
    def allowed_origins(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_origins", value)

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "expose_headers")

    @expose_headers.setter
    def expose_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "expose_headers", value)

    @property
    @pulumi.getter(name="maxAgeSeconds")
    def max_age_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_age_seconds")

    @max_age_seconds.setter
    def max_age_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age_seconds", value)


@pulumi.input_type
class CosBucketLifecycleRuleArgs:
    def __init__(__self__, *,
                 filter_prefix: pulumi.Input[str],
                 expiration: Optional[pulumi.Input['CosBucketLifecycleRuleExpirationArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 non_current_expiration: Optional[pulumi.Input['CosBucketLifecycleRuleNonCurrentExpirationArgs']] = None,
                 non_current_transitions: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketLifecycleRuleNonCurrentTransitionArgs']]]] = None,
                 transitions: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketLifecycleRuleTransitionArgs']]]] = None):
        pulumi.set(__self__, "filter_prefix", filter_prefix)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if non_current_expiration is not None:
            pulumi.set(__self__, "non_current_expiration", non_current_expiration)
        if non_current_transitions is not None:
            pulumi.set(__self__, "non_current_transitions", non_current_transitions)
        if transitions is not None:
            pulumi.set(__self__, "transitions", transitions)

    @property
    @pulumi.getter(name="filterPrefix")
    def filter_prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_prefix")

    @filter_prefix.setter
    def filter_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_prefix", value)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input['CosBucketLifecycleRuleExpirationArgs']]:
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input['CosBucketLifecycleRuleExpirationArgs']]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="nonCurrentExpiration")
    def non_current_expiration(self) -> Optional[pulumi.Input['CosBucketLifecycleRuleNonCurrentExpirationArgs']]:
        return pulumi.get(self, "non_current_expiration")

    @non_current_expiration.setter
    def non_current_expiration(self, value: Optional[pulumi.Input['CosBucketLifecycleRuleNonCurrentExpirationArgs']]):
        pulumi.set(self, "non_current_expiration", value)

    @property
    @pulumi.getter(name="nonCurrentTransitions")
    def non_current_transitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketLifecycleRuleNonCurrentTransitionArgs']]]]:
        return pulumi.get(self, "non_current_transitions")

    @non_current_transitions.setter
    def non_current_transitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketLifecycleRuleNonCurrentTransitionArgs']]]]):
        pulumi.set(self, "non_current_transitions", value)

    @property
    @pulumi.getter
    def transitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketLifecycleRuleTransitionArgs']]]]:
        return pulumi.get(self, "transitions")

    @transitions.setter
    def transitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketLifecycleRuleTransitionArgs']]]]):
        pulumi.set(self, "transitions", value)


@pulumi.input_type
class CosBucketLifecycleRuleExpirationArgs:
    def __init__(__self__, *,
                 date: Optional[pulumi.Input[str]] = None,
                 days: Optional[pulumi.Input[int]] = None,
                 delete_marker: Optional[pulumi.Input[bool]] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if delete_marker is not None:
            pulumi.set(__self__, "delete_marker", delete_marker)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter(name="deleteMarker")
    def delete_marker(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_marker")

    @delete_marker.setter
    def delete_marker(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_marker", value)


@pulumi.input_type
class CosBucketLifecycleRuleNonCurrentExpirationArgs:
    def __init__(__self__, *,
                 non_current_days: Optional[pulumi.Input[int]] = None):
        if non_current_days is not None:
            pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "non_current_days")

    @non_current_days.setter
    def non_current_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "non_current_days", value)


@pulumi.input_type
class CosBucketLifecycleRuleNonCurrentTransitionArgs:
    def __init__(__self__, *,
                 storage_class: pulumi.Input[str],
                 non_current_days: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "storage_class", storage_class)
        if non_current_days is not None:
            pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "non_current_days")

    @non_current_days.setter
    def non_current_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "non_current_days", value)


@pulumi.input_type
class CosBucketLifecycleRuleTransitionArgs:
    def __init__(__self__, *,
                 storage_class: pulumi.Input[str],
                 date: Optional[pulumi.Input[str]] = None,
                 days: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "storage_class", storage_class)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days", value)


@pulumi.input_type
class CosBucketOriginDomainRuleArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "domain", domain)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class CosBucketOriginPullRuleArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 priority: pulumi.Input[int],
                 custom_http_headers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 follow_http_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 follow_query_string: Optional[pulumi.Input[bool]] = None,
                 follow_redirection: Optional[pulumi.Input[bool]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 sync_back_to_source: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "priority", priority)
        if custom_http_headers is not None:
            pulumi.set(__self__, "custom_http_headers", custom_http_headers)
        if follow_http_headers is not None:
            pulumi.set(__self__, "follow_http_headers", follow_http_headers)
        if follow_query_string is not None:
            pulumi.set(__self__, "follow_query_string", follow_query_string)
        if follow_redirection is not None:
            pulumi.set(__self__, "follow_redirection", follow_redirection)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if sync_back_to_source is not None:
            pulumi.set(__self__, "sync_back_to_source", sync_back_to_source)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="customHttpHeaders")
    def custom_http_headers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "custom_http_headers")

    @custom_http_headers.setter
    def custom_http_headers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_http_headers", value)

    @property
    @pulumi.getter(name="followHttpHeaders")
    def follow_http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "follow_http_headers")

    @follow_http_headers.setter
    def follow_http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "follow_http_headers", value)

    @property
    @pulumi.getter(name="followQueryString")
    def follow_query_string(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "follow_query_string")

    @follow_query_string.setter
    def follow_query_string(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "follow_query_string", value)

    @property
    @pulumi.getter(name="followRedirection")
    def follow_redirection(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "follow_redirection")

    @follow_redirection.setter
    def follow_redirection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "follow_redirection", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="syncBackToSource")
    def sync_back_to_source(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sync_back_to_source")

    @sync_back_to_source.setter
    def sync_back_to_source(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_back_to_source", value)


@pulumi.input_type
class CosBucketReplicaRuleArgs:
    def __init__(__self__, *,
                 destination_bucket: pulumi.Input[str],
                 status: pulumi.Input[str],
                 destination_storage_class: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "destination_bucket", destination_bucket)
        pulumi.set(__self__, "status", status)
        if destination_storage_class is not None:
            pulumi.set(__self__, "destination_storage_class", destination_storage_class)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="destinationBucket")
    def destination_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_bucket")

    @destination_bucket.setter
    def destination_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_bucket", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="destinationStorageClass")
    def destination_storage_class(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_storage_class")

    @destination_storage_class.setter
    def destination_storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_storage_class", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class CosBucketWebsiteArgs:
    def __init__(__self__, *,
                 error_document: Optional[pulumi.Input[str]] = None,
                 index_document: Optional[pulumi.Input[str]] = None):
        if error_document is not None:
            pulumi.set(__self__, "error_document", error_document)
        if index_document is not None:
            pulumi.set(__self__, "index_document", index_document)

    @property
    @pulumi.getter(name="errorDocument")
    def error_document(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_document")

    @error_document.setter
    def error_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_document", value)

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "index_document")

    @index_document.setter
    def index_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_document", value)


