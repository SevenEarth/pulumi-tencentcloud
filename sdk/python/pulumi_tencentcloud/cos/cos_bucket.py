# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CosBucketArgs', 'CosBucket']

@pulumi.input_type
class CosBucketArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 acl: Optional[pulumi.Input[str]] = None,
                 acl_body: Optional[pulumi.Input[str]] = None,
                 cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketCorsRuleArgs']]]] = None,
                 encryption_algorithm: Optional[pulumi.Input[str]] = None,
                 lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketLifecycleRuleArgs']]]] = None,
                 log_enable: Optional[pulumi.Input[bool]] = None,
                 log_prefix: Optional[pulumi.Input[str]] = None,
                 log_target_bucket: Optional[pulumi.Input[str]] = None,
                 multi_az: Optional[pulumi.Input[bool]] = None,
                 origin_domain_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketOriginDomainRuleArgs']]]] = None,
                 origin_pull_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketOriginPullRuleArgs']]]] = None,
                 replica_role: Optional[pulumi.Input[str]] = None,
                 replica_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketReplicaRuleArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 versioning_enable: Optional[pulumi.Input[bool]] = None,
                 website: Optional[pulumi.Input['CosBucketWebsiteArgs']] = None):
        """
        The set of arguments for constructing a CosBucket resource.
        :param pulumi.Input[str] bucket: The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        :param pulumi.Input[str] acl: The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        :param pulumi.Input[str] acl_body: ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check
               https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        :param pulumi.Input[Sequence[pulumi.Input['CosBucketCorsRuleArgs']]] cors_rules: A rule of Cross-Origin Resource Sharing (documented below).
        :param pulumi.Input[str] encryption_algorithm: The server-side encryption algorithm to use. Valid value is `AES256`.
        :param pulumi.Input[Sequence[pulumi.Input['CosBucketLifecycleRuleArgs']]] lifecycle_rules: A configuration of object lifecycle management (documented below).
        :param pulumi.Input[bool] log_enable: Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be
               saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role
               Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        :param pulumi.Input[str] log_prefix: The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file
               format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is
               `true`.
        :param pulumi.Input[str] log_target_bucket: The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is
               `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
               User must have full access on this bucket.
        :param pulumi.Input[bool] multi_az: Indicates whether to create a bucket of multi available zone. NOTE: If set to true, the versioning must enable.
        :param pulumi.Input[Sequence[pulumi.Input['CosBucketOriginDomainRuleArgs']]] origin_domain_rules: Bucket Origin Domain settings.
        :param pulumi.Input[Sequence[pulumi.Input['CosBucketOriginPullRuleArgs']]] origin_pull_rules: Bucket Origin-Pull settings.
        :param pulumi.Input[str] replica_role: Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true
               can configure this argument.
        :param pulumi.Input[Sequence[pulumi.Input['CosBucketReplicaRuleArgs']]] replica_rules: List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of a bucket.
        :param pulumi.Input[bool] versioning_enable: Enable bucket versioning.
        :param pulumi.Input['CosBucketWebsiteArgs'] website: A website object(documented below).
        """
        pulumi.set(__self__, "bucket", bucket)
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if acl_body is not None:
            pulumi.set(__self__, "acl_body", acl_body)
        if cors_rules is not None:
            pulumi.set(__self__, "cors_rules", cors_rules)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if lifecycle_rules is not None:
            pulumi.set(__self__, "lifecycle_rules", lifecycle_rules)
        if log_enable is not None:
            pulumi.set(__self__, "log_enable", log_enable)
        if log_prefix is not None:
            pulumi.set(__self__, "log_prefix", log_prefix)
        if log_target_bucket is not None:
            pulumi.set(__self__, "log_target_bucket", log_target_bucket)
        if multi_az is not None:
            pulumi.set(__self__, "multi_az", multi_az)
        if origin_domain_rules is not None:
            pulumi.set(__self__, "origin_domain_rules", origin_domain_rules)
        if origin_pull_rules is not None:
            pulumi.set(__self__, "origin_pull_rules", origin_pull_rules)
        if replica_role is not None:
            pulumi.set(__self__, "replica_role", replica_role)
        if replica_rules is not None:
            pulumi.set(__self__, "replica_rules", replica_rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if versioning_enable is not None:
            pulumi.set(__self__, "versioning_enable", versioning_enable)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def acl(self) -> Optional[pulumi.Input[str]]:
        """
        The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        """
        return pulumi.get(self, "acl")

    @acl.setter
    def acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acl", value)

    @property
    @pulumi.getter(name="aclBody")
    def acl_body(self) -> Optional[pulumi.Input[str]]:
        """
        ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check
        https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        """
        return pulumi.get(self, "acl_body")

    @acl_body.setter
    def acl_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acl_body", value)

    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketCorsRuleArgs']]]]:
        """
        A rule of Cross-Origin Resource Sharing (documented below).
        """
        return pulumi.get(self, "cors_rules")

    @cors_rules.setter
    def cors_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketCorsRuleArgs']]]]):
        pulumi.set(self, "cors_rules", value)

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The server-side encryption algorithm to use. Valid value is `AES256`.
        """
        return pulumi.get(self, "encryption_algorithm")

    @encryption_algorithm.setter
    def encryption_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_algorithm", value)

    @property
    @pulumi.getter(name="lifecycleRules")
    def lifecycle_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketLifecycleRuleArgs']]]]:
        """
        A configuration of object lifecycle management (documented below).
        """
        return pulumi.get(self, "lifecycle_rules")

    @lifecycle_rules.setter
    def lifecycle_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketLifecycleRuleArgs']]]]):
        pulumi.set(self, "lifecycle_rules", value)

    @property
    @pulumi.getter(name="logEnable")
    def log_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be
        saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role
        Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        """
        return pulumi.get(self, "log_enable")

    @log_enable.setter
    def log_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_enable", value)

    @property
    @pulumi.getter(name="logPrefix")
    def log_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file
        format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is
        `true`.
        """
        return pulumi.get(self, "log_prefix")

    @log_prefix.setter
    def log_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_prefix", value)

    @property
    @pulumi.getter(name="logTargetBucket")
    def log_target_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is
        `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
        User must have full access on this bucket.
        """
        return pulumi.get(self, "log_target_bucket")

    @log_target_bucket.setter
    def log_target_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_target_bucket", value)

    @property
    @pulumi.getter(name="multiAz")
    def multi_az(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to create a bucket of multi available zone. NOTE: If set to true, the versioning must enable.
        """
        return pulumi.get(self, "multi_az")

    @multi_az.setter
    def multi_az(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_az", value)

    @property
    @pulumi.getter(name="originDomainRules")
    def origin_domain_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketOriginDomainRuleArgs']]]]:
        """
        Bucket Origin Domain settings.
        """
        return pulumi.get(self, "origin_domain_rules")

    @origin_domain_rules.setter
    def origin_domain_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketOriginDomainRuleArgs']]]]):
        pulumi.set(self, "origin_domain_rules", value)

    @property
    @pulumi.getter(name="originPullRules")
    def origin_pull_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketOriginPullRuleArgs']]]]:
        """
        Bucket Origin-Pull settings.
        """
        return pulumi.get(self, "origin_pull_rules")

    @origin_pull_rules.setter
    def origin_pull_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketOriginPullRuleArgs']]]]):
        pulumi.set(self, "origin_pull_rules", value)

    @property
    @pulumi.getter(name="replicaRole")
    def replica_role(self) -> Optional[pulumi.Input[str]]:
        """
        Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true
        can configure this argument.
        """
        return pulumi.get(self, "replica_role")

    @replica_role.setter
    def replica_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_role", value)

    @property
    @pulumi.getter(name="replicaRules")
    def replica_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketReplicaRuleArgs']]]]:
        """
        List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        """
        return pulumi.get(self, "replica_rules")

    @replica_rules.setter
    def replica_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketReplicaRuleArgs']]]]):
        pulumi.set(self, "replica_rules", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The tags of a bucket.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="versioningEnable")
    def versioning_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable bucket versioning.
        """
        return pulumi.get(self, "versioning_enable")

    @versioning_enable.setter
    def versioning_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "versioning_enable", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input['CosBucketWebsiteArgs']]:
        """
        A website object(documented below).
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input['CosBucketWebsiteArgs']]):
        pulumi.set(self, "website", value)


@pulumi.input_type
class _CosBucketState:
    def __init__(__self__, *,
                 acl: Optional[pulumi.Input[str]] = None,
                 acl_body: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketCorsRuleArgs']]]] = None,
                 cos_bucket_url: Optional[pulumi.Input[str]] = None,
                 encryption_algorithm: Optional[pulumi.Input[str]] = None,
                 lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketLifecycleRuleArgs']]]] = None,
                 log_enable: Optional[pulumi.Input[bool]] = None,
                 log_prefix: Optional[pulumi.Input[str]] = None,
                 log_target_bucket: Optional[pulumi.Input[str]] = None,
                 multi_az: Optional[pulumi.Input[bool]] = None,
                 origin_domain_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketOriginDomainRuleArgs']]]] = None,
                 origin_pull_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketOriginPullRuleArgs']]]] = None,
                 replica_role: Optional[pulumi.Input[str]] = None,
                 replica_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketReplicaRuleArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 versioning_enable: Optional[pulumi.Input[bool]] = None,
                 website: Optional[pulumi.Input['CosBucketWebsiteArgs']] = None):
        """
        Input properties used for looking up and filtering CosBucket resources.
        :param pulumi.Input[str] acl: The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        :param pulumi.Input[str] acl_body: ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check
               https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        :param pulumi.Input[str] bucket: The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        :param pulumi.Input[Sequence[pulumi.Input['CosBucketCorsRuleArgs']]] cors_rules: A rule of Cross-Origin Resource Sharing (documented below).
        :param pulumi.Input[str] cos_bucket_url: The URL of this cos bucket.
        :param pulumi.Input[str] encryption_algorithm: The server-side encryption algorithm to use. Valid value is `AES256`.
        :param pulumi.Input[Sequence[pulumi.Input['CosBucketLifecycleRuleArgs']]] lifecycle_rules: A configuration of object lifecycle management (documented below).
        :param pulumi.Input[bool] log_enable: Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be
               saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role
               Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        :param pulumi.Input[str] log_prefix: The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file
               format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is
               `true`.
        :param pulumi.Input[str] log_target_bucket: The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is
               `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
               User must have full access on this bucket.
        :param pulumi.Input[bool] multi_az: Indicates whether to create a bucket of multi available zone. NOTE: If set to true, the versioning must enable.
        :param pulumi.Input[Sequence[pulumi.Input['CosBucketOriginDomainRuleArgs']]] origin_domain_rules: Bucket Origin Domain settings.
        :param pulumi.Input[Sequence[pulumi.Input['CosBucketOriginPullRuleArgs']]] origin_pull_rules: Bucket Origin-Pull settings.
        :param pulumi.Input[str] replica_role: Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true
               can configure this argument.
        :param pulumi.Input[Sequence[pulumi.Input['CosBucketReplicaRuleArgs']]] replica_rules: List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of a bucket.
        :param pulumi.Input[bool] versioning_enable: Enable bucket versioning.
        :param pulumi.Input['CosBucketWebsiteArgs'] website: A website object(documented below).
        """
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if acl_body is not None:
            pulumi.set(__self__, "acl_body", acl_body)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if cors_rules is not None:
            pulumi.set(__self__, "cors_rules", cors_rules)
        if cos_bucket_url is not None:
            pulumi.set(__self__, "cos_bucket_url", cos_bucket_url)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if lifecycle_rules is not None:
            pulumi.set(__self__, "lifecycle_rules", lifecycle_rules)
        if log_enable is not None:
            pulumi.set(__self__, "log_enable", log_enable)
        if log_prefix is not None:
            pulumi.set(__self__, "log_prefix", log_prefix)
        if log_target_bucket is not None:
            pulumi.set(__self__, "log_target_bucket", log_target_bucket)
        if multi_az is not None:
            pulumi.set(__self__, "multi_az", multi_az)
        if origin_domain_rules is not None:
            pulumi.set(__self__, "origin_domain_rules", origin_domain_rules)
        if origin_pull_rules is not None:
            pulumi.set(__self__, "origin_pull_rules", origin_pull_rules)
        if replica_role is not None:
            pulumi.set(__self__, "replica_role", replica_role)
        if replica_rules is not None:
            pulumi.set(__self__, "replica_rules", replica_rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if versioning_enable is not None:
            pulumi.set(__self__, "versioning_enable", versioning_enable)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter
    def acl(self) -> Optional[pulumi.Input[str]]:
        """
        The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        """
        return pulumi.get(self, "acl")

    @acl.setter
    def acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acl", value)

    @property
    @pulumi.getter(name="aclBody")
    def acl_body(self) -> Optional[pulumi.Input[str]]:
        """
        ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check
        https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        """
        return pulumi.get(self, "acl_body")

    @acl_body.setter
    def acl_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acl_body", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketCorsRuleArgs']]]]:
        """
        A rule of Cross-Origin Resource Sharing (documented below).
        """
        return pulumi.get(self, "cors_rules")

    @cors_rules.setter
    def cors_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketCorsRuleArgs']]]]):
        pulumi.set(self, "cors_rules", value)

    @property
    @pulumi.getter(name="cosBucketUrl")
    def cos_bucket_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of this cos bucket.
        """
        return pulumi.get(self, "cos_bucket_url")

    @cos_bucket_url.setter
    def cos_bucket_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_bucket_url", value)

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The server-side encryption algorithm to use. Valid value is `AES256`.
        """
        return pulumi.get(self, "encryption_algorithm")

    @encryption_algorithm.setter
    def encryption_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_algorithm", value)

    @property
    @pulumi.getter(name="lifecycleRules")
    def lifecycle_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketLifecycleRuleArgs']]]]:
        """
        A configuration of object lifecycle management (documented below).
        """
        return pulumi.get(self, "lifecycle_rules")

    @lifecycle_rules.setter
    def lifecycle_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketLifecycleRuleArgs']]]]):
        pulumi.set(self, "lifecycle_rules", value)

    @property
    @pulumi.getter(name="logEnable")
    def log_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be
        saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role
        Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        """
        return pulumi.get(self, "log_enable")

    @log_enable.setter
    def log_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_enable", value)

    @property
    @pulumi.getter(name="logPrefix")
    def log_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file
        format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is
        `true`.
        """
        return pulumi.get(self, "log_prefix")

    @log_prefix.setter
    def log_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_prefix", value)

    @property
    @pulumi.getter(name="logTargetBucket")
    def log_target_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is
        `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
        User must have full access on this bucket.
        """
        return pulumi.get(self, "log_target_bucket")

    @log_target_bucket.setter
    def log_target_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_target_bucket", value)

    @property
    @pulumi.getter(name="multiAz")
    def multi_az(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to create a bucket of multi available zone. NOTE: If set to true, the versioning must enable.
        """
        return pulumi.get(self, "multi_az")

    @multi_az.setter
    def multi_az(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_az", value)

    @property
    @pulumi.getter(name="originDomainRules")
    def origin_domain_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketOriginDomainRuleArgs']]]]:
        """
        Bucket Origin Domain settings.
        """
        return pulumi.get(self, "origin_domain_rules")

    @origin_domain_rules.setter
    def origin_domain_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketOriginDomainRuleArgs']]]]):
        pulumi.set(self, "origin_domain_rules", value)

    @property
    @pulumi.getter(name="originPullRules")
    def origin_pull_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketOriginPullRuleArgs']]]]:
        """
        Bucket Origin-Pull settings.
        """
        return pulumi.get(self, "origin_pull_rules")

    @origin_pull_rules.setter
    def origin_pull_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketOriginPullRuleArgs']]]]):
        pulumi.set(self, "origin_pull_rules", value)

    @property
    @pulumi.getter(name="replicaRole")
    def replica_role(self) -> Optional[pulumi.Input[str]]:
        """
        Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true
        can configure this argument.
        """
        return pulumi.get(self, "replica_role")

    @replica_role.setter
    def replica_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_role", value)

    @property
    @pulumi.getter(name="replicaRules")
    def replica_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketReplicaRuleArgs']]]]:
        """
        List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        """
        return pulumi.get(self, "replica_rules")

    @replica_rules.setter
    def replica_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketReplicaRuleArgs']]]]):
        pulumi.set(self, "replica_rules", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The tags of a bucket.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="versioningEnable")
    def versioning_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable bucket versioning.
        """
        return pulumi.get(self, "versioning_enable")

    @versioning_enable.setter
    def versioning_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "versioning_enable", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input['CosBucketWebsiteArgs']]:
        """
        A website object(documented below).
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input['CosBucketWebsiteArgs']]):
        pulumi.set(self, "website", value)


class CosBucket(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acl: Optional[pulumi.Input[str]] = None,
                 acl_body: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketCorsRuleArgs']]]]] = None,
                 encryption_algorithm: Optional[pulumi.Input[str]] = None,
                 lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketLifecycleRuleArgs']]]]] = None,
                 log_enable: Optional[pulumi.Input[bool]] = None,
                 log_prefix: Optional[pulumi.Input[str]] = None,
                 log_target_bucket: Optional[pulumi.Input[str]] = None,
                 multi_az: Optional[pulumi.Input[bool]] = None,
                 origin_domain_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketOriginDomainRuleArgs']]]]] = None,
                 origin_pull_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketOriginPullRuleArgs']]]]] = None,
                 replica_role: Optional[pulumi.Input[str]] = None,
                 replica_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketReplicaRuleArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 versioning_enable: Optional[pulumi.Input[bool]] = None,
                 website: Optional[pulumi.Input[pulumi.InputType['CosBucketWebsiteArgs']]] = None,
                 __props__=None):
        """
        Create a CosBucket resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acl: The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        :param pulumi.Input[str] acl_body: ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check
               https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        :param pulumi.Input[str] bucket: The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketCorsRuleArgs']]]] cors_rules: A rule of Cross-Origin Resource Sharing (documented below).
        :param pulumi.Input[str] encryption_algorithm: The server-side encryption algorithm to use. Valid value is `AES256`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketLifecycleRuleArgs']]]] lifecycle_rules: A configuration of object lifecycle management (documented below).
        :param pulumi.Input[bool] log_enable: Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be
               saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role
               Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        :param pulumi.Input[str] log_prefix: The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file
               format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is
               `true`.
        :param pulumi.Input[str] log_target_bucket: The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is
               `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
               User must have full access on this bucket.
        :param pulumi.Input[bool] multi_az: Indicates whether to create a bucket of multi available zone. NOTE: If set to true, the versioning must enable.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketOriginDomainRuleArgs']]]] origin_domain_rules: Bucket Origin Domain settings.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketOriginPullRuleArgs']]]] origin_pull_rules: Bucket Origin-Pull settings.
        :param pulumi.Input[str] replica_role: Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true
               can configure this argument.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketReplicaRuleArgs']]]] replica_rules: List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of a bucket.
        :param pulumi.Input[bool] versioning_enable: Enable bucket versioning.
        :param pulumi.Input[pulumi.InputType['CosBucketWebsiteArgs']] website: A website object(documented below).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CosBucketArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CosBucket resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CosBucketArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CosBucketArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acl: Optional[pulumi.Input[str]] = None,
                 acl_body: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketCorsRuleArgs']]]]] = None,
                 encryption_algorithm: Optional[pulumi.Input[str]] = None,
                 lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketLifecycleRuleArgs']]]]] = None,
                 log_enable: Optional[pulumi.Input[bool]] = None,
                 log_prefix: Optional[pulumi.Input[str]] = None,
                 log_target_bucket: Optional[pulumi.Input[str]] = None,
                 multi_az: Optional[pulumi.Input[bool]] = None,
                 origin_domain_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketOriginDomainRuleArgs']]]]] = None,
                 origin_pull_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketOriginPullRuleArgs']]]]] = None,
                 replica_role: Optional[pulumi.Input[str]] = None,
                 replica_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketReplicaRuleArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 versioning_enable: Optional[pulumi.Input[bool]] = None,
                 website: Optional[pulumi.Input[pulumi.InputType['CosBucketWebsiteArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CosBucketArgs.__new__(CosBucketArgs)

            __props__.__dict__["acl"] = acl
            __props__.__dict__["acl_body"] = acl_body
            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["cors_rules"] = cors_rules
            __props__.__dict__["encryption_algorithm"] = encryption_algorithm
            __props__.__dict__["lifecycle_rules"] = lifecycle_rules
            __props__.__dict__["log_enable"] = log_enable
            __props__.__dict__["log_prefix"] = log_prefix
            __props__.__dict__["log_target_bucket"] = log_target_bucket
            __props__.__dict__["multi_az"] = multi_az
            __props__.__dict__["origin_domain_rules"] = origin_domain_rules
            __props__.__dict__["origin_pull_rules"] = origin_pull_rules
            __props__.__dict__["replica_role"] = replica_role
            __props__.__dict__["replica_rules"] = replica_rules
            __props__.__dict__["tags"] = tags
            __props__.__dict__["versioning_enable"] = versioning_enable
            __props__.__dict__["website"] = website
            __props__.__dict__["cos_bucket_url"] = None
        super(CosBucket, __self__).__init__(
            'tencentcloud:Cos/cosBucket:CosBucket',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acl: Optional[pulumi.Input[str]] = None,
            acl_body: Optional[pulumi.Input[str]] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketCorsRuleArgs']]]]] = None,
            cos_bucket_url: Optional[pulumi.Input[str]] = None,
            encryption_algorithm: Optional[pulumi.Input[str]] = None,
            lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketLifecycleRuleArgs']]]]] = None,
            log_enable: Optional[pulumi.Input[bool]] = None,
            log_prefix: Optional[pulumi.Input[str]] = None,
            log_target_bucket: Optional[pulumi.Input[str]] = None,
            multi_az: Optional[pulumi.Input[bool]] = None,
            origin_domain_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketOriginDomainRuleArgs']]]]] = None,
            origin_pull_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketOriginPullRuleArgs']]]]] = None,
            replica_role: Optional[pulumi.Input[str]] = None,
            replica_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketReplicaRuleArgs']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            versioning_enable: Optional[pulumi.Input[bool]] = None,
            website: Optional[pulumi.Input[pulumi.InputType['CosBucketWebsiteArgs']]] = None) -> 'CosBucket':
        """
        Get an existing CosBucket resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acl: The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        :param pulumi.Input[str] acl_body: ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check
               https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        :param pulumi.Input[str] bucket: The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketCorsRuleArgs']]]] cors_rules: A rule of Cross-Origin Resource Sharing (documented below).
        :param pulumi.Input[str] cos_bucket_url: The URL of this cos bucket.
        :param pulumi.Input[str] encryption_algorithm: The server-side encryption algorithm to use. Valid value is `AES256`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketLifecycleRuleArgs']]]] lifecycle_rules: A configuration of object lifecycle management (documented below).
        :param pulumi.Input[bool] log_enable: Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be
               saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role
               Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        :param pulumi.Input[str] log_prefix: The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file
               format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is
               `true`.
        :param pulumi.Input[str] log_target_bucket: The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is
               `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
               User must have full access on this bucket.
        :param pulumi.Input[bool] multi_az: Indicates whether to create a bucket of multi available zone. NOTE: If set to true, the versioning must enable.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketOriginDomainRuleArgs']]]] origin_domain_rules: Bucket Origin Domain settings.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketOriginPullRuleArgs']]]] origin_pull_rules: Bucket Origin-Pull settings.
        :param pulumi.Input[str] replica_role: Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true
               can configure this argument.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CosBucketReplicaRuleArgs']]]] replica_rules: List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of a bucket.
        :param pulumi.Input[bool] versioning_enable: Enable bucket versioning.
        :param pulumi.Input[pulumi.InputType['CosBucketWebsiteArgs']] website: A website object(documented below).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CosBucketState.__new__(_CosBucketState)

        __props__.__dict__["acl"] = acl
        __props__.__dict__["acl_body"] = acl_body
        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["cors_rules"] = cors_rules
        __props__.__dict__["cos_bucket_url"] = cos_bucket_url
        __props__.__dict__["encryption_algorithm"] = encryption_algorithm
        __props__.__dict__["lifecycle_rules"] = lifecycle_rules
        __props__.__dict__["log_enable"] = log_enable
        __props__.__dict__["log_prefix"] = log_prefix
        __props__.__dict__["log_target_bucket"] = log_target_bucket
        __props__.__dict__["multi_az"] = multi_az
        __props__.__dict__["origin_domain_rules"] = origin_domain_rules
        __props__.__dict__["origin_pull_rules"] = origin_pull_rules
        __props__.__dict__["replica_role"] = replica_role
        __props__.__dict__["replica_rules"] = replica_rules
        __props__.__dict__["tags"] = tags
        __props__.__dict__["versioning_enable"] = versioning_enable
        __props__.__dict__["website"] = website
        return CosBucket(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def acl(self) -> pulumi.Output[Optional[str]]:
        """
        The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        """
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter(name="aclBody")
    def acl_body(self) -> pulumi.Output[Optional[str]]:
        """
        ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check
        https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        """
        return pulumi.get(self, "acl_body")

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> pulumi.Output[Optional[Sequence['outputs.CosBucketCorsRule']]]:
        """
        A rule of Cross-Origin Resource Sharing (documented below).
        """
        return pulumi.get(self, "cors_rules")

    @property
    @pulumi.getter(name="cosBucketUrl")
    def cos_bucket_url(self) -> pulumi.Output[str]:
        """
        The URL of this cos bucket.
        """
        return pulumi.get(self, "cos_bucket_url")

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> pulumi.Output[Optional[str]]:
        """
        The server-side encryption algorithm to use. Valid value is `AES256`.
        """
        return pulumi.get(self, "encryption_algorithm")

    @property
    @pulumi.getter(name="lifecycleRules")
    def lifecycle_rules(self) -> pulumi.Output[Optional[Sequence['outputs.CosBucketLifecycleRule']]]:
        """
        A configuration of object lifecycle management (documented below).
        """
        return pulumi.get(self, "lifecycle_rules")

    @property
    @pulumi.getter(name="logEnable")
    def log_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be
        saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role
        Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        """
        return pulumi.get(self, "log_enable")

    @property
    @pulumi.getter(name="logPrefix")
    def log_prefix(self) -> pulumi.Output[str]:
        """
        The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file
        format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is
        `true`.
        """
        return pulumi.get(self, "log_prefix")

    @property
    @pulumi.getter(name="logTargetBucket")
    def log_target_bucket(self) -> pulumi.Output[str]:
        """
        The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is
        `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
        User must have full access on this bucket.
        """
        return pulumi.get(self, "log_target_bucket")

    @property
    @pulumi.getter(name="multiAz")
    def multi_az(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether to create a bucket of multi available zone. NOTE: If set to true, the versioning must enable.
        """
        return pulumi.get(self, "multi_az")

    @property
    @pulumi.getter(name="originDomainRules")
    def origin_domain_rules(self) -> pulumi.Output[Optional[Sequence['outputs.CosBucketOriginDomainRule']]]:
        """
        Bucket Origin Domain settings.
        """
        return pulumi.get(self, "origin_domain_rules")

    @property
    @pulumi.getter(name="originPullRules")
    def origin_pull_rules(self) -> pulumi.Output[Optional[Sequence['outputs.CosBucketOriginPullRule']]]:
        """
        Bucket Origin-Pull settings.
        """
        return pulumi.get(self, "origin_pull_rules")

    @property
    @pulumi.getter(name="replicaRole")
    def replica_role(self) -> pulumi.Output[Optional[str]]:
        """
        Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true
        can configure this argument.
        """
        return pulumi.get(self, "replica_role")

    @property
    @pulumi.getter(name="replicaRules")
    def replica_rules(self) -> pulumi.Output[Optional[Sequence['outputs.CosBucketReplicaRule']]]:
        """
        List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        """
        return pulumi.get(self, "replica_rules")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        The tags of a bucket.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="versioningEnable")
    def versioning_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable bucket versioning.
        """
        return pulumi.get(self, "versioning_enable")

    @property
    @pulumi.getter
    def website(self) -> pulumi.Output[Optional['outputs.CosBucketWebsite']]:
        """
        A website object(documented below).
        """
        return pulumi.get(self, "website")

