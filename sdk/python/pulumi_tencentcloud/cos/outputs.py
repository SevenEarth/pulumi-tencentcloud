# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BucketsBucketListResult',
    'BucketsBucketListCorsRuleResult',
    'BucketsBucketListLifecycleRuleResult',
    'BucketsBucketListLifecycleRuleExpirationResult',
    'BucketsBucketListLifecycleRuleNonCurrentExpirationResult',
    'BucketsBucketListLifecycleRuleNonCurrentTransitionResult',
    'BucketsBucketListLifecycleRuleTransitionResult',
    'BucketsBucketListOriginDomainRuleResult',
    'BucketsBucketListOriginPullRuleResult',
    'BucketsBucketListWebsiteResult',
    'CosBucketCorsRule',
    'CosBucketLifecycleRule',
    'CosBucketLifecycleRuleExpiration',
    'CosBucketLifecycleRuleNonCurrentExpiration',
    'CosBucketLifecycleRuleNonCurrentTransition',
    'CosBucketLifecycleRuleTransition',
    'CosBucketOriginDomainRule',
    'CosBucketOriginPullRule',
    'CosBucketReplicaRule',
    'CosBucketWebsite',
]

@pulumi.output_type
class BucketsBucketListResult(dict):
    def __init__(__self__, *,
                 acl: str,
                 acl_body: str,
                 bucket: str,
                 cors_rules: Sequence['outputs.BucketsBucketListCorsRuleResult'],
                 cos_bucket_url: str,
                 lifecycle_rules: Sequence['outputs.BucketsBucketListLifecycleRuleResult'],
                 origin_domain_rules: Sequence['outputs.BucketsBucketListOriginDomainRuleResult'],
                 origin_pull_rules: Sequence['outputs.BucketsBucketListOriginPullRuleResult'],
                 tags: Mapping[str, Any],
                 websites: Sequence['outputs.BucketsBucketListWebsiteResult']):
        pulumi.set(__self__, "acl", acl)
        pulumi.set(__self__, "acl_body", acl_body)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "cors_rules", cors_rules)
        pulumi.set(__self__, "cos_bucket_url", cos_bucket_url)
        pulumi.set(__self__, "lifecycle_rules", lifecycle_rules)
        pulumi.set(__self__, "origin_domain_rules", origin_domain_rules)
        pulumi.set(__self__, "origin_pull_rules", origin_pull_rules)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "websites", websites)

    @property
    @pulumi.getter
    def acl(self) -> str:
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter(name="aclBody")
    def acl_body(self) -> str:
        return pulumi.get(self, "acl_body")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> Sequence['outputs.BucketsBucketListCorsRuleResult']:
        return pulumi.get(self, "cors_rules")

    @property
    @pulumi.getter(name="cosBucketUrl")
    def cos_bucket_url(self) -> str:
        return pulumi.get(self, "cos_bucket_url")

    @property
    @pulumi.getter(name="lifecycleRules")
    def lifecycle_rules(self) -> Sequence['outputs.BucketsBucketListLifecycleRuleResult']:
        return pulumi.get(self, "lifecycle_rules")

    @property
    @pulumi.getter(name="originDomainRules")
    def origin_domain_rules(self) -> Sequence['outputs.BucketsBucketListOriginDomainRuleResult']:
        return pulumi.get(self, "origin_domain_rules")

    @property
    @pulumi.getter(name="originPullRules")
    def origin_pull_rules(self) -> Sequence['outputs.BucketsBucketListOriginPullRuleResult']:
        return pulumi.get(self, "origin_pull_rules")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def websites(self) -> Sequence['outputs.BucketsBucketListWebsiteResult']:
        return pulumi.get(self, "websites")


@pulumi.output_type
class BucketsBucketListCorsRuleResult(dict):
    def __init__(__self__, *,
                 allowed_headers: Sequence[str],
                 allowed_methods: Sequence[str],
                 allowed_origins: Sequence[str],
                 expose_headers: Sequence[str],
                 max_age_seconds: int):
        pulumi.set(__self__, "allowed_headers", allowed_headers)
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        pulumi.set(__self__, "expose_headers", expose_headers)
        pulumi.set(__self__, "max_age_seconds", max_age_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Sequence[str]:
        return pulumi.get(self, "expose_headers")

    @property
    @pulumi.getter(name="maxAgeSeconds")
    def max_age_seconds(self) -> int:
        return pulumi.get(self, "max_age_seconds")


@pulumi.output_type
class BucketsBucketListLifecycleRuleResult(dict):
    def __init__(__self__, *,
                 expirations: Sequence['outputs.BucketsBucketListLifecycleRuleExpirationResult'],
                 filter_prefix: str,
                 non_current_expirations: Sequence['outputs.BucketsBucketListLifecycleRuleNonCurrentExpirationResult'],
                 non_current_transitions: Sequence['outputs.BucketsBucketListLifecycleRuleNonCurrentTransitionResult'],
                 transitions: Sequence['outputs.BucketsBucketListLifecycleRuleTransitionResult']):
        pulumi.set(__self__, "expirations", expirations)
        pulumi.set(__self__, "filter_prefix", filter_prefix)
        pulumi.set(__self__, "non_current_expirations", non_current_expirations)
        pulumi.set(__self__, "non_current_transitions", non_current_transitions)
        pulumi.set(__self__, "transitions", transitions)

    @property
    @pulumi.getter
    def expirations(self) -> Sequence['outputs.BucketsBucketListLifecycleRuleExpirationResult']:
        return pulumi.get(self, "expirations")

    @property
    @pulumi.getter(name="filterPrefix")
    def filter_prefix(self) -> str:
        return pulumi.get(self, "filter_prefix")

    @property
    @pulumi.getter(name="nonCurrentExpirations")
    def non_current_expirations(self) -> Sequence['outputs.BucketsBucketListLifecycleRuleNonCurrentExpirationResult']:
        return pulumi.get(self, "non_current_expirations")

    @property
    @pulumi.getter(name="nonCurrentTransitions")
    def non_current_transitions(self) -> Sequence['outputs.BucketsBucketListLifecycleRuleNonCurrentTransitionResult']:
        return pulumi.get(self, "non_current_transitions")

    @property
    @pulumi.getter
    def transitions(self) -> Sequence['outputs.BucketsBucketListLifecycleRuleTransitionResult']:
        return pulumi.get(self, "transitions")


@pulumi.output_type
class BucketsBucketListLifecycleRuleExpirationResult(dict):
    def __init__(__self__, *,
                 date: str,
                 days: int):
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter
    def date(self) -> str:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> int:
        return pulumi.get(self, "days")


@pulumi.output_type
class BucketsBucketListLifecycleRuleNonCurrentExpirationResult(dict):
    def __init__(__self__, *,
                 non_current_days: int):
        pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> int:
        return pulumi.get(self, "non_current_days")


@pulumi.output_type
class BucketsBucketListLifecycleRuleNonCurrentTransitionResult(dict):
    def __init__(__self__, *,
                 non_current_days: int,
                 storage_class: str):
        pulumi.set(__self__, "non_current_days", non_current_days)
        pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> int:
        return pulumi.get(self, "non_current_days")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class BucketsBucketListLifecycleRuleTransitionResult(dict):
    def __init__(__self__, *,
                 date: str,
                 days: int,
                 storage_class: str):
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def date(self) -> str:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> int:
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class BucketsBucketListOriginDomainRuleResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "domain", domain)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class BucketsBucketListOriginPullRuleResult(dict):
    def __init__(__self__, *,
                 host: str,
                 priority: int,
                 custom_http_headers: Optional[Mapping[str, Any]] = None,
                 follow_http_headers: Optional[Sequence[str]] = None,
                 follow_query_string: Optional[bool] = None,
                 follow_redirection: Optional[bool] = None,
                 prefix: Optional[str] = None,
                 protocol: Optional[str] = None,
                 sync_back_to_source: Optional[bool] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "priority", priority)
        if custom_http_headers is not None:
            pulumi.set(__self__, "custom_http_headers", custom_http_headers)
        if follow_http_headers is not None:
            pulumi.set(__self__, "follow_http_headers", follow_http_headers)
        if follow_query_string is not None:
            pulumi.set(__self__, "follow_query_string", follow_query_string)
        if follow_redirection is not None:
            pulumi.set(__self__, "follow_redirection", follow_redirection)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if sync_back_to_source is not None:
            pulumi.set(__self__, "sync_back_to_source", sync_back_to_source)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="customHttpHeaders")
    def custom_http_headers(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "custom_http_headers")

    @property
    @pulumi.getter(name="followHttpHeaders")
    def follow_http_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "follow_http_headers")

    @property
    @pulumi.getter(name="followQueryString")
    def follow_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "follow_query_string")

    @property
    @pulumi.getter(name="followRedirection")
    def follow_redirection(self) -> Optional[bool]:
        return pulumi.get(self, "follow_redirection")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="syncBackToSource")
    def sync_back_to_source(self) -> Optional[bool]:
        return pulumi.get(self, "sync_back_to_source")


@pulumi.output_type
class BucketsBucketListWebsiteResult(dict):
    def __init__(__self__, *,
                 error_document: str,
                 index_document: str):
        pulumi.set(__self__, "error_document", error_document)
        pulumi.set(__self__, "index_document", index_document)

    @property
    @pulumi.getter(name="errorDocument")
    def error_document(self) -> str:
        return pulumi.get(self, "error_document")

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> str:
        return pulumi.get(self, "index_document")


@pulumi.output_type
class CosBucketCorsRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedHeaders":
            suggest = "allowed_headers"
        elif key == "allowedMethods":
            suggest = "allowed_methods"
        elif key == "allowedOrigins":
            suggest = "allowed_origins"
        elif key == "exposeHeaders":
            suggest = "expose_headers"
        elif key == "maxAgeSeconds":
            suggest = "max_age_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CosBucketCorsRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CosBucketCorsRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CosBucketCorsRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_headers: Sequence[str],
                 allowed_methods: Sequence[str],
                 allowed_origins: Sequence[str],
                 expose_headers: Optional[Sequence[str]] = None,
                 max_age_seconds: Optional[int] = None):
        pulumi.set(__self__, "allowed_headers", allowed_headers)
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        if expose_headers is not None:
            pulumi.set(__self__, "expose_headers", expose_headers)
        if max_age_seconds is not None:
            pulumi.set(__self__, "max_age_seconds", max_age_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "expose_headers")

    @property
    @pulumi.getter(name="maxAgeSeconds")
    def max_age_seconds(self) -> Optional[int]:
        return pulumi.get(self, "max_age_seconds")


@pulumi.output_type
class CosBucketLifecycleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterPrefix":
            suggest = "filter_prefix"
        elif key == "nonCurrentExpiration":
            suggest = "non_current_expiration"
        elif key == "nonCurrentTransitions":
            suggest = "non_current_transitions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CosBucketLifecycleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CosBucketLifecycleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CosBucketLifecycleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_prefix: str,
                 expiration: Optional['outputs.CosBucketLifecycleRuleExpiration'] = None,
                 id: Optional[str] = None,
                 non_current_expiration: Optional['outputs.CosBucketLifecycleRuleNonCurrentExpiration'] = None,
                 non_current_transitions: Optional[Sequence['outputs.CosBucketLifecycleRuleNonCurrentTransition']] = None,
                 transitions: Optional[Sequence['outputs.CosBucketLifecycleRuleTransition']] = None):
        pulumi.set(__self__, "filter_prefix", filter_prefix)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if non_current_expiration is not None:
            pulumi.set(__self__, "non_current_expiration", non_current_expiration)
        if non_current_transitions is not None:
            pulumi.set(__self__, "non_current_transitions", non_current_transitions)
        if transitions is not None:
            pulumi.set(__self__, "transitions", transitions)

    @property
    @pulumi.getter(name="filterPrefix")
    def filter_prefix(self) -> str:
        return pulumi.get(self, "filter_prefix")

    @property
    @pulumi.getter
    def expiration(self) -> Optional['outputs.CosBucketLifecycleRuleExpiration']:
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nonCurrentExpiration")
    def non_current_expiration(self) -> Optional['outputs.CosBucketLifecycleRuleNonCurrentExpiration']:
        return pulumi.get(self, "non_current_expiration")

    @property
    @pulumi.getter(name="nonCurrentTransitions")
    def non_current_transitions(self) -> Optional[Sequence['outputs.CosBucketLifecycleRuleNonCurrentTransition']]:
        return pulumi.get(self, "non_current_transitions")

    @property
    @pulumi.getter
    def transitions(self) -> Optional[Sequence['outputs.CosBucketLifecycleRuleTransition']]:
        return pulumi.get(self, "transitions")


@pulumi.output_type
class CosBucketLifecycleRuleExpiration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteMarker":
            suggest = "delete_marker"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CosBucketLifecycleRuleExpiration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CosBucketLifecycleRuleExpiration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CosBucketLifecycleRuleExpiration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date: Optional[str] = None,
                 days: Optional[int] = None,
                 delete_marker: Optional[bool] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if delete_marker is not None:
            pulumi.set(__self__, "delete_marker", delete_marker)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="deleteMarker")
    def delete_marker(self) -> Optional[bool]:
        return pulumi.get(self, "delete_marker")


@pulumi.output_type
class CosBucketLifecycleRuleNonCurrentExpiration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nonCurrentDays":
            suggest = "non_current_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CosBucketLifecycleRuleNonCurrentExpiration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CosBucketLifecycleRuleNonCurrentExpiration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CosBucketLifecycleRuleNonCurrentExpiration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 non_current_days: Optional[int] = None):
        if non_current_days is not None:
            pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> Optional[int]:
        return pulumi.get(self, "non_current_days")


@pulumi.output_type
class CosBucketLifecycleRuleNonCurrentTransition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageClass":
            suggest = "storage_class"
        elif key == "nonCurrentDays":
            suggest = "non_current_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CosBucketLifecycleRuleNonCurrentTransition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CosBucketLifecycleRuleNonCurrentTransition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CosBucketLifecycleRuleNonCurrentTransition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_class: str,
                 non_current_days: Optional[int] = None):
        pulumi.set(__self__, "storage_class", storage_class)
        if non_current_days is not None:
            pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        return pulumi.get(self, "storage_class")

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> Optional[int]:
        return pulumi.get(self, "non_current_days")


@pulumi.output_type
class CosBucketLifecycleRuleTransition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageClass":
            suggest = "storage_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CosBucketLifecycleRuleTransition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CosBucketLifecycleRuleTransition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CosBucketLifecycleRuleTransition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_class: str,
                 date: Optional[str] = None,
                 days: Optional[int] = None):
        pulumi.set(__self__, "storage_class", storage_class)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        return pulumi.get(self, "storage_class")

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        return pulumi.get(self, "days")


@pulumi.output_type
class CosBucketOriginDomainRule(dict):
    def __init__(__self__, *,
                 domain: str,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "domain", domain)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class CosBucketOriginPullRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customHttpHeaders":
            suggest = "custom_http_headers"
        elif key == "followHttpHeaders":
            suggest = "follow_http_headers"
        elif key == "followQueryString":
            suggest = "follow_query_string"
        elif key == "followRedirection":
            suggest = "follow_redirection"
        elif key == "syncBackToSource":
            suggest = "sync_back_to_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CosBucketOriginPullRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CosBucketOriginPullRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CosBucketOriginPullRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: str,
                 priority: int,
                 custom_http_headers: Optional[Mapping[str, Any]] = None,
                 follow_http_headers: Optional[Sequence[str]] = None,
                 follow_query_string: Optional[bool] = None,
                 follow_redirection: Optional[bool] = None,
                 prefix: Optional[str] = None,
                 protocol: Optional[str] = None,
                 sync_back_to_source: Optional[bool] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "priority", priority)
        if custom_http_headers is not None:
            pulumi.set(__self__, "custom_http_headers", custom_http_headers)
        if follow_http_headers is not None:
            pulumi.set(__self__, "follow_http_headers", follow_http_headers)
        if follow_query_string is not None:
            pulumi.set(__self__, "follow_query_string", follow_query_string)
        if follow_redirection is not None:
            pulumi.set(__self__, "follow_redirection", follow_redirection)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if sync_back_to_source is not None:
            pulumi.set(__self__, "sync_back_to_source", sync_back_to_source)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="customHttpHeaders")
    def custom_http_headers(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "custom_http_headers")

    @property
    @pulumi.getter(name="followHttpHeaders")
    def follow_http_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "follow_http_headers")

    @property
    @pulumi.getter(name="followQueryString")
    def follow_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "follow_query_string")

    @property
    @pulumi.getter(name="followRedirection")
    def follow_redirection(self) -> Optional[bool]:
        return pulumi.get(self, "follow_redirection")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="syncBackToSource")
    def sync_back_to_source(self) -> Optional[bool]:
        return pulumi.get(self, "sync_back_to_source")


@pulumi.output_type
class CosBucketReplicaRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationBucket":
            suggest = "destination_bucket"
        elif key == "destinationStorageClass":
            suggest = "destination_storage_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CosBucketReplicaRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CosBucketReplicaRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CosBucketReplicaRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_bucket: str,
                 status: str,
                 destination_storage_class: Optional[str] = None,
                 id: Optional[str] = None,
                 prefix: Optional[str] = None):
        pulumi.set(__self__, "destination_bucket", destination_bucket)
        pulumi.set(__self__, "status", status)
        if destination_storage_class is not None:
            pulumi.set(__self__, "destination_storage_class", destination_storage_class)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="destinationBucket")
    def destination_bucket(self) -> str:
        return pulumi.get(self, "destination_bucket")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="destinationStorageClass")
    def destination_storage_class(self) -> Optional[str]:
        return pulumi.get(self, "destination_storage_class")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class CosBucketWebsite(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorDocument":
            suggest = "error_document"
        elif key == "indexDocument":
            suggest = "index_document"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CosBucketWebsite. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CosBucketWebsite.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CosBucketWebsite.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_document: Optional[str] = None,
                 index_document: Optional[str] = None):
        if error_document is not None:
            pulumi.set(__self__, "error_document", error_document)
        if index_document is not None:
            pulumi.set(__self__, "index_document", index_document)

    @property
    @pulumi.getter(name="errorDocument")
    def error_document(self) -> Optional[str]:
        return pulumi.get(self, "error_document")

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> Optional[str]:
        return pulumi.get(self, "index_document")


