# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'Layer7ListenersResult',
    'AwaitableLayer7ListenersResult',
    'layer7_listeners',
    'layer7_listeners_output',
]

@pulumi.output_type
class Layer7ListenersResult:
    """
    A collection of values returned by Layer7Listeners.
    """
    def __init__(__self__, id=None, listener_id=None, listener_name=None, listeners=None, port=None, protocol=None, proxy_id=None, result_output_file=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if listener_id and not isinstance(listener_id, str):
            raise TypeError("Expected argument 'listener_id' to be a str")
        pulumi.set(__self__, "listener_id", listener_id)
        if listener_name and not isinstance(listener_name, str):
            raise TypeError("Expected argument 'listener_name' to be a str")
        pulumi.set(__self__, "listener_name", listener_name)
        if listeners and not isinstance(listeners, list):
            raise TypeError("Expected argument 'listeners' to be a list")
        pulumi.set(__self__, "listeners", listeners)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if proxy_id and not isinstance(proxy_id, str):
            raise TypeError("Expected argument 'proxy_id' to be a str")
        pulumi.set(__self__, "proxy_id", proxy_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[str]:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> Optional[str]:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.Layer7ListenersListenerResult']:
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableLayer7ListenersResult(Layer7ListenersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return Layer7ListenersResult(
            id=self.id,
            listener_id=self.listener_id,
            listener_name=self.listener_name,
            listeners=self.listeners,
            port=self.port,
            protocol=self.protocol,
            proxy_id=self.proxy_id,
            result_output_file=self.result_output_file)


def layer7_listeners(listener_id: Optional[str] = None,
                     listener_name: Optional[str] = None,
                     port: Optional[int] = None,
                     protocol: Optional[str] = None,
                     proxy_id: Optional[str] = None,
                     result_output_file: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableLayer7ListenersResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['listenerId'] = listener_id
    __args__['listenerName'] = listener_name
    __args__['port'] = port
    __args__['protocol'] = protocol
    __args__['proxyId'] = proxy_id
    __args__['resultOutputFile'] = result_output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Gaap/layer7Listeners:Layer7Listeners', __args__, opts=opts, typ=Layer7ListenersResult).value

    return AwaitableLayer7ListenersResult(
        id=__ret__.id,
        listener_id=__ret__.listener_id,
        listener_name=__ret__.listener_name,
        listeners=__ret__.listeners,
        port=__ret__.port,
        protocol=__ret__.protocol,
        proxy_id=__ret__.proxy_id,
        result_output_file=__ret__.result_output_file)


@_utilities.lift_output_func(layer7_listeners)
def layer7_listeners_output(listener_id: Optional[pulumi.Input[Optional[str]]] = None,
                            listener_name: Optional[pulumi.Input[Optional[str]]] = None,
                            port: Optional[pulumi.Input[Optional[int]]] = None,
                            protocol: Optional[pulumi.Input[str]] = None,
                            proxy_id: Optional[pulumi.Input[Optional[str]]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[Layer7ListenersResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
