# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'HttpRulesResult',
    'AwaitableHttpRulesResult',
    'http_rules',
    'http_rules_output',
]

@pulumi.output_type
class HttpRulesResult:
    """
    A collection of values returned by HttpRules.
    """
    def __init__(__self__, domain=None, forward_host=None, id=None, listener_id=None, path=None, result_output_file=None, rules=None):
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if forward_host and not isinstance(forward_host, str):
            raise TypeError("Expected argument 'forward_host' to be a str")
        pulumi.set(__self__, "forward_host", forward_host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if listener_id and not isinstance(listener_id, str):
            raise TypeError("Expected argument 'listener_id' to be a str")
        pulumi.set(__self__, "listener_id", listener_id)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="forwardHost")
    def forward_host(self) -> Optional[str]:
        return pulumi.get(self, "forward_host")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.HttpRulesRuleResult']:
        return pulumi.get(self, "rules")


class AwaitableHttpRulesResult(HttpRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return HttpRulesResult(
            domain=self.domain,
            forward_host=self.forward_host,
            id=self.id,
            listener_id=self.listener_id,
            path=self.path,
            result_output_file=self.result_output_file,
            rules=self.rules)


def http_rules(domain: Optional[str] = None,
               forward_host: Optional[str] = None,
               listener_id: Optional[str] = None,
               path: Optional[str] = None,
               result_output_file: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableHttpRulesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['forwardHost'] = forward_host
    __args__['listenerId'] = listener_id
    __args__['path'] = path
    __args__['resultOutputFile'] = result_output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Gaap/httpRules:HttpRules', __args__, opts=opts, typ=HttpRulesResult).value

    return AwaitableHttpRulesResult(
        domain=__ret__.domain,
        forward_host=__ret__.forward_host,
        id=__ret__.id,
        listener_id=__ret__.listener_id,
        path=__ret__.path,
        result_output_file=__ret__.result_output_file,
        rules=__ret__.rules)


@_utilities.lift_output_func(http_rules)
def http_rules_output(domain: Optional[pulumi.Input[Optional[str]]] = None,
                      forward_host: Optional[pulumi.Input[Optional[str]]] = None,
                      listener_id: Optional[pulumi.Input[str]] = None,
                      path: Optional[pulumi.Input[Optional[str]]] = None,
                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[HttpRulesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
