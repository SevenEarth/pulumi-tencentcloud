# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ProxiesResult',
    'AwaitableProxiesResult',
    'proxies',
    'proxies_output',
]

@pulumi.output_type
class ProxiesResult:
    """
    A collection of values returned by Proxies.
    """
    def __init__(__self__, access_region=None, id=None, ids=None, project_id=None, proxies=None, realserver_region=None, result_output_file=None, tags=None):
        if access_region and not isinstance(access_region, str):
            raise TypeError("Expected argument 'access_region' to be a str")
        pulumi.set(__self__, "access_region", access_region)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if proxies and not isinstance(proxies, list):
            raise TypeError("Expected argument 'proxies' to be a list")
        pulumi.set(__self__, "proxies", proxies)
        if realserver_region and not isinstance(realserver_region, str):
            raise TypeError("Expected argument 'realserver_region' to be a str")
        pulumi.set(__self__, "realserver_region", realserver_region)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessRegion")
    def access_region(self) -> Optional[str]:
        return pulumi.get(self, "access_region")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def proxies(self) -> Sequence['outputs.ProxiesProxyResult']:
        return pulumi.get(self, "proxies")

    @property
    @pulumi.getter(name="realserverRegion")
    def realserver_region(self) -> Optional[str]:
        return pulumi.get(self, "realserver_region")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "tags")


class AwaitableProxiesResult(ProxiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ProxiesResult(
            access_region=self.access_region,
            id=self.id,
            ids=self.ids,
            project_id=self.project_id,
            proxies=self.proxies,
            realserver_region=self.realserver_region,
            result_output_file=self.result_output_file,
            tags=self.tags)


def proxies(access_region: Optional[str] = None,
            ids: Optional[Sequence[str]] = None,
            project_id: Optional[int] = None,
            realserver_region: Optional[str] = None,
            result_output_file: Optional[str] = None,
            tags: Optional[Mapping[str, Any]] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableProxiesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessRegion'] = access_region
    __args__['ids'] = ids
    __args__['projectId'] = project_id
    __args__['realserverRegion'] = realserver_region
    __args__['resultOutputFile'] = result_output_file
    __args__['tags'] = tags
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Gaap/proxies:Proxies', __args__, opts=opts, typ=ProxiesResult).value

    return AwaitableProxiesResult(
        access_region=__ret__.access_region,
        id=__ret__.id,
        ids=__ret__.ids,
        project_id=__ret__.project_id,
        proxies=__ret__.proxies,
        realserver_region=__ret__.realserver_region,
        result_output_file=__ret__.result_output_file,
        tags=__ret__.tags)


@_utilities.lift_output_func(proxies)
def proxies_output(access_region: Optional[pulumi.Input[Optional[str]]] = None,
                   ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                   project_id: Optional[pulumi.Input[Optional[int]]] = None,
                   realserver_region: Optional[pulumi.Input[Optional[str]]] = None,
                   result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                   tags: Optional[pulumi.Input[Optional[Mapping[str, Any]]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ProxiesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
