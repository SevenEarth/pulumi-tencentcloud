# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DomainErrorPageInfoListResult',
    'AwaitableDomainErrorPageInfoListResult',
    'domain_error_page_info_list',
    'domain_error_page_info_list_output',
]

@pulumi.output_type
class DomainErrorPageInfoListResult:
    """
    A collection of values returned by DomainErrorPageInfoList.
    """
    def __init__(__self__, domain=None, error_page_info_lists=None, id=None, ids=None, listener_id=None, result_output_file=None):
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if error_page_info_lists and not isinstance(error_page_info_lists, list):
            raise TypeError("Expected argument 'error_page_info_lists' to be a list")
        pulumi.set(__self__, "error_page_info_lists", error_page_info_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if listener_id and not isinstance(listener_id, str):
            raise TypeError("Expected argument 'listener_id' to be a str")
        pulumi.set(__self__, "listener_id", listener_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="errorPageInfoLists")
    def error_page_info_lists(self) -> Sequence['outputs.DomainErrorPageInfoListErrorPageInfoListResult']:
        return pulumi.get(self, "error_page_info_lists")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableDomainErrorPageInfoListResult(DomainErrorPageInfoListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return DomainErrorPageInfoListResult(
            domain=self.domain,
            error_page_info_lists=self.error_page_info_lists,
            id=self.id,
            ids=self.ids,
            listener_id=self.listener_id,
            result_output_file=self.result_output_file)


def domain_error_page_info_list(domain: Optional[str] = None,
                                ids: Optional[Sequence[str]] = None,
                                listener_id: Optional[str] = None,
                                result_output_file: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableDomainErrorPageInfoListResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['ids'] = ids
    __args__['listenerId'] = listener_id
    __args__['resultOutputFile'] = result_output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Gaap/domainErrorPageInfoList:DomainErrorPageInfoList', __args__, opts=opts, typ=DomainErrorPageInfoListResult).value

    return AwaitableDomainErrorPageInfoListResult(
        domain=__ret__.domain,
        error_page_info_lists=__ret__.error_page_info_lists,
        id=__ret__.id,
        ids=__ret__.ids,
        listener_id=__ret__.listener_id,
        result_output_file=__ret__.result_output_file)


@_utilities.lift_output_func(domain_error_page_info_list)
def domain_error_page_info_list_output(domain: Optional[pulumi.Input[str]] = None,
                                       ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                       listener_id: Optional[pulumi.Input[str]] = None,
                                       result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[DomainErrorPageInfoListResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
