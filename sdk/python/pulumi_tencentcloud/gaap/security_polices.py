# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'SecurityPolicesResult',
    'AwaitableSecurityPolicesResult',
    'security_polices',
    'security_polices_output',
]

@pulumi.output_type
class SecurityPolicesResult:
    """
    A collection of values returned by SecurityPolices.
    """
    def __init__(__self__, action=None, id=None, proxy_id=None, result_output_file=None, status=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if proxy_id and not isinstance(proxy_id, str):
            raise TypeError("Expected argument 'proxy_id' to be a str")
        pulumi.set(__self__, "proxy_id", proxy_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


class AwaitableSecurityPolicesResult(SecurityPolicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return SecurityPolicesResult(
            action=self.action,
            id=self.id,
            proxy_id=self.proxy_id,
            result_output_file=self.result_output_file,
            status=self.status)


def security_polices(id: Optional[str] = None,
                     result_output_file: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableSecurityPolicesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['resultOutputFile'] = result_output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Gaap/securityPolices:SecurityPolices', __args__, opts=opts, typ=SecurityPolicesResult).value

    return AwaitableSecurityPolicesResult(
        action=__ret__.action,
        id=__ret__.id,
        proxy_id=__ret__.proxy_id,
        result_output_file=__ret__.result_output_file,
        status=__ret__.status)


@_utilities.lift_output_func(security_polices)
def security_polices_output(id: Optional[pulumi.Input[str]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[SecurityPolicesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
