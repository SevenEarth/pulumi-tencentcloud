# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FunctionCfsConfig',
    'FunctionImageConfig',
    'FunctionLayer',
    'FunctionTrigger',
    'FunctionTriggerInfo',
    'FunctionsFunctionResult',
    'FunctionsFunctionTriggerInfoResult',
    'LayerContent',
    'LogsLogResult',
    'NamespacesNamespaceResult',
]

@pulumi.output_type
class FunctionCfsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cfsId":
            suggest = "cfs_id"
        elif key == "localMountDir":
            suggest = "local_mount_dir"
        elif key == "mountInsId":
            suggest = "mount_ins_id"
        elif key == "remoteMountDir":
            suggest = "remote_mount_dir"
        elif key == "userGroupId":
            suggest = "user_group_id"
        elif key == "userId":
            suggest = "user_id"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "mountSubnetId":
            suggest = "mount_subnet_id"
        elif key == "mountVpcId":
            suggest = "mount_vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionCfsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionCfsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionCfsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cfs_id: str,
                 local_mount_dir: str,
                 mount_ins_id: str,
                 remote_mount_dir: str,
                 user_group_id: str,
                 user_id: str,
                 ip_address: Optional[str] = None,
                 mount_subnet_id: Optional[str] = None,
                 mount_vpc_id: Optional[str] = None):
        pulumi.set(__self__, "cfs_id", cfs_id)
        pulumi.set(__self__, "local_mount_dir", local_mount_dir)
        pulumi.set(__self__, "mount_ins_id", mount_ins_id)
        pulumi.set(__self__, "remote_mount_dir", remote_mount_dir)
        pulumi.set(__self__, "user_group_id", user_group_id)
        pulumi.set(__self__, "user_id", user_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if mount_subnet_id is not None:
            pulumi.set(__self__, "mount_subnet_id", mount_subnet_id)
        if mount_vpc_id is not None:
            pulumi.set(__self__, "mount_vpc_id", mount_vpc_id)

    @property
    @pulumi.getter(name="cfsId")
    def cfs_id(self) -> str:
        return pulumi.get(self, "cfs_id")

    @property
    @pulumi.getter(name="localMountDir")
    def local_mount_dir(self) -> str:
        return pulumi.get(self, "local_mount_dir")

    @property
    @pulumi.getter(name="mountInsId")
    def mount_ins_id(self) -> str:
        return pulumi.get(self, "mount_ins_id")

    @property
    @pulumi.getter(name="remoteMountDir")
    def remote_mount_dir(self) -> str:
        return pulumi.get(self, "remote_mount_dir")

    @property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> str:
        return pulumi.get(self, "user_group_id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="mountSubnetId")
    def mount_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_subnet_id")

    @property
    @pulumi.getter(name="mountVpcId")
    def mount_vpc_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_vpc_id")


@pulumi.output_type
class FunctionImageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageType":
            suggest = "image_type"
        elif key == "imageUri":
            suggest = "image_uri"
        elif key == "entryPoint":
            suggest = "entry_point"
        elif key == "registryId":
            suggest = "registry_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionImageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionImageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionImageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_type: str,
                 image_uri: str,
                 args: Optional[str] = None,
                 command: Optional[str] = None,
                 entry_point: Optional[str] = None,
                 registry_id: Optional[str] = None):
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "image_uri", image_uri)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if entry_point is not None:
            pulumi.set(__self__, "entry_point", entry_point)
        if registry_id is not None:
            pulumi.set(__self__, "registry_id", registry_id)

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> str:
        return pulumi.get(self, "image_type")

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> str:
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter
    def args(self) -> Optional[str]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="entryPoint")
    def entry_point(self) -> Optional[str]:
        return pulumi.get(self, "entry_point")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> Optional[str]:
        return pulumi.get(self, "registry_id")


@pulumi.output_type
class FunctionLayer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "layerName":
            suggest = "layer_name"
        elif key == "layerVersion":
            suggest = "layer_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionLayer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionLayer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionLayer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 layer_name: str,
                 layer_version: int):
        pulumi.set(__self__, "layer_name", layer_name)
        pulumi.set(__self__, "layer_version", layer_version)

    @property
    @pulumi.getter(name="layerName")
    def layer_name(self) -> str:
        return pulumi.get(self, "layer_name")

    @property
    @pulumi.getter(name="layerVersion")
    def layer_version(self) -> int:
        return pulumi.get(self, "layer_version")


@pulumi.output_type
class FunctionTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "triggerDesc":
            suggest = "trigger_desc"
        elif key == "cosRegion":
            suggest = "cos_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 trigger_desc: str,
                 type: str,
                 cos_region: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "trigger_desc", trigger_desc)
        pulumi.set(__self__, "type", type)
        if cos_region is not None:
            pulumi.set(__self__, "cos_region", cos_region)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="triggerDesc")
    def trigger_desc(self) -> str:
        return pulumi.get(self, "trigger_desc")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosRegion")
    def cos_region(self) -> Optional[str]:
        return pulumi.get(self, "cos_region")


@pulumi.output_type
class FunctionTriggerInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "customArgument":
            suggest = "custom_argument"
        elif key == "modifyTime":
            suggest = "modify_time"
        elif key == "triggerDesc":
            suggest = "trigger_desc"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTriggerInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTriggerInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTriggerInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_time: Optional[str] = None,
                 custom_argument: Optional[str] = None,
                 enable: Optional[bool] = None,
                 modify_time: Optional[str] = None,
                 name: Optional[str] = None,
                 trigger_desc: Optional[str] = None,
                 type: Optional[str] = None):
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if custom_argument is not None:
            pulumi.set(__self__, "custom_argument", custom_argument)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if modify_time is not None:
            pulumi.set(__self__, "modify_time", modify_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if trigger_desc is not None:
            pulumi.set(__self__, "trigger_desc", trigger_desc)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customArgument")
    def custom_argument(self) -> Optional[str]:
        return pulumi.get(self, "custom_argument")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> Optional[str]:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="triggerDesc")
    def trigger_desc(self) -> Optional[str]:
        return pulumi.get(self, "trigger_desc")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class FunctionsFunctionResult(dict):
    def __init__(__self__, *,
                 cls_logset_id: str,
                 cls_topic_id: str,
                 code_error: str,
                 code_result: str,
                 code_size: int,
                 create_time: str,
                 description: str,
                 eip_fixed: bool,
                 eips: Sequence[str],
                 enable_eip_config: bool,
                 enable_public_net: bool,
                 environment: Mapping[str, Any],
                 err_no: int,
                 handler: str,
                 host: str,
                 install_dependency: bool,
                 l5_enable: bool,
                 mem_size: int,
                 modify_time: str,
                 name: str,
                 namespace: str,
                 role: str,
                 runtime: str,
                 status: str,
                 status_desc: str,
                 subnet_id: str,
                 tags: Mapping[str, Any],
                 timeout: int,
                 trigger_infos: Sequence['outputs.FunctionsFunctionTriggerInfoResult'],
                 vip: str,
                 vpc_id: str):
        pulumi.set(__self__, "cls_logset_id", cls_logset_id)
        pulumi.set(__self__, "cls_topic_id", cls_topic_id)
        pulumi.set(__self__, "code_error", code_error)
        pulumi.set(__self__, "code_result", code_result)
        pulumi.set(__self__, "code_size", code_size)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "eip_fixed", eip_fixed)
        pulumi.set(__self__, "eips", eips)
        pulumi.set(__self__, "enable_eip_config", enable_eip_config)
        pulumi.set(__self__, "enable_public_net", enable_public_net)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "err_no", err_no)
        pulumi.set(__self__, "handler", handler)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "install_dependency", install_dependency)
        pulumi.set(__self__, "l5_enable", l5_enable)
        pulumi.set(__self__, "mem_size", mem_size)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_desc", status_desc)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "trigger_infos", trigger_infos)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="clsLogsetId")
    def cls_logset_id(self) -> str:
        return pulumi.get(self, "cls_logset_id")

    @property
    @pulumi.getter(name="clsTopicId")
    def cls_topic_id(self) -> str:
        return pulumi.get(self, "cls_topic_id")

    @property
    @pulumi.getter(name="codeError")
    def code_error(self) -> str:
        return pulumi.get(self, "code_error")

    @property
    @pulumi.getter(name="codeResult")
    def code_result(self) -> str:
        return pulumi.get(self, "code_result")

    @property
    @pulumi.getter(name="codeSize")
    def code_size(self) -> int:
        return pulumi.get(self, "code_size")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eipFixed")
    def eip_fixed(self) -> bool:
        return pulumi.get(self, "eip_fixed")

    @property
    @pulumi.getter
    def eips(self) -> Sequence[str]:
        return pulumi.get(self, "eips")

    @property
    @pulumi.getter(name="enableEipConfig")
    def enable_eip_config(self) -> bool:
        return pulumi.get(self, "enable_eip_config")

    @property
    @pulumi.getter(name="enablePublicNet")
    def enable_public_net(self) -> bool:
        return pulumi.get(self, "enable_public_net")

    @property
    @pulumi.getter
    def environment(self) -> Mapping[str, Any]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="errNo")
    def err_no(self) -> int:
        return pulumi.get(self, "err_no")

    @property
    @pulumi.getter
    def handler(self) -> str:
        return pulumi.get(self, "handler")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="installDependency")
    def install_dependency(self) -> bool:
        return pulumi.get(self, "install_dependency")

    @property
    @pulumi.getter(name="l5Enable")
    def l5_enable(self) -> bool:
        return pulumi.get(self, "l5_enable")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> int:
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def runtime(self) -> str:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> str:
        return pulumi.get(self, "status_desc")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="triggerInfos")
    def trigger_infos(self) -> Sequence['outputs.FunctionsFunctionTriggerInfoResult']:
        return pulumi.get(self, "trigger_infos")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class FunctionsFunctionTriggerInfoResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 custom_argument: str,
                 enable: bool,
                 modify_time: str,
                 name: str,
                 trigger_desc: str,
                 type: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "custom_argument", custom_argument)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "trigger_desc", trigger_desc)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customArgument")
    def custom_argument(self) -> str:
        return pulumi.get(self, "custom_argument")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="triggerDesc")
    def trigger_desc(self) -> str:
        return pulumi.get(self, "trigger_desc")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class LayerContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosBucketName":
            suggest = "cos_bucket_name"
        elif key == "cosBucketRegion":
            suggest = "cos_bucket_region"
        elif key == "cosObjectName":
            suggest = "cos_object_name"
        elif key == "zipFile":
            suggest = "zip_file"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayerContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayerContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayerContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cos_bucket_name: Optional[str] = None,
                 cos_bucket_region: Optional[str] = None,
                 cos_object_name: Optional[str] = None,
                 zip_file: Optional[str] = None):
        if cos_bucket_name is not None:
            pulumi.set(__self__, "cos_bucket_name", cos_bucket_name)
        if cos_bucket_region is not None:
            pulumi.set(__self__, "cos_bucket_region", cos_bucket_region)
        if cos_object_name is not None:
            pulumi.set(__self__, "cos_object_name", cos_object_name)
        if zip_file is not None:
            pulumi.set(__self__, "zip_file", zip_file)

    @property
    @pulumi.getter(name="cosBucketName")
    def cos_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "cos_bucket_name")

    @property
    @pulumi.getter(name="cosBucketRegion")
    def cos_bucket_region(self) -> Optional[str]:
        return pulumi.get(self, "cos_bucket_region")

    @property
    @pulumi.getter(name="cosObjectName")
    def cos_object_name(self) -> Optional[str]:
        return pulumi.get(self, "cos_object_name")

    @property
    @pulumi.getter(name="zipFile")
    def zip_file(self) -> Optional[str]:
        return pulumi.get(self, "zip_file")


@pulumi.output_type
class LogsLogResult(dict):
    def __init__(__self__, *,
                 bill_duration: int,
                 duration: float,
                 function_name: str,
                 invoke_finished: int,
                 level: str,
                 log: str,
                 mem_usage: int,
                 request_id: str,
                 ret_code: int,
                 ret_msg: str,
                 source: str,
                 start_time: str):
        pulumi.set(__self__, "bill_duration", bill_duration)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "function_name", function_name)
        pulumi.set(__self__, "invoke_finished", invoke_finished)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "mem_usage", mem_usage)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "ret_code", ret_code)
        pulumi.set(__self__, "ret_msg", ret_msg)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="billDuration")
    def bill_duration(self) -> int:
        return pulumi.get(self, "bill_duration")

    @property
    @pulumi.getter
    def duration(self) -> float:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter(name="invokeFinished")
    def invoke_finished(self) -> int:
        return pulumi.get(self, "invoke_finished")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def log(self) -> str:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="memUsage")
    def mem_usage(self) -> int:
        return pulumi.get(self, "mem_usage")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="retCode")
    def ret_code(self) -> int:
        return pulumi.get(self, "ret_code")

    @property
    @pulumi.getter(name="retMsg")
    def ret_msg(self) -> str:
        return pulumi.get(self, "ret_msg")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class NamespacesNamespaceResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 description: str,
                 modify_time: str,
                 namespace: str,
                 type: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


