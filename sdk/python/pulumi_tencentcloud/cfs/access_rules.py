# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AccessRulesResult',
    'AwaitableAccessRulesResult',
    'access_rules',
    'access_rules_output',
]

@pulumi.output_type
class AccessRulesResult:
    """
    A collection of values returned by AccessRules.
    """
    def __init__(__self__, access_group_id=None, access_rule_id=None, access_rule_lists=None, id=None, result_output_file=None):
        if access_group_id and not isinstance(access_group_id, str):
            raise TypeError("Expected argument 'access_group_id' to be a str")
        pulumi.set(__self__, "access_group_id", access_group_id)
        if access_rule_id and not isinstance(access_rule_id, str):
            raise TypeError("Expected argument 'access_rule_id' to be a str")
        pulumi.set(__self__, "access_rule_id", access_rule_id)
        if access_rule_lists and not isinstance(access_rule_lists, list):
            raise TypeError("Expected argument 'access_rule_lists' to be a list")
        pulumi.set(__self__, "access_rule_lists", access_rule_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="accessGroupId")
    def access_group_id(self) -> str:
        return pulumi.get(self, "access_group_id")

    @property
    @pulumi.getter(name="accessRuleId")
    def access_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "access_rule_id")

    @property
    @pulumi.getter(name="accessRuleLists")
    def access_rule_lists(self) -> Sequence['outputs.AccessRulesAccessRuleListResult']:
        return pulumi.get(self, "access_rule_lists")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableAccessRulesResult(AccessRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return AccessRulesResult(
            access_group_id=self.access_group_id,
            access_rule_id=self.access_rule_id,
            access_rule_lists=self.access_rule_lists,
            id=self.id,
            result_output_file=self.result_output_file)


def access_rules(access_group_id: Optional[str] = None,
                 access_rule_id: Optional[str] = None,
                 result_output_file: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableAccessRulesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessGroupId'] = access_group_id
    __args__['accessRuleId'] = access_rule_id
    __args__['resultOutputFile'] = result_output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cfs/accessRules:AccessRules', __args__, opts=opts, typ=AccessRulesResult).value

    return AwaitableAccessRulesResult(
        access_group_id=__ret__.access_group_id,
        access_rule_id=__ret__.access_rule_id,
        access_rule_lists=__ret__.access_rule_lists,
        id=__ret__.id,
        result_output_file=__ret__.result_output_file)


@_utilities.lift_output_func(access_rules)
def access_rules_output(access_group_id: Optional[pulumi.Input[str]] = None,
                        access_rule_id: Optional[pulumi.Input[Optional[str]]] = None,
                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[AccessRulesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
