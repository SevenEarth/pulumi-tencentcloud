# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AccessGroupsResult',
    'AwaitableAccessGroupsResult',
    'access_groups',
    'access_groups_output',
]

@pulumi.output_type
class AccessGroupsResult:
    """
    A collection of values returned by AccessGroups.
    """
    def __init__(__self__, access_group_id=None, access_group_lists=None, id=None, name=None, result_output_file=None):
        if access_group_id and not isinstance(access_group_id, str):
            raise TypeError("Expected argument 'access_group_id' to be a str")
        pulumi.set(__self__, "access_group_id", access_group_id)
        if access_group_lists and not isinstance(access_group_lists, list):
            raise TypeError("Expected argument 'access_group_lists' to be a list")
        pulumi.set(__self__, "access_group_lists", access_group_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="accessGroupId")
    def access_group_id(self) -> Optional[str]:
        return pulumi.get(self, "access_group_id")

    @property
    @pulumi.getter(name="accessGroupLists")
    def access_group_lists(self) -> Sequence['outputs.AccessGroupsAccessGroupListResult']:
        return pulumi.get(self, "access_group_lists")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableAccessGroupsResult(AccessGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return AccessGroupsResult(
            access_group_id=self.access_group_id,
            access_group_lists=self.access_group_lists,
            id=self.id,
            name=self.name,
            result_output_file=self.result_output_file)


def access_groups(access_group_id: Optional[str] = None,
                  name: Optional[str] = None,
                  result_output_file: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableAccessGroupsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessGroupId'] = access_group_id
    __args__['name'] = name
    __args__['resultOutputFile'] = result_output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cfs/accessGroups:AccessGroups', __args__, opts=opts, typ=AccessGroupsResult).value

    return AwaitableAccessGroupsResult(
        access_group_id=__ret__.access_group_id,
        access_group_lists=__ret__.access_group_lists,
        id=__ret__.id,
        name=__ret__.name,
        result_output_file=__ret__.result_output_file)


@_utilities.lift_output_func(access_groups)
def access_groups_output(access_group_id: Optional[pulumi.Input[Optional[str]]] = None,
                         name: Optional[pulumi.Input[Optional[str]]] = None,
                         result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[AccessGroupsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
