# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'SnapshotPoliciesResult',
    'AwaitableSnapshotPoliciesResult',
    'snapshot_policies',
    'snapshot_policies_output',
]

@pulumi.output_type
class SnapshotPoliciesResult:
    """
    A collection of values returned by SnapshotPolicies.
    """
    def __init__(__self__, id=None, result_output_file=None, snapshot_policy_id=None, snapshot_policy_lists=None, snapshot_policy_name=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if snapshot_policy_id and not isinstance(snapshot_policy_id, str):
            raise TypeError("Expected argument 'snapshot_policy_id' to be a str")
        pulumi.set(__self__, "snapshot_policy_id", snapshot_policy_id)
        if snapshot_policy_lists and not isinstance(snapshot_policy_lists, list):
            raise TypeError("Expected argument 'snapshot_policy_lists' to be a list")
        pulumi.set(__self__, "snapshot_policy_lists", snapshot_policy_lists)
        if snapshot_policy_name and not isinstance(snapshot_policy_name, str):
            raise TypeError("Expected argument 'snapshot_policy_name' to be a str")
        pulumi.set(__self__, "snapshot_policy_name", snapshot_policy_name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="snapshotPolicyId")
    def snapshot_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_policy_id")

    @property
    @pulumi.getter(name="snapshotPolicyLists")
    def snapshot_policy_lists(self) -> Sequence['outputs.SnapshotPoliciesSnapshotPolicyListResult']:
        return pulumi.get(self, "snapshot_policy_lists")

    @property
    @pulumi.getter(name="snapshotPolicyName")
    def snapshot_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_policy_name")


class AwaitableSnapshotPoliciesResult(SnapshotPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return SnapshotPoliciesResult(
            id=self.id,
            result_output_file=self.result_output_file,
            snapshot_policy_id=self.snapshot_policy_id,
            snapshot_policy_lists=self.snapshot_policy_lists,
            snapshot_policy_name=self.snapshot_policy_name)


def snapshot_policies(result_output_file: Optional[str] = None,
                      snapshot_policy_id: Optional[str] = None,
                      snapshot_policy_name: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableSnapshotPoliciesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['resultOutputFile'] = result_output_file
    __args__['snapshotPolicyId'] = snapshot_policy_id
    __args__['snapshotPolicyName'] = snapshot_policy_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cbs/snapshotPolicies:SnapshotPolicies', __args__, opts=opts, typ=SnapshotPoliciesResult).value

    return AwaitableSnapshotPoliciesResult(
        id=__ret__.id,
        result_output_file=__ret__.result_output_file,
        snapshot_policy_id=__ret__.snapshot_policy_id,
        snapshot_policy_lists=__ret__.snapshot_policy_lists,
        snapshot_policy_name=__ret__.snapshot_policy_name)


@_utilities.lift_output_func(snapshot_policies)
def snapshot_policies_output(result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             snapshot_policy_id: Optional[pulumi.Input[Optional[str]]] = None,
                             snapshot_policy_name: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[SnapshotPoliciesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
