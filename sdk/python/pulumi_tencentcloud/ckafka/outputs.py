# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AclsAclListResult',
    'InstanceConfig',
    'InstanceDynamicRetentionConfig',
    'InstanceTag',
    'TopicsInstanceListResult',
    'UsersUserListResult',
]

@pulumi.output_type
class AclsAclListResult(dict):
    def __init__(__self__, *,
                 host: str,
                 operation_type: str,
                 permission_type: str,
                 principal: str,
                 resource_name: str,
                 resource_type: str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "permission_type", permission_type)
        pulumi.set(__self__, "principal", principal)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> str:
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter(name="permissionType")
    def permission_type(self) -> str:
        return pulumi.get(self, "permission_type")

    @property
    @pulumi.getter
    def principal(self) -> str:
        return pulumi.get(self, "principal")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class InstanceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoCreateTopicEnable":
            suggest = "auto_create_topic_enable"
        elif key == "defaultNumPartitions":
            suggest = "default_num_partitions"
        elif key == "defaultReplicationFactor":
            suggest = "default_replication_factor"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_create_topic_enable: bool,
                 default_num_partitions: int,
                 default_replication_factor: int):
        pulumi.set(__self__, "auto_create_topic_enable", auto_create_topic_enable)
        pulumi.set(__self__, "default_num_partitions", default_num_partitions)
        pulumi.set(__self__, "default_replication_factor", default_replication_factor)

    @property
    @pulumi.getter(name="autoCreateTopicEnable")
    def auto_create_topic_enable(self) -> bool:
        return pulumi.get(self, "auto_create_topic_enable")

    @property
    @pulumi.getter(name="defaultNumPartitions")
    def default_num_partitions(self) -> int:
        return pulumi.get(self, "default_num_partitions")

    @property
    @pulumi.getter(name="defaultReplicationFactor")
    def default_replication_factor(self) -> int:
        return pulumi.get(self, "default_replication_factor")


@pulumi.output_type
class InstanceDynamicRetentionConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bottomRetention":
            suggest = "bottom_retention"
        elif key == "diskQuotaPercentage":
            suggest = "disk_quota_percentage"
        elif key == "stepForwardPercentage":
            suggest = "step_forward_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceDynamicRetentionConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceDynamicRetentionConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceDynamicRetentionConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bottom_retention: Optional[int] = None,
                 disk_quota_percentage: Optional[int] = None,
                 enable: Optional[int] = None,
                 step_forward_percentage: Optional[int] = None):
        if bottom_retention is not None:
            pulumi.set(__self__, "bottom_retention", bottom_retention)
        if disk_quota_percentage is not None:
            pulumi.set(__self__, "disk_quota_percentage", disk_quota_percentage)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if step_forward_percentage is not None:
            pulumi.set(__self__, "step_forward_percentage", step_forward_percentage)

    @property
    @pulumi.getter(name="bottomRetention")
    def bottom_retention(self) -> Optional[int]:
        return pulumi.get(self, "bottom_retention")

    @property
    @pulumi.getter(name="diskQuotaPercentage")
    def disk_quota_percentage(self) -> Optional[int]:
        return pulumi.get(self, "disk_quota_percentage")

    @property
    @pulumi.getter
    def enable(self) -> Optional[int]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="stepForwardPercentage")
    def step_forward_percentage(self) -> Optional[int]:
        return pulumi.get(self, "step_forward_percentage")


@pulumi.output_type
class InstanceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class TopicsInstanceListResult(dict):
    def __init__(__self__, *,
                 clean_up_policy: str,
                 create_time: str,
                 enable_white_list: bool,
                 forward_cos_bucket: str,
                 forward_interval: int,
                 forward_status: int,
                 ip_white_list_count: int,
                 max_message_bytes: int,
                 note: str,
                 partition_num: int,
                 replica_num: int,
                 retention: int,
                 segment: int,
                 segment_bytes: int,
                 sync_replica_min_num: int,
                 topic_id: str,
                 topic_name: str,
                 unclean_leader_election_enable: bool):
        pulumi.set(__self__, "clean_up_policy", clean_up_policy)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "enable_white_list", enable_white_list)
        pulumi.set(__self__, "forward_cos_bucket", forward_cos_bucket)
        pulumi.set(__self__, "forward_interval", forward_interval)
        pulumi.set(__self__, "forward_status", forward_status)
        pulumi.set(__self__, "ip_white_list_count", ip_white_list_count)
        pulumi.set(__self__, "max_message_bytes", max_message_bytes)
        pulumi.set(__self__, "note", note)
        pulumi.set(__self__, "partition_num", partition_num)
        pulumi.set(__self__, "replica_num", replica_num)
        pulumi.set(__self__, "retention", retention)
        pulumi.set(__self__, "segment", segment)
        pulumi.set(__self__, "segment_bytes", segment_bytes)
        pulumi.set(__self__, "sync_replica_min_num", sync_replica_min_num)
        pulumi.set(__self__, "topic_id", topic_id)
        pulumi.set(__self__, "topic_name", topic_name)
        pulumi.set(__self__, "unclean_leader_election_enable", unclean_leader_election_enable)

    @property
    @pulumi.getter(name="cleanUpPolicy")
    def clean_up_policy(self) -> str:
        return pulumi.get(self, "clean_up_policy")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="enableWhiteList")
    def enable_white_list(self) -> bool:
        return pulumi.get(self, "enable_white_list")

    @property
    @pulumi.getter(name="forwardCosBucket")
    def forward_cos_bucket(self) -> str:
        return pulumi.get(self, "forward_cos_bucket")

    @property
    @pulumi.getter(name="forwardInterval")
    def forward_interval(self) -> int:
        return pulumi.get(self, "forward_interval")

    @property
    @pulumi.getter(name="forwardStatus")
    def forward_status(self) -> int:
        return pulumi.get(self, "forward_status")

    @property
    @pulumi.getter(name="ipWhiteListCount")
    def ip_white_list_count(self) -> int:
        return pulumi.get(self, "ip_white_list_count")

    @property
    @pulumi.getter(name="maxMessageBytes")
    def max_message_bytes(self) -> int:
        return pulumi.get(self, "max_message_bytes")

    @property
    @pulumi.getter
    def note(self) -> str:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> int:
        return pulumi.get(self, "partition_num")

    @property
    @pulumi.getter(name="replicaNum")
    def replica_num(self) -> int:
        return pulumi.get(self, "replica_num")

    @property
    @pulumi.getter
    def retention(self) -> int:
        return pulumi.get(self, "retention")

    @property
    @pulumi.getter
    def segment(self) -> int:
        return pulumi.get(self, "segment")

    @property
    @pulumi.getter(name="segmentBytes")
    def segment_bytes(self) -> int:
        return pulumi.get(self, "segment_bytes")

    @property
    @pulumi.getter(name="syncReplicaMinNum")
    def sync_replica_min_num(self) -> int:
        return pulumi.get(self, "sync_replica_min_num")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        return pulumi.get(self, "topic_name")

    @property
    @pulumi.getter(name="uncleanLeaderElectionEnable")
    def unclean_leader_election_enable(self) -> bool:
        return pulumi.get(self, "unclean_leader_election_enable")


@pulumi.output_type
class UsersUserListResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 create_time: str,
                 update_time: str):
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")


