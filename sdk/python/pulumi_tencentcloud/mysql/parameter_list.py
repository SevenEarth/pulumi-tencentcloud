# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ParameterListResult',
    'AwaitableParameterListResult',
    'parameter_list',
    'parameter_list_output',
]

@pulumi.output_type
class ParameterListResult:
    """
    A collection of values returned by ParameterList.
    """
    def __init__(__self__, engine_version=None, id=None, mysql_id=None, parameter_lists=None, result_output_file=None):
        if engine_version and not isinstance(engine_version, str):
            raise TypeError("Expected argument 'engine_version' to be a str")
        pulumi.set(__self__, "engine_version", engine_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mysql_id and not isinstance(mysql_id, str):
            raise TypeError("Expected argument 'mysql_id' to be a str")
        pulumi.set(__self__, "mysql_id", mysql_id)
        if parameter_lists and not isinstance(parameter_lists, list):
            raise TypeError("Expected argument 'parameter_lists' to be a list")
        pulumi.set(__self__, "parameter_lists", parameter_lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[str]:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mysqlId")
    def mysql_id(self) -> Optional[str]:
        return pulumi.get(self, "mysql_id")

    @property
    @pulumi.getter(name="parameterLists")
    def parameter_lists(self) -> Sequence['outputs.ParameterListParameterListResult']:
        return pulumi.get(self, "parameter_lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableParameterListResult(ParameterListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ParameterListResult(
            engine_version=self.engine_version,
            id=self.id,
            mysql_id=self.mysql_id,
            parameter_lists=self.parameter_lists,
            result_output_file=self.result_output_file)


def parameter_list(engine_version: Optional[str] = None,
                   mysql_id: Optional[str] = None,
                   result_output_file: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableParameterListResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['engineVersion'] = engine_version
    __args__['mysqlId'] = mysql_id
    __args__['resultOutputFile'] = result_output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Mysql/parameterList:ParameterList', __args__, opts=opts, typ=ParameterListResult).value

    return AwaitableParameterListResult(
        engine_version=__ret__.engine_version,
        id=__ret__.id,
        mysql_id=__ret__.mysql_id,
        parameter_lists=__ret__.parameter_lists,
        result_output_file=__ret__.result_output_file)


@_utilities.lift_output_func(parameter_list)
def parameter_list_output(engine_version: Optional[pulumi.Input[Optional[str]]] = None,
                          mysql_id: Optional[pulumi.Input[Optional[str]]] = None,
                          result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ParameterListResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
