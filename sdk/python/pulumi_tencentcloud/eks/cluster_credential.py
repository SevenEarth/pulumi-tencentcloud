# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ClusterCredentialResult',
    'AwaitableClusterCredentialResult',
    'cluster_credential',
    'cluster_credential_output',
]

@pulumi.output_type
class ClusterCredentialResult:
    """
    A collection of values returned by ClusterCredential.
    """
    def __init__(__self__, addresses=None, cluster_id=None, credential=None, id=None, internal_lbs=None, kube_config=None, proxy_lb=None, public_lbs=None, result_output_file=None):
        if addresses and not isinstance(addresses, list):
            raise TypeError("Expected argument 'addresses' to be a list")
        pulumi.set(__self__, "addresses", addresses)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if credential and not isinstance(credential, dict):
            raise TypeError("Expected argument 'credential' to be a dict")
        pulumi.set(__self__, "credential", credential)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if internal_lbs and not isinstance(internal_lbs, list):
            raise TypeError("Expected argument 'internal_lbs' to be a list")
        pulumi.set(__self__, "internal_lbs", internal_lbs)
        if kube_config and not isinstance(kube_config, str):
            raise TypeError("Expected argument 'kube_config' to be a str")
        pulumi.set(__self__, "kube_config", kube_config)
        if proxy_lb and not isinstance(proxy_lb, bool):
            raise TypeError("Expected argument 'proxy_lb' to be a bool")
        pulumi.set(__self__, "proxy_lb", proxy_lb)
        if public_lbs and not isinstance(public_lbs, list):
            raise TypeError("Expected argument 'public_lbs' to be a list")
        pulumi.set(__self__, "public_lbs", public_lbs)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence['outputs.ClusterCredentialAddressResult']:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def credential(self) -> Mapping[str, Any]:
        return pulumi.get(self, "credential")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalLbs")
    def internal_lbs(self) -> Sequence['outputs.ClusterCredentialInternalLbResult']:
        return pulumi.get(self, "internal_lbs")

    @property
    @pulumi.getter(name="kubeConfig")
    def kube_config(self) -> str:
        return pulumi.get(self, "kube_config")

    @property
    @pulumi.getter(name="proxyLb")
    def proxy_lb(self) -> bool:
        return pulumi.get(self, "proxy_lb")

    @property
    @pulumi.getter(name="publicLbs")
    def public_lbs(self) -> Sequence['outputs.ClusterCredentialPublicLbResult']:
        return pulumi.get(self, "public_lbs")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableClusterCredentialResult(ClusterCredentialResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ClusterCredentialResult(
            addresses=self.addresses,
            cluster_id=self.cluster_id,
            credential=self.credential,
            id=self.id,
            internal_lbs=self.internal_lbs,
            kube_config=self.kube_config,
            proxy_lb=self.proxy_lb,
            public_lbs=self.public_lbs,
            result_output_file=self.result_output_file)


def cluster_credential(cluster_id: Optional[str] = None,
                       result_output_file: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableClusterCredentialResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['resultOutputFile'] = result_output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Eks/clusterCredential:ClusterCredential', __args__, opts=opts, typ=ClusterCredentialResult).value

    return AwaitableClusterCredentialResult(
        addresses=__ret__.addresses,
        cluster_id=__ret__.cluster_id,
        credential=__ret__.credential,
        id=__ret__.id,
        internal_lbs=__ret__.internal_lbs,
        kube_config=__ret__.kube_config,
        proxy_lb=__ret__.proxy_lb,
        public_lbs=__ret__.public_lbs,
        result_output_file=__ret__.result_output_file)


@_utilities.lift_output_func(cluster_credential)
def cluster_credential_output(cluster_id: Optional[pulumi.Input[str]] = None,
                              result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ClusterCredentialResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
