# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'NodesResult',
    'AwaitableNodesResult',
    'nodes',
    'nodes_output',
]

@pulumi.output_type
class NodesResult:
    """
    A collection of values returned by Nodes.
    """
    def __init__(__self__, hardware_resource_type=None, id=None, instance_id=None, limit=None, node_flag=None, nodes=None, offset=None, result_output_file=None):
        if hardware_resource_type and not isinstance(hardware_resource_type, str):
            raise TypeError("Expected argument 'hardware_resource_type' to be a str")
        pulumi.set(__self__, "hardware_resource_type", hardware_resource_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if node_flag and not isinstance(node_flag, str):
            raise TypeError("Expected argument 'node_flag' to be a str")
        pulumi.set(__self__, "node_flag", node_flag)
        if nodes and not isinstance(nodes, list):
            raise TypeError("Expected argument 'nodes' to be a list")
        pulumi.set(__self__, "nodes", nodes)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="hardwareResourceType")
    def hardware_resource_type(self) -> Optional[str]:
        return pulumi.get(self, "hardware_resource_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="nodeFlag")
    def node_flag(self) -> str:
        return pulumi.get(self, "node_flag")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.NodesNodeResult']:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableNodesResult(NodesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return NodesResult(
            hardware_resource_type=self.hardware_resource_type,
            id=self.id,
            instance_id=self.instance_id,
            limit=self.limit,
            node_flag=self.node_flag,
            nodes=self.nodes,
            offset=self.offset,
            result_output_file=self.result_output_file)


def nodes(hardware_resource_type: Optional[str] = None,
          instance_id: Optional[str] = None,
          limit: Optional[int] = None,
          node_flag: Optional[str] = None,
          offset: Optional[int] = None,
          result_output_file: Optional[str] = None,
          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableNodesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['hardwareResourceType'] = hardware_resource_type
    __args__['instanceId'] = instance_id
    __args__['limit'] = limit
    __args__['nodeFlag'] = node_flag
    __args__['offset'] = offset
    __args__['resultOutputFile'] = result_output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Emr/nodes:Nodes', __args__, opts=opts, typ=NodesResult).value

    return AwaitableNodesResult(
        hardware_resource_type=__ret__.hardware_resource_type,
        id=__ret__.id,
        instance_id=__ret__.instance_id,
        limit=__ret__.limit,
        node_flag=__ret__.node_flag,
        nodes=__ret__.nodes,
        offset=__ret__.offset,
        result_output_file=__ret__.result_output_file)


@_utilities.lift_output_func(nodes)
def nodes_output(hardware_resource_type: Optional[pulumi.Input[Optional[str]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[Optional[int]]] = None,
                 node_flag: Optional[pulumi.Input[str]] = None,
                 offset: Optional[pulumi.Input[Optional[int]]] = None,
                 result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[NodesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
