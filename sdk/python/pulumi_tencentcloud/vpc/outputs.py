# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AclsAclListResult',
    'AclsAclListEgressResult',
    'AclsAclListIngressResult',
    'AclsAclListSubnetResult',
    'RouteTablesInstanceListResult',
    'RouteTablesInstanceListRouteEntryInfoResult',
    'SubnetsInstanceListResult',
    'VpcInstancesInstanceListResult',
]

@pulumi.output_type
class AclsAclListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 egresses: Sequence['outputs.AclsAclListEgressResult'],
                 id: str,
                 ingresses: Sequence['outputs.AclsAclListIngressResult'],
                 name: str,
                 subnets: Sequence['outputs.AclsAclListSubnetResult'],
                 vpc_id: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "egresses", egresses)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ingresses", ingresses)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnets", subnets)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def egresses(self) -> Sequence['outputs.AclsAclListEgressResult']:
        return pulumi.get(self, "egresses")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ingresses(self) -> Sequence['outputs.AclsAclListIngressResult']:
        return pulumi.get(self, "ingresses")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.AclsAclListSubnetResult']:
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class AclsAclListEgressResult(dict):
    def __init__(__self__, *,
                 cidr_block: str,
                 description: str,
                 policy: str,
                 port: str,
                 protocol: str):
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class AclsAclListIngressResult(dict):
    def __init__(__self__, *,
                 cidr_block: str,
                 description: str,
                 policy: str,
                 port: str,
                 protocol: str):
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class AclsAclListSubnetResult(dict):
    def __init__(__self__, *,
                 cidr_block: str,
                 subnet_id: str,
                 subnet_name: str,
                 tags: Mapping[str, Any],
                 vpc_id: str):
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> str:
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class RouteTablesInstanceListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 is_default: bool,
                 name: str,
                 route_entry_infos: Sequence['outputs.RouteTablesInstanceListRouteEntryInfoResult'],
                 route_table_id: str,
                 subnet_ids: Sequence[str],
                 tags: Mapping[str, Any],
                 vpc_id: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "route_entry_infos", route_entry_infos)
        pulumi.set(__self__, "route_table_id", route_table_id)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routeEntryInfos")
    def route_entry_infos(self) -> Sequence['outputs.RouteTablesInstanceListRouteEntryInfoResult']:
        return pulumi.get(self, "route_entry_infos")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> str:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class RouteTablesInstanceListRouteEntryInfoResult(dict):
    def __init__(__self__, *,
                 description: str,
                 destination_cidr_block: str,
                 next_hub: str,
                 next_type: str,
                 route_entry_id: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "destination_cidr_block", destination_cidr_block)
        pulumi.set(__self__, "next_hub", next_hub)
        pulumi.set(__self__, "next_type", next_type)
        pulumi.set(__self__, "route_entry_id", route_entry_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationCidrBlock")
    def destination_cidr_block(self) -> str:
        return pulumi.get(self, "destination_cidr_block")

    @property
    @pulumi.getter(name="nextHub")
    def next_hub(self) -> str:
        return pulumi.get(self, "next_hub")

    @property
    @pulumi.getter(name="nextType")
    def next_type(self) -> str:
        return pulumi.get(self, "next_type")

    @property
    @pulumi.getter(name="routeEntryId")
    def route_entry_id(self) -> str:
        return pulumi.get(self, "route_entry_id")


@pulumi.output_type
class SubnetsInstanceListResult(dict):
    def __init__(__self__, *,
                 availability_zone: str,
                 available_ip_count: int,
                 cidr_block: str,
                 create_time: str,
                 is_default: bool,
                 is_multicast: bool,
                 name: str,
                 route_table_id: str,
                 subnet_id: str,
                 tags: Mapping[str, Any],
                 vpc_id: str):
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "available_ip_count", available_ip_count)
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_multicast", is_multicast)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "route_table_id", route_table_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="availableIpCount")
    def available_ip_count(self) -> int:
        return pulumi.get(self, "available_ip_count")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isMulticast")
    def is_multicast(self) -> bool:
        return pulumi.get(self, "is_multicast")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> str:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class VpcInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 cidr_block: str,
                 create_time: str,
                 dns_servers: Sequence[str],
                 is_default: bool,
                 is_multicast: bool,
                 name: str,
                 subnet_ids: Sequence[str],
                 tags: Mapping[str, Any],
                 vpc_id: str):
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "dns_servers", dns_servers)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_multicast", is_multicast)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Sequence[str]:
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isMulticast")
    def is_multicast(self) -> bool:
        return pulumi.get(self, "is_multicast")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


