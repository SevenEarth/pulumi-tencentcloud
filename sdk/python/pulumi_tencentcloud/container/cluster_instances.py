# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ClusterInstancesResult',
    'AwaitableClusterInstancesResult',
    'cluster_instances',
    'cluster_instances_output',
]

@pulumi.output_type
class ClusterInstancesResult:
    """
    A collection of values returned by ClusterInstances.
    """
    def __init__(__self__, cluster_id=None, id=None, limit=None, nodes=None, total_count=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if nodes and not isinstance(nodes, list):
            raise TypeError("Expected argument 'nodes' to be a list")
        pulumi.set(__self__, "nodes", nodes)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.ClusterInstancesNodeResult']:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        return pulumi.get(self, "total_count")


class AwaitableClusterInstancesResult(ClusterInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ClusterInstancesResult(
            cluster_id=self.cluster_id,
            id=self.id,
            limit=self.limit,
            nodes=self.nodes,
            total_count=self.total_count)


def cluster_instances(cluster_id: Optional[str] = None,
                      limit: Optional[int] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableClusterInstancesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['limit'] = limit
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Container/clusterInstances:ClusterInstances', __args__, opts=opts, typ=ClusterInstancesResult).value

    return AwaitableClusterInstancesResult(
        cluster_id=__ret__.cluster_id,
        id=__ret__.id,
        limit=__ret__.limit,
        nodes=__ret__.nodes,
        total_count=__ret__.total_count)


@_utilities.lift_output_func(cluster_instances)
def cluster_instances_output(cluster_id: Optional[pulumi.Input[str]] = None,
                             limit: Optional[pulumi.Input[Optional[int]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ClusterInstancesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
