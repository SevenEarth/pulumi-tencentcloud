# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ZoneConfigResult',
    'AwaitableZoneConfigResult',
    'zone_config',
    'zone_config_output',
]

@pulumi.output_type
class ZoneConfigResult:
    """
    A collection of values returned by ZoneConfig.
    """
    def __init__(__self__, available_zone=None, id=None, lists=None, result_output_file=None):
        if available_zone and not isinstance(available_zone, str):
            raise TypeError("Expected argument 'available_zone' to be a str")
        pulumi.set(__self__, "available_zone", available_zone)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="availableZone")
    def available_zone(self) -> Optional[str]:
        return pulumi.get(self, "available_zone")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.ZoneConfigListResult']:
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableZoneConfigResult(ZoneConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ZoneConfigResult(
            available_zone=self.available_zone,
            id=self.id,
            lists=self.lists,
            result_output_file=self.result_output_file)


def zone_config(available_zone: Optional[str] = None,
                result_output_file: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableZoneConfigResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['availableZone'] = available_zone
    __args__['resultOutputFile'] = result_output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Mongodb/zoneConfig:ZoneConfig', __args__, opts=opts, typ=ZoneConfigResult).value

    return AwaitableZoneConfigResult(
        available_zone=__ret__.available_zone,
        id=__ret__.id,
        lists=__ret__.lists,
        result_output_file=__ret__.result_output_file)


@_utilities.lift_output_func(zone_config)
def zone_config_output(available_zone: Optional[pulumi.Input[Optional[str]]] = None,
                       result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ZoneConfigResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
