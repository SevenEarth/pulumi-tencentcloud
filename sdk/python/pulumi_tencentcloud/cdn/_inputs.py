# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'CdnDomainAuthenticationArgs',
    'CdnDomainAuthenticationTypeAArgs',
    'CdnDomainAuthenticationTypeBArgs',
    'CdnDomainAuthenticationTypeCArgs',
    'CdnDomainAuthenticationTypeDArgs',
    'CdnDomainAwsPrivateAccessArgs',
    'CdnDomainBandWidthAlertArgs',
    'CdnDomainBandWidthAlertStatisticItemArgs',
    'CdnDomainCompressionArgs',
    'CdnDomainCompressionCompressionRuleArgs',
    'CdnDomainDownstreamCappingArgs',
    'CdnDomainDownstreamCappingCappingRuleArgs',
    'CdnDomainErrorPageArgs',
    'CdnDomainErrorPagePageRuleArgs',
    'CdnDomainHttpsConfigArgs',
    'CdnDomainHttpsConfigClientCertificateConfigArgs',
    'CdnDomainHttpsConfigForceRedirectArgs',
    'CdnDomainHttpsConfigServerCertificateConfigArgs',
    'CdnDomainHwPrivateAccessArgs',
    'CdnDomainIpFilterArgs',
    'CdnDomainIpFilterFilterRuleArgs',
    'CdnDomainIpFreqLimitArgs',
    'CdnDomainMaxAgeArgs',
    'CdnDomainMaxAgeMaxAgeRuleArgs',
    'CdnDomainOriginArgs',
    'CdnDomainOriginPullOptimizationArgs',
    'CdnDomainOriginPullTimeoutArgs',
    'CdnDomainOssPrivateAccessArgs',
    'CdnDomainQnPrivateAccessArgs',
    'CdnDomainRefererArgs',
    'CdnDomainRefererRefererRuleArgs',
    'CdnDomainRequestHeaderArgs',
    'CdnDomainRequestHeaderHeaderRuleArgs',
    'CdnDomainResponseHeaderArgs',
    'CdnDomainResponseHeaderHeaderRuleArgs',
    'CdnDomainRuleCachArgs',
    'CdnDomainStatusCodeCacheArgs',
    'CdnDomainStatusCodeCacheCacheRuleArgs',
]

@pulumi.input_type
class CdnDomainAuthenticationArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None,
                 type_a: Optional[pulumi.Input['CdnDomainAuthenticationTypeAArgs']] = None,
                 type_b: Optional[pulumi.Input['CdnDomainAuthenticationTypeBArgs']] = None,
                 type_c: Optional[pulumi.Input['CdnDomainAuthenticationTypeCArgs']] = None,
                 type_d: Optional[pulumi.Input['CdnDomainAuthenticationTypeDArgs']] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type_a is not None:
            pulumi.set(__self__, "type_a", type_a)
        if type_b is not None:
            pulumi.set(__self__, "type_b", type_b)
        if type_c is not None:
            pulumi.set(__self__, "type_c", type_c)
        if type_d is not None:
            pulumi.set(__self__, "type_d", type_d)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="typeA")
    def type_a(self) -> Optional[pulumi.Input['CdnDomainAuthenticationTypeAArgs']]:
        return pulumi.get(self, "type_a")

    @type_a.setter
    def type_a(self, value: Optional[pulumi.Input['CdnDomainAuthenticationTypeAArgs']]):
        pulumi.set(self, "type_a", value)

    @property
    @pulumi.getter(name="typeB")
    def type_b(self) -> Optional[pulumi.Input['CdnDomainAuthenticationTypeBArgs']]:
        return pulumi.get(self, "type_b")

    @type_b.setter
    def type_b(self, value: Optional[pulumi.Input['CdnDomainAuthenticationTypeBArgs']]):
        pulumi.set(self, "type_b", value)

    @property
    @pulumi.getter(name="typeC")
    def type_c(self) -> Optional[pulumi.Input['CdnDomainAuthenticationTypeCArgs']]:
        return pulumi.get(self, "type_c")

    @type_c.setter
    def type_c(self, value: Optional[pulumi.Input['CdnDomainAuthenticationTypeCArgs']]):
        pulumi.set(self, "type_c", value)

    @property
    @pulumi.getter(name="typeD")
    def type_d(self) -> Optional[pulumi.Input['CdnDomainAuthenticationTypeDArgs']]:
        return pulumi.get(self, "type_d")

    @type_d.setter
    def type_d(self, value: Optional[pulumi.Input['CdnDomainAuthenticationTypeDArgs']]):
        pulumi.set(self, "type_d", value)


@pulumi.input_type
class CdnDomainAuthenticationTypeAArgs:
    def __init__(__self__, *,
                 expire_time: pulumi.Input[int],
                 file_extensions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 filter_type: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 sign_param: pulumi.Input[str],
                 backup_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "file_extensions", file_extensions)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "sign_param", sign_param)
        if backup_secret_key is not None:
            pulumi.set(__self__, "backup_secret_key", backup_secret_key)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Input[int]:
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter(name="fileExtensions")
    def file_extensions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "file_extensions")

    @file_extensions.setter
    def file_extensions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "file_extensions", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="signParam")
    def sign_param(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sign_param")

    @sign_param.setter
    def sign_param(self, value: pulumi.Input[str]):
        pulumi.set(self, "sign_param", value)

    @property
    @pulumi.getter(name="backupSecretKey")
    def backup_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_secret_key")

    @backup_secret_key.setter
    def backup_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_secret_key", value)


@pulumi.input_type
class CdnDomainAuthenticationTypeBArgs:
    def __init__(__self__, *,
                 expire_time: pulumi.Input[int],
                 file_extensions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 filter_type: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 backup_secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "file_extensions", file_extensions)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "secret_key", secret_key)
        if backup_secret_key is not None:
            pulumi.set(__self__, "backup_secret_key", backup_secret_key)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Input[int]:
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter(name="fileExtensions")
    def file_extensions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "file_extensions")

    @file_extensions.setter
    def file_extensions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "file_extensions", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="backupSecretKey")
    def backup_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_secret_key")

    @backup_secret_key.setter
    def backup_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_secret_key", value)


@pulumi.input_type
class CdnDomainAuthenticationTypeCArgs:
    def __init__(__self__, *,
                 expire_time: pulumi.Input[int],
                 file_extensions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 filter_type: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 backup_secret_key: Optional[pulumi.Input[str]] = None,
                 time_format: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "file_extensions", file_extensions)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "secret_key", secret_key)
        if backup_secret_key is not None:
            pulumi.set(__self__, "backup_secret_key", backup_secret_key)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Input[int]:
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter(name="fileExtensions")
    def file_extensions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "file_extensions")

    @file_extensions.setter
    def file_extensions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "file_extensions", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="backupSecretKey")
    def backup_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_secret_key")

    @backup_secret_key.setter
    def backup_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_secret_key", value)

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_format")

    @time_format.setter
    def time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_format", value)


@pulumi.input_type
class CdnDomainAuthenticationTypeDArgs:
    def __init__(__self__, *,
                 expire_time: pulumi.Input[int],
                 file_extensions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 filter_type: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 backup_secret_key: Optional[pulumi.Input[str]] = None,
                 time_format: Optional[pulumi.Input[str]] = None,
                 time_param: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "file_extensions", file_extensions)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "secret_key", secret_key)
        if backup_secret_key is not None:
            pulumi.set(__self__, "backup_secret_key", backup_secret_key)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)
        if time_param is not None:
            pulumi.set(__self__, "time_param", time_param)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Input[int]:
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter(name="fileExtensions")
    def file_extensions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "file_extensions")

    @file_extensions.setter
    def file_extensions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "file_extensions", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="backupSecretKey")
    def backup_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_secret_key")

    @backup_secret_key.setter
    def backup_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_secret_key", value)

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_format")

    @time_format.setter
    def time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_format", value)

    @property
    @pulumi.getter(name="timeParam")
    def time_param(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_param")

    @time_param.setter
    def time_param(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_param", value)


@pulumi.input_type
class CdnDomainAwsPrivateAccessArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class CdnDomainBandWidthAlertArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 alert_percentage: Optional[pulumi.Input[int]] = None,
                 alert_switch: Optional[pulumi.Input[str]] = None,
                 bps_threshold: Optional[pulumi.Input[int]] = None,
                 counter_measure: Optional[pulumi.Input[str]] = None,
                 last_trigger_time: Optional[pulumi.Input[str]] = None,
                 last_trigger_time_overseas: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 statistic_item: Optional[pulumi.Input['CdnDomainBandWidthAlertStatisticItemArgs']] = None):
        pulumi.set(__self__, "switch", switch)
        if alert_percentage is not None:
            pulumi.set(__self__, "alert_percentage", alert_percentage)
        if alert_switch is not None:
            pulumi.set(__self__, "alert_switch", alert_switch)
        if bps_threshold is not None:
            pulumi.set(__self__, "bps_threshold", bps_threshold)
        if counter_measure is not None:
            pulumi.set(__self__, "counter_measure", counter_measure)
        if last_trigger_time is not None:
            pulumi.set(__self__, "last_trigger_time", last_trigger_time)
        if last_trigger_time_overseas is not None:
            pulumi.set(__self__, "last_trigger_time_overseas", last_trigger_time_overseas)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if statistic_item is not None:
            pulumi.set(__self__, "statistic_item", statistic_item)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="alertPercentage")
    def alert_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "alert_percentage")

    @alert_percentage.setter
    def alert_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "alert_percentage", value)

    @property
    @pulumi.getter(name="alertSwitch")
    def alert_switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alert_switch")

    @alert_switch.setter
    def alert_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_switch", value)

    @property
    @pulumi.getter(name="bpsThreshold")
    def bps_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bps_threshold")

    @bps_threshold.setter
    def bps_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bps_threshold", value)

    @property
    @pulumi.getter(name="counterMeasure")
    def counter_measure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "counter_measure")

    @counter_measure.setter
    def counter_measure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "counter_measure", value)

    @property
    @pulumi.getter(name="lastTriggerTime")
    def last_trigger_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_trigger_time")

    @last_trigger_time.setter
    def last_trigger_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_trigger_time", value)

    @property
    @pulumi.getter(name="lastTriggerTimeOverseas")
    def last_trigger_time_overseas(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_trigger_time_overseas")

    @last_trigger_time_overseas.setter
    def last_trigger_time_overseas(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_trigger_time_overseas", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="statisticItem")
    def statistic_item(self) -> Optional[pulumi.Input['CdnDomainBandWidthAlertStatisticItemArgs']]:
        return pulumi.get(self, "statistic_item")

    @statistic_item.setter
    def statistic_item(self, value: Optional[pulumi.Input['CdnDomainBandWidthAlertStatisticItemArgs']]):
        pulumi.set(self, "statistic_item", value)


@pulumi.input_type
class CdnDomainBandWidthAlertStatisticItemArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 alert_percentage: Optional[pulumi.Input[int]] = None,
                 alert_switch: Optional[pulumi.Input[str]] = None,
                 bps_threshold: Optional[pulumi.Input[int]] = None,
                 counter_measure: Optional[pulumi.Input[str]] = None,
                 cycle: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unblock_time: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if alert_percentage is not None:
            pulumi.set(__self__, "alert_percentage", alert_percentage)
        if alert_switch is not None:
            pulumi.set(__self__, "alert_switch", alert_switch)
        if bps_threshold is not None:
            pulumi.set(__self__, "bps_threshold", bps_threshold)
        if counter_measure is not None:
            pulumi.set(__self__, "counter_measure", counter_measure)
        if cycle is not None:
            pulumi.set(__self__, "cycle", cycle)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unblock_time is not None:
            pulumi.set(__self__, "unblock_time", unblock_time)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="alertPercentage")
    def alert_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "alert_percentage")

    @alert_percentage.setter
    def alert_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "alert_percentage", value)

    @property
    @pulumi.getter(name="alertSwitch")
    def alert_switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alert_switch")

    @alert_switch.setter
    def alert_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_switch", value)

    @property
    @pulumi.getter(name="bpsThreshold")
    def bps_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bps_threshold")

    @bps_threshold.setter
    def bps_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bps_threshold", value)

    @property
    @pulumi.getter(name="counterMeasure")
    def counter_measure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "counter_measure")

    @counter_measure.setter
    def counter_measure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "counter_measure", value)

    @property
    @pulumi.getter
    def cycle(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cycle")

    @cycle.setter
    def cycle(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cycle", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="unblockTime")
    def unblock_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "unblock_time")

    @unblock_time.setter
    def unblock_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unblock_time", value)


@pulumi.input_type
class CdnDomainCompressionArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 compression_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainCompressionCompressionRuleArgs']]]] = None):
        pulumi.set(__self__, "switch", switch)
        if compression_rules is not None:
            pulumi.set(__self__, "compression_rules", compression_rules)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="compressionRules")
    def compression_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainCompressionCompressionRuleArgs']]]]:
        return pulumi.get(self, "compression_rules")

    @compression_rules.setter
    def compression_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainCompressionCompressionRuleArgs']]]]):
        pulumi.set(self, "compression_rules", value)


@pulumi.input_type
class CdnDomainCompressionCompressionRuleArgs:
    def __init__(__self__, *,
                 algorithms: pulumi.Input[Sequence[pulumi.Input[str]]],
                 compress: pulumi.Input[bool],
                 max_length: pulumi.Input[int],
                 min_length: pulumi.Input[int],
                 file_extensions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rule_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "algorithms", algorithms)
        pulumi.set(__self__, "compress", compress)
        pulumi.set(__self__, "max_length", max_length)
        pulumi.set(__self__, "min_length", min_length)
        if file_extensions is not None:
            pulumi.set(__self__, "file_extensions", file_extensions)
        if rule_paths is not None:
            pulumi.set(__self__, "rule_paths", rule_paths)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter
    def algorithms(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "algorithms")

    @algorithms.setter
    def algorithms(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "algorithms", value)

    @property
    @pulumi.getter
    def compress(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "compress")

    @compress.setter
    def compress(self, value: pulumi.Input[bool]):
        pulumi.set(self, "compress", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_length", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="fileExtensions")
    def file_extensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "file_extensions")

    @file_extensions.setter
    def file_extensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_extensions", value)

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "rule_paths")

    @rule_paths.setter
    def rule_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rule_paths", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_type", value)


@pulumi.input_type
class CdnDomainDownstreamCappingArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 capping_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainDownstreamCappingCappingRuleArgs']]]] = None):
        pulumi.set(__self__, "switch", switch)
        if capping_rules is not None:
            pulumi.set(__self__, "capping_rules", capping_rules)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="cappingRules")
    def capping_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainDownstreamCappingCappingRuleArgs']]]]:
        return pulumi.get(self, "capping_rules")

    @capping_rules.setter
    def capping_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainDownstreamCappingCappingRuleArgs']]]]):
        pulumi.set(self, "capping_rules", value)


@pulumi.input_type
class CdnDomainDownstreamCappingCappingRuleArgs:
    def __init__(__self__, *,
                 kbps_threshold: pulumi.Input[int],
                 rule_paths: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_type: pulumi.Input[str]):
        pulumi.set(__self__, "kbps_threshold", kbps_threshold)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="kbpsThreshold")
    def kbps_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "kbps_threshold")

    @kbps_threshold.setter
    def kbps_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "kbps_threshold", value)

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "rule_paths")

    @rule_paths.setter
    def rule_paths(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "rule_paths", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_type", value)


@pulumi.input_type
class CdnDomainErrorPageArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 page_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainErrorPagePageRuleArgs']]]] = None):
        pulumi.set(__self__, "switch", switch)
        if page_rules is not None:
            pulumi.set(__self__, "page_rules", page_rules)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="pageRules")
    def page_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainErrorPagePageRuleArgs']]]]:
        return pulumi.get(self, "page_rules")

    @page_rules.setter
    def page_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainErrorPagePageRuleArgs']]]]):
        pulumi.set(self, "page_rules", value)


@pulumi.input_type
class CdnDomainErrorPagePageRuleArgs:
    def __init__(__self__, *,
                 redirect_code: pulumi.Input[int],
                 redirect_url: pulumi.Input[str],
                 status_code: pulumi.Input[int]):
        pulumi.set(__self__, "redirect_code", redirect_code)
        pulumi.set(__self__, "redirect_url", redirect_url)
        pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="redirectCode")
    def redirect_code(self) -> pulumi.Input[int]:
        return pulumi.get(self, "redirect_code")

    @redirect_code.setter
    def redirect_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "redirect_code", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Input[int]:
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "status_code", value)


@pulumi.input_type
class CdnDomainHttpsConfigArgs:
    def __init__(__self__, *,
                 https_switch: pulumi.Input[str],
                 client_certificate_config: Optional[pulumi.Input['CdnDomainHttpsConfigClientCertificateConfigArgs']] = None,
                 force_redirect: Optional[pulumi.Input['CdnDomainHttpsConfigForceRedirectArgs']] = None,
                 http2_switch: Optional[pulumi.Input[str]] = None,
                 ocsp_stapling_switch: Optional[pulumi.Input[str]] = None,
                 server_certificate_config: Optional[pulumi.Input['CdnDomainHttpsConfigServerCertificateConfigArgs']] = None,
                 spdy_switch: Optional[pulumi.Input[str]] = None,
                 verify_client: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "https_switch", https_switch)
        if client_certificate_config is not None:
            pulumi.set(__self__, "client_certificate_config", client_certificate_config)
        if force_redirect is not None:
            pulumi.set(__self__, "force_redirect", force_redirect)
        if http2_switch is not None:
            pulumi.set(__self__, "http2_switch", http2_switch)
        if ocsp_stapling_switch is not None:
            pulumi.set(__self__, "ocsp_stapling_switch", ocsp_stapling_switch)
        if server_certificate_config is not None:
            pulumi.set(__self__, "server_certificate_config", server_certificate_config)
        if spdy_switch is not None:
            pulumi.set(__self__, "spdy_switch", spdy_switch)
        if verify_client is not None:
            pulumi.set(__self__, "verify_client", verify_client)

    @property
    @pulumi.getter(name="httpsSwitch")
    def https_switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "https_switch")

    @https_switch.setter
    def https_switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "https_switch", value)

    @property
    @pulumi.getter(name="clientCertificateConfig")
    def client_certificate_config(self) -> Optional[pulumi.Input['CdnDomainHttpsConfigClientCertificateConfigArgs']]:
        return pulumi.get(self, "client_certificate_config")

    @client_certificate_config.setter
    def client_certificate_config(self, value: Optional[pulumi.Input['CdnDomainHttpsConfigClientCertificateConfigArgs']]):
        pulumi.set(self, "client_certificate_config", value)

    @property
    @pulumi.getter(name="forceRedirect")
    def force_redirect(self) -> Optional[pulumi.Input['CdnDomainHttpsConfigForceRedirectArgs']]:
        return pulumi.get(self, "force_redirect")

    @force_redirect.setter
    def force_redirect(self, value: Optional[pulumi.Input['CdnDomainHttpsConfigForceRedirectArgs']]):
        pulumi.set(self, "force_redirect", value)

    @property
    @pulumi.getter(name="http2Switch")
    def http2_switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http2_switch")

    @http2_switch.setter
    def http2_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http2_switch", value)

    @property
    @pulumi.getter(name="ocspStaplingSwitch")
    def ocsp_stapling_switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ocsp_stapling_switch")

    @ocsp_stapling_switch.setter
    def ocsp_stapling_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocsp_stapling_switch", value)

    @property
    @pulumi.getter(name="serverCertificateConfig")
    def server_certificate_config(self) -> Optional[pulumi.Input['CdnDomainHttpsConfigServerCertificateConfigArgs']]:
        return pulumi.get(self, "server_certificate_config")

    @server_certificate_config.setter
    def server_certificate_config(self, value: Optional[pulumi.Input['CdnDomainHttpsConfigServerCertificateConfigArgs']]):
        pulumi.set(self, "server_certificate_config", value)

    @property
    @pulumi.getter(name="spdySwitch")
    def spdy_switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spdy_switch")

    @spdy_switch.setter
    def spdy_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spdy_switch", value)

    @property
    @pulumi.getter(name="verifyClient")
    def verify_client(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verify_client")

    @verify_client.setter
    def verify_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_client", value)


@pulumi.input_type
class CdnDomainHttpsConfigClientCertificateConfigArgs:
    def __init__(__self__, *,
                 certificate_content: pulumi.Input[str],
                 certificate_name: Optional[pulumi.Input[str]] = None,
                 deploy_time: Optional[pulumi.Input[str]] = None,
                 expire_time: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "certificate_content", certificate_content)
        if certificate_name is not None:
            pulumi.set(__self__, "certificate_name", certificate_name)
        if deploy_time is not None:
            pulumi.set(__self__, "deploy_time", deploy_time)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)

    @property
    @pulumi.getter(name="certificateContent")
    def certificate_content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "certificate_content")

    @certificate_content.setter
    def certificate_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_content", value)

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_name")

    @certificate_name.setter
    def certificate_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_name", value)

    @property
    @pulumi.getter(name="deployTime")
    def deploy_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deploy_time")

    @deploy_time.setter
    def deploy_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_time", value)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_time", value)


@pulumi.input_type
class CdnDomainHttpsConfigForceRedirectArgs:
    def __init__(__self__, *,
                 redirect_status_code: Optional[pulumi.Input[int]] = None,
                 redirect_type: Optional[pulumi.Input[str]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        if redirect_status_code is not None:
            pulumi.set(__self__, "redirect_status_code", redirect_status_code)
        if redirect_type is not None:
            pulumi.set(__self__, "redirect_type", redirect_type)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="redirectStatusCode")
    def redirect_status_code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "redirect_status_code")

    @redirect_status_code.setter
    def redirect_status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "redirect_status_code", value)

    @property
    @pulumi.getter(name="redirectType")
    def redirect_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_type")

    @redirect_type.setter
    def redirect_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_type", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class CdnDomainHttpsConfigServerCertificateConfigArgs:
    def __init__(__self__, *,
                 certificate_content: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_name: Optional[pulumi.Input[str]] = None,
                 deploy_time: Optional[pulumi.Input[str]] = None,
                 expire_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None):
        if certificate_content is not None:
            pulumi.set(__self__, "certificate_content", certificate_content)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_name is not None:
            pulumi.set(__self__, "certificate_name", certificate_name)
        if deploy_time is not None:
            pulumi.set(__self__, "deploy_time", deploy_time)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)

    @property
    @pulumi.getter(name="certificateContent")
    def certificate_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_content")

    @certificate_content.setter
    def certificate_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_content", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_name")

    @certificate_name.setter
    def certificate_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_name", value)

    @property
    @pulumi.getter(name="deployTime")
    def deploy_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deploy_time")

    @deploy_time.setter
    def deploy_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_time", value)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)


@pulumi.input_type
class CdnDomainHwPrivateAccessArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class CdnDomainIpFilterArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 filter_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainIpFilterFilterRuleArgs']]]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 return_code: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if filter_rules is not None:
            pulumi.set(__self__, "filter_rules", filter_rules)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if return_code is not None:
            pulumi.set(__self__, "return_code", return_code)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="filterRules")
    def filter_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainIpFilterFilterRuleArgs']]]]:
        return pulumi.get(self, "filter_rules")

    @filter_rules.setter
    def filter_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainIpFilterFilterRuleArgs']]]]):
        pulumi.set(self, "filter_rules", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="returnCode")
    def return_code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "return_code")

    @return_code.setter
    def return_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "return_code", value)


@pulumi.input_type
class CdnDomainIpFilterFilterRuleArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 filters: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_paths: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_type: pulumi.Input[str]):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "rule_paths")

    @rule_paths.setter
    def rule_paths(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "rule_paths", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_type", value)


@pulumi.input_type
class CdnDomainIpFreqLimitArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 qps: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if qps is not None:
            pulumi.set(__self__, "qps", qps)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def qps(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "qps")

    @qps.setter
    def qps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "qps", value)


@pulumi.input_type
class CdnDomainMaxAgeArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 max_age_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainMaxAgeMaxAgeRuleArgs']]]] = None):
        pulumi.set(__self__, "switch", switch)
        if max_age_rules is not None:
            pulumi.set(__self__, "max_age_rules", max_age_rules)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="maxAgeRules")
    def max_age_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainMaxAgeMaxAgeRuleArgs']]]]:
        return pulumi.get(self, "max_age_rules")

    @max_age_rules.setter
    def max_age_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainMaxAgeMaxAgeRuleArgs']]]]):
        pulumi.set(self, "max_age_rules", value)


@pulumi.input_type
class CdnDomainMaxAgeMaxAgeRuleArgs:
    def __init__(__self__, *,
                 max_age_contents: pulumi.Input[Sequence[pulumi.Input[str]]],
                 max_age_time: pulumi.Input[int],
                 max_age_type: pulumi.Input[str],
                 follow_origin: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "max_age_contents", max_age_contents)
        pulumi.set(__self__, "max_age_time", max_age_time)
        pulumi.set(__self__, "max_age_type", max_age_type)
        if follow_origin is not None:
            pulumi.set(__self__, "follow_origin", follow_origin)

    @property
    @pulumi.getter(name="maxAgeContents")
    def max_age_contents(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "max_age_contents")

    @max_age_contents.setter
    def max_age_contents(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "max_age_contents", value)

    @property
    @pulumi.getter(name="maxAgeTime")
    def max_age_time(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_age_time")

    @max_age_time.setter
    def max_age_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_age_time", value)

    @property
    @pulumi.getter(name="maxAgeType")
    def max_age_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "max_age_type")

    @max_age_type.setter
    def max_age_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "max_age_type", value)

    @property
    @pulumi.getter(name="followOrigin")
    def follow_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "follow_origin")

    @follow_origin.setter
    def follow_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "follow_origin", value)


@pulumi.input_type
class CdnDomainOriginArgs:
    def __init__(__self__, *,
                 origin_lists: pulumi.Input[Sequence[pulumi.Input[str]]],
                 origin_type: pulumi.Input[str],
                 backup_origin_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 backup_origin_type: Optional[pulumi.Input[str]] = None,
                 backup_server_name: Optional[pulumi.Input[str]] = None,
                 cos_private_access: Optional[pulumi.Input[str]] = None,
                 origin_pull_protocol: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "origin_lists", origin_lists)
        pulumi.set(__self__, "origin_type", origin_type)
        if backup_origin_lists is not None:
            pulumi.set(__self__, "backup_origin_lists", backup_origin_lists)
        if backup_origin_type is not None:
            pulumi.set(__self__, "backup_origin_type", backup_origin_type)
        if backup_server_name is not None:
            pulumi.set(__self__, "backup_server_name", backup_server_name)
        if cos_private_access is not None:
            pulumi.set(__self__, "cos_private_access", cos_private_access)
        if origin_pull_protocol is not None:
            pulumi.set(__self__, "origin_pull_protocol", origin_pull_protocol)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter(name="originLists")
    def origin_lists(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "origin_lists")

    @origin_lists.setter
    def origin_lists(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "origin_lists", value)

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "origin_type")

    @origin_type.setter
    def origin_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "origin_type", value)

    @property
    @pulumi.getter(name="backupOriginLists")
    def backup_origin_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "backup_origin_lists")

    @backup_origin_lists.setter
    def backup_origin_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backup_origin_lists", value)

    @property
    @pulumi.getter(name="backupOriginType")
    def backup_origin_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_origin_type")

    @backup_origin_type.setter
    def backup_origin_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_origin_type", value)

    @property
    @pulumi.getter(name="backupServerName")
    def backup_server_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup_server_name")

    @backup_server_name.setter
    def backup_server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_server_name", value)

    @property
    @pulumi.getter(name="cosPrivateAccess")
    def cos_private_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cos_private_access")

    @cos_private_access.setter
    def cos_private_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_private_access", value)

    @property
    @pulumi.getter(name="originPullProtocol")
    def origin_pull_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origin_pull_protocol")

    @origin_pull_protocol.setter
    def origin_pull_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_pull_protocol", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)


@pulumi.input_type
class CdnDomainOriginPullOptimizationArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 optimization_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if optimization_type is not None:
            pulumi.set(__self__, "optimization_type", optimization_type)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="optimizationType")
    def optimization_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "optimization_type")

    @optimization_type.setter
    def optimization_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optimization_type", value)


@pulumi.input_type
class CdnDomainOriginPullTimeoutArgs:
    def __init__(__self__, *,
                 connect_timeout: pulumi.Input[int],
                 receive_timeout: pulumi.Input[int]):
        pulumi.set(__self__, "connect_timeout", connect_timeout)
        pulumi.set(__self__, "receive_timeout", receive_timeout)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> pulumi.Input[int]:
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="receiveTimeout")
    def receive_timeout(self) -> pulumi.Input[int]:
        return pulumi.get(self, "receive_timeout")

    @receive_timeout.setter
    def receive_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "receive_timeout", value)


@pulumi.input_type
class CdnDomainOssPrivateAccessArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class CdnDomainQnPrivateAccessArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class CdnDomainRefererArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 referer_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainRefererRefererRuleArgs']]]] = None):
        pulumi.set(__self__, "switch", switch)
        if referer_rules is not None:
            pulumi.set(__self__, "referer_rules", referer_rules)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="refererRules")
    def referer_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainRefererRefererRuleArgs']]]]:
        return pulumi.get(self, "referer_rules")

    @referer_rules.setter
    def referer_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainRefererRefererRuleArgs']]]]):
        pulumi.set(self, "referer_rules", value)


@pulumi.input_type
class CdnDomainRefererRefererRuleArgs:
    def __init__(__self__, *,
                 allow_empty: pulumi.Input[bool],
                 referer_type: pulumi.Input[str],
                 referers: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_paths: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_type: pulumi.Input[str]):
        pulumi.set(__self__, "allow_empty", allow_empty)
        pulumi.set(__self__, "referer_type", referer_type)
        pulumi.set(__self__, "referers", referers)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_empty")

    @allow_empty.setter
    def allow_empty(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_empty", value)

    @property
    @pulumi.getter(name="refererType")
    def referer_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "referer_type")

    @referer_type.setter
    def referer_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "referer_type", value)

    @property
    @pulumi.getter
    def referers(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "referers")

    @referers.setter
    def referers(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "referers", value)

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "rule_paths")

    @rule_paths.setter
    def rule_paths(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "rule_paths", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_type", value)


@pulumi.input_type
class CdnDomainRequestHeaderArgs:
    def __init__(__self__, *,
                 header_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainRequestHeaderHeaderRuleArgs']]]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        if header_rules is not None:
            pulumi.set(__self__, "header_rules", header_rules)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="headerRules")
    def header_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainRequestHeaderHeaderRuleArgs']]]]:
        return pulumi.get(self, "header_rules")

    @header_rules.setter
    def header_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainRequestHeaderHeaderRuleArgs']]]]):
        pulumi.set(self, "header_rules", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class CdnDomainRequestHeaderHeaderRuleArgs:
    def __init__(__self__, *,
                 header_mode: pulumi.Input[str],
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 rule_paths: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_type: pulumi.Input[str]):
        pulumi.set(__self__, "header_mode", header_mode)
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="headerMode")
    def header_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header_mode")

    @header_mode.setter
    def header_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_mode", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_value", value)

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "rule_paths")

    @rule_paths.setter
    def rule_paths(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "rule_paths", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_type", value)


@pulumi.input_type
class CdnDomainResponseHeaderArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 header_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainResponseHeaderHeaderRuleArgs']]]] = None):
        pulumi.set(__self__, "switch", switch)
        if header_rules is not None:
            pulumi.set(__self__, "header_rules", header_rules)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="headerRules")
    def header_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainResponseHeaderHeaderRuleArgs']]]]:
        return pulumi.get(self, "header_rules")

    @header_rules.setter
    def header_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainResponseHeaderHeaderRuleArgs']]]]):
        pulumi.set(self, "header_rules", value)


@pulumi.input_type
class CdnDomainResponseHeaderHeaderRuleArgs:
    def __init__(__self__, *,
                 header_mode: pulumi.Input[str],
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 rule_paths: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_type: pulumi.Input[str]):
        pulumi.set(__self__, "header_mode", header_mode)
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="headerMode")
    def header_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header_mode")

    @header_mode.setter
    def header_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_mode", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_value", value)

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "rule_paths")

    @rule_paths.setter
    def rule_paths(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "rule_paths", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_type", value)


@pulumi.input_type
class CdnDomainRuleCachArgs:
    def __init__(__self__, *,
                 cache_time: pulumi.Input[int],
                 compare_max_age: Optional[pulumi.Input[str]] = None,
                 follow_origin_switch: Optional[pulumi.Input[str]] = None,
                 ignore_cache_control: Optional[pulumi.Input[str]] = None,
                 ignore_set_cookie: Optional[pulumi.Input[str]] = None,
                 no_cache_switch: Optional[pulumi.Input[str]] = None,
                 re_validate: Optional[pulumi.Input[str]] = None,
                 rule_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "cache_time", cache_time)
        if compare_max_age is not None:
            pulumi.set(__self__, "compare_max_age", compare_max_age)
        if follow_origin_switch is not None:
            pulumi.set(__self__, "follow_origin_switch", follow_origin_switch)
        if ignore_cache_control is not None:
            pulumi.set(__self__, "ignore_cache_control", ignore_cache_control)
        if ignore_set_cookie is not None:
            pulumi.set(__self__, "ignore_set_cookie", ignore_set_cookie)
        if no_cache_switch is not None:
            pulumi.set(__self__, "no_cache_switch", no_cache_switch)
        if re_validate is not None:
            pulumi.set(__self__, "re_validate", re_validate)
        if rule_paths is not None:
            pulumi.set(__self__, "rule_paths", rule_paths)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="cacheTime")
    def cache_time(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cache_time")

    @cache_time.setter
    def cache_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "cache_time", value)

    @property
    @pulumi.getter(name="compareMaxAge")
    def compare_max_age(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compare_max_age")

    @compare_max_age.setter
    def compare_max_age(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compare_max_age", value)

    @property
    @pulumi.getter(name="followOriginSwitch")
    def follow_origin_switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "follow_origin_switch")

    @follow_origin_switch.setter
    def follow_origin_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "follow_origin_switch", value)

    @property
    @pulumi.getter(name="ignoreCacheControl")
    def ignore_cache_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_cache_control")

    @ignore_cache_control.setter
    def ignore_cache_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_cache_control", value)

    @property
    @pulumi.getter(name="ignoreSetCookie")
    def ignore_set_cookie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_set_cookie")

    @ignore_set_cookie.setter
    def ignore_set_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_set_cookie", value)

    @property
    @pulumi.getter(name="noCacheSwitch")
    def no_cache_switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "no_cache_switch")

    @no_cache_switch.setter
    def no_cache_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "no_cache_switch", value)

    @property
    @pulumi.getter(name="reValidate")
    def re_validate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "re_validate")

    @re_validate.setter
    def re_validate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "re_validate", value)

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "rule_paths")

    @rule_paths.setter
    def rule_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rule_paths", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_type", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class CdnDomainStatusCodeCacheArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 cache_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainStatusCodeCacheCacheRuleArgs']]]] = None):
        pulumi.set(__self__, "switch", switch)
        if cache_rules is not None:
            pulumi.set(__self__, "cache_rules", cache_rules)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="cacheRules")
    def cache_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainStatusCodeCacheCacheRuleArgs']]]]:
        return pulumi.get(self, "cache_rules")

    @cache_rules.setter
    def cache_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdnDomainStatusCodeCacheCacheRuleArgs']]]]):
        pulumi.set(self, "cache_rules", value)


@pulumi.input_type
class CdnDomainStatusCodeCacheCacheRuleArgs:
    def __init__(__self__, *,
                 cache_time: pulumi.Input[int],
                 status_code: pulumi.Input[str]):
        pulumi.set(__self__, "cache_time", cache_time)
        pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="cacheTime")
    def cache_time(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cache_time")

    @cache_time.setter
    def cache_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "cache_time", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "status_code", value)


