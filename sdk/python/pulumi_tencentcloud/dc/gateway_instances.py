# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GatewayInstancesResult',
    'AwaitableGatewayInstancesResult',
    'gateway_instances',
    'gateway_instances_output',
]

@pulumi.output_type
class GatewayInstancesResult:
    """
    A collection of values returned by GatewayInstances.
    """
    def __init__(__self__, dcg_id=None, id=None, instance_lists=None, name=None, result_output_file=None):
        if dcg_id and not isinstance(dcg_id, str):
            raise TypeError("Expected argument 'dcg_id' to be a str")
        pulumi.set(__self__, "dcg_id", dcg_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_lists and not isinstance(instance_lists, list):
            raise TypeError("Expected argument 'instance_lists' to be a list")
        pulumi.set(__self__, "instance_lists", instance_lists)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="dcgId")
    def dcg_id(self) -> Optional[str]:
        return pulumi.get(self, "dcg_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceLists")
    def instance_lists(self) -> Sequence['outputs.GatewayInstancesInstanceListResult']:
        return pulumi.get(self, "instance_lists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGatewayInstancesResult(GatewayInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GatewayInstancesResult(
            dcg_id=self.dcg_id,
            id=self.id,
            instance_lists=self.instance_lists,
            name=self.name,
            result_output_file=self.result_output_file)


def gateway_instances(dcg_id: Optional[str] = None,
                      name: Optional[str] = None,
                      result_output_file: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGatewayInstancesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['dcgId'] = dcg_id
    __args__['name'] = name
    __args__['resultOutputFile'] = result_output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dc/gatewayInstances:GatewayInstances', __args__, opts=opts, typ=GatewayInstancesResult).value

    return AwaitableGatewayInstancesResult(
        dcg_id=__ret__.dcg_id,
        id=__ret__.id,
        instance_lists=__ret__.instance_lists,
        name=__ret__.name,
        result_output_file=__ret__.result_output_file)


@_utilities.lift_output_func(gateway_instances)
def gateway_instances_output(dcg_id: Optional[pulumi.Input[Optional[str]]] = None,
                             name: Optional[pulumi.Input[Optional[str]]] = None,
                             result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GatewayInstancesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
