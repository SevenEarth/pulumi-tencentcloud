# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DBsResult',
    'AwaitableDBsResult',
    'dbs',
    'dbs_output',
]

@pulumi.output_type
class DBsResult:
    """
    A collection of values returned by DBs.
    """
    def __init__(__self__, db_lists=None, id=None, instance_id=None, result_output_file=None):
        if db_lists and not isinstance(db_lists, list):
            raise TypeError("Expected argument 'db_lists' to be a list")
        pulumi.set(__self__, "db_lists", db_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="dbLists")
    def db_lists(self) -> Sequence['outputs.DBsDbListResult']:
        return pulumi.get(self, "db_lists")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableDBsResult(DBsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return DBsResult(
            db_lists=self.db_lists,
            id=self.id,
            instance_id=self.instance_id,
            result_output_file=self.result_output_file)


def dbs(instance_id: Optional[str] = None,
        result_output_file: Optional[str] = None,
        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableDBsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['resultOutputFile'] = result_output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Sqlserver/dBs:DBs', __args__, opts=opts, typ=DBsResult).value

    return AwaitableDBsResult(
        db_lists=__ret__.db_lists,
        id=__ret__.id,
        instance_id=__ret__.instance_id,
        result_output_file=__ret__.result_output_file)


@_utilities.lift_output_func(dbs)
def dbs_output(instance_id: Optional[pulumi.Input[str]] = None,
               result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[DBsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
