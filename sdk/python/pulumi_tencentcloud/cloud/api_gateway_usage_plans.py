# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'APIGatewayUsagePlansResult',
    'AwaitableAPIGatewayUsagePlansResult',
    'api_gateway_usage_plans',
    'api_gateway_usage_plans_output',
]

@pulumi.output_type
class APIGatewayUsagePlansResult:
    """
    A collection of values returned by APIGatewayUsagePlans.
    """
    def __init__(__self__, id=None, lists=None, result_output_file=None, usage_plan_id=None, usage_plan_name=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if usage_plan_id and not isinstance(usage_plan_id, str):
            raise TypeError("Expected argument 'usage_plan_id' to be a str")
        pulumi.set(__self__, "usage_plan_id", usage_plan_id)
        if usage_plan_name and not isinstance(usage_plan_name, str):
            raise TypeError("Expected argument 'usage_plan_name' to be a str")
        pulumi.set(__self__, "usage_plan_name", usage_plan_name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.APIGatewayUsagePlansListResult']:
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="usagePlanId")
    def usage_plan_id(self) -> Optional[str]:
        return pulumi.get(self, "usage_plan_id")

    @property
    @pulumi.getter(name="usagePlanName")
    def usage_plan_name(self) -> Optional[str]:
        return pulumi.get(self, "usage_plan_name")


class AwaitableAPIGatewayUsagePlansResult(APIGatewayUsagePlansResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return APIGatewayUsagePlansResult(
            id=self.id,
            lists=self.lists,
            result_output_file=self.result_output_file,
            usage_plan_id=self.usage_plan_id,
            usage_plan_name=self.usage_plan_name)


def api_gateway_usage_plans(result_output_file: Optional[str] = None,
                            usage_plan_id: Optional[str] = None,
                            usage_plan_name: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableAPIGatewayUsagePlansResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['resultOutputFile'] = result_output_file
    __args__['usagePlanId'] = usage_plan_id
    __args__['usagePlanName'] = usage_plan_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cloud/aPIGatewayUsagePlans:APIGatewayUsagePlans', __args__, opts=opts, typ=APIGatewayUsagePlansResult).value

    return AwaitableAPIGatewayUsagePlansResult(
        id=__ret__.id,
        lists=__ret__.lists,
        result_output_file=__ret__.result_output_file,
        usage_plan_id=__ret__.usage_plan_id,
        usage_plan_name=__ret__.usage_plan_name)


@_utilities.lift_output_func(api_gateway_usage_plans)
def api_gateway_usage_plans_output(result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                   usage_plan_id: Optional[pulumi.Input[Optional[str]]] = None,
                                   usage_plan_name: Optional[pulumi.Input[Optional[str]]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[APIGatewayUsagePlansResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
