# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InstanceSnatIp',
    'InstancesClbListResult',
    'ListenerRulesRuleListResult',
    'ListenersListenerListResult',
    'RedirectionsRedirectionListResult',
    'ServerAttachmentTarget',
    'ServerAttachmentsAttachmentListResult',
    'ServerAttachmentsAttachmentListTargetResult',
    'TargetGroupTargetGroupInstance',
    'TargetGroupsListResult',
    'TargetGroupsListAssociatedRuleListResult',
    'TargetGroupsListTargetGroupInstanceListResult',
]

@pulumi.output_type
class InstanceSnatIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceSnatIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceSnatIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceSnatIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 ip: Optional[str] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class InstancesClbListResult(dict):
    def __init__(__self__, *,
                 address_ip_version: str,
                 clb_id: str,
                 clb_name: str,
                 clb_vips: Sequence[str],
                 create_time: str,
                 internet_bandwidth_max_out: int,
                 internet_charge_type: str,
                 local_zone: bool,
                 network_type: str,
                 project_id: int,
                 security_groups: Sequence[str],
                 status: int,
                 status_time: str,
                 subnet_id: str,
                 tags: Mapping[str, Any],
                 target_region_info_region: str,
                 target_region_info_vpc_id: str,
                 vip_isp: str,
                 vpc_id: str,
                 zone: str,
                 zone_id: int,
                 zone_name: str,
                 zone_region: str):
        pulumi.set(__self__, "address_ip_version", address_ip_version)
        pulumi.set(__self__, "clb_id", clb_id)
        pulumi.set(__self__, "clb_name", clb_name)
        pulumi.set(__self__, "clb_vips", clb_vips)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "internet_bandwidth_max_out", internet_bandwidth_max_out)
        pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        pulumi.set(__self__, "local_zone", local_zone)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_time", status_time)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "target_region_info_region", target_region_info_region)
        pulumi.set(__self__, "target_region_info_vpc_id", target_region_info_vpc_id)
        pulumi.set(__self__, "vip_isp", vip_isp)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)
        pulumi.set(__self__, "zone_region", zone_region)

    @property
    @pulumi.getter(name="addressIpVersion")
    def address_ip_version(self) -> str:
        return pulumi.get(self, "address_ip_version")

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> str:
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter(name="clbName")
    def clb_name(self) -> str:
        return pulumi.get(self, "clb_name")

    @property
    @pulumi.getter(name="clbVips")
    def clb_vips(self) -> Sequence[str]:
        return pulumi.get(self, "clb_vips")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="internetBandwidthMaxOut")
    def internet_bandwidth_max_out(self) -> int:
        return pulumi.get(self, "internet_bandwidth_max_out")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> str:
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="localZone")
    def local_zone(self) -> bool:
        return pulumi.get(self, "local_zone")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[str]:
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusTime")
    def status_time(self) -> str:
        return pulumi.get(self, "status_time")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetRegionInfoRegion")
    def target_region_info_region(self) -> str:
        return pulumi.get(self, "target_region_info_region")

    @property
    @pulumi.getter(name="targetRegionInfoVpcId")
    def target_region_info_vpc_id(self) -> str:
        return pulumi.get(self, "target_region_info_vpc_id")

    @property
    @pulumi.getter(name="vipIsp")
    def vip_isp(self) -> str:
        return pulumi.get(self, "vip_isp")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        return pulumi.get(self, "zone_name")

    @property
    @pulumi.getter(name="zoneRegion")
    def zone_region(self) -> str:
        return pulumi.get(self, "zone_region")


@pulumi.output_type
class ListenerRulesRuleListResult(dict):
    def __init__(__self__, *,
                 certificate_ca_id: str,
                 certificate_id: str,
                 certificate_ssl_mode: str,
                 clb_id: str,
                 health_check_health_num: int,
                 health_check_http_code: int,
                 health_check_http_domain: str,
                 health_check_http_method: str,
                 health_check_http_path: str,
                 health_check_interval_time: int,
                 health_check_switch: bool,
                 health_check_unhealth_num: int,
                 http2_switch: bool,
                 listener_id: str,
                 rule_id: str,
                 scheduler: str,
                 session_expire_time: int,
                 domain: Optional[str] = None,
                 url: Optional[str] = None):
        pulumi.set(__self__, "certificate_ca_id", certificate_ca_id)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "certificate_ssl_mode", certificate_ssl_mode)
        pulumi.set(__self__, "clb_id", clb_id)
        pulumi.set(__self__, "health_check_health_num", health_check_health_num)
        pulumi.set(__self__, "health_check_http_code", health_check_http_code)
        pulumi.set(__self__, "health_check_http_domain", health_check_http_domain)
        pulumi.set(__self__, "health_check_http_method", health_check_http_method)
        pulumi.set(__self__, "health_check_http_path", health_check_http_path)
        pulumi.set(__self__, "health_check_interval_time", health_check_interval_time)
        pulumi.set(__self__, "health_check_switch", health_check_switch)
        pulumi.set(__self__, "health_check_unhealth_num", health_check_unhealth_num)
        pulumi.set(__self__, "http2_switch", http2_switch)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "scheduler", scheduler)
        pulumi.set(__self__, "session_expire_time", session_expire_time)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="certificateCaId")
    def certificate_ca_id(self) -> str:
        return pulumi.get(self, "certificate_ca_id")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateSslMode")
    def certificate_ssl_mode(self) -> str:
        return pulumi.get(self, "certificate_ssl_mode")

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> str:
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter(name="healthCheckHealthNum")
    def health_check_health_num(self) -> int:
        return pulumi.get(self, "health_check_health_num")

    @property
    @pulumi.getter(name="healthCheckHttpCode")
    def health_check_http_code(self) -> int:
        return pulumi.get(self, "health_check_http_code")

    @property
    @pulumi.getter(name="healthCheckHttpDomain")
    def health_check_http_domain(self) -> str:
        return pulumi.get(self, "health_check_http_domain")

    @property
    @pulumi.getter(name="healthCheckHttpMethod")
    def health_check_http_method(self) -> str:
        return pulumi.get(self, "health_check_http_method")

    @property
    @pulumi.getter(name="healthCheckHttpPath")
    def health_check_http_path(self) -> str:
        return pulumi.get(self, "health_check_http_path")

    @property
    @pulumi.getter(name="healthCheckIntervalTime")
    def health_check_interval_time(self) -> int:
        return pulumi.get(self, "health_check_interval_time")

    @property
    @pulumi.getter(name="healthCheckSwitch")
    def health_check_switch(self) -> bool:
        return pulumi.get(self, "health_check_switch")

    @property
    @pulumi.getter(name="healthCheckUnhealthNum")
    def health_check_unhealth_num(self) -> int:
        return pulumi.get(self, "health_check_unhealth_num")

    @property
    @pulumi.getter(name="http2Switch")
    def http2_switch(self) -> bool:
        return pulumi.get(self, "http2_switch")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> str:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def scheduler(self) -> str:
        return pulumi.get(self, "scheduler")

    @property
    @pulumi.getter(name="sessionExpireTime")
    def session_expire_time(self) -> int:
        return pulumi.get(self, "session_expire_time")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class ListenersListenerListResult(dict):
    def __init__(__self__, *,
                 certificate_ca_id: str,
                 certificate_id: str,
                 certificate_ssl_mode: str,
                 clb_id: str,
                 health_check_context_type: str,
                 health_check_health_num: int,
                 health_check_http_code: int,
                 health_check_http_domain: str,
                 health_check_http_method: str,
                 health_check_http_path: str,
                 health_check_http_version: str,
                 health_check_interval_time: int,
                 health_check_port: int,
                 health_check_recv_context: str,
                 health_check_send_context: str,
                 health_check_switch: bool,
                 health_check_time_out: int,
                 health_check_type: str,
                 health_check_unhealth_num: int,
                 listener_id: str,
                 listener_name: str,
                 port: int,
                 protocol: str,
                 scheduler: str,
                 session_expire_time: int,
                 sni_switch: bool):
        pulumi.set(__self__, "certificate_ca_id", certificate_ca_id)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "certificate_ssl_mode", certificate_ssl_mode)
        pulumi.set(__self__, "clb_id", clb_id)
        pulumi.set(__self__, "health_check_context_type", health_check_context_type)
        pulumi.set(__self__, "health_check_health_num", health_check_health_num)
        pulumi.set(__self__, "health_check_http_code", health_check_http_code)
        pulumi.set(__self__, "health_check_http_domain", health_check_http_domain)
        pulumi.set(__self__, "health_check_http_method", health_check_http_method)
        pulumi.set(__self__, "health_check_http_path", health_check_http_path)
        pulumi.set(__self__, "health_check_http_version", health_check_http_version)
        pulumi.set(__self__, "health_check_interval_time", health_check_interval_time)
        pulumi.set(__self__, "health_check_port", health_check_port)
        pulumi.set(__self__, "health_check_recv_context", health_check_recv_context)
        pulumi.set(__self__, "health_check_send_context", health_check_send_context)
        pulumi.set(__self__, "health_check_switch", health_check_switch)
        pulumi.set(__self__, "health_check_time_out", health_check_time_out)
        pulumi.set(__self__, "health_check_type", health_check_type)
        pulumi.set(__self__, "health_check_unhealth_num", health_check_unhealth_num)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "listener_name", listener_name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "scheduler", scheduler)
        pulumi.set(__self__, "session_expire_time", session_expire_time)
        pulumi.set(__self__, "sni_switch", sni_switch)

    @property
    @pulumi.getter(name="certificateCaId")
    def certificate_ca_id(self) -> str:
        return pulumi.get(self, "certificate_ca_id")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateSslMode")
    def certificate_ssl_mode(self) -> str:
        return pulumi.get(self, "certificate_ssl_mode")

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> str:
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter(name="healthCheckContextType")
    def health_check_context_type(self) -> str:
        return pulumi.get(self, "health_check_context_type")

    @property
    @pulumi.getter(name="healthCheckHealthNum")
    def health_check_health_num(self) -> int:
        return pulumi.get(self, "health_check_health_num")

    @property
    @pulumi.getter(name="healthCheckHttpCode")
    def health_check_http_code(self) -> int:
        return pulumi.get(self, "health_check_http_code")

    @property
    @pulumi.getter(name="healthCheckHttpDomain")
    def health_check_http_domain(self) -> str:
        return pulumi.get(self, "health_check_http_domain")

    @property
    @pulumi.getter(name="healthCheckHttpMethod")
    def health_check_http_method(self) -> str:
        return pulumi.get(self, "health_check_http_method")

    @property
    @pulumi.getter(name="healthCheckHttpPath")
    def health_check_http_path(self) -> str:
        return pulumi.get(self, "health_check_http_path")

    @property
    @pulumi.getter(name="healthCheckHttpVersion")
    def health_check_http_version(self) -> str:
        return pulumi.get(self, "health_check_http_version")

    @property
    @pulumi.getter(name="healthCheckIntervalTime")
    def health_check_interval_time(self) -> int:
        return pulumi.get(self, "health_check_interval_time")

    @property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> int:
        return pulumi.get(self, "health_check_port")

    @property
    @pulumi.getter(name="healthCheckRecvContext")
    def health_check_recv_context(self) -> str:
        return pulumi.get(self, "health_check_recv_context")

    @property
    @pulumi.getter(name="healthCheckSendContext")
    def health_check_send_context(self) -> str:
        return pulumi.get(self, "health_check_send_context")

    @property
    @pulumi.getter(name="healthCheckSwitch")
    def health_check_switch(self) -> bool:
        return pulumi.get(self, "health_check_switch")

    @property
    @pulumi.getter(name="healthCheckTimeOut")
    def health_check_time_out(self) -> int:
        return pulumi.get(self, "health_check_time_out")

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> str:
        return pulumi.get(self, "health_check_type")

    @property
    @pulumi.getter(name="healthCheckUnhealthNum")
    def health_check_unhealth_num(self) -> int:
        return pulumi.get(self, "health_check_unhealth_num")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> str:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def scheduler(self) -> str:
        return pulumi.get(self, "scheduler")

    @property
    @pulumi.getter(name="sessionExpireTime")
    def session_expire_time(self) -> int:
        return pulumi.get(self, "session_expire_time")

    @property
    @pulumi.getter(name="sniSwitch")
    def sni_switch(self) -> bool:
        return pulumi.get(self, "sni_switch")


@pulumi.output_type
class RedirectionsRedirectionListResult(dict):
    def __init__(__self__, *,
                 clb_id: str,
                 source_listener_id: str,
                 source_rule_id: str,
                 target_listener_id: str,
                 target_rule_id: str):
        pulumi.set(__self__, "clb_id", clb_id)
        pulumi.set(__self__, "source_listener_id", source_listener_id)
        pulumi.set(__self__, "source_rule_id", source_rule_id)
        pulumi.set(__self__, "target_listener_id", target_listener_id)
        pulumi.set(__self__, "target_rule_id", target_rule_id)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> str:
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter(name="sourceListenerId")
    def source_listener_id(self) -> str:
        return pulumi.get(self, "source_listener_id")

    @property
    @pulumi.getter(name="sourceRuleId")
    def source_rule_id(self) -> str:
        return pulumi.get(self, "source_rule_id")

    @property
    @pulumi.getter(name="targetListenerId")
    def target_listener_id(self) -> str:
        return pulumi.get(self, "target_listener_id")

    @property
    @pulumi.getter(name="targetRuleId")
    def target_rule_id(self) -> str:
        return pulumi.get(self, "target_rule_id")


@pulumi.output_type
class ServerAttachmentTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eniIp":
            suggest = "eni_ip"
        elif key == "instanceId":
            suggest = "instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerAttachmentTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerAttachmentTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerAttachmentTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 eni_ip: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 weight: Optional[int] = None):
        pulumi.set(__self__, "port", port)
        if eni_ip is not None:
            pulumi.set(__self__, "eni_ip", eni_ip)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="eniIp")
    def eni_ip(self) -> Optional[str]:
        return pulumi.get(self, "eni_ip")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class ServerAttachmentsAttachmentListResult(dict):
    def __init__(__self__, *,
                 clb_id: str,
                 listener_id: str,
                 protocol_type: str,
                 rule_id: str,
                 targets: Sequence['outputs.ServerAttachmentsAttachmentListTargetResult']):
        pulumi.set(__self__, "clb_id", clb_id)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> str:
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> str:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.ServerAttachmentsAttachmentListTargetResult']:
        return pulumi.get(self, "targets")


@pulumi.output_type
class ServerAttachmentsAttachmentListTargetResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 port: int,
                 weight: int):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class TargetGroupTargetGroupInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bindIp":
            suggest = "bind_ip"
        elif key == "newPort":
            suggest = "new_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetGroupTargetGroupInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetGroupTargetGroupInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetGroupTargetGroupInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bind_ip: str,
                 port: int,
                 new_port: Optional[int] = None,
                 weight: Optional[int] = None):
        pulumi.set(__self__, "bind_ip", bind_ip)
        pulumi.set(__self__, "port", port)
        if new_port is not None:
            pulumi.set(__self__, "new_port", new_port)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="bindIp")
    def bind_ip(self) -> str:
        return pulumi.get(self, "bind_ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="newPort")
    def new_port(self) -> Optional[int]:
        return pulumi.get(self, "new_port")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class TargetGroupsListResult(dict):
    def __init__(__self__, *,
                 associated_rule_lists: Sequence['outputs.TargetGroupsListAssociatedRuleListResult'],
                 create_time: str,
                 port: int,
                 target_group_id: str,
                 target_group_instance_lists: Sequence['outputs.TargetGroupsListTargetGroupInstanceListResult'],
                 target_group_name: str,
                 update_time: str,
                 vpc_id: str):
        pulumi.set(__self__, "associated_rule_lists", associated_rule_lists)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "target_group_id", target_group_id)
        pulumi.set(__self__, "target_group_instance_lists", target_group_instance_lists)
        pulumi.set(__self__, "target_group_name", target_group_name)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="associatedRuleLists")
    def associated_rule_lists(self) -> Sequence['outputs.TargetGroupsListAssociatedRuleListResult']:
        return pulumi.get(self, "associated_rule_lists")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> str:
        return pulumi.get(self, "target_group_id")

    @property
    @pulumi.getter(name="targetGroupInstanceLists")
    def target_group_instance_lists(self) -> Sequence['outputs.TargetGroupsListTargetGroupInstanceListResult']:
        return pulumi.get(self, "target_group_instance_lists")

    @property
    @pulumi.getter(name="targetGroupName")
    def target_group_name(self) -> str:
        return pulumi.get(self, "target_group_name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class TargetGroupsListAssociatedRuleListResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 listener_id: str,
                 listener_name: str,
                 listener_port: int,
                 load_balancer_id: str,
                 load_balancer_name: str,
                 location_id: str,
                 protocol: str,
                 url: str):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "listener_name", listener_name)
        pulumi.set(__self__, "listener_port", listener_port)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> str:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> int:
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> str:
        return pulumi.get(self, "load_balancer_name")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> str:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class TargetGroupsListTargetGroupInstanceListResult(dict):
    def __init__(__self__, *,
                 eni_id: str,
                 instance_id: str,
                 instance_name: str,
                 private_ip_addresses: Sequence[Any],
                 public_ip_addresses: Sequence[Any],
                 registered_time: str,
                 server_port: int,
                 server_type: str,
                 weight: int):
        pulumi.set(__self__, "eni_id", eni_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)
        pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        pulumi.set(__self__, "registered_time", registered_time)
        pulumi.set(__self__, "server_port", server_port)
        pulumi.set(__self__, "server_type", server_type)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="eniId")
    def eni_id(self) -> str:
        return pulumi.get(self, "eni_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Sequence[Any]:
        return pulumi.get(self, "private_ip_addresses")

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Sequence[Any]:
        return pulumi.get(self, "public_ip_addresses")

    @property
    @pulumi.getter(name="registeredTime")
    def registered_time(self) -> str:
        return pulumi.get(self, "registered_time")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> int:
        return pulumi.get(self, "server_port")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> str:
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


