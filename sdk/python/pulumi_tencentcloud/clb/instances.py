# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InstancesResult',
    'AwaitableInstancesResult',
    'instances',
    'instances_output',
]

@pulumi.output_type
class InstancesResult:
    """
    A collection of values returned by Instances.
    """
    def __init__(__self__, clb_id=None, clb_lists=None, clb_name=None, id=None, master_zone=None, network_type=None, project_id=None, result_output_file=None):
        if clb_id and not isinstance(clb_id, str):
            raise TypeError("Expected argument 'clb_id' to be a str")
        pulumi.set(__self__, "clb_id", clb_id)
        if clb_lists and not isinstance(clb_lists, list):
            raise TypeError("Expected argument 'clb_lists' to be a list")
        pulumi.set(__self__, "clb_lists", clb_lists)
        if clb_name and not isinstance(clb_name, str):
            raise TypeError("Expected argument 'clb_name' to be a str")
        pulumi.set(__self__, "clb_name", clb_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if master_zone and not isinstance(master_zone, str):
            raise TypeError("Expected argument 'master_zone' to be a str")
        pulumi.set(__self__, "master_zone", master_zone)
        if network_type and not isinstance(network_type, str):
            raise TypeError("Expected argument 'network_type' to be a str")
        pulumi.set(__self__, "network_type", network_type)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> Optional[str]:
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter(name="clbLists")
    def clb_lists(self) -> Sequence['outputs.InstancesClbListResult']:
        return pulumi.get(self, "clb_lists")

    @property
    @pulumi.getter(name="clbName")
    def clb_name(self) -> Optional[str]:
        return pulumi.get(self, "clb_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="masterZone")
    def master_zone(self) -> Optional[str]:
        return pulumi.get(self, "master_zone")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableInstancesResult(InstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return InstancesResult(
            clb_id=self.clb_id,
            clb_lists=self.clb_lists,
            clb_name=self.clb_name,
            id=self.id,
            master_zone=self.master_zone,
            network_type=self.network_type,
            project_id=self.project_id,
            result_output_file=self.result_output_file)


def instances(clb_id: Optional[str] = None,
              clb_name: Optional[str] = None,
              master_zone: Optional[str] = None,
              network_type: Optional[str] = None,
              project_id: Optional[int] = None,
              result_output_file: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableInstancesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clbId'] = clb_id
    __args__['clbName'] = clb_name
    __args__['masterZone'] = master_zone
    __args__['networkType'] = network_type
    __args__['projectId'] = project_id
    __args__['resultOutputFile'] = result_output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Clb/instances:Instances', __args__, opts=opts, typ=InstancesResult).value

    return AwaitableInstancesResult(
        clb_id=__ret__.clb_id,
        clb_lists=__ret__.clb_lists,
        clb_name=__ret__.clb_name,
        id=__ret__.id,
        master_zone=__ret__.master_zone,
        network_type=__ret__.network_type,
        project_id=__ret__.project_id,
        result_output_file=__ret__.result_output_file)


@_utilities.lift_output_func(instances)
def instances_output(clb_id: Optional[pulumi.Input[Optional[str]]] = None,
                     clb_name: Optional[pulumi.Input[Optional[str]]] = None,
                     master_zone: Optional[pulumi.Input[Optional[str]]] = None,
                     network_type: Optional[pulumi.Input[Optional[str]]] = None,
                     project_id: Optional[pulumi.Input[Optional[int]]] = None,
                     result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[InstancesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
