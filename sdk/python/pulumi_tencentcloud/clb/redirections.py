# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'RedirectionsResult',
    'AwaitableRedirectionsResult',
    'redirections',
    'redirections_output',
]

@pulumi.output_type
class RedirectionsResult:
    """
    A collection of values returned by Redirections.
    """
    def __init__(__self__, clb_id=None, id=None, redirection_lists=None, result_output_file=None, source_listener_id=None, source_rule_id=None, target_listener_id=None, target_rule_id=None):
        if clb_id and not isinstance(clb_id, str):
            raise TypeError("Expected argument 'clb_id' to be a str")
        pulumi.set(__self__, "clb_id", clb_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if redirection_lists and not isinstance(redirection_lists, list):
            raise TypeError("Expected argument 'redirection_lists' to be a list")
        pulumi.set(__self__, "redirection_lists", redirection_lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if source_listener_id and not isinstance(source_listener_id, str):
            raise TypeError("Expected argument 'source_listener_id' to be a str")
        pulumi.set(__self__, "source_listener_id", source_listener_id)
        if source_rule_id and not isinstance(source_rule_id, str):
            raise TypeError("Expected argument 'source_rule_id' to be a str")
        pulumi.set(__self__, "source_rule_id", source_rule_id)
        if target_listener_id and not isinstance(target_listener_id, str):
            raise TypeError("Expected argument 'target_listener_id' to be a str")
        pulumi.set(__self__, "target_listener_id", target_listener_id)
        if target_rule_id and not isinstance(target_rule_id, str):
            raise TypeError("Expected argument 'target_rule_id' to be a str")
        pulumi.set(__self__, "target_rule_id", target_rule_id)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> str:
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="redirectionLists")
    def redirection_lists(self) -> Sequence['outputs.RedirectionsRedirectionListResult']:
        return pulumi.get(self, "redirection_lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="sourceListenerId")
    def source_listener_id(self) -> str:
        return pulumi.get(self, "source_listener_id")

    @property
    @pulumi.getter(name="sourceRuleId")
    def source_rule_id(self) -> str:
        return pulumi.get(self, "source_rule_id")

    @property
    @pulumi.getter(name="targetListenerId")
    def target_listener_id(self) -> Optional[str]:
        return pulumi.get(self, "target_listener_id")

    @property
    @pulumi.getter(name="targetRuleId")
    def target_rule_id(self) -> Optional[str]:
        return pulumi.get(self, "target_rule_id")


class AwaitableRedirectionsResult(RedirectionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return RedirectionsResult(
            clb_id=self.clb_id,
            id=self.id,
            redirection_lists=self.redirection_lists,
            result_output_file=self.result_output_file,
            source_listener_id=self.source_listener_id,
            source_rule_id=self.source_rule_id,
            target_listener_id=self.target_listener_id,
            target_rule_id=self.target_rule_id)


def redirections(clb_id: Optional[str] = None,
                 result_output_file: Optional[str] = None,
                 source_listener_id: Optional[str] = None,
                 source_rule_id: Optional[str] = None,
                 target_listener_id: Optional[str] = None,
                 target_rule_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableRedirectionsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clbId'] = clb_id
    __args__['resultOutputFile'] = result_output_file
    __args__['sourceListenerId'] = source_listener_id
    __args__['sourceRuleId'] = source_rule_id
    __args__['targetListenerId'] = target_listener_id
    __args__['targetRuleId'] = target_rule_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('tencentcloud:Clb/redirections:Redirections', __args__, opts=opts, typ=RedirectionsResult).value

    return AwaitableRedirectionsResult(
        clb_id=__ret__.clb_id,
        id=__ret__.id,
        redirection_lists=__ret__.redirection_lists,
        result_output_file=__ret__.result_output_file,
        source_listener_id=__ret__.source_listener_id,
        source_rule_id=__ret__.source_rule_id,
        target_listener_id=__ret__.target_listener_id,
        target_rule_id=__ret__.target_rule_id)


@_utilities.lift_output_func(redirections)
def redirections_output(clb_id: Optional[pulumi.Input[str]] = None,
                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        source_listener_id: Optional[pulumi.Input[str]] = None,
                        source_rule_id: Optional[pulumi.Input[str]] = None,
                        target_listener_id: Optional[pulumi.Input[Optional[str]]] = None,
                        target_rule_id: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[RedirectionsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
