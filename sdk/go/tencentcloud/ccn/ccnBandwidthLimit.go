// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ccn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CcnBandwidthLimit struct {
	pulumi.CustomResourceState

	// Limitation of bandwidth.
	BandwidthLimit pulumi.IntOutput `pulumi:"bandwidthLimit"`
	// ID of the CCN.
	CcnId pulumi.StringOutput `pulumi:"ccnId"`
	// Destination area restriction. If the `CCN` rate limit type is `OUTER_REGION_LIMIT`, this value does not need to be set.
	DstRegion pulumi.StringPtrOutput `pulumi:"dstRegion"`
	// Limitation of region.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewCcnBandwidthLimit registers a new resource with the given unique name, arguments, and options.
func NewCcnBandwidthLimit(ctx *pulumi.Context,
	name string, args *CcnBandwidthLimitArgs, opts ...pulumi.ResourceOption) (*CcnBandwidthLimit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CcnId == nil {
		return nil, errors.New("invalid value for required argument 'CcnId'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	var resource CcnBandwidthLimit
	err := ctx.RegisterResource("tencentcloud:Ccn/ccnBandwidthLimit:CcnBandwidthLimit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCcnBandwidthLimit gets an existing CcnBandwidthLimit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCcnBandwidthLimit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CcnBandwidthLimitState, opts ...pulumi.ResourceOption) (*CcnBandwidthLimit, error) {
	var resource CcnBandwidthLimit
	err := ctx.ReadResource("tencentcloud:Ccn/ccnBandwidthLimit:CcnBandwidthLimit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CcnBandwidthLimit resources.
type ccnBandwidthLimitState struct {
	// Limitation of bandwidth.
	BandwidthLimit *int `pulumi:"bandwidthLimit"`
	// ID of the CCN.
	CcnId *string `pulumi:"ccnId"`
	// Destination area restriction. If the `CCN` rate limit type is `OUTER_REGION_LIMIT`, this value does not need to be set.
	DstRegion *string `pulumi:"dstRegion"`
	// Limitation of region.
	Region *string `pulumi:"region"`
}

type CcnBandwidthLimitState struct {
	// Limitation of bandwidth.
	BandwidthLimit pulumi.IntPtrInput
	// ID of the CCN.
	CcnId pulumi.StringPtrInput
	// Destination area restriction. If the `CCN` rate limit type is `OUTER_REGION_LIMIT`, this value does not need to be set.
	DstRegion pulumi.StringPtrInput
	// Limitation of region.
	Region pulumi.StringPtrInput
}

func (CcnBandwidthLimitState) ElementType() reflect.Type {
	return reflect.TypeOf((*ccnBandwidthLimitState)(nil)).Elem()
}

type ccnBandwidthLimitArgs struct {
	// Limitation of bandwidth.
	BandwidthLimit *int `pulumi:"bandwidthLimit"`
	// ID of the CCN.
	CcnId string `pulumi:"ccnId"`
	// Destination area restriction. If the `CCN` rate limit type is `OUTER_REGION_LIMIT`, this value does not need to be set.
	DstRegion *string `pulumi:"dstRegion"`
	// Limitation of region.
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a CcnBandwidthLimit resource.
type CcnBandwidthLimitArgs struct {
	// Limitation of bandwidth.
	BandwidthLimit pulumi.IntPtrInput
	// ID of the CCN.
	CcnId pulumi.StringInput
	// Destination area restriction. If the `CCN` rate limit type is `OUTER_REGION_LIMIT`, this value does not need to be set.
	DstRegion pulumi.StringPtrInput
	// Limitation of region.
	Region pulumi.StringInput
}

func (CcnBandwidthLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ccnBandwidthLimitArgs)(nil)).Elem()
}

type CcnBandwidthLimitInput interface {
	pulumi.Input

	ToCcnBandwidthLimitOutput() CcnBandwidthLimitOutput
	ToCcnBandwidthLimitOutputWithContext(ctx context.Context) CcnBandwidthLimitOutput
}

func (*CcnBandwidthLimit) ElementType() reflect.Type {
	return reflect.TypeOf((**CcnBandwidthLimit)(nil)).Elem()
}

func (i *CcnBandwidthLimit) ToCcnBandwidthLimitOutput() CcnBandwidthLimitOutput {
	return i.ToCcnBandwidthLimitOutputWithContext(context.Background())
}

func (i *CcnBandwidthLimit) ToCcnBandwidthLimitOutputWithContext(ctx context.Context) CcnBandwidthLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcnBandwidthLimitOutput)
}

// CcnBandwidthLimitArrayInput is an input type that accepts CcnBandwidthLimitArray and CcnBandwidthLimitArrayOutput values.
// You can construct a concrete instance of `CcnBandwidthLimitArrayInput` via:
//
//          CcnBandwidthLimitArray{ CcnBandwidthLimitArgs{...} }
type CcnBandwidthLimitArrayInput interface {
	pulumi.Input

	ToCcnBandwidthLimitArrayOutput() CcnBandwidthLimitArrayOutput
	ToCcnBandwidthLimitArrayOutputWithContext(context.Context) CcnBandwidthLimitArrayOutput
}

type CcnBandwidthLimitArray []CcnBandwidthLimitInput

func (CcnBandwidthLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CcnBandwidthLimit)(nil)).Elem()
}

func (i CcnBandwidthLimitArray) ToCcnBandwidthLimitArrayOutput() CcnBandwidthLimitArrayOutput {
	return i.ToCcnBandwidthLimitArrayOutputWithContext(context.Background())
}

func (i CcnBandwidthLimitArray) ToCcnBandwidthLimitArrayOutputWithContext(ctx context.Context) CcnBandwidthLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcnBandwidthLimitArrayOutput)
}

// CcnBandwidthLimitMapInput is an input type that accepts CcnBandwidthLimitMap and CcnBandwidthLimitMapOutput values.
// You can construct a concrete instance of `CcnBandwidthLimitMapInput` via:
//
//          CcnBandwidthLimitMap{ "key": CcnBandwidthLimitArgs{...} }
type CcnBandwidthLimitMapInput interface {
	pulumi.Input

	ToCcnBandwidthLimitMapOutput() CcnBandwidthLimitMapOutput
	ToCcnBandwidthLimitMapOutputWithContext(context.Context) CcnBandwidthLimitMapOutput
}

type CcnBandwidthLimitMap map[string]CcnBandwidthLimitInput

func (CcnBandwidthLimitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CcnBandwidthLimit)(nil)).Elem()
}

func (i CcnBandwidthLimitMap) ToCcnBandwidthLimitMapOutput() CcnBandwidthLimitMapOutput {
	return i.ToCcnBandwidthLimitMapOutputWithContext(context.Background())
}

func (i CcnBandwidthLimitMap) ToCcnBandwidthLimitMapOutputWithContext(ctx context.Context) CcnBandwidthLimitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcnBandwidthLimitMapOutput)
}

type CcnBandwidthLimitOutput struct{ *pulumi.OutputState }

func (CcnBandwidthLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CcnBandwidthLimit)(nil)).Elem()
}

func (o CcnBandwidthLimitOutput) ToCcnBandwidthLimitOutput() CcnBandwidthLimitOutput {
	return o
}

func (o CcnBandwidthLimitOutput) ToCcnBandwidthLimitOutputWithContext(ctx context.Context) CcnBandwidthLimitOutput {
	return o
}

// Limitation of bandwidth.
func (o CcnBandwidthLimitOutput) BandwidthLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *CcnBandwidthLimit) pulumi.IntOutput { return v.BandwidthLimit }).(pulumi.IntOutput)
}

// ID of the CCN.
func (o CcnBandwidthLimitOutput) CcnId() pulumi.StringOutput {
	return o.ApplyT(func(v *CcnBandwidthLimit) pulumi.StringOutput { return v.CcnId }).(pulumi.StringOutput)
}

// Destination area restriction. If the `CCN` rate limit type is `OUTER_REGION_LIMIT`, this value does not need to be set.
func (o CcnBandwidthLimitOutput) DstRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CcnBandwidthLimit) pulumi.StringPtrOutput { return v.DstRegion }).(pulumi.StringPtrOutput)
}

// Limitation of region.
func (o CcnBandwidthLimitOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CcnBandwidthLimit) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type CcnBandwidthLimitArrayOutput struct{ *pulumi.OutputState }

func (CcnBandwidthLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CcnBandwidthLimit)(nil)).Elem()
}

func (o CcnBandwidthLimitArrayOutput) ToCcnBandwidthLimitArrayOutput() CcnBandwidthLimitArrayOutput {
	return o
}

func (o CcnBandwidthLimitArrayOutput) ToCcnBandwidthLimitArrayOutputWithContext(ctx context.Context) CcnBandwidthLimitArrayOutput {
	return o
}

func (o CcnBandwidthLimitArrayOutput) Index(i pulumi.IntInput) CcnBandwidthLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CcnBandwidthLimit {
		return vs[0].([]*CcnBandwidthLimit)[vs[1].(int)]
	}).(CcnBandwidthLimitOutput)
}

type CcnBandwidthLimitMapOutput struct{ *pulumi.OutputState }

func (CcnBandwidthLimitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CcnBandwidthLimit)(nil)).Elem()
}

func (o CcnBandwidthLimitMapOutput) ToCcnBandwidthLimitMapOutput() CcnBandwidthLimitMapOutput {
	return o
}

func (o CcnBandwidthLimitMapOutput) ToCcnBandwidthLimitMapOutputWithContext(ctx context.Context) CcnBandwidthLimitMapOutput {
	return o
}

func (o CcnBandwidthLimitMapOutput) MapIndex(k pulumi.StringInput) CcnBandwidthLimitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CcnBandwidthLimit {
		return vs[0].(map[string]*CcnBandwidthLimit)[vs[1].(string)]
	}).(CcnBandwidthLimitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CcnBandwidthLimitInput)(nil)).Elem(), &CcnBandwidthLimit{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcnBandwidthLimitArrayInput)(nil)).Elem(), CcnBandwidthLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcnBandwidthLimitMapInput)(nil)).Elem(), CcnBandwidthLimitMap{})
	pulumi.RegisterOutputType(CcnBandwidthLimitOutput{})
	pulumi.RegisterOutputType(CcnBandwidthLimitArrayOutput{})
	pulumi.RegisterOutputType(CcnBandwidthLimitMapOutput{})
}
