// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tsf containGroup
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := Tsf.NewContainGroup(ctx, "containGroup", &Tsf.ContainGroupArgs{
// 			AccessType:        pulumi.Int(0),
// 			ApplicationId:     pulumi.String("application-y5r4nejv"),
// 			ClusterId:         pulumi.String("cls-2yu5kxr8"),
// 			CpuLimit:          pulumi.String("0.5"),
// 			CpuRequest:        pulumi.String("0.25"),
// 			GroupName:         pulumi.String("terraform-test"),
// 			GroupResourceType: pulumi.String("DEF"),
// 			InstanceNum:       pulumi.Int(1),
// 			MemLimit:          pulumi.String("1280"),
// 			MemRequest:        pulumi.String("640"),
// 			NamespaceId:       pulumi.String("namespace-ydlezgxa"),
// 			ProtocolPorts: tsf.ContainGroupProtocolPortArray{
// 				&tsf.ContainGroupProtocolPortArgs{
// 					NodePort:   pulumi.Int(0),
// 					Port:       pulumi.Int(333),
// 					Protocol:   pulumi.String("TCP"),
// 					TargetPort: pulumi.Int(333),
// 				},
// 			},
// 			UpdateIvl:  pulumi.Int(10),
// 			UpdateType: pulumi.Int(1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// tsf contain_group can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import tencentcloud:Tsf/containGroup:ContainGroup contain_group contain_group_id
// ```
type ContainGroup struct {
	pulumi.CustomResourceState

	// 0: public network 1: access within the cluster 2: NodePort.
	AccessType pulumi.IntOutput `pulumi:"accessType"`
	// The maximum number of CPU cores for the agent container, corresponding to the limit of K8S.
	AgentCpuLimit pulumi.StringPtrOutput `pulumi:"agentCpuLimit"`
	// The number of CPU cores allocated by the agent container, corresponding to the K8S request.
	AgentCpuRequest pulumi.StringPtrOutput `pulumi:"agentCpuRequest"`
	// The maximum memory MiB of the agent container, corresponding to the limit of K8S.
	AgentMemLimit pulumi.StringPtrOutput `pulumi:"agentMemLimit"`
	// The number of memory MiB allocated by the agent container, corresponding to the K8S request.
	AgentMemRequest pulumi.StringPtrOutput `pulumi:"agentMemRequest"`
	// The application ID to which the group belongs.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Application Name.
	ApplicationName pulumi.StringOutput `pulumi:"applicationName"`
	// App types.
	ApplicationType pulumi.StringOutput `pulumi:"applicationType"`
	// Cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Service ip.
	ClusterIp pulumi.StringOutput `pulumi:"clusterIp"`
	// cluster name.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// The maximum number of allocated CPU cores, corresponding to the K8S limit.
	CpuLimit pulumi.StringPtrOutput `pulumi:"cpuLimit"`
	// Initially allocated CPU cores, corresponding to K8S request.
	CpuRequest pulumi.StringPtrOutput `pulumi:"cpuRequest"`
	// creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Total number of instances launched.
	CurrentNum pulumi.IntOutput `pulumi:"currentNum"`
	// environment variable array object.
	Envs ContainGroupEnvArrayOutput `pulumi:"envs"`
	// Group remarks field, the length should not exceed 200 characters.
	GroupComment pulumi.StringPtrOutput `pulumi:"groupComment"`
	// Deployment group ID.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// Deployment Group Resource Type.
	GroupResourceType pulumi.StringOutput `pulumi:"groupResourceType"`
	// Deployment group health check settings.
	HealthCheckSettings ContainGroupHealthCheckSettingArrayOutput `pulumi:"healthCheckSettings"`
	// Number of deployment group instances.
	InstanceCount pulumi.IntOutput `pulumi:"instanceCount"`
	// number of instances.
	InstanceNum pulumi.IntOutput `pulumi:"instanceNum"`
	// The maximum number of CPU cores for the istioproxy container corresponds to the limit of K8S.
	IstioCpuLimit pulumi.StringOutput `pulumi:"istioCpuLimit"`
	// The number of CPU cores allocated by the istioproxy container, corresponding to the K8S request.
	IstioCpuRequest pulumi.StringOutput `pulumi:"istioCpuRequest"`
	// The maximum memory MiB of the istioproxy container corresponds to the limit of K8S.
	IstioMemLimit pulumi.StringOutput `pulumi:"istioMemLimit"`
	// The number of memory MiB allocated by the istioproxy container, corresponding to the K8S request.
	IstioMemRequest pulumi.StringOutput `pulumi:"istioMemRequest"`
	// load balancing ip.
	LbIp pulumi.StringOutput `pulumi:"lbIp"`
	// The MaxSurge parameter of the kubernetes rolling update policy.
	MaxSurge pulumi.StringOutput `pulumi:"maxSurge"`
	// The MaxUnavailable parameter of the kubernetes rolling update policy.
	MaxUnavailable pulumi.StringOutput `pulumi:"maxUnavailable"`
	// Maximum allocated memory MiB, corresponding to K8S limit.
	MemLimit pulumi.StringPtrOutput `pulumi:"memLimit"`
	// Initially allocated memory MiB, corresponding to K8S request.
	MemRequest pulumi.StringPtrOutput `pulumi:"memRequest"`
	// pod error message description.
	Message pulumi.StringOutput `pulumi:"message"`
	// Service type.
	MicroserviceType pulumi.StringOutput `pulumi:"microserviceType"`
	// ID of the namespace to which the group belongs.
	NamespaceId pulumi.StringOutput `pulumi:"namespaceId"`
	// namespace name.
	NamespaceName pulumi.StringOutput `pulumi:"namespaceName"`
	// Protocol Ports array.
	ProtocolPorts ContainGroupProtocolPortArrayOutput `pulumi:"protocolPorts"`
	// Mirror name, such as /tsf/nginx.
	Reponame pulumi.StringOutput `pulumi:"reponame"`
	// mirror server.
	Server pulumi.StringOutput `pulumi:"server"`
	// Deployment group status.
	Status pulumi.StringOutput `pulumi:"status"`
	// subnet ID.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Image version name.
	TagName pulumi.StringOutput `pulumi:"tagName"`
	// Rolling update is required, update interval.
	UpdateIvl pulumi.IntOutput `pulumi:"updateIvl"`
	// Update method: 0: fast update 1: rolling update.
	UpdateType pulumi.IntOutput `pulumi:"updateType"`
	// Deployment group update timestamp.
	UpdatedTime pulumi.IntOutput `pulumi:"updatedTime"`
}

// NewContainGroup registers a new resource with the given unique name, arguments, and options.
func NewContainGroup(ctx *pulumi.Context,
	name string, args *ContainGroupArgs, opts ...pulumi.ResourceOption) (*ContainGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessType == nil {
		return nil, errors.New("invalid value for required argument 'AccessType'")
	}
	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	if args.InstanceNum == nil {
		return nil, errors.New("invalid value for required argument 'InstanceNum'")
	}
	if args.NamespaceId == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceId'")
	}
	if args.ProtocolPorts == nil {
		return nil, errors.New("invalid value for required argument 'ProtocolPorts'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ContainGroup
	err := ctx.RegisterResource("tencentcloud:Tsf/containGroup:ContainGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainGroup gets an existing ContainGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainGroupState, opts ...pulumi.ResourceOption) (*ContainGroup, error) {
	var resource ContainGroup
	err := ctx.ReadResource("tencentcloud:Tsf/containGroup:ContainGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainGroup resources.
type containGroupState struct {
	// 0: public network 1: access within the cluster 2: NodePort.
	AccessType *int `pulumi:"accessType"`
	// The maximum number of CPU cores for the agent container, corresponding to the limit of K8S.
	AgentCpuLimit *string `pulumi:"agentCpuLimit"`
	// The number of CPU cores allocated by the agent container, corresponding to the K8S request.
	AgentCpuRequest *string `pulumi:"agentCpuRequest"`
	// The maximum memory MiB of the agent container, corresponding to the limit of K8S.
	AgentMemLimit *string `pulumi:"agentMemLimit"`
	// The number of memory MiB allocated by the agent container, corresponding to the K8S request.
	AgentMemRequest *string `pulumi:"agentMemRequest"`
	// The application ID to which the group belongs.
	ApplicationId *string `pulumi:"applicationId"`
	// Application Name.
	ApplicationName *string `pulumi:"applicationName"`
	// App types.
	ApplicationType *string `pulumi:"applicationType"`
	// Cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// Service ip.
	ClusterIp *string `pulumi:"clusterIp"`
	// cluster name.
	ClusterName *string `pulumi:"clusterName"`
	// The maximum number of allocated CPU cores, corresponding to the K8S limit.
	CpuLimit *string `pulumi:"cpuLimit"`
	// Initially allocated CPU cores, corresponding to K8S request.
	CpuRequest *string `pulumi:"cpuRequest"`
	// creation time.
	CreateTime *string `pulumi:"createTime"`
	// Total number of instances launched.
	CurrentNum *int `pulumi:"currentNum"`
	// environment variable array object.
	Envs []ContainGroupEnv `pulumi:"envs"`
	// Group remarks field, the length should not exceed 200 characters.
	GroupComment *string `pulumi:"groupComment"`
	// Deployment group ID.
	GroupId *string `pulumi:"groupId"`
	// Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
	GroupName *string `pulumi:"groupName"`
	// Deployment Group Resource Type.
	GroupResourceType *string `pulumi:"groupResourceType"`
	// Deployment group health check settings.
	HealthCheckSettings []ContainGroupHealthCheckSetting `pulumi:"healthCheckSettings"`
	// Number of deployment group instances.
	InstanceCount *int `pulumi:"instanceCount"`
	// number of instances.
	InstanceNum *int `pulumi:"instanceNum"`
	// The maximum number of CPU cores for the istioproxy container corresponds to the limit of K8S.
	IstioCpuLimit *string `pulumi:"istioCpuLimit"`
	// The number of CPU cores allocated by the istioproxy container, corresponding to the K8S request.
	IstioCpuRequest *string `pulumi:"istioCpuRequest"`
	// The maximum memory MiB of the istioproxy container corresponds to the limit of K8S.
	IstioMemLimit *string `pulumi:"istioMemLimit"`
	// The number of memory MiB allocated by the istioproxy container, corresponding to the K8S request.
	IstioMemRequest *string `pulumi:"istioMemRequest"`
	// load balancing ip.
	LbIp *string `pulumi:"lbIp"`
	// The MaxSurge parameter of the kubernetes rolling update policy.
	MaxSurge *string `pulumi:"maxSurge"`
	// The MaxUnavailable parameter of the kubernetes rolling update policy.
	MaxUnavailable *string `pulumi:"maxUnavailable"`
	// Maximum allocated memory MiB, corresponding to K8S limit.
	MemLimit *string `pulumi:"memLimit"`
	// Initially allocated memory MiB, corresponding to K8S request.
	MemRequest *string `pulumi:"memRequest"`
	// pod error message description.
	Message *string `pulumi:"message"`
	// Service type.
	MicroserviceType *string `pulumi:"microserviceType"`
	// ID of the namespace to which the group belongs.
	NamespaceId *string `pulumi:"namespaceId"`
	// namespace name.
	NamespaceName *string `pulumi:"namespaceName"`
	// Protocol Ports array.
	ProtocolPorts []ContainGroupProtocolPort `pulumi:"protocolPorts"`
	// Mirror name, such as /tsf/nginx.
	Reponame *string `pulumi:"reponame"`
	// mirror server.
	Server *string `pulumi:"server"`
	// Deployment group status.
	Status *string `pulumi:"status"`
	// subnet ID.
	SubnetId *string `pulumi:"subnetId"`
	// Image version name.
	TagName *string `pulumi:"tagName"`
	// Rolling update is required, update interval.
	UpdateIvl *int `pulumi:"updateIvl"`
	// Update method: 0: fast update 1: rolling update.
	UpdateType *int `pulumi:"updateType"`
	// Deployment group update timestamp.
	UpdatedTime *int `pulumi:"updatedTime"`
}

type ContainGroupState struct {
	// 0: public network 1: access within the cluster 2: NodePort.
	AccessType pulumi.IntPtrInput
	// The maximum number of CPU cores for the agent container, corresponding to the limit of K8S.
	AgentCpuLimit pulumi.StringPtrInput
	// The number of CPU cores allocated by the agent container, corresponding to the K8S request.
	AgentCpuRequest pulumi.StringPtrInput
	// The maximum memory MiB of the agent container, corresponding to the limit of K8S.
	AgentMemLimit pulumi.StringPtrInput
	// The number of memory MiB allocated by the agent container, corresponding to the K8S request.
	AgentMemRequest pulumi.StringPtrInput
	// The application ID to which the group belongs.
	ApplicationId pulumi.StringPtrInput
	// Application Name.
	ApplicationName pulumi.StringPtrInput
	// App types.
	ApplicationType pulumi.StringPtrInput
	// Cluster ID.
	ClusterId pulumi.StringPtrInput
	// Service ip.
	ClusterIp pulumi.StringPtrInput
	// cluster name.
	ClusterName pulumi.StringPtrInput
	// The maximum number of allocated CPU cores, corresponding to the K8S limit.
	CpuLimit pulumi.StringPtrInput
	// Initially allocated CPU cores, corresponding to K8S request.
	CpuRequest pulumi.StringPtrInput
	// creation time.
	CreateTime pulumi.StringPtrInput
	// Total number of instances launched.
	CurrentNum pulumi.IntPtrInput
	// environment variable array object.
	Envs ContainGroupEnvArrayInput
	// Group remarks field, the length should not exceed 200 characters.
	GroupComment pulumi.StringPtrInput
	// Deployment group ID.
	GroupId pulumi.StringPtrInput
	// Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
	GroupName pulumi.StringPtrInput
	// Deployment Group Resource Type.
	GroupResourceType pulumi.StringPtrInput
	// Deployment group health check settings.
	HealthCheckSettings ContainGroupHealthCheckSettingArrayInput
	// Number of deployment group instances.
	InstanceCount pulumi.IntPtrInput
	// number of instances.
	InstanceNum pulumi.IntPtrInput
	// The maximum number of CPU cores for the istioproxy container corresponds to the limit of K8S.
	IstioCpuLimit pulumi.StringPtrInput
	// The number of CPU cores allocated by the istioproxy container, corresponding to the K8S request.
	IstioCpuRequest pulumi.StringPtrInput
	// The maximum memory MiB of the istioproxy container corresponds to the limit of K8S.
	IstioMemLimit pulumi.StringPtrInput
	// The number of memory MiB allocated by the istioproxy container, corresponding to the K8S request.
	IstioMemRequest pulumi.StringPtrInput
	// load balancing ip.
	LbIp pulumi.StringPtrInput
	// The MaxSurge parameter of the kubernetes rolling update policy.
	MaxSurge pulumi.StringPtrInput
	// The MaxUnavailable parameter of the kubernetes rolling update policy.
	MaxUnavailable pulumi.StringPtrInput
	// Maximum allocated memory MiB, corresponding to K8S limit.
	MemLimit pulumi.StringPtrInput
	// Initially allocated memory MiB, corresponding to K8S request.
	MemRequest pulumi.StringPtrInput
	// pod error message description.
	Message pulumi.StringPtrInput
	// Service type.
	MicroserviceType pulumi.StringPtrInput
	// ID of the namespace to which the group belongs.
	NamespaceId pulumi.StringPtrInput
	// namespace name.
	NamespaceName pulumi.StringPtrInput
	// Protocol Ports array.
	ProtocolPorts ContainGroupProtocolPortArrayInput
	// Mirror name, such as /tsf/nginx.
	Reponame pulumi.StringPtrInput
	// mirror server.
	Server pulumi.StringPtrInput
	// Deployment group status.
	Status pulumi.StringPtrInput
	// subnet ID.
	SubnetId pulumi.StringPtrInput
	// Image version name.
	TagName pulumi.StringPtrInput
	// Rolling update is required, update interval.
	UpdateIvl pulumi.IntPtrInput
	// Update method: 0: fast update 1: rolling update.
	UpdateType pulumi.IntPtrInput
	// Deployment group update timestamp.
	UpdatedTime pulumi.IntPtrInput
}

func (ContainGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*containGroupState)(nil)).Elem()
}

type containGroupArgs struct {
	// 0: public network 1: access within the cluster 2: NodePort.
	AccessType int `pulumi:"accessType"`
	// The maximum number of CPU cores for the agent container, corresponding to the limit of K8S.
	AgentCpuLimit *string `pulumi:"agentCpuLimit"`
	// The number of CPU cores allocated by the agent container, corresponding to the K8S request.
	AgentCpuRequest *string `pulumi:"agentCpuRequest"`
	// The maximum memory MiB of the agent container, corresponding to the limit of K8S.
	AgentMemLimit *string `pulumi:"agentMemLimit"`
	// The number of memory MiB allocated by the agent container, corresponding to the K8S request.
	AgentMemRequest *string `pulumi:"agentMemRequest"`
	// The application ID to which the group belongs.
	ApplicationId string `pulumi:"applicationId"`
	// Cluster ID.
	ClusterId string `pulumi:"clusterId"`
	// The maximum number of allocated CPU cores, corresponding to the K8S limit.
	CpuLimit *string `pulumi:"cpuLimit"`
	// Initially allocated CPU cores, corresponding to K8S request.
	CpuRequest *string `pulumi:"cpuRequest"`
	// Group remarks field, the length should not exceed 200 characters.
	GroupComment *string `pulumi:"groupComment"`
	// Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
	GroupName string `pulumi:"groupName"`
	// Deployment Group Resource Type.
	GroupResourceType *string `pulumi:"groupResourceType"`
	// number of instances.
	InstanceNum int `pulumi:"instanceNum"`
	// The maximum number of CPU cores for the istioproxy container corresponds to the limit of K8S.
	IstioCpuLimit *string `pulumi:"istioCpuLimit"`
	// The number of CPU cores allocated by the istioproxy container, corresponding to the K8S request.
	IstioCpuRequest *string `pulumi:"istioCpuRequest"`
	// The maximum memory MiB of the istioproxy container corresponds to the limit of K8S.
	IstioMemLimit *string `pulumi:"istioMemLimit"`
	// The number of memory MiB allocated by the istioproxy container, corresponding to the K8S request.
	IstioMemRequest *string `pulumi:"istioMemRequest"`
	// Maximum allocated memory MiB, corresponding to K8S limit.
	MemLimit *string `pulumi:"memLimit"`
	// Initially allocated memory MiB, corresponding to K8S request.
	MemRequest *string `pulumi:"memRequest"`
	// ID of the namespace to which the group belongs.
	NamespaceId string `pulumi:"namespaceId"`
	// Protocol Ports array.
	ProtocolPorts []ContainGroupProtocolPort `pulumi:"protocolPorts"`
	// subnet ID.
	SubnetId *string `pulumi:"subnetId"`
	// Rolling update is required, update interval.
	UpdateIvl *int `pulumi:"updateIvl"`
	// Update method: 0: fast update 1: rolling update.
	UpdateType *int `pulumi:"updateType"`
}

// The set of arguments for constructing a ContainGroup resource.
type ContainGroupArgs struct {
	// 0: public network 1: access within the cluster 2: NodePort.
	AccessType pulumi.IntInput
	// The maximum number of CPU cores for the agent container, corresponding to the limit of K8S.
	AgentCpuLimit pulumi.StringPtrInput
	// The number of CPU cores allocated by the agent container, corresponding to the K8S request.
	AgentCpuRequest pulumi.StringPtrInput
	// The maximum memory MiB of the agent container, corresponding to the limit of K8S.
	AgentMemLimit pulumi.StringPtrInput
	// The number of memory MiB allocated by the agent container, corresponding to the K8S request.
	AgentMemRequest pulumi.StringPtrInput
	// The application ID to which the group belongs.
	ApplicationId pulumi.StringInput
	// Cluster ID.
	ClusterId pulumi.StringInput
	// The maximum number of allocated CPU cores, corresponding to the K8S limit.
	CpuLimit pulumi.StringPtrInput
	// Initially allocated CPU cores, corresponding to K8S request.
	CpuRequest pulumi.StringPtrInput
	// Group remarks field, the length should not exceed 200 characters.
	GroupComment pulumi.StringPtrInput
	// Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
	GroupName pulumi.StringInput
	// Deployment Group Resource Type.
	GroupResourceType pulumi.StringPtrInput
	// number of instances.
	InstanceNum pulumi.IntInput
	// The maximum number of CPU cores for the istioproxy container corresponds to the limit of K8S.
	IstioCpuLimit pulumi.StringPtrInput
	// The number of CPU cores allocated by the istioproxy container, corresponding to the K8S request.
	IstioCpuRequest pulumi.StringPtrInput
	// The maximum memory MiB of the istioproxy container corresponds to the limit of K8S.
	IstioMemLimit pulumi.StringPtrInput
	// The number of memory MiB allocated by the istioproxy container, corresponding to the K8S request.
	IstioMemRequest pulumi.StringPtrInput
	// Maximum allocated memory MiB, corresponding to K8S limit.
	MemLimit pulumi.StringPtrInput
	// Initially allocated memory MiB, corresponding to K8S request.
	MemRequest pulumi.StringPtrInput
	// ID of the namespace to which the group belongs.
	NamespaceId pulumi.StringInput
	// Protocol Ports array.
	ProtocolPorts ContainGroupProtocolPortArrayInput
	// subnet ID.
	SubnetId pulumi.StringPtrInput
	// Rolling update is required, update interval.
	UpdateIvl pulumi.IntPtrInput
	// Update method: 0: fast update 1: rolling update.
	UpdateType pulumi.IntPtrInput
}

func (ContainGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containGroupArgs)(nil)).Elem()
}

type ContainGroupInput interface {
	pulumi.Input

	ToContainGroupOutput() ContainGroupOutput
	ToContainGroupOutputWithContext(ctx context.Context) ContainGroupOutput
}

func (*ContainGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainGroup)(nil)).Elem()
}

func (i *ContainGroup) ToContainGroupOutput() ContainGroupOutput {
	return i.ToContainGroupOutputWithContext(context.Background())
}

func (i *ContainGroup) ToContainGroupOutputWithContext(ctx context.Context) ContainGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainGroupOutput)
}

// ContainGroupArrayInput is an input type that accepts ContainGroupArray and ContainGroupArrayOutput values.
// You can construct a concrete instance of `ContainGroupArrayInput` via:
//
//          ContainGroupArray{ ContainGroupArgs{...} }
type ContainGroupArrayInput interface {
	pulumi.Input

	ToContainGroupArrayOutput() ContainGroupArrayOutput
	ToContainGroupArrayOutputWithContext(context.Context) ContainGroupArrayOutput
}

type ContainGroupArray []ContainGroupInput

func (ContainGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainGroup)(nil)).Elem()
}

func (i ContainGroupArray) ToContainGroupArrayOutput() ContainGroupArrayOutput {
	return i.ToContainGroupArrayOutputWithContext(context.Background())
}

func (i ContainGroupArray) ToContainGroupArrayOutputWithContext(ctx context.Context) ContainGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainGroupArrayOutput)
}

// ContainGroupMapInput is an input type that accepts ContainGroupMap and ContainGroupMapOutput values.
// You can construct a concrete instance of `ContainGroupMapInput` via:
//
//          ContainGroupMap{ "key": ContainGroupArgs{...} }
type ContainGroupMapInput interface {
	pulumi.Input

	ToContainGroupMapOutput() ContainGroupMapOutput
	ToContainGroupMapOutputWithContext(context.Context) ContainGroupMapOutput
}

type ContainGroupMap map[string]ContainGroupInput

func (ContainGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainGroup)(nil)).Elem()
}

func (i ContainGroupMap) ToContainGroupMapOutput() ContainGroupMapOutput {
	return i.ToContainGroupMapOutputWithContext(context.Background())
}

func (i ContainGroupMap) ToContainGroupMapOutputWithContext(ctx context.Context) ContainGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainGroupMapOutput)
}

type ContainGroupOutput struct{ *pulumi.OutputState }

func (ContainGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainGroup)(nil)).Elem()
}

func (o ContainGroupOutput) ToContainGroupOutput() ContainGroupOutput {
	return o
}

func (o ContainGroupOutput) ToContainGroupOutputWithContext(ctx context.Context) ContainGroupOutput {
	return o
}

// 0: public network 1: access within the cluster 2: NodePort.
func (o ContainGroupOutput) AccessType() pulumi.IntOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.IntOutput { return v.AccessType }).(pulumi.IntOutput)
}

// The maximum number of CPU cores for the agent container, corresponding to the limit of K8S.
func (o ContainGroupOutput) AgentCpuLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringPtrOutput { return v.AgentCpuLimit }).(pulumi.StringPtrOutput)
}

// The number of CPU cores allocated by the agent container, corresponding to the K8S request.
func (o ContainGroupOutput) AgentCpuRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringPtrOutput { return v.AgentCpuRequest }).(pulumi.StringPtrOutput)
}

// The maximum memory MiB of the agent container, corresponding to the limit of K8S.
func (o ContainGroupOutput) AgentMemLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringPtrOutput { return v.AgentMemLimit }).(pulumi.StringPtrOutput)
}

// The number of memory MiB allocated by the agent container, corresponding to the K8S request.
func (o ContainGroupOutput) AgentMemRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringPtrOutput { return v.AgentMemRequest }).(pulumi.StringPtrOutput)
}

// The application ID to which the group belongs.
func (o ContainGroupOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Application Name.
func (o ContainGroupOutput) ApplicationName() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.ApplicationName }).(pulumi.StringOutput)
}

// App types.
func (o ContainGroupOutput) ApplicationType() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.ApplicationType }).(pulumi.StringOutput)
}

// Cluster ID.
func (o ContainGroupOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Service ip.
func (o ContainGroupOutput) ClusterIp() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.ClusterIp }).(pulumi.StringOutput)
}

// cluster name.
func (o ContainGroupOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// The maximum number of allocated CPU cores, corresponding to the K8S limit.
func (o ContainGroupOutput) CpuLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringPtrOutput { return v.CpuLimit }).(pulumi.StringPtrOutput)
}

// Initially allocated CPU cores, corresponding to K8S request.
func (o ContainGroupOutput) CpuRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringPtrOutput { return v.CpuRequest }).(pulumi.StringPtrOutput)
}

// creation time.
func (o ContainGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Total number of instances launched.
func (o ContainGroupOutput) CurrentNum() pulumi.IntOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.IntOutput { return v.CurrentNum }).(pulumi.IntOutput)
}

// environment variable array object.
func (o ContainGroupOutput) Envs() ContainGroupEnvArrayOutput {
	return o.ApplyT(func(v *ContainGroup) ContainGroupEnvArrayOutput { return v.Envs }).(ContainGroupEnvArrayOutput)
}

// Group remarks field, the length should not exceed 200 characters.
func (o ContainGroupOutput) GroupComment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringPtrOutput { return v.GroupComment }).(pulumi.StringPtrOutput)
}

// Deployment group ID.
func (o ContainGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
func (o ContainGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

// Deployment Group Resource Type.
func (o ContainGroupOutput) GroupResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.GroupResourceType }).(pulumi.StringOutput)
}

// Deployment group health check settings.
func (o ContainGroupOutput) HealthCheckSettings() ContainGroupHealthCheckSettingArrayOutput {
	return o.ApplyT(func(v *ContainGroup) ContainGroupHealthCheckSettingArrayOutput { return v.HealthCheckSettings }).(ContainGroupHealthCheckSettingArrayOutput)
}

// Number of deployment group instances.
func (o ContainGroupOutput) InstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.IntOutput { return v.InstanceCount }).(pulumi.IntOutput)
}

// number of instances.
func (o ContainGroupOutput) InstanceNum() pulumi.IntOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.IntOutput { return v.InstanceNum }).(pulumi.IntOutput)
}

// The maximum number of CPU cores for the istioproxy container corresponds to the limit of K8S.
func (o ContainGroupOutput) IstioCpuLimit() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.IstioCpuLimit }).(pulumi.StringOutput)
}

// The number of CPU cores allocated by the istioproxy container, corresponding to the K8S request.
func (o ContainGroupOutput) IstioCpuRequest() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.IstioCpuRequest }).(pulumi.StringOutput)
}

// The maximum memory MiB of the istioproxy container corresponds to the limit of K8S.
func (o ContainGroupOutput) IstioMemLimit() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.IstioMemLimit }).(pulumi.StringOutput)
}

// The number of memory MiB allocated by the istioproxy container, corresponding to the K8S request.
func (o ContainGroupOutput) IstioMemRequest() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.IstioMemRequest }).(pulumi.StringOutput)
}

// load balancing ip.
func (o ContainGroupOutput) LbIp() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.LbIp }).(pulumi.StringOutput)
}

// The MaxSurge parameter of the kubernetes rolling update policy.
func (o ContainGroupOutput) MaxSurge() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.MaxSurge }).(pulumi.StringOutput)
}

// The MaxUnavailable parameter of the kubernetes rolling update policy.
func (o ContainGroupOutput) MaxUnavailable() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.MaxUnavailable }).(pulumi.StringOutput)
}

// Maximum allocated memory MiB, corresponding to K8S limit.
func (o ContainGroupOutput) MemLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringPtrOutput { return v.MemLimit }).(pulumi.StringPtrOutput)
}

// Initially allocated memory MiB, corresponding to K8S request.
func (o ContainGroupOutput) MemRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringPtrOutput { return v.MemRequest }).(pulumi.StringPtrOutput)
}

// pod error message description.
func (o ContainGroupOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.Message }).(pulumi.StringOutput)
}

// Service type.
func (o ContainGroupOutput) MicroserviceType() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.MicroserviceType }).(pulumi.StringOutput)
}

// ID of the namespace to which the group belongs.
func (o ContainGroupOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.NamespaceId }).(pulumi.StringOutput)
}

// namespace name.
func (o ContainGroupOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.NamespaceName }).(pulumi.StringOutput)
}

// Protocol Ports array.
func (o ContainGroupOutput) ProtocolPorts() ContainGroupProtocolPortArrayOutput {
	return o.ApplyT(func(v *ContainGroup) ContainGroupProtocolPortArrayOutput { return v.ProtocolPorts }).(ContainGroupProtocolPortArrayOutput)
}

// Mirror name, such as /tsf/nginx.
func (o ContainGroupOutput) Reponame() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.Reponame }).(pulumi.StringOutput)
}

// mirror server.
func (o ContainGroupOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// Deployment group status.
func (o ContainGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// subnet ID.
func (o ContainGroupOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Image version name.
func (o ContainGroupOutput) TagName() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.StringOutput { return v.TagName }).(pulumi.StringOutput)
}

// Rolling update is required, update interval.
func (o ContainGroupOutput) UpdateIvl() pulumi.IntOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.IntOutput { return v.UpdateIvl }).(pulumi.IntOutput)
}

// Update method: 0: fast update 1: rolling update.
func (o ContainGroupOutput) UpdateType() pulumi.IntOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.IntOutput { return v.UpdateType }).(pulumi.IntOutput)
}

// Deployment group update timestamp.
func (o ContainGroupOutput) UpdatedTime() pulumi.IntOutput {
	return o.ApplyT(func(v *ContainGroup) pulumi.IntOutput { return v.UpdatedTime }).(pulumi.IntOutput)
}

type ContainGroupArrayOutput struct{ *pulumi.OutputState }

func (ContainGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainGroup)(nil)).Elem()
}

func (o ContainGroupArrayOutput) ToContainGroupArrayOutput() ContainGroupArrayOutput {
	return o
}

func (o ContainGroupArrayOutput) ToContainGroupArrayOutputWithContext(ctx context.Context) ContainGroupArrayOutput {
	return o
}

func (o ContainGroupArrayOutput) Index(i pulumi.IntInput) ContainGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContainGroup {
		return vs[0].([]*ContainGroup)[vs[1].(int)]
	}).(ContainGroupOutput)
}

type ContainGroupMapOutput struct{ *pulumi.OutputState }

func (ContainGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainGroup)(nil)).Elem()
}

func (o ContainGroupMapOutput) ToContainGroupMapOutput() ContainGroupMapOutput {
	return o
}

func (o ContainGroupMapOutput) ToContainGroupMapOutputWithContext(ctx context.Context) ContainGroupMapOutput {
	return o
}

func (o ContainGroupMapOutput) MapIndex(k pulumi.StringInput) ContainGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContainGroup {
		return vs[0].(map[string]*ContainGroup)[vs[1].(string)]
	}).(ContainGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainGroupInput)(nil)).Elem(), &ContainGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainGroupArrayInput)(nil)).Elem(), ContainGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainGroupMapInput)(nil)).Elem(), ContainGroupMap{})
	pulumi.RegisterOutputType(ContainGroupOutput{})
	pulumi.RegisterOutputType(ContainGroupArrayOutput{})
	pulumi.RegisterOutputType(ContainGroupMapOutput{})
}
