// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tcr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TcrToken struct {
	pulumi.CustomResourceState

	// Create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the token. Valid length is [0~255].
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Indicate to enable this token or not.
	Enable pulumi.BoolPtrOutput `pulumi:"enable"`
	// ID of the TCR instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The content of the token.
	Token pulumi.StringOutput `pulumi:"token"`
	// Sub ID of the TCR token. The full ID of token format like `instance_id#token_id`.
	TokenId pulumi.StringOutput `pulumi:"tokenId"`
	// User name of the token.
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewTcrToken registers a new resource with the given unique name, arguments, and options.
func NewTcrToken(ctx *pulumi.Context,
	name string, args *TcrTokenArgs, opts ...pulumi.ResourceOption) (*TcrToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	var resource TcrToken
	err := ctx.RegisterResource("tencentcloud:Tcr/tcrToken:TcrToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTcrToken gets an existing TcrToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTcrToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TcrTokenState, opts ...pulumi.ResourceOption) (*TcrToken, error) {
	var resource TcrToken
	err := ctx.ReadResource("tencentcloud:Tcr/tcrToken:TcrToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TcrToken resources.
type tcrTokenState struct {
	// Create time.
	CreateTime *string `pulumi:"createTime"`
	// Description of the token. Valid length is [0~255].
	Description *string `pulumi:"description"`
	// Indicate to enable this token or not.
	Enable *bool `pulumi:"enable"`
	// ID of the TCR instance.
	InstanceId *string `pulumi:"instanceId"`
	// The content of the token.
	Token *string `pulumi:"token"`
	// Sub ID of the TCR token. The full ID of token format like `instance_id#token_id`.
	TokenId *string `pulumi:"tokenId"`
	// User name of the token.
	UserName *string `pulumi:"userName"`
}

type TcrTokenState struct {
	// Create time.
	CreateTime pulumi.StringPtrInput
	// Description of the token. Valid length is [0~255].
	Description pulumi.StringPtrInput
	// Indicate to enable this token or not.
	Enable pulumi.BoolPtrInput
	// ID of the TCR instance.
	InstanceId pulumi.StringPtrInput
	// The content of the token.
	Token pulumi.StringPtrInput
	// Sub ID of the TCR token. The full ID of token format like `instance_id#token_id`.
	TokenId pulumi.StringPtrInput
	// User name of the token.
	UserName pulumi.StringPtrInput
}

func (TcrTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*tcrTokenState)(nil)).Elem()
}

type tcrTokenArgs struct {
	// Description of the token. Valid length is [0~255].
	Description *string `pulumi:"description"`
	// Indicate to enable this token or not.
	Enable *bool `pulumi:"enable"`
	// ID of the TCR instance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a TcrToken resource.
type TcrTokenArgs struct {
	// Description of the token. Valid length is [0~255].
	Description pulumi.StringPtrInput
	// Indicate to enable this token or not.
	Enable pulumi.BoolPtrInput
	// ID of the TCR instance.
	InstanceId pulumi.StringInput
}

func (TcrTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tcrTokenArgs)(nil)).Elem()
}

type TcrTokenInput interface {
	pulumi.Input

	ToTcrTokenOutput() TcrTokenOutput
	ToTcrTokenOutputWithContext(ctx context.Context) TcrTokenOutput
}

func (*TcrToken) ElementType() reflect.Type {
	return reflect.TypeOf((**TcrToken)(nil)).Elem()
}

func (i *TcrToken) ToTcrTokenOutput() TcrTokenOutput {
	return i.ToTcrTokenOutputWithContext(context.Background())
}

func (i *TcrToken) ToTcrTokenOutputWithContext(ctx context.Context) TcrTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcrTokenOutput)
}

// TcrTokenArrayInput is an input type that accepts TcrTokenArray and TcrTokenArrayOutput values.
// You can construct a concrete instance of `TcrTokenArrayInput` via:
//
//          TcrTokenArray{ TcrTokenArgs{...} }
type TcrTokenArrayInput interface {
	pulumi.Input

	ToTcrTokenArrayOutput() TcrTokenArrayOutput
	ToTcrTokenArrayOutputWithContext(context.Context) TcrTokenArrayOutput
}

type TcrTokenArray []TcrTokenInput

func (TcrTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TcrToken)(nil)).Elem()
}

func (i TcrTokenArray) ToTcrTokenArrayOutput() TcrTokenArrayOutput {
	return i.ToTcrTokenArrayOutputWithContext(context.Background())
}

func (i TcrTokenArray) ToTcrTokenArrayOutputWithContext(ctx context.Context) TcrTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcrTokenArrayOutput)
}

// TcrTokenMapInput is an input type that accepts TcrTokenMap and TcrTokenMapOutput values.
// You can construct a concrete instance of `TcrTokenMapInput` via:
//
//          TcrTokenMap{ "key": TcrTokenArgs{...} }
type TcrTokenMapInput interface {
	pulumi.Input

	ToTcrTokenMapOutput() TcrTokenMapOutput
	ToTcrTokenMapOutputWithContext(context.Context) TcrTokenMapOutput
}

type TcrTokenMap map[string]TcrTokenInput

func (TcrTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TcrToken)(nil)).Elem()
}

func (i TcrTokenMap) ToTcrTokenMapOutput() TcrTokenMapOutput {
	return i.ToTcrTokenMapOutputWithContext(context.Background())
}

func (i TcrTokenMap) ToTcrTokenMapOutputWithContext(ctx context.Context) TcrTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcrTokenMapOutput)
}

type TcrTokenOutput struct{ *pulumi.OutputState }

func (TcrTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcrToken)(nil)).Elem()
}

func (o TcrTokenOutput) ToTcrTokenOutput() TcrTokenOutput {
	return o
}

func (o TcrTokenOutput) ToTcrTokenOutputWithContext(ctx context.Context) TcrTokenOutput {
	return o
}

// Create time.
func (o TcrTokenOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TcrToken) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the token. Valid length is [0~255].
func (o TcrTokenOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcrToken) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicate to enable this token or not.
func (o TcrTokenOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TcrToken) pulumi.BoolPtrOutput { return v.Enable }).(pulumi.BoolPtrOutput)
}

// ID of the TCR instance.
func (o TcrTokenOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *TcrToken) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The content of the token.
func (o TcrTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *TcrToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// Sub ID of the TCR token. The full ID of token format like `instance_id#token_id`.
func (o TcrTokenOutput) TokenId() pulumi.StringOutput {
	return o.ApplyT(func(v *TcrToken) pulumi.StringOutput { return v.TokenId }).(pulumi.StringOutput)
}

// User name of the token.
func (o TcrTokenOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *TcrToken) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type TcrTokenArrayOutput struct{ *pulumi.OutputState }

func (TcrTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TcrToken)(nil)).Elem()
}

func (o TcrTokenArrayOutput) ToTcrTokenArrayOutput() TcrTokenArrayOutput {
	return o
}

func (o TcrTokenArrayOutput) ToTcrTokenArrayOutputWithContext(ctx context.Context) TcrTokenArrayOutput {
	return o
}

func (o TcrTokenArrayOutput) Index(i pulumi.IntInput) TcrTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TcrToken {
		return vs[0].([]*TcrToken)[vs[1].(int)]
	}).(TcrTokenOutput)
}

type TcrTokenMapOutput struct{ *pulumi.OutputState }

func (TcrTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TcrToken)(nil)).Elem()
}

func (o TcrTokenMapOutput) ToTcrTokenMapOutput() TcrTokenMapOutput {
	return o
}

func (o TcrTokenMapOutput) ToTcrTokenMapOutputWithContext(ctx context.Context) TcrTokenMapOutput {
	return o
}

func (o TcrTokenMapOutput) MapIndex(k pulumi.StringInput) TcrTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TcrToken {
		return vs[0].(map[string]*TcrToken)[vs[1].(string)]
	}).(TcrTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TcrTokenInput)(nil)).Elem(), &TcrToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcrTokenArrayInput)(nil)).Elem(), TcrTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcrTokenMapInput)(nil)).Elem(), TcrTokenMap{})
	pulumi.RegisterOutputType(TcrTokenOutput{})
	pulumi.RegisterOutputType(TcrTokenArrayOutput{})
	pulumi.RegisterOutputType(TcrTokenMapOutput{})
}
