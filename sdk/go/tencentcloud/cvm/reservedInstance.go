// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cvm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReservedInstance struct {
	pulumi.CustomResourceState

	// Configuration ID of the reserved instance.
	ConfigId pulumi.StringOutput `pulumi:"configId"`
	// Expiry time of the RI.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// Number of reserved instances to be purchased.
	InstanceCount pulumi.IntOutput `pulumi:"instanceCount"`
	// Reserved Instance display name. - If you do not specify an instance display name, 'Unnamed' is displayed by default. -
	// Up to 60 characters (including pattern strings) are supported.
	ReservedInstanceName pulumi.StringPtrOutput `pulumi:"reservedInstanceName"`
	// Start time of the RI.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// Status of the RI at the time of purchase.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewReservedInstance registers a new resource with the given unique name, arguments, and options.
func NewReservedInstance(ctx *pulumi.Context,
	name string, args *ReservedInstanceArgs, opts ...pulumi.ResourceOption) (*ReservedInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.InstanceCount == nil {
		return nil, errors.New("invalid value for required argument 'InstanceCount'")
	}
	var resource ReservedInstance
	err := ctx.RegisterResource("tencentcloud:Cvm/reservedInstance:ReservedInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReservedInstance gets an existing ReservedInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservedInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReservedInstanceState, opts ...pulumi.ResourceOption) (*ReservedInstance, error) {
	var resource ReservedInstance
	err := ctx.ReadResource("tencentcloud:Cvm/reservedInstance:ReservedInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReservedInstance resources.
type reservedInstanceState struct {
	// Configuration ID of the reserved instance.
	ConfigId *string `pulumi:"configId"`
	// Expiry time of the RI.
	EndTime *string `pulumi:"endTime"`
	// Number of reserved instances to be purchased.
	InstanceCount *int `pulumi:"instanceCount"`
	// Reserved Instance display name. - If you do not specify an instance display name, 'Unnamed' is displayed by default. -
	// Up to 60 characters (including pattern strings) are supported.
	ReservedInstanceName *string `pulumi:"reservedInstanceName"`
	// Start time of the RI.
	StartTime *string `pulumi:"startTime"`
	// Status of the RI at the time of purchase.
	Status *string `pulumi:"status"`
}

type ReservedInstanceState struct {
	// Configuration ID of the reserved instance.
	ConfigId pulumi.StringPtrInput
	// Expiry time of the RI.
	EndTime pulumi.StringPtrInput
	// Number of reserved instances to be purchased.
	InstanceCount pulumi.IntPtrInput
	// Reserved Instance display name. - If you do not specify an instance display name, 'Unnamed' is displayed by default. -
	// Up to 60 characters (including pattern strings) are supported.
	ReservedInstanceName pulumi.StringPtrInput
	// Start time of the RI.
	StartTime pulumi.StringPtrInput
	// Status of the RI at the time of purchase.
	Status pulumi.StringPtrInput
}

func (ReservedInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedInstanceState)(nil)).Elem()
}

type reservedInstanceArgs struct {
	// Configuration ID of the reserved instance.
	ConfigId string `pulumi:"configId"`
	// Number of reserved instances to be purchased.
	InstanceCount int `pulumi:"instanceCount"`
	// Reserved Instance display name. - If you do not specify an instance display name, 'Unnamed' is displayed by default. -
	// Up to 60 characters (including pattern strings) are supported.
	ReservedInstanceName *string `pulumi:"reservedInstanceName"`
}

// The set of arguments for constructing a ReservedInstance resource.
type ReservedInstanceArgs struct {
	// Configuration ID of the reserved instance.
	ConfigId pulumi.StringInput
	// Number of reserved instances to be purchased.
	InstanceCount pulumi.IntInput
	// Reserved Instance display name. - If you do not specify an instance display name, 'Unnamed' is displayed by default. -
	// Up to 60 characters (including pattern strings) are supported.
	ReservedInstanceName pulumi.StringPtrInput
}

func (ReservedInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedInstanceArgs)(nil)).Elem()
}

type ReservedInstanceInput interface {
	pulumi.Input

	ToReservedInstanceOutput() ReservedInstanceOutput
	ToReservedInstanceOutputWithContext(ctx context.Context) ReservedInstanceOutput
}

func (*ReservedInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedInstance)(nil)).Elem()
}

func (i *ReservedInstance) ToReservedInstanceOutput() ReservedInstanceOutput {
	return i.ToReservedInstanceOutputWithContext(context.Background())
}

func (i *ReservedInstance) ToReservedInstanceOutputWithContext(ctx context.Context) ReservedInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedInstanceOutput)
}

// ReservedInstanceArrayInput is an input type that accepts ReservedInstanceArray and ReservedInstanceArrayOutput values.
// You can construct a concrete instance of `ReservedInstanceArrayInput` via:
//
//          ReservedInstanceArray{ ReservedInstanceArgs{...} }
type ReservedInstanceArrayInput interface {
	pulumi.Input

	ToReservedInstanceArrayOutput() ReservedInstanceArrayOutput
	ToReservedInstanceArrayOutputWithContext(context.Context) ReservedInstanceArrayOutput
}

type ReservedInstanceArray []ReservedInstanceInput

func (ReservedInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReservedInstance)(nil)).Elem()
}

func (i ReservedInstanceArray) ToReservedInstanceArrayOutput() ReservedInstanceArrayOutput {
	return i.ToReservedInstanceArrayOutputWithContext(context.Background())
}

func (i ReservedInstanceArray) ToReservedInstanceArrayOutputWithContext(ctx context.Context) ReservedInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedInstanceArrayOutput)
}

// ReservedInstanceMapInput is an input type that accepts ReservedInstanceMap and ReservedInstanceMapOutput values.
// You can construct a concrete instance of `ReservedInstanceMapInput` via:
//
//          ReservedInstanceMap{ "key": ReservedInstanceArgs{...} }
type ReservedInstanceMapInput interface {
	pulumi.Input

	ToReservedInstanceMapOutput() ReservedInstanceMapOutput
	ToReservedInstanceMapOutputWithContext(context.Context) ReservedInstanceMapOutput
}

type ReservedInstanceMap map[string]ReservedInstanceInput

func (ReservedInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReservedInstance)(nil)).Elem()
}

func (i ReservedInstanceMap) ToReservedInstanceMapOutput() ReservedInstanceMapOutput {
	return i.ToReservedInstanceMapOutputWithContext(context.Background())
}

func (i ReservedInstanceMap) ToReservedInstanceMapOutputWithContext(ctx context.Context) ReservedInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedInstanceMapOutput)
}

type ReservedInstanceOutput struct{ *pulumi.OutputState }

func (ReservedInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedInstance)(nil)).Elem()
}

func (o ReservedInstanceOutput) ToReservedInstanceOutput() ReservedInstanceOutput {
	return o
}

func (o ReservedInstanceOutput) ToReservedInstanceOutputWithContext(ctx context.Context) ReservedInstanceOutput {
	return o
}

// Configuration ID of the reserved instance.
func (o ReservedInstanceOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringOutput { return v.ConfigId }).(pulumi.StringOutput)
}

// Expiry time of the RI.
func (o ReservedInstanceOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// Number of reserved instances to be purchased.
func (o ReservedInstanceOutput) InstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.IntOutput { return v.InstanceCount }).(pulumi.IntOutput)
}

// Reserved Instance display name. - If you do not specify an instance display name, 'Unnamed' is displayed by default. -
// Up to 60 characters (including pattern strings) are supported.
func (o ReservedInstanceOutput) ReservedInstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringPtrOutput { return v.ReservedInstanceName }).(pulumi.StringPtrOutput)
}

// Start time of the RI.
func (o ReservedInstanceOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// Status of the RI at the time of purchase.
func (o ReservedInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedInstance) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ReservedInstanceArrayOutput struct{ *pulumi.OutputState }

func (ReservedInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReservedInstance)(nil)).Elem()
}

func (o ReservedInstanceArrayOutput) ToReservedInstanceArrayOutput() ReservedInstanceArrayOutput {
	return o
}

func (o ReservedInstanceArrayOutput) ToReservedInstanceArrayOutputWithContext(ctx context.Context) ReservedInstanceArrayOutput {
	return o
}

func (o ReservedInstanceArrayOutput) Index(i pulumi.IntInput) ReservedInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReservedInstance {
		return vs[0].([]*ReservedInstance)[vs[1].(int)]
	}).(ReservedInstanceOutput)
}

type ReservedInstanceMapOutput struct{ *pulumi.OutputState }

func (ReservedInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReservedInstance)(nil)).Elem()
}

func (o ReservedInstanceMapOutput) ToReservedInstanceMapOutput() ReservedInstanceMapOutput {
	return o
}

func (o ReservedInstanceMapOutput) ToReservedInstanceMapOutputWithContext(ctx context.Context) ReservedInstanceMapOutput {
	return o
}

func (o ReservedInstanceMapOutput) MapIndex(k pulumi.StringInput) ReservedInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReservedInstance {
		return vs[0].(map[string]*ReservedInstance)[vs[1].(string)]
	}).(ReservedInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedInstanceInput)(nil)).Elem(), &ReservedInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedInstanceArrayInput)(nil)).Elem(), ReservedInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedInstanceMapInput)(nil)).Elem(), ReservedInstanceMap{})
	pulumi.RegisterOutputType(ReservedInstanceOutput{})
	pulumi.RegisterOutputType(ReservedInstanceArrayOutput{})
	pulumi.RegisterOutputType(ReservedInstanceMapOutput{})
}
