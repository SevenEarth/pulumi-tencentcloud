// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cvm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func Images(ctx *pulumi.Context, args *ImagesArgs, opts ...pulumi.InvokeOption) (*ImagesResult, error) {
	var rv ImagesResult
	err := ctx.Invoke("tencentcloud:Cvm/images:Images", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Images.
type ImagesArgs struct {
	ImageId          *string  `pulumi:"imageId"`
	ImageNameRegex   *string  `pulumi:"imageNameRegex"`
	ImageTypes       []string `pulumi:"imageTypes"`
	InstanceType     *string  `pulumi:"instanceType"`
	OsName           *string  `pulumi:"osName"`
	ResultOutputFile *string  `pulumi:"resultOutputFile"`
}

// A collection of values returned by Images.
type ImagesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id               string        `pulumi:"id"`
	ImageId          *string       `pulumi:"imageId"`
	ImageNameRegex   *string       `pulumi:"imageNameRegex"`
	ImageTypes       []string      `pulumi:"imageTypes"`
	Images           []ImagesImage `pulumi:"images"`
	InstanceType     *string       `pulumi:"instanceType"`
	OsName           *string       `pulumi:"osName"`
	ResultOutputFile *string       `pulumi:"resultOutputFile"`
}

func ImagesOutput(ctx *pulumi.Context, args ImagesOutputArgs, opts ...pulumi.InvokeOption) ImagesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ImagesResult, error) {
			args := v.(ImagesArgs)
			r, err := Images(ctx, &args, opts...)
			var s ImagesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ImagesResultOutput)
}

// A collection of arguments for invoking Images.
type ImagesOutputArgs struct {
	ImageId          pulumi.StringPtrInput   `pulumi:"imageId"`
	ImageNameRegex   pulumi.StringPtrInput   `pulumi:"imageNameRegex"`
	ImageTypes       pulumi.StringArrayInput `pulumi:"imageTypes"`
	InstanceType     pulumi.StringPtrInput   `pulumi:"instanceType"`
	OsName           pulumi.StringPtrInput   `pulumi:"osName"`
	ResultOutputFile pulumi.StringPtrInput   `pulumi:"resultOutputFile"`
}

func (ImagesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesArgs)(nil)).Elem()
}

// A collection of values returned by Images.
type ImagesResultOutput struct{ *pulumi.OutputState }

func (ImagesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesResult)(nil)).Elem()
}

func (o ImagesResultOutput) ToImagesResultOutput() ImagesResultOutput {
	return o
}

func (o ImagesResultOutput) ToImagesResultOutputWithContext(ctx context.Context) ImagesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o ImagesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o ImagesResultOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagesResult) *string { return v.ImageId }).(pulumi.StringPtrOutput)
}

func (o ImagesResultOutput) ImageNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagesResult) *string { return v.ImageNameRegex }).(pulumi.StringPtrOutput)
}

func (o ImagesResultOutput) ImageTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImagesResult) []string { return v.ImageTypes }).(pulumi.StringArrayOutput)
}

func (o ImagesResultOutput) Images() ImagesImageArrayOutput {
	return o.ApplyT(func(v ImagesResult) []ImagesImage { return v.Images }).(ImagesImageArrayOutput)
}

func (o ImagesResultOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagesResult) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

func (o ImagesResultOutput) OsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagesResult) *string { return v.OsName }).(pulumi.StringPtrOutput)
}

func (o ImagesResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagesResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ImagesResultOutput{})
}
