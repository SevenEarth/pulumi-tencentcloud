// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func TCRRepositories(ctx *pulumi.Context, args *TCRRepositoriesArgs, opts ...pulumi.InvokeOption) (*TCRRepositoriesResult, error) {
	var rv TCRRepositoriesResult
	err := ctx.Invoke("tencentcloud:Cloud/tCRRepositories:TCRRepositories", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking TCRRepositories.
type TCRRepositoriesArgs struct {
	InstanceId       string  `pulumi:"instanceId"`
	NamespaceName    string  `pulumi:"namespaceName"`
	RepositoryName   *string `pulumi:"repositoryName"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by TCRRepositories.
type TCRRepositoriesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id               string                          `pulumi:"id"`
	InstanceId       string                          `pulumi:"instanceId"`
	NamespaceName    string                          `pulumi:"namespaceName"`
	RepositoryLists  []TCRRepositoriesRepositoryList `pulumi:"repositoryLists"`
	RepositoryName   *string                         `pulumi:"repositoryName"`
	ResultOutputFile *string                         `pulumi:"resultOutputFile"`
}

func TCRRepositoriesOutput(ctx *pulumi.Context, args TCRRepositoriesOutputArgs, opts ...pulumi.InvokeOption) TCRRepositoriesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (TCRRepositoriesResult, error) {
			args := v.(TCRRepositoriesArgs)
			r, err := TCRRepositories(ctx, &args, opts...)
			var s TCRRepositoriesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(TCRRepositoriesResultOutput)
}

// A collection of arguments for invoking TCRRepositories.
type TCRRepositoriesOutputArgs struct {
	InstanceId       pulumi.StringInput    `pulumi:"instanceId"`
	NamespaceName    pulumi.StringInput    `pulumi:"namespaceName"`
	RepositoryName   pulumi.StringPtrInput `pulumi:"repositoryName"`
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (TCRRepositoriesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TCRRepositoriesArgs)(nil)).Elem()
}

// A collection of values returned by TCRRepositories.
type TCRRepositoriesResultOutput struct{ *pulumi.OutputState }

func (TCRRepositoriesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TCRRepositoriesResult)(nil)).Elem()
}

func (o TCRRepositoriesResultOutput) ToTCRRepositoriesResultOutput() TCRRepositoriesResultOutput {
	return o
}

func (o TCRRepositoriesResultOutput) ToTCRRepositoriesResultOutputWithContext(ctx context.Context) TCRRepositoriesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o TCRRepositoriesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v TCRRepositoriesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o TCRRepositoriesResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v TCRRepositoriesResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o TCRRepositoriesResultOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v TCRRepositoriesResult) string { return v.NamespaceName }).(pulumi.StringOutput)
}

func (o TCRRepositoriesResultOutput) RepositoryLists() TCRRepositoriesRepositoryListArrayOutput {
	return o.ApplyT(func(v TCRRepositoriesResult) []TCRRepositoriesRepositoryList { return v.RepositoryLists }).(TCRRepositoriesRepositoryListArrayOutput)
}

func (o TCRRepositoriesResultOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCRRepositoriesResult) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

func (o TCRRepositoriesResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCRRepositoriesResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(TCRRepositoriesResultOutput{})
}
