// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcdb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dcdb hourdbInstance
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Dcdb"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dcdb"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := Dcdb.NewHourdbInstance(ctx, "hourdbInstance", &Dcdb.HourdbInstanceArgs{
// 			InstanceName: pulumi.String("test_dcdc_dc_instance"),
// 			Zones: pulumi.StringArray{
// 				pulumi.String("ap-guangzhou-5"),
// 				pulumi.String("ap-guangzhou-6"),
// 			},
// 			ShardMemory:     pulumi.Int(2),
// 			ShardStorage:    pulumi.Int(10),
// 			ShardNodeCount:  pulumi.Int(2),
// 			ShardCount:      pulumi.Int(2),
// 			VpcId:           pulumi.Any(local.Vpc_id),
// 			SubnetId:        pulumi.Any(local.Subnet_id),
// 			SecurityGroupId: pulumi.Any(local.Sg_id),
// 			DbVersionId:     pulumi.String("8.0"),
// 			ResourceTags: dcdb.HourdbInstanceResourceTagArray{
// 				&dcdb.HourdbInstanceResourceTagArgs{
// 					TagKey:   pulumi.String("aaa"),
// 					TagValue: pulumi.String("bbb"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// dcdb hourdb_instance can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import tencentcloud:Dcdb/hourdbInstance:HourdbInstance hourdb_instance hourdbInstance_id
// ```
type HourdbInstance struct {
	pulumi.CustomResourceState

	// db engine version, default to Percona 5.7.17.
	DbVersionId pulumi.StringPtrOutput `pulumi:"dbVersionId"`
	// name of this instance.
	InstanceName pulumi.StringPtrOutput `pulumi:"instanceName"`
	// project id.
	ProjectId pulumi.IntPtrOutput `pulumi:"projectId"`
	// resource tags.
	ResourceTags HourdbInstanceResourceTagArrayOutput `pulumi:"resourceTags"`
	// security group id.
	SecurityGroupId pulumi.StringPtrOutput `pulumi:"securityGroupId"`
	// instance shard count.
	ShardCount pulumi.IntOutput `pulumi:"shardCount"`
	// memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
	ShardMemory pulumi.IntOutput `pulumi:"shardMemory"`
	// node count for each shard. It can be obtained by querying api DescribeShardSpec.
	ShardNodeCount pulumi.IntOutput `pulumi:"shardNodeCount"`
	// storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
	ShardStorage pulumi.IntOutput `pulumi:"shardStorage"`
	// subnet id, it&amp;#39;s required when vpcId is set.
	SubnetId pulumi.StringPtrOutput `pulumi:"subnetId"`
	// vpc id.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
	// available zone.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewHourdbInstance registers a new resource with the given unique name, arguments, and options.
func NewHourdbInstance(ctx *pulumi.Context,
	name string, args *HourdbInstanceArgs, opts ...pulumi.ResourceOption) (*HourdbInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ShardCount == nil {
		return nil, errors.New("invalid value for required argument 'ShardCount'")
	}
	if args.ShardMemory == nil {
		return nil, errors.New("invalid value for required argument 'ShardMemory'")
	}
	if args.ShardNodeCount == nil {
		return nil, errors.New("invalid value for required argument 'ShardNodeCount'")
	}
	if args.ShardStorage == nil {
		return nil, errors.New("invalid value for required argument 'ShardStorage'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource HourdbInstance
	err := ctx.RegisterResource("tencentcloud:Dcdb/hourdbInstance:HourdbInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHourdbInstance gets an existing HourdbInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHourdbInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HourdbInstanceState, opts ...pulumi.ResourceOption) (*HourdbInstance, error) {
	var resource HourdbInstance
	err := ctx.ReadResource("tencentcloud:Dcdb/hourdbInstance:HourdbInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HourdbInstance resources.
type hourdbInstanceState struct {
	// db engine version, default to Percona 5.7.17.
	DbVersionId *string `pulumi:"dbVersionId"`
	// name of this instance.
	InstanceName *string `pulumi:"instanceName"`
	// project id.
	ProjectId *int `pulumi:"projectId"`
	// resource tags.
	ResourceTags []HourdbInstanceResourceTag `pulumi:"resourceTags"`
	// security group id.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// instance shard count.
	ShardCount *int `pulumi:"shardCount"`
	// memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
	ShardMemory *int `pulumi:"shardMemory"`
	// node count for each shard. It can be obtained by querying api DescribeShardSpec.
	ShardNodeCount *int `pulumi:"shardNodeCount"`
	// storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
	ShardStorage *int `pulumi:"shardStorage"`
	// subnet id, it&amp;#39;s required when vpcId is set.
	SubnetId *string `pulumi:"subnetId"`
	// vpc id.
	VpcId *string `pulumi:"vpcId"`
	// available zone.
	Zones []string `pulumi:"zones"`
}

type HourdbInstanceState struct {
	// db engine version, default to Percona 5.7.17.
	DbVersionId pulumi.StringPtrInput
	// name of this instance.
	InstanceName pulumi.StringPtrInput
	// project id.
	ProjectId pulumi.IntPtrInput
	// resource tags.
	ResourceTags HourdbInstanceResourceTagArrayInput
	// security group id.
	SecurityGroupId pulumi.StringPtrInput
	// instance shard count.
	ShardCount pulumi.IntPtrInput
	// memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
	ShardMemory pulumi.IntPtrInput
	// node count for each shard. It can be obtained by querying api DescribeShardSpec.
	ShardNodeCount pulumi.IntPtrInput
	// storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
	ShardStorage pulumi.IntPtrInput
	// subnet id, it&amp;#39;s required when vpcId is set.
	SubnetId pulumi.StringPtrInput
	// vpc id.
	VpcId pulumi.StringPtrInput
	// available zone.
	Zones pulumi.StringArrayInput
}

func (HourdbInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*hourdbInstanceState)(nil)).Elem()
}

type hourdbInstanceArgs struct {
	// db engine version, default to Percona 5.7.17.
	DbVersionId *string `pulumi:"dbVersionId"`
	// name of this instance.
	InstanceName *string `pulumi:"instanceName"`
	// project id.
	ProjectId *int `pulumi:"projectId"`
	// resource tags.
	ResourceTags []HourdbInstanceResourceTag `pulumi:"resourceTags"`
	// security group id.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// instance shard count.
	ShardCount int `pulumi:"shardCount"`
	// memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
	ShardMemory int `pulumi:"shardMemory"`
	// node count for each shard. It can be obtained by querying api DescribeShardSpec.
	ShardNodeCount int `pulumi:"shardNodeCount"`
	// storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
	ShardStorage int `pulumi:"shardStorage"`
	// subnet id, it&amp;#39;s required when vpcId is set.
	SubnetId *string `pulumi:"subnetId"`
	// vpc id.
	VpcId *string `pulumi:"vpcId"`
	// available zone.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a HourdbInstance resource.
type HourdbInstanceArgs struct {
	// db engine version, default to Percona 5.7.17.
	DbVersionId pulumi.StringPtrInput
	// name of this instance.
	InstanceName pulumi.StringPtrInput
	// project id.
	ProjectId pulumi.IntPtrInput
	// resource tags.
	ResourceTags HourdbInstanceResourceTagArrayInput
	// security group id.
	SecurityGroupId pulumi.StringPtrInput
	// instance shard count.
	ShardCount pulumi.IntInput
	// memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
	ShardMemory pulumi.IntInput
	// node count for each shard. It can be obtained by querying api DescribeShardSpec.
	ShardNodeCount pulumi.IntInput
	// storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
	ShardStorage pulumi.IntInput
	// subnet id, it&amp;#39;s required when vpcId is set.
	SubnetId pulumi.StringPtrInput
	// vpc id.
	VpcId pulumi.StringPtrInput
	// available zone.
	Zones pulumi.StringArrayInput
}

func (HourdbInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hourdbInstanceArgs)(nil)).Elem()
}

type HourdbInstanceInput interface {
	pulumi.Input

	ToHourdbInstanceOutput() HourdbInstanceOutput
	ToHourdbInstanceOutputWithContext(ctx context.Context) HourdbInstanceOutput
}

func (*HourdbInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**HourdbInstance)(nil)).Elem()
}

func (i *HourdbInstance) ToHourdbInstanceOutput() HourdbInstanceOutput {
	return i.ToHourdbInstanceOutputWithContext(context.Background())
}

func (i *HourdbInstance) ToHourdbInstanceOutputWithContext(ctx context.Context) HourdbInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HourdbInstanceOutput)
}

// HourdbInstanceArrayInput is an input type that accepts HourdbInstanceArray and HourdbInstanceArrayOutput values.
// You can construct a concrete instance of `HourdbInstanceArrayInput` via:
//
//          HourdbInstanceArray{ HourdbInstanceArgs{...} }
type HourdbInstanceArrayInput interface {
	pulumi.Input

	ToHourdbInstanceArrayOutput() HourdbInstanceArrayOutput
	ToHourdbInstanceArrayOutputWithContext(context.Context) HourdbInstanceArrayOutput
}

type HourdbInstanceArray []HourdbInstanceInput

func (HourdbInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HourdbInstance)(nil)).Elem()
}

func (i HourdbInstanceArray) ToHourdbInstanceArrayOutput() HourdbInstanceArrayOutput {
	return i.ToHourdbInstanceArrayOutputWithContext(context.Background())
}

func (i HourdbInstanceArray) ToHourdbInstanceArrayOutputWithContext(ctx context.Context) HourdbInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HourdbInstanceArrayOutput)
}

// HourdbInstanceMapInput is an input type that accepts HourdbInstanceMap and HourdbInstanceMapOutput values.
// You can construct a concrete instance of `HourdbInstanceMapInput` via:
//
//          HourdbInstanceMap{ "key": HourdbInstanceArgs{...} }
type HourdbInstanceMapInput interface {
	pulumi.Input

	ToHourdbInstanceMapOutput() HourdbInstanceMapOutput
	ToHourdbInstanceMapOutputWithContext(context.Context) HourdbInstanceMapOutput
}

type HourdbInstanceMap map[string]HourdbInstanceInput

func (HourdbInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HourdbInstance)(nil)).Elem()
}

func (i HourdbInstanceMap) ToHourdbInstanceMapOutput() HourdbInstanceMapOutput {
	return i.ToHourdbInstanceMapOutputWithContext(context.Background())
}

func (i HourdbInstanceMap) ToHourdbInstanceMapOutputWithContext(ctx context.Context) HourdbInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HourdbInstanceMapOutput)
}

type HourdbInstanceOutput struct{ *pulumi.OutputState }

func (HourdbInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HourdbInstance)(nil)).Elem()
}

func (o HourdbInstanceOutput) ToHourdbInstanceOutput() HourdbInstanceOutput {
	return o
}

func (o HourdbInstanceOutput) ToHourdbInstanceOutputWithContext(ctx context.Context) HourdbInstanceOutput {
	return o
}

// db engine version, default to Percona 5.7.17.
func (o HourdbInstanceOutput) DbVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HourdbInstance) pulumi.StringPtrOutput { return v.DbVersionId }).(pulumi.StringPtrOutput)
}

// name of this instance.
func (o HourdbInstanceOutput) InstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HourdbInstance) pulumi.StringPtrOutput { return v.InstanceName }).(pulumi.StringPtrOutput)
}

// project id.
func (o HourdbInstanceOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HourdbInstance) pulumi.IntPtrOutput { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// resource tags.
func (o HourdbInstanceOutput) ResourceTags() HourdbInstanceResourceTagArrayOutput {
	return o.ApplyT(func(v *HourdbInstance) HourdbInstanceResourceTagArrayOutput { return v.ResourceTags }).(HourdbInstanceResourceTagArrayOutput)
}

// security group id.
func (o HourdbInstanceOutput) SecurityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HourdbInstance) pulumi.StringPtrOutput { return v.SecurityGroupId }).(pulumi.StringPtrOutput)
}

// instance shard count.
func (o HourdbInstanceOutput) ShardCount() pulumi.IntOutput {
	return o.ApplyT(func(v *HourdbInstance) pulumi.IntOutput { return v.ShardCount }).(pulumi.IntOutput)
}

// memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
func (o HourdbInstanceOutput) ShardMemory() pulumi.IntOutput {
	return o.ApplyT(func(v *HourdbInstance) pulumi.IntOutput { return v.ShardMemory }).(pulumi.IntOutput)
}

// node count for each shard. It can be obtained by querying api DescribeShardSpec.
func (o HourdbInstanceOutput) ShardNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *HourdbInstance) pulumi.IntOutput { return v.ShardNodeCount }).(pulumi.IntOutput)
}

// storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
func (o HourdbInstanceOutput) ShardStorage() pulumi.IntOutput {
	return o.ApplyT(func(v *HourdbInstance) pulumi.IntOutput { return v.ShardStorage }).(pulumi.IntOutput)
}

// subnet id, it&amp;#39;s required when vpcId is set.
func (o HourdbInstanceOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HourdbInstance) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// vpc id.
func (o HourdbInstanceOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HourdbInstance) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

// available zone.
func (o HourdbInstanceOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HourdbInstance) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

type HourdbInstanceArrayOutput struct{ *pulumi.OutputState }

func (HourdbInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HourdbInstance)(nil)).Elem()
}

func (o HourdbInstanceArrayOutput) ToHourdbInstanceArrayOutput() HourdbInstanceArrayOutput {
	return o
}

func (o HourdbInstanceArrayOutput) ToHourdbInstanceArrayOutputWithContext(ctx context.Context) HourdbInstanceArrayOutput {
	return o
}

func (o HourdbInstanceArrayOutput) Index(i pulumi.IntInput) HourdbInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HourdbInstance {
		return vs[0].([]*HourdbInstance)[vs[1].(int)]
	}).(HourdbInstanceOutput)
}

type HourdbInstanceMapOutput struct{ *pulumi.OutputState }

func (HourdbInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HourdbInstance)(nil)).Elem()
}

func (o HourdbInstanceMapOutput) ToHourdbInstanceMapOutput() HourdbInstanceMapOutput {
	return o
}

func (o HourdbInstanceMapOutput) ToHourdbInstanceMapOutputWithContext(ctx context.Context) HourdbInstanceMapOutput {
	return o
}

func (o HourdbInstanceMapOutput) MapIndex(k pulumi.StringInput) HourdbInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HourdbInstance {
		return vs[0].(map[string]*HourdbInstance)[vs[1].(string)]
	}).(HourdbInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HourdbInstanceInput)(nil)).Elem(), &HourdbInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*HourdbInstanceArrayInput)(nil)).Elem(), HourdbInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HourdbInstanceMapInput)(nil)).Elem(), HourdbInstanceMap{})
	pulumi.RegisterOutputType(HourdbInstanceOutput{})
	pulumi.RegisterOutputType(HourdbInstanceArrayOutput{})
	pulumi.RegisterOutputType(HourdbInstanceMapOutput{})
}
