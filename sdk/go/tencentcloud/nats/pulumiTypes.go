// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nats

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type InstancesNat struct {
	AssignedEipSets []string `pulumi:"assignedEipSets"`
	Bandwidth       int      `pulumi:"bandwidth"`
	CreateTime      string   `pulumi:"createTime"`
	Id              string   `pulumi:"id"`
	MaxConcurrent   int      `pulumi:"maxConcurrent"`
	Name            string   `pulumi:"name"`
	State           int      `pulumi:"state"`
	VpcId           string   `pulumi:"vpcId"`
}

// InstancesNatInput is an input type that accepts InstancesNatArgs and InstancesNatOutput values.
// You can construct a concrete instance of `InstancesNatInput` via:
//
//          InstancesNatArgs{...}
type InstancesNatInput interface {
	pulumi.Input

	ToInstancesNatOutput() InstancesNatOutput
	ToInstancesNatOutputWithContext(context.Context) InstancesNatOutput
}

type InstancesNatArgs struct {
	AssignedEipSets pulumi.StringArrayInput `pulumi:"assignedEipSets"`
	Bandwidth       pulumi.IntInput         `pulumi:"bandwidth"`
	CreateTime      pulumi.StringInput      `pulumi:"createTime"`
	Id              pulumi.StringInput      `pulumi:"id"`
	MaxConcurrent   pulumi.IntInput         `pulumi:"maxConcurrent"`
	Name            pulumi.StringInput      `pulumi:"name"`
	State           pulumi.IntInput         `pulumi:"state"`
	VpcId           pulumi.StringInput      `pulumi:"vpcId"`
}

func (InstancesNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesNat)(nil)).Elem()
}

func (i InstancesNatArgs) ToInstancesNatOutput() InstancesNatOutput {
	return i.ToInstancesNatOutputWithContext(context.Background())
}

func (i InstancesNatArgs) ToInstancesNatOutputWithContext(ctx context.Context) InstancesNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesNatOutput)
}

// InstancesNatArrayInput is an input type that accepts InstancesNatArray and InstancesNatArrayOutput values.
// You can construct a concrete instance of `InstancesNatArrayInput` via:
//
//          InstancesNatArray{ InstancesNatArgs{...} }
type InstancesNatArrayInput interface {
	pulumi.Input

	ToInstancesNatArrayOutput() InstancesNatArrayOutput
	ToInstancesNatArrayOutputWithContext(context.Context) InstancesNatArrayOutput
}

type InstancesNatArray []InstancesNatInput

func (InstancesNatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesNat)(nil)).Elem()
}

func (i InstancesNatArray) ToInstancesNatArrayOutput() InstancesNatArrayOutput {
	return i.ToInstancesNatArrayOutputWithContext(context.Background())
}

func (i InstancesNatArray) ToInstancesNatArrayOutputWithContext(ctx context.Context) InstancesNatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesNatArrayOutput)
}

type InstancesNatOutput struct{ *pulumi.OutputState }

func (InstancesNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesNat)(nil)).Elem()
}

func (o InstancesNatOutput) ToInstancesNatOutput() InstancesNatOutput {
	return o
}

func (o InstancesNatOutput) ToInstancesNatOutputWithContext(ctx context.Context) InstancesNatOutput {
	return o
}

func (o InstancesNatOutput) AssignedEipSets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancesNat) []string { return v.AssignedEipSets }).(pulumi.StringArrayOutput)
}

func (o InstancesNatOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesNat) int { return v.Bandwidth }).(pulumi.IntOutput)
}

func (o InstancesNatOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesNat) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o InstancesNatOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesNat) string { return v.Id }).(pulumi.StringOutput)
}

func (o InstancesNatOutput) MaxConcurrent() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesNat) int { return v.MaxConcurrent }).(pulumi.IntOutput)
}

func (o InstancesNatOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesNat) string { return v.Name }).(pulumi.StringOutput)
}

func (o InstancesNatOutput) State() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesNat) int { return v.State }).(pulumi.IntOutput)
}

func (o InstancesNatOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesNat) string { return v.VpcId }).(pulumi.StringOutput)
}

type InstancesNatArrayOutput struct{ *pulumi.OutputState }

func (InstancesNatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesNat)(nil)).Elem()
}

func (o InstancesNatArrayOutput) ToInstancesNatArrayOutput() InstancesNatArrayOutput {
	return o
}

func (o InstancesNatArrayOutput) ToInstancesNatArrayOutputWithContext(ctx context.Context) InstancesNatArrayOutput {
	return o
}

func (o InstancesNatArrayOutput) Index(i pulumi.IntInput) InstancesNatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesNat {
		return vs[0].([]InstancesNat)[vs[1].(int)]
	}).(InstancesNatOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesNatInput)(nil)).Elem(), InstancesNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesNatArrayInput)(nil)).Elem(), InstancesNatArray{})
	pulumi.RegisterOutputType(InstancesNatOutput{})
	pulumi.RegisterOutputType(InstancesNatArrayOutput{})
}
