// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cos

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CosBucket struct {
	pulumi.CustomResourceState

	// The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
	Acl pulumi.StringPtrOutput `pulumi:"acl"`
	// ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check
	// https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
	AclBody pulumi.StringPtrOutput `pulumi:"aclBody"`
	// The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// A rule of Cross-Origin Resource Sharing (documented below).
	CorsRules CosBucketCorsRuleArrayOutput `pulumi:"corsRules"`
	// The URL of this cos bucket.
	CosBucketUrl pulumi.StringOutput `pulumi:"cosBucketUrl"`
	// The server-side encryption algorithm to use. Valid value is `AES256`.
	EncryptionAlgorithm pulumi.StringPtrOutput `pulumi:"encryptionAlgorithm"`
	// A configuration of object lifecycle management (documented below).
	LifecycleRules CosBucketLifecycleRuleArrayOutput `pulumi:"lifecycleRules"`
	// Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be
	// saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role
	// Policy](https://intl.cloud.tencent.com/document/product/436/16920).
	LogEnable pulumi.BoolPtrOutput `pulumi:"logEnable"`
	// The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file
	// format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is
	// `true`.
	LogPrefix pulumi.StringOutput `pulumi:"logPrefix"`
	// The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is
	// `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
	// User must have full access on this bucket.
	LogTargetBucket pulumi.StringOutput `pulumi:"logTargetBucket"`
	// Indicates whether to create a bucket of multi available zone. NOTE: If set to true, the versioning must enable.
	MultiAz pulumi.BoolPtrOutput `pulumi:"multiAz"`
	// Bucket Origin Domain settings.
	OriginDomainRules CosBucketOriginDomainRuleArrayOutput `pulumi:"originDomainRules"`
	// Bucket Origin-Pull settings.
	OriginPullRules CosBucketOriginPullRuleArrayOutput `pulumi:"originPullRules"`
	// Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true
	// can configure this argument.
	ReplicaRole pulumi.StringPtrOutput `pulumi:"replicaRole"`
	// List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
	ReplicaRules CosBucketReplicaRuleArrayOutput `pulumi:"replicaRules"`
	// The tags of a bucket.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// Enable bucket versioning.
	VersioningEnable pulumi.BoolPtrOutput `pulumi:"versioningEnable"`
	// A website object(documented below).
	Website CosBucketWebsitePtrOutput `pulumi:"website"`
}

// NewCosBucket registers a new resource with the given unique name, arguments, and options.
func NewCosBucket(ctx *pulumi.Context,
	name string, args *CosBucketArgs, opts ...pulumi.ResourceOption) (*CosBucket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	var resource CosBucket
	err := ctx.RegisterResource("tencentcloud:Cos/cosBucket:CosBucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCosBucket gets an existing CosBucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCosBucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CosBucketState, opts ...pulumi.ResourceOption) (*CosBucket, error) {
	var resource CosBucket
	err := ctx.ReadResource("tencentcloud:Cos/cosBucket:CosBucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CosBucket resources.
type cosBucketState struct {
	// The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
	Acl *string `pulumi:"acl"`
	// ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check
	// https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
	AclBody *string `pulumi:"aclBody"`
	// The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
	Bucket *string `pulumi:"bucket"`
	// A rule of Cross-Origin Resource Sharing (documented below).
	CorsRules []CosBucketCorsRule `pulumi:"corsRules"`
	// The URL of this cos bucket.
	CosBucketUrl *string `pulumi:"cosBucketUrl"`
	// The server-side encryption algorithm to use. Valid value is `AES256`.
	EncryptionAlgorithm *string `pulumi:"encryptionAlgorithm"`
	// A configuration of object lifecycle management (documented below).
	LifecycleRules []CosBucketLifecycleRule `pulumi:"lifecycleRules"`
	// Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be
	// saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role
	// Policy](https://intl.cloud.tencent.com/document/product/436/16920).
	LogEnable *bool `pulumi:"logEnable"`
	// The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file
	// format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is
	// `true`.
	LogPrefix *string `pulumi:"logPrefix"`
	// The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is
	// `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
	// User must have full access on this bucket.
	LogTargetBucket *string `pulumi:"logTargetBucket"`
	// Indicates whether to create a bucket of multi available zone. NOTE: If set to true, the versioning must enable.
	MultiAz *bool `pulumi:"multiAz"`
	// Bucket Origin Domain settings.
	OriginDomainRules []CosBucketOriginDomainRule `pulumi:"originDomainRules"`
	// Bucket Origin-Pull settings.
	OriginPullRules []CosBucketOriginPullRule `pulumi:"originPullRules"`
	// Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true
	// can configure this argument.
	ReplicaRole *string `pulumi:"replicaRole"`
	// List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
	ReplicaRules []CosBucketReplicaRule `pulumi:"replicaRules"`
	// The tags of a bucket.
	Tags map[string]interface{} `pulumi:"tags"`
	// Enable bucket versioning.
	VersioningEnable *bool `pulumi:"versioningEnable"`
	// A website object(documented below).
	Website *CosBucketWebsite `pulumi:"website"`
}

type CosBucketState struct {
	// The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
	Acl pulumi.StringPtrInput
	// ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check
	// https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
	AclBody pulumi.StringPtrInput
	// The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
	Bucket pulumi.StringPtrInput
	// A rule of Cross-Origin Resource Sharing (documented below).
	CorsRules CosBucketCorsRuleArrayInput
	// The URL of this cos bucket.
	CosBucketUrl pulumi.StringPtrInput
	// The server-side encryption algorithm to use. Valid value is `AES256`.
	EncryptionAlgorithm pulumi.StringPtrInput
	// A configuration of object lifecycle management (documented below).
	LifecycleRules CosBucketLifecycleRuleArrayInput
	// Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be
	// saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role
	// Policy](https://intl.cloud.tencent.com/document/product/436/16920).
	LogEnable pulumi.BoolPtrInput
	// The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file
	// format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is
	// `true`.
	LogPrefix pulumi.StringPtrInput
	// The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is
	// `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
	// User must have full access on this bucket.
	LogTargetBucket pulumi.StringPtrInput
	// Indicates whether to create a bucket of multi available zone. NOTE: If set to true, the versioning must enable.
	MultiAz pulumi.BoolPtrInput
	// Bucket Origin Domain settings.
	OriginDomainRules CosBucketOriginDomainRuleArrayInput
	// Bucket Origin-Pull settings.
	OriginPullRules CosBucketOriginPullRuleArrayInput
	// Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true
	// can configure this argument.
	ReplicaRole pulumi.StringPtrInput
	// List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
	ReplicaRules CosBucketReplicaRuleArrayInput
	// The tags of a bucket.
	Tags pulumi.MapInput
	// Enable bucket versioning.
	VersioningEnable pulumi.BoolPtrInput
	// A website object(documented below).
	Website CosBucketWebsitePtrInput
}

func (CosBucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*cosBucketState)(nil)).Elem()
}

type cosBucketArgs struct {
	// The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
	Acl *string `pulumi:"acl"`
	// ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check
	// https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
	AclBody *string `pulumi:"aclBody"`
	// The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
	Bucket string `pulumi:"bucket"`
	// A rule of Cross-Origin Resource Sharing (documented below).
	CorsRules []CosBucketCorsRule `pulumi:"corsRules"`
	// The server-side encryption algorithm to use. Valid value is `AES256`.
	EncryptionAlgorithm *string `pulumi:"encryptionAlgorithm"`
	// A configuration of object lifecycle management (documented below).
	LifecycleRules []CosBucketLifecycleRule `pulumi:"lifecycleRules"`
	// Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be
	// saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role
	// Policy](https://intl.cloud.tencent.com/document/product/436/16920).
	LogEnable *bool `pulumi:"logEnable"`
	// The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file
	// format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is
	// `true`.
	LogPrefix *string `pulumi:"logPrefix"`
	// The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is
	// `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
	// User must have full access on this bucket.
	LogTargetBucket *string `pulumi:"logTargetBucket"`
	// Indicates whether to create a bucket of multi available zone. NOTE: If set to true, the versioning must enable.
	MultiAz *bool `pulumi:"multiAz"`
	// Bucket Origin Domain settings.
	OriginDomainRules []CosBucketOriginDomainRule `pulumi:"originDomainRules"`
	// Bucket Origin-Pull settings.
	OriginPullRules []CosBucketOriginPullRule `pulumi:"originPullRules"`
	// Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true
	// can configure this argument.
	ReplicaRole *string `pulumi:"replicaRole"`
	// List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
	ReplicaRules []CosBucketReplicaRule `pulumi:"replicaRules"`
	// The tags of a bucket.
	Tags map[string]interface{} `pulumi:"tags"`
	// Enable bucket versioning.
	VersioningEnable *bool `pulumi:"versioningEnable"`
	// A website object(documented below).
	Website *CosBucketWebsite `pulumi:"website"`
}

// The set of arguments for constructing a CosBucket resource.
type CosBucketArgs struct {
	// The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
	Acl pulumi.StringPtrInput
	// ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check
	// https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
	AclBody pulumi.StringPtrInput
	// The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
	Bucket pulumi.StringInput
	// A rule of Cross-Origin Resource Sharing (documented below).
	CorsRules CosBucketCorsRuleArrayInput
	// The server-side encryption algorithm to use. Valid value is `AES256`.
	EncryptionAlgorithm pulumi.StringPtrInput
	// A configuration of object lifecycle management (documented below).
	LifecycleRules CosBucketLifecycleRuleArrayInput
	// Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be
	// saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role
	// Policy](https://intl.cloud.tencent.com/document/product/436/16920).
	LogEnable pulumi.BoolPtrInput
	// The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file
	// format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is
	// `true`.
	LogPrefix pulumi.StringPtrInput
	// The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is
	// `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
	// User must have full access on this bucket.
	LogTargetBucket pulumi.StringPtrInput
	// Indicates whether to create a bucket of multi available zone. NOTE: If set to true, the versioning must enable.
	MultiAz pulumi.BoolPtrInput
	// Bucket Origin Domain settings.
	OriginDomainRules CosBucketOriginDomainRuleArrayInput
	// Bucket Origin-Pull settings.
	OriginPullRules CosBucketOriginPullRuleArrayInput
	// Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true
	// can configure this argument.
	ReplicaRole pulumi.StringPtrInput
	// List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
	ReplicaRules CosBucketReplicaRuleArrayInput
	// The tags of a bucket.
	Tags pulumi.MapInput
	// Enable bucket versioning.
	VersioningEnable pulumi.BoolPtrInput
	// A website object(documented below).
	Website CosBucketWebsitePtrInput
}

func (CosBucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cosBucketArgs)(nil)).Elem()
}

type CosBucketInput interface {
	pulumi.Input

	ToCosBucketOutput() CosBucketOutput
	ToCosBucketOutputWithContext(ctx context.Context) CosBucketOutput
}

func (*CosBucket) ElementType() reflect.Type {
	return reflect.TypeOf((**CosBucket)(nil)).Elem()
}

func (i *CosBucket) ToCosBucketOutput() CosBucketOutput {
	return i.ToCosBucketOutputWithContext(context.Background())
}

func (i *CosBucket) ToCosBucketOutputWithContext(ctx context.Context) CosBucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosBucketOutput)
}

// CosBucketArrayInput is an input type that accepts CosBucketArray and CosBucketArrayOutput values.
// You can construct a concrete instance of `CosBucketArrayInput` via:
//
//          CosBucketArray{ CosBucketArgs{...} }
type CosBucketArrayInput interface {
	pulumi.Input

	ToCosBucketArrayOutput() CosBucketArrayOutput
	ToCosBucketArrayOutputWithContext(context.Context) CosBucketArrayOutput
}

type CosBucketArray []CosBucketInput

func (CosBucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CosBucket)(nil)).Elem()
}

func (i CosBucketArray) ToCosBucketArrayOutput() CosBucketArrayOutput {
	return i.ToCosBucketArrayOutputWithContext(context.Background())
}

func (i CosBucketArray) ToCosBucketArrayOutputWithContext(ctx context.Context) CosBucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosBucketArrayOutput)
}

// CosBucketMapInput is an input type that accepts CosBucketMap and CosBucketMapOutput values.
// You can construct a concrete instance of `CosBucketMapInput` via:
//
//          CosBucketMap{ "key": CosBucketArgs{...} }
type CosBucketMapInput interface {
	pulumi.Input

	ToCosBucketMapOutput() CosBucketMapOutput
	ToCosBucketMapOutputWithContext(context.Context) CosBucketMapOutput
}

type CosBucketMap map[string]CosBucketInput

func (CosBucketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CosBucket)(nil)).Elem()
}

func (i CosBucketMap) ToCosBucketMapOutput() CosBucketMapOutput {
	return i.ToCosBucketMapOutputWithContext(context.Background())
}

func (i CosBucketMap) ToCosBucketMapOutputWithContext(ctx context.Context) CosBucketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosBucketMapOutput)
}

type CosBucketOutput struct{ *pulumi.OutputState }

func (CosBucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CosBucket)(nil)).Elem()
}

func (o CosBucketOutput) ToCosBucketOutput() CosBucketOutput {
	return o
}

func (o CosBucketOutput) ToCosBucketOutputWithContext(ctx context.Context) CosBucketOutput {
	return o
}

// The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
func (o CosBucketOutput) Acl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CosBucket) pulumi.StringPtrOutput { return v.Acl }).(pulumi.StringPtrOutput)
}

// ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check
// https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
func (o CosBucketOutput) AclBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CosBucket) pulumi.StringPtrOutput { return v.AclBody }).(pulumi.StringPtrOutput)
}

// The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
func (o CosBucketOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *CosBucket) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// A rule of Cross-Origin Resource Sharing (documented below).
func (o CosBucketOutput) CorsRules() CosBucketCorsRuleArrayOutput {
	return o.ApplyT(func(v *CosBucket) CosBucketCorsRuleArrayOutput { return v.CorsRules }).(CosBucketCorsRuleArrayOutput)
}

// The URL of this cos bucket.
func (o CosBucketOutput) CosBucketUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *CosBucket) pulumi.StringOutput { return v.CosBucketUrl }).(pulumi.StringOutput)
}

// The server-side encryption algorithm to use. Valid value is `AES256`.
func (o CosBucketOutput) EncryptionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CosBucket) pulumi.StringPtrOutput { return v.EncryptionAlgorithm }).(pulumi.StringPtrOutput)
}

// A configuration of object lifecycle management (documented below).
func (o CosBucketOutput) LifecycleRules() CosBucketLifecycleRuleArrayOutput {
	return o.ApplyT(func(v *CosBucket) CosBucketLifecycleRuleArrayOutput { return v.LifecycleRules }).(CosBucketLifecycleRuleArrayOutput)
}

// Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be
// saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role
// Policy](https://intl.cloud.tencent.com/document/product/436/16920).
func (o CosBucketOutput) LogEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CosBucket) pulumi.BoolPtrOutput { return v.LogEnable }).(pulumi.BoolPtrOutput)
}

// The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file
// format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is
// `true`.
func (o CosBucketOutput) LogPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *CosBucket) pulumi.StringOutput { return v.LogPrefix }).(pulumi.StringOutput)
}

// The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is
// `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
// User must have full access on this bucket.
func (o CosBucketOutput) LogTargetBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *CosBucket) pulumi.StringOutput { return v.LogTargetBucket }).(pulumi.StringOutput)
}

// Indicates whether to create a bucket of multi available zone. NOTE: If set to true, the versioning must enable.
func (o CosBucketOutput) MultiAz() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CosBucket) pulumi.BoolPtrOutput { return v.MultiAz }).(pulumi.BoolPtrOutput)
}

// Bucket Origin Domain settings.
func (o CosBucketOutput) OriginDomainRules() CosBucketOriginDomainRuleArrayOutput {
	return o.ApplyT(func(v *CosBucket) CosBucketOriginDomainRuleArrayOutput { return v.OriginDomainRules }).(CosBucketOriginDomainRuleArrayOutput)
}

// Bucket Origin-Pull settings.
func (o CosBucketOutput) OriginPullRules() CosBucketOriginPullRuleArrayOutput {
	return o.ApplyT(func(v *CosBucket) CosBucketOriginPullRuleArrayOutput { return v.OriginPullRules }).(CosBucketOriginPullRuleArrayOutput)
}

// Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true
// can configure this argument.
func (o CosBucketOutput) ReplicaRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CosBucket) pulumi.StringPtrOutput { return v.ReplicaRole }).(pulumi.StringPtrOutput)
}

// List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
func (o CosBucketOutput) ReplicaRules() CosBucketReplicaRuleArrayOutput {
	return o.ApplyT(func(v *CosBucket) CosBucketReplicaRuleArrayOutput { return v.ReplicaRules }).(CosBucketReplicaRuleArrayOutput)
}

// The tags of a bucket.
func (o CosBucketOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *CosBucket) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// Enable bucket versioning.
func (o CosBucketOutput) VersioningEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CosBucket) pulumi.BoolPtrOutput { return v.VersioningEnable }).(pulumi.BoolPtrOutput)
}

// A website object(documented below).
func (o CosBucketOutput) Website() CosBucketWebsitePtrOutput {
	return o.ApplyT(func(v *CosBucket) CosBucketWebsitePtrOutput { return v.Website }).(CosBucketWebsitePtrOutput)
}

type CosBucketArrayOutput struct{ *pulumi.OutputState }

func (CosBucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CosBucket)(nil)).Elem()
}

func (o CosBucketArrayOutput) ToCosBucketArrayOutput() CosBucketArrayOutput {
	return o
}

func (o CosBucketArrayOutput) ToCosBucketArrayOutputWithContext(ctx context.Context) CosBucketArrayOutput {
	return o
}

func (o CosBucketArrayOutput) Index(i pulumi.IntInput) CosBucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CosBucket {
		return vs[0].([]*CosBucket)[vs[1].(int)]
	}).(CosBucketOutput)
}

type CosBucketMapOutput struct{ *pulumi.OutputState }

func (CosBucketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CosBucket)(nil)).Elem()
}

func (o CosBucketMapOutput) ToCosBucketMapOutput() CosBucketMapOutput {
	return o
}

func (o CosBucketMapOutput) ToCosBucketMapOutputWithContext(ctx context.Context) CosBucketMapOutput {
	return o
}

func (o CosBucketMapOutput) MapIndex(k pulumi.StringInput) CosBucketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CosBucket {
		return vs[0].(map[string]*CosBucket)[vs[1].(string)]
	}).(CosBucketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CosBucketInput)(nil)).Elem(), &CosBucket{})
	pulumi.RegisterInputType(reflect.TypeOf((*CosBucketArrayInput)(nil)).Elem(), CosBucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CosBucketMapInput)(nil)).Elem(), CosBucketMap{})
	pulumi.RegisterOutputType(CosBucketOutput{})
	pulumi.RegisterOutputType(CosBucketArrayOutput{})
	pulumi.RegisterOutputType(CosBucketMapOutput{})
}
