// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func Data(ctx *pulumi.Context, args *DataArgs, opts ...pulumi.InvokeOption) (*DataResult, error) {
	var rv DataResult
	err := ctx.Invoke("tencentcloud:Monitor/data:Data", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Data.
type DataArgs struct {
	Dimensions       []DataDimension `pulumi:"dimensions"`
	EndTime          string          `pulumi:"endTime"`
	MetricName       string          `pulumi:"metricName"`
	Namespace        string          `pulumi:"namespace"`
	Period           *int            `pulumi:"period"`
	ResultOutputFile *string         `pulumi:"resultOutputFile"`
	StartTime        string          `pulumi:"startTime"`
}

// A collection of values returned by Data.
type DataResult struct {
	Dimensions []DataDimension `pulumi:"dimensions"`
	EndTime    string          `pulumi:"endTime"`
	// The provider-assigned unique ID for this managed resource.
	Id               string     `pulumi:"id"`
	Lists            []DataList `pulumi:"lists"`
	MetricName       string     `pulumi:"metricName"`
	Namespace        string     `pulumi:"namespace"`
	Period           *int       `pulumi:"period"`
	ResultOutputFile *string    `pulumi:"resultOutputFile"`
	StartTime        string     `pulumi:"startTime"`
}

func DataOutput(ctx *pulumi.Context, args DataOutputArgs, opts ...pulumi.InvokeOption) DataResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (DataResult, error) {
			args := v.(DataArgs)
			r, err := Data(ctx, &args, opts...)
			var s DataResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(DataResultOutput)
}

// A collection of arguments for invoking Data.
type DataOutputArgs struct {
	Dimensions       DataDimensionArrayInput `pulumi:"dimensions"`
	EndTime          pulumi.StringInput      `pulumi:"endTime"`
	MetricName       pulumi.StringInput      `pulumi:"metricName"`
	Namespace        pulumi.StringInput      `pulumi:"namespace"`
	Period           pulumi.IntPtrInput      `pulumi:"period"`
	ResultOutputFile pulumi.StringPtrInput   `pulumi:"resultOutputFile"`
	StartTime        pulumi.StringInput      `pulumi:"startTime"`
}

func (DataOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataArgs)(nil)).Elem()
}

// A collection of values returned by Data.
type DataResultOutput struct{ *pulumi.OutputState }

func (DataResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataResult)(nil)).Elem()
}

func (o DataResultOutput) ToDataResultOutput() DataResultOutput {
	return o
}

func (o DataResultOutput) ToDataResultOutputWithContext(ctx context.Context) DataResultOutput {
	return o
}

func (o DataResultOutput) Dimensions() DataDimensionArrayOutput {
	return o.ApplyT(func(v DataResult) []DataDimension { return v.Dimensions }).(DataDimensionArrayOutput)
}

func (o DataResultOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v DataResult) string { return v.EndTime }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o DataResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DataResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o DataResultOutput) Lists() DataListArrayOutput {
	return o.ApplyT(func(v DataResult) []DataList { return v.Lists }).(DataListArrayOutput)
}

func (o DataResultOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v DataResult) string { return v.MetricName }).(pulumi.StringOutput)
}

func (o DataResultOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v DataResult) string { return v.Namespace }).(pulumi.StringOutput)
}

func (o DataResultOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataResult) *int { return v.Period }).(pulumi.IntPtrOutput)
}

func (o DataResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o DataResultOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v DataResult) string { return v.StartTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DataResultOutput{})
}
