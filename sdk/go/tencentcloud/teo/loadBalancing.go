// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package teo

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a teo loadBalancing
//
// ## Import
//
// teo load_balancing can be imported using the zone_id#loadBalancing_id, e.g.
//
// ```sh
//  $ pulumi import tencentcloud:Teo/loadBalancing:LoadBalancing load_balancing zone-297z8rf93cfw#lb-2a93c649-3719-11ed-b9c1-5254005a52aa
// ```
type LoadBalancing struct {
	pulumi.CustomResourceState

	// ID of the backup origin group to use.
	BackupOriginGroupId pulumi.StringOutput `pulumi:"backupOriginGroupId"`
	// Schedules domain names. Note: This field may return null, indicating that no valid value can be obtained.
	Cname pulumi.StringOutput `pulumi:"cname"`
	// Subdomain name. You can use @ to represent the root domain.
	Host pulumi.StringOutput `pulumi:"host"`
	// Load balancer instance ID.
	LoadBalancingId pulumi.StringOutput `pulumi:"loadBalancingId"`
	// ID of the origin group to use.
	OriginGroupId pulumi.StringOutput `pulumi:"originGroupId"`
	// Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Indicates DNS TTL time when `Type` is dns_only.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// Proxy mode.- `dnsOnly`: Only DNS.- `proxied`: Enable proxy.
	Type pulumi.StringOutput `pulumi:"type"`
	// Last modification date.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Site ID.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewLoadBalancing registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancing(ctx *pulumi.Context,
	name string, args *LoadBalancingArgs, opts ...pulumi.ResourceOption) (*LoadBalancing, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.OriginGroupId == nil {
		return nil, errors.New("invalid value for required argument 'OriginGroupId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource LoadBalancing
	err := ctx.RegisterResource("tencentcloud:Teo/loadBalancing:LoadBalancing", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancing gets an existing LoadBalancing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancingState, opts ...pulumi.ResourceOption) (*LoadBalancing, error) {
	var resource LoadBalancing
	err := ctx.ReadResource("tencentcloud:Teo/loadBalancing:LoadBalancing", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancing resources.
type loadBalancingState struct {
	// ID of the backup origin group to use.
	BackupOriginGroupId *string `pulumi:"backupOriginGroupId"`
	// Schedules domain names. Note: This field may return null, indicating that no valid value can be obtained.
	Cname *string `pulumi:"cname"`
	// Subdomain name. You can use @ to represent the root domain.
	Host *string `pulumi:"host"`
	// Load balancer instance ID.
	LoadBalancingId *string `pulumi:"loadBalancingId"`
	// ID of the origin group to use.
	OriginGroupId *string `pulumi:"originGroupId"`
	// Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
	Status *string `pulumi:"status"`
	// Indicates DNS TTL time when `Type` is dns_only.
	Ttl *int `pulumi:"ttl"`
	// Proxy mode.- `dnsOnly`: Only DNS.- `proxied`: Enable proxy.
	Type *string `pulumi:"type"`
	// Last modification date.
	UpdateTime *string `pulumi:"updateTime"`
	// Site ID.
	ZoneId *string `pulumi:"zoneId"`
}

type LoadBalancingState struct {
	// ID of the backup origin group to use.
	BackupOriginGroupId pulumi.StringPtrInput
	// Schedules domain names. Note: This field may return null, indicating that no valid value can be obtained.
	Cname pulumi.StringPtrInput
	// Subdomain name. You can use @ to represent the root domain.
	Host pulumi.StringPtrInput
	// Load balancer instance ID.
	LoadBalancingId pulumi.StringPtrInput
	// ID of the origin group to use.
	OriginGroupId pulumi.StringPtrInput
	// Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
	Status pulumi.StringPtrInput
	// Indicates DNS TTL time when `Type` is dns_only.
	Ttl pulumi.IntPtrInput
	// Proxy mode.- `dnsOnly`: Only DNS.- `proxied`: Enable proxy.
	Type pulumi.StringPtrInput
	// Last modification date.
	UpdateTime pulumi.StringPtrInput
	// Site ID.
	ZoneId pulumi.StringPtrInput
}

func (LoadBalancingState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancingState)(nil)).Elem()
}

type loadBalancingArgs struct {
	// ID of the backup origin group to use.
	BackupOriginGroupId *string `pulumi:"backupOriginGroupId"`
	// Subdomain name. You can use @ to represent the root domain.
	Host string `pulumi:"host"`
	// ID of the origin group to use.
	OriginGroupId string `pulumi:"originGroupId"`
	// Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
	Status *string `pulumi:"status"`
	// Indicates DNS TTL time when `Type` is dns_only.
	Ttl *int `pulumi:"ttl"`
	// Proxy mode.- `dnsOnly`: Only DNS.- `proxied`: Enable proxy.
	Type string `pulumi:"type"`
	// Site ID.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a LoadBalancing resource.
type LoadBalancingArgs struct {
	// ID of the backup origin group to use.
	BackupOriginGroupId pulumi.StringPtrInput
	// Subdomain name. You can use @ to represent the root domain.
	Host pulumi.StringInput
	// ID of the origin group to use.
	OriginGroupId pulumi.StringInput
	// Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
	Status pulumi.StringPtrInput
	// Indicates DNS TTL time when `Type` is dns_only.
	Ttl pulumi.IntPtrInput
	// Proxy mode.- `dnsOnly`: Only DNS.- `proxied`: Enable proxy.
	Type pulumi.StringInput
	// Site ID.
	ZoneId pulumi.StringInput
}

func (LoadBalancingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancingArgs)(nil)).Elem()
}

type LoadBalancingInput interface {
	pulumi.Input

	ToLoadBalancingOutput() LoadBalancingOutput
	ToLoadBalancingOutputWithContext(ctx context.Context) LoadBalancingOutput
}

func (*LoadBalancing) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancing)(nil)).Elem()
}

func (i *LoadBalancing) ToLoadBalancingOutput() LoadBalancingOutput {
	return i.ToLoadBalancingOutputWithContext(context.Background())
}

func (i *LoadBalancing) ToLoadBalancingOutputWithContext(ctx context.Context) LoadBalancingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancingOutput)
}

// LoadBalancingArrayInput is an input type that accepts LoadBalancingArray and LoadBalancingArrayOutput values.
// You can construct a concrete instance of `LoadBalancingArrayInput` via:
//
//          LoadBalancingArray{ LoadBalancingArgs{...} }
type LoadBalancingArrayInput interface {
	pulumi.Input

	ToLoadBalancingArrayOutput() LoadBalancingArrayOutput
	ToLoadBalancingArrayOutputWithContext(context.Context) LoadBalancingArrayOutput
}

type LoadBalancingArray []LoadBalancingInput

func (LoadBalancingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancing)(nil)).Elem()
}

func (i LoadBalancingArray) ToLoadBalancingArrayOutput() LoadBalancingArrayOutput {
	return i.ToLoadBalancingArrayOutputWithContext(context.Background())
}

func (i LoadBalancingArray) ToLoadBalancingArrayOutputWithContext(ctx context.Context) LoadBalancingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancingArrayOutput)
}

// LoadBalancingMapInput is an input type that accepts LoadBalancingMap and LoadBalancingMapOutput values.
// You can construct a concrete instance of `LoadBalancingMapInput` via:
//
//          LoadBalancingMap{ "key": LoadBalancingArgs{...} }
type LoadBalancingMapInput interface {
	pulumi.Input

	ToLoadBalancingMapOutput() LoadBalancingMapOutput
	ToLoadBalancingMapOutputWithContext(context.Context) LoadBalancingMapOutput
}

type LoadBalancingMap map[string]LoadBalancingInput

func (LoadBalancingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancing)(nil)).Elem()
}

func (i LoadBalancingMap) ToLoadBalancingMapOutput() LoadBalancingMapOutput {
	return i.ToLoadBalancingMapOutputWithContext(context.Background())
}

func (i LoadBalancingMap) ToLoadBalancingMapOutputWithContext(ctx context.Context) LoadBalancingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancingMapOutput)
}

type LoadBalancingOutput struct{ *pulumi.OutputState }

func (LoadBalancingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancing)(nil)).Elem()
}

func (o LoadBalancingOutput) ToLoadBalancingOutput() LoadBalancingOutput {
	return o
}

func (o LoadBalancingOutput) ToLoadBalancingOutputWithContext(ctx context.Context) LoadBalancingOutput {
	return o
}

// ID of the backup origin group to use.
func (o LoadBalancingOutput) BackupOriginGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancing) pulumi.StringOutput { return v.BackupOriginGroupId }).(pulumi.StringOutput)
}

// Schedules domain names. Note: This field may return null, indicating that no valid value can be obtained.
func (o LoadBalancingOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancing) pulumi.StringOutput { return v.Cname }).(pulumi.StringOutput)
}

// Subdomain name. You can use @ to represent the root domain.
func (o LoadBalancingOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancing) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// Load balancer instance ID.
func (o LoadBalancingOutput) LoadBalancingId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancing) pulumi.StringOutput { return v.LoadBalancingId }).(pulumi.StringOutput)
}

// ID of the origin group to use.
func (o LoadBalancingOutput) OriginGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancing) pulumi.StringOutput { return v.OriginGroupId }).(pulumi.StringOutput)
}

// Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
func (o LoadBalancingOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancing) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Indicates DNS TTL time when `Type` is dns_only.
func (o LoadBalancingOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadBalancing) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

// Proxy mode.- `dnsOnly`: Only DNS.- `proxied`: Enable proxy.
func (o LoadBalancingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancing) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Last modification date.
func (o LoadBalancingOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancing) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Site ID.
func (o LoadBalancingOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancing) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type LoadBalancingArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancing)(nil)).Elem()
}

func (o LoadBalancingArrayOutput) ToLoadBalancingArrayOutput() LoadBalancingArrayOutput {
	return o
}

func (o LoadBalancingArrayOutput) ToLoadBalancingArrayOutputWithContext(ctx context.Context) LoadBalancingArrayOutput {
	return o
}

func (o LoadBalancingArrayOutput) Index(i pulumi.IntInput) LoadBalancingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadBalancing {
		return vs[0].([]*LoadBalancing)[vs[1].(int)]
	}).(LoadBalancingOutput)
}

type LoadBalancingMapOutput struct{ *pulumi.OutputState }

func (LoadBalancingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancing)(nil)).Elem()
}

func (o LoadBalancingMapOutput) ToLoadBalancingMapOutput() LoadBalancingMapOutput {
	return o
}

func (o LoadBalancingMapOutput) ToLoadBalancingMapOutputWithContext(ctx context.Context) LoadBalancingMapOutput {
	return o
}

func (o LoadBalancingMapOutput) MapIndex(k pulumi.StringInput) LoadBalancingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadBalancing {
		return vs[0].(map[string]*LoadBalancing)[vs[1].(string)]
	}).(LoadBalancingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancingInput)(nil)).Elem(), &LoadBalancing{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancingArrayInput)(nil)).Elem(), LoadBalancingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancingMapInput)(nil)).Elem(), LoadBalancingMap{})
	pulumi.RegisterOutputType(LoadBalancingOutput{})
	pulumi.RegisterOutputType(LoadBalancingArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancingMapOutput{})
}
