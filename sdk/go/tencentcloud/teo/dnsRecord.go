// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package teo

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Teo"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := Teo.NewDnsRecord(ctx, "dnsRecord", &Teo.DnsRecordArgs{
// 			Content:  pulumi.String("150.109.8.2"),
// 			Mode:     pulumi.String("proxied"),
// 			Priority: pulumi.Int(1),
// 			Ttl:      pulumi.Int(1),
// 			Type:     pulumi.String("A"),
// 			ZoneId:   pulumi.String("zone-297z8rf93cfw"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// teo dns_record can be imported using the zone_id#dns_record_id, e.g.
//
// ```sh
//  $ pulumi import tencentcloud:Teo/dnsRecord:DnsRecord dns_record zone-297z8rf93cfw#record-297z9ei9b9oc
// ```
type DnsRecord struct {
	pulumi.CustomResourceState

	// CNAME address. Note: This field may return null, indicating that no valid value can be obtained.
	Cname pulumi.StringOutput `pulumi:"cname"`
	// DNS record Content.
	Content pulumi.StringOutput `pulumi:"content"`
	// Creation date.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// DNS record ID.
	DnsRecordId pulumi.StringOutput `pulumi:"dnsRecordId"`
	// Whether this domain enable load balancing, security, or l4 proxy capability. Valid values: `lb`, `security`, `l4`.
	DomainStatuses pulumi.StringArrayOutput `pulumi:"domainStatuses"`
	// Whether the DNS record is locked.
	Locked pulumi.BoolOutput `pulumi:"locked"`
	// Proxy mode. Valid values:- `dnsOnly`: only DNS resolution of the subdomain is enabled.- `proxied`: subdomain is proxied and accelerated.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Last modification date.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// DNS record Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Priority of the record. Valid value range: 1-50, the smaller value, the higher priority.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// Resolution status. Valid values: `active`, `pending`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Time to live of the DNS record cache in seconds.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// DNS record Type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `NS`, `CAA`, `SRV`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Site ID.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewDnsRecord registers a new resource with the given unique name, arguments, and options.
func NewDnsRecord(ctx *pulumi.Context,
	name string, args *DnsRecordArgs, opts ...pulumi.ResourceOption) (*DnsRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DnsRecord
	err := ctx.RegisterResource("tencentcloud:Teo/dnsRecord:DnsRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsRecord gets an existing DnsRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsRecordState, opts ...pulumi.ResourceOption) (*DnsRecord, error) {
	var resource DnsRecord
	err := ctx.ReadResource("tencentcloud:Teo/dnsRecord:DnsRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsRecord resources.
type dnsRecordState struct {
	// CNAME address. Note: This field may return null, indicating that no valid value can be obtained.
	Cname *string `pulumi:"cname"`
	// DNS record Content.
	Content *string `pulumi:"content"`
	// Creation date.
	CreatedOn *string `pulumi:"createdOn"`
	// DNS record ID.
	DnsRecordId *string `pulumi:"dnsRecordId"`
	// Whether this domain enable load balancing, security, or l4 proxy capability. Valid values: `lb`, `security`, `l4`.
	DomainStatuses []string `pulumi:"domainStatuses"`
	// Whether the DNS record is locked.
	Locked *bool `pulumi:"locked"`
	// Proxy mode. Valid values:- `dnsOnly`: only DNS resolution of the subdomain is enabled.- `proxied`: subdomain is proxied and accelerated.
	Mode *string `pulumi:"mode"`
	// Last modification date.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// DNS record Name.
	Name *string `pulumi:"name"`
	// Priority of the record. Valid value range: 1-50, the smaller value, the higher priority.
	Priority *int `pulumi:"priority"`
	// Resolution status. Valid values: `active`, `pending`.
	Status *string `pulumi:"status"`
	// Time to live of the DNS record cache in seconds.
	Ttl *int `pulumi:"ttl"`
	// DNS record Type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `NS`, `CAA`, `SRV`.
	Type *string `pulumi:"type"`
	// Site ID.
	ZoneId *string `pulumi:"zoneId"`
}

type DnsRecordState struct {
	// CNAME address. Note: This field may return null, indicating that no valid value can be obtained.
	Cname pulumi.StringPtrInput
	// DNS record Content.
	Content pulumi.StringPtrInput
	// Creation date.
	CreatedOn pulumi.StringPtrInput
	// DNS record ID.
	DnsRecordId pulumi.StringPtrInput
	// Whether this domain enable load balancing, security, or l4 proxy capability. Valid values: `lb`, `security`, `l4`.
	DomainStatuses pulumi.StringArrayInput
	// Whether the DNS record is locked.
	Locked pulumi.BoolPtrInput
	// Proxy mode. Valid values:- `dnsOnly`: only DNS resolution of the subdomain is enabled.- `proxied`: subdomain is proxied and accelerated.
	Mode pulumi.StringPtrInput
	// Last modification date.
	ModifiedOn pulumi.StringPtrInput
	// DNS record Name.
	Name pulumi.StringPtrInput
	// Priority of the record. Valid value range: 1-50, the smaller value, the higher priority.
	Priority pulumi.IntPtrInput
	// Resolution status. Valid values: `active`, `pending`.
	Status pulumi.StringPtrInput
	// Time to live of the DNS record cache in seconds.
	Ttl pulumi.IntPtrInput
	// DNS record Type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `NS`, `CAA`, `SRV`.
	Type pulumi.StringPtrInput
	// Site ID.
	ZoneId pulumi.StringPtrInput
}

func (DnsRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsRecordState)(nil)).Elem()
}

type dnsRecordArgs struct {
	// DNS record Content.
	Content string `pulumi:"content"`
	// Proxy mode. Valid values:- `dnsOnly`: only DNS resolution of the subdomain is enabled.- `proxied`: subdomain is proxied and accelerated.
	Mode string `pulumi:"mode"`
	// DNS record Name.
	Name *string `pulumi:"name"`
	// Priority of the record. Valid value range: 1-50, the smaller value, the higher priority.
	Priority *int `pulumi:"priority"`
	// Resolution status. Valid values: `active`, `pending`.
	Status *string `pulumi:"status"`
	// Time to live of the DNS record cache in seconds.
	Ttl *int `pulumi:"ttl"`
	// DNS record Type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `NS`, `CAA`, `SRV`.
	Type string `pulumi:"type"`
	// Site ID.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a DnsRecord resource.
type DnsRecordArgs struct {
	// DNS record Content.
	Content pulumi.StringInput
	// Proxy mode. Valid values:- `dnsOnly`: only DNS resolution of the subdomain is enabled.- `proxied`: subdomain is proxied and accelerated.
	Mode pulumi.StringInput
	// DNS record Name.
	Name pulumi.StringPtrInput
	// Priority of the record. Valid value range: 1-50, the smaller value, the higher priority.
	Priority pulumi.IntPtrInput
	// Resolution status. Valid values: `active`, `pending`.
	Status pulumi.StringPtrInput
	// Time to live of the DNS record cache in seconds.
	Ttl pulumi.IntPtrInput
	// DNS record Type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `NS`, `CAA`, `SRV`.
	Type pulumi.StringInput
	// Site ID.
	ZoneId pulumi.StringInput
}

func (DnsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsRecordArgs)(nil)).Elem()
}

type DnsRecordInput interface {
	pulumi.Input

	ToDnsRecordOutput() DnsRecordOutput
	ToDnsRecordOutputWithContext(ctx context.Context) DnsRecordOutput
}

func (*DnsRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsRecord)(nil)).Elem()
}

func (i *DnsRecord) ToDnsRecordOutput() DnsRecordOutput {
	return i.ToDnsRecordOutputWithContext(context.Background())
}

func (i *DnsRecord) ToDnsRecordOutputWithContext(ctx context.Context) DnsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRecordOutput)
}

// DnsRecordArrayInput is an input type that accepts DnsRecordArray and DnsRecordArrayOutput values.
// You can construct a concrete instance of `DnsRecordArrayInput` via:
//
//          DnsRecordArray{ DnsRecordArgs{...} }
type DnsRecordArrayInput interface {
	pulumi.Input

	ToDnsRecordArrayOutput() DnsRecordArrayOutput
	ToDnsRecordArrayOutputWithContext(context.Context) DnsRecordArrayOutput
}

type DnsRecordArray []DnsRecordInput

func (DnsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsRecord)(nil)).Elem()
}

func (i DnsRecordArray) ToDnsRecordArrayOutput() DnsRecordArrayOutput {
	return i.ToDnsRecordArrayOutputWithContext(context.Background())
}

func (i DnsRecordArray) ToDnsRecordArrayOutputWithContext(ctx context.Context) DnsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRecordArrayOutput)
}

// DnsRecordMapInput is an input type that accepts DnsRecordMap and DnsRecordMapOutput values.
// You can construct a concrete instance of `DnsRecordMapInput` via:
//
//          DnsRecordMap{ "key": DnsRecordArgs{...} }
type DnsRecordMapInput interface {
	pulumi.Input

	ToDnsRecordMapOutput() DnsRecordMapOutput
	ToDnsRecordMapOutputWithContext(context.Context) DnsRecordMapOutput
}

type DnsRecordMap map[string]DnsRecordInput

func (DnsRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsRecord)(nil)).Elem()
}

func (i DnsRecordMap) ToDnsRecordMapOutput() DnsRecordMapOutput {
	return i.ToDnsRecordMapOutputWithContext(context.Background())
}

func (i DnsRecordMap) ToDnsRecordMapOutputWithContext(ctx context.Context) DnsRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRecordMapOutput)
}

type DnsRecordOutput struct{ *pulumi.OutputState }

func (DnsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsRecord)(nil)).Elem()
}

func (o DnsRecordOutput) ToDnsRecordOutput() DnsRecordOutput {
	return o
}

func (o DnsRecordOutput) ToDnsRecordOutputWithContext(ctx context.Context) DnsRecordOutput {
	return o
}

// CNAME address. Note: This field may return null, indicating that no valid value can be obtained.
func (o DnsRecordOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.Cname }).(pulumi.StringOutput)
}

// DNS record Content.
func (o DnsRecordOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// Creation date.
func (o DnsRecordOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// DNS record ID.
func (o DnsRecordOutput) DnsRecordId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.DnsRecordId }).(pulumi.StringOutput)
}

// Whether this domain enable load balancing, security, or l4 proxy capability. Valid values: `lb`, `security`, `l4`.
func (o DnsRecordOutput) DomainStatuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringArrayOutput { return v.DomainStatuses }).(pulumi.StringArrayOutput)
}

// Whether the DNS record is locked.
func (o DnsRecordOutput) Locked() pulumi.BoolOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.BoolOutput { return v.Locked }).(pulumi.BoolOutput)
}

// Proxy mode. Valid values:- `dnsOnly`: only DNS resolution of the subdomain is enabled.- `proxied`: subdomain is proxied and accelerated.
func (o DnsRecordOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Last modification date.
func (o DnsRecordOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// DNS record Name.
func (o DnsRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Priority of the record. Valid value range: 1-50, the smaller value, the higher priority.
func (o DnsRecordOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// Resolution status. Valid values: `active`, `pending`.
func (o DnsRecordOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Time to live of the DNS record cache in seconds.
func (o DnsRecordOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

// DNS record Type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `NS`, `CAA`, `SRV`.
func (o DnsRecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Site ID.
func (o DnsRecordOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type DnsRecordArrayOutput struct{ *pulumi.OutputState }

func (DnsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsRecord)(nil)).Elem()
}

func (o DnsRecordArrayOutput) ToDnsRecordArrayOutput() DnsRecordArrayOutput {
	return o
}

func (o DnsRecordArrayOutput) ToDnsRecordArrayOutputWithContext(ctx context.Context) DnsRecordArrayOutput {
	return o
}

func (o DnsRecordArrayOutput) Index(i pulumi.IntInput) DnsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsRecord {
		return vs[0].([]*DnsRecord)[vs[1].(int)]
	}).(DnsRecordOutput)
}

type DnsRecordMapOutput struct{ *pulumi.OutputState }

func (DnsRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsRecord)(nil)).Elem()
}

func (o DnsRecordMapOutput) ToDnsRecordMapOutput() DnsRecordMapOutput {
	return o
}

func (o DnsRecordMapOutput) ToDnsRecordMapOutputWithContext(ctx context.Context) DnsRecordMapOutput {
	return o
}

func (o DnsRecordMapOutput) MapIndex(k pulumi.StringInput) DnsRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsRecord {
		return vs[0].(map[string]*DnsRecord)[vs[1].(string)]
	}).(DnsRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsRecordInput)(nil)).Elem(), &DnsRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsRecordArrayInput)(nil)).Elem(), DnsRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsRecordMapInput)(nil)).Elem(), DnsRecordMap{})
	pulumi.RegisterOutputType(DnsRecordOutput{})
	pulumi.RegisterOutputType(DnsRecordArrayOutput{})
	pulumi.RegisterOutputType(DnsRecordMapOutput{})
}
