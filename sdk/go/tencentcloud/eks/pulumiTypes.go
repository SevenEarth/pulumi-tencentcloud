// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClusterDnsServer struct {
	// DNS Server domain. Empty indicates all domain.
	Domain *string `pulumi:"domain"`
	// List of DNS Server IP address, pattern: "ip[:port]".
	Servers []string `pulumi:"servers"`
}

// ClusterDnsServerInput is an input type that accepts ClusterDnsServerArgs and ClusterDnsServerOutput values.
// You can construct a concrete instance of `ClusterDnsServerInput` via:
//
//	ClusterDnsServerArgs{...}
type ClusterDnsServerInput interface {
	pulumi.Input

	ToClusterDnsServerOutput() ClusterDnsServerOutput
	ToClusterDnsServerOutputWithContext(context.Context) ClusterDnsServerOutput
}

type ClusterDnsServerArgs struct {
	// DNS Server domain. Empty indicates all domain.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// List of DNS Server IP address, pattern: "ip[:port]".
	Servers pulumi.StringArrayInput `pulumi:"servers"`
}

func (ClusterDnsServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterDnsServer)(nil)).Elem()
}

func (i ClusterDnsServerArgs) ToClusterDnsServerOutput() ClusterDnsServerOutput {
	return i.ToClusterDnsServerOutputWithContext(context.Background())
}

func (i ClusterDnsServerArgs) ToClusterDnsServerOutputWithContext(ctx context.Context) ClusterDnsServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDnsServerOutput)
}

// ClusterDnsServerArrayInput is an input type that accepts ClusterDnsServerArray and ClusterDnsServerArrayOutput values.
// You can construct a concrete instance of `ClusterDnsServerArrayInput` via:
//
//	ClusterDnsServerArray{ ClusterDnsServerArgs{...} }
type ClusterDnsServerArrayInput interface {
	pulumi.Input

	ToClusterDnsServerArrayOutput() ClusterDnsServerArrayOutput
	ToClusterDnsServerArrayOutputWithContext(context.Context) ClusterDnsServerArrayOutput
}

type ClusterDnsServerArray []ClusterDnsServerInput

func (ClusterDnsServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterDnsServer)(nil)).Elem()
}

func (i ClusterDnsServerArray) ToClusterDnsServerArrayOutput() ClusterDnsServerArrayOutput {
	return i.ToClusterDnsServerArrayOutputWithContext(context.Background())
}

func (i ClusterDnsServerArray) ToClusterDnsServerArrayOutputWithContext(ctx context.Context) ClusterDnsServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDnsServerArrayOutput)
}

type ClusterDnsServerOutput struct{ *pulumi.OutputState }

func (ClusterDnsServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterDnsServer)(nil)).Elem()
}

func (o ClusterDnsServerOutput) ToClusterDnsServerOutput() ClusterDnsServerOutput {
	return o
}

func (o ClusterDnsServerOutput) ToClusterDnsServerOutputWithContext(ctx context.Context) ClusterDnsServerOutput {
	return o
}

// DNS Server domain. Empty indicates all domain.
func (o ClusterDnsServerOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterDnsServer) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// List of DNS Server IP address, pattern: "ip[:port]".
func (o ClusterDnsServerOutput) Servers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterDnsServer) []string { return v.Servers }).(pulumi.StringArrayOutput)
}

type ClusterDnsServerArrayOutput struct{ *pulumi.OutputState }

func (ClusterDnsServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterDnsServer)(nil)).Elem()
}

func (o ClusterDnsServerArrayOutput) ToClusterDnsServerArrayOutput() ClusterDnsServerArrayOutput {
	return o
}

func (o ClusterDnsServerArrayOutput) ToClusterDnsServerArrayOutputWithContext(ctx context.Context) ClusterDnsServerArrayOutput {
	return o
}

func (o ClusterDnsServerArrayOutput) Index(i pulumi.IntInput) ClusterDnsServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterDnsServer {
		return vs[0].([]ClusterDnsServer)[vs[1].(int)]
	}).(ClusterDnsServerOutput)
}

type ClusterInternalLb struct {
	// Indicates weather the internal access LB enabled.
	Enabled bool `pulumi:"enabled"`
	// ID of subnet which related to Internal LB.
	SubnetId *string `pulumi:"subnetId"`
}

// ClusterInternalLbInput is an input type that accepts ClusterInternalLbArgs and ClusterInternalLbOutput values.
// You can construct a concrete instance of `ClusterInternalLbInput` via:
//
//	ClusterInternalLbArgs{...}
type ClusterInternalLbInput interface {
	pulumi.Input

	ToClusterInternalLbOutput() ClusterInternalLbOutput
	ToClusterInternalLbOutputWithContext(context.Context) ClusterInternalLbOutput
}

type ClusterInternalLbArgs struct {
	// Indicates weather the internal access LB enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// ID of subnet which related to Internal LB.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (ClusterInternalLbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterInternalLb)(nil)).Elem()
}

func (i ClusterInternalLbArgs) ToClusterInternalLbOutput() ClusterInternalLbOutput {
	return i.ToClusterInternalLbOutputWithContext(context.Background())
}

func (i ClusterInternalLbArgs) ToClusterInternalLbOutputWithContext(ctx context.Context) ClusterInternalLbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterInternalLbOutput)
}

func (i ClusterInternalLbArgs) ToClusterInternalLbPtrOutput() ClusterInternalLbPtrOutput {
	return i.ToClusterInternalLbPtrOutputWithContext(context.Background())
}

func (i ClusterInternalLbArgs) ToClusterInternalLbPtrOutputWithContext(ctx context.Context) ClusterInternalLbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterInternalLbOutput).ToClusterInternalLbPtrOutputWithContext(ctx)
}

// ClusterInternalLbPtrInput is an input type that accepts ClusterInternalLbArgs, ClusterInternalLbPtr and ClusterInternalLbPtrOutput values.
// You can construct a concrete instance of `ClusterInternalLbPtrInput` via:
//
//	        ClusterInternalLbArgs{...}
//
//	or:
//
//	        nil
type ClusterInternalLbPtrInput interface {
	pulumi.Input

	ToClusterInternalLbPtrOutput() ClusterInternalLbPtrOutput
	ToClusterInternalLbPtrOutputWithContext(context.Context) ClusterInternalLbPtrOutput
}

type clusterInternalLbPtrType ClusterInternalLbArgs

func ClusterInternalLbPtr(v *ClusterInternalLbArgs) ClusterInternalLbPtrInput {
	return (*clusterInternalLbPtrType)(v)
}

func (*clusterInternalLbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterInternalLb)(nil)).Elem()
}

func (i *clusterInternalLbPtrType) ToClusterInternalLbPtrOutput() ClusterInternalLbPtrOutput {
	return i.ToClusterInternalLbPtrOutputWithContext(context.Background())
}

func (i *clusterInternalLbPtrType) ToClusterInternalLbPtrOutputWithContext(ctx context.Context) ClusterInternalLbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterInternalLbPtrOutput)
}

type ClusterInternalLbOutput struct{ *pulumi.OutputState }

func (ClusterInternalLbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterInternalLb)(nil)).Elem()
}

func (o ClusterInternalLbOutput) ToClusterInternalLbOutput() ClusterInternalLbOutput {
	return o
}

func (o ClusterInternalLbOutput) ToClusterInternalLbOutputWithContext(ctx context.Context) ClusterInternalLbOutput {
	return o
}

func (o ClusterInternalLbOutput) ToClusterInternalLbPtrOutput() ClusterInternalLbPtrOutput {
	return o.ToClusterInternalLbPtrOutputWithContext(context.Background())
}

func (o ClusterInternalLbOutput) ToClusterInternalLbPtrOutputWithContext(ctx context.Context) ClusterInternalLbPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterInternalLb) *ClusterInternalLb {
		return &v
	}).(ClusterInternalLbPtrOutput)
}

// Indicates weather the internal access LB enabled.
func (o ClusterInternalLbOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterInternalLb) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// ID of subnet which related to Internal LB.
func (o ClusterInternalLbOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterInternalLb) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type ClusterInternalLbPtrOutput struct{ *pulumi.OutputState }

func (ClusterInternalLbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterInternalLb)(nil)).Elem()
}

func (o ClusterInternalLbPtrOutput) ToClusterInternalLbPtrOutput() ClusterInternalLbPtrOutput {
	return o
}

func (o ClusterInternalLbPtrOutput) ToClusterInternalLbPtrOutputWithContext(ctx context.Context) ClusterInternalLbPtrOutput {
	return o
}

func (o ClusterInternalLbPtrOutput) Elem() ClusterInternalLbOutput {
	return o.ApplyT(func(v *ClusterInternalLb) ClusterInternalLb {
		if v != nil {
			return *v
		}
		var ret ClusterInternalLb
		return ret
	}).(ClusterInternalLbOutput)
}

// Indicates weather the internal access LB enabled.
func (o ClusterInternalLbPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterInternalLb) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// ID of subnet which related to Internal LB.
func (o ClusterInternalLbPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterInternalLb) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

type ClusterPublicLb struct {
	// List of CIDRs which allowed to access.
	AllowFromCidrs []string `pulumi:"allowFromCidrs"`
	// Indicates weather the public access LB enabled.
	Enabled bool `pulumi:"enabled"`
	// Extra param text json.
	ExtraParam    *string `pulumi:"extraParam"`
	SecurityGroup *string `pulumi:"securityGroup"`
	// List of security allow IP or CIDRs, default deny all.
	SecurityPolicies []string `pulumi:"securityPolicies"`
}

// ClusterPublicLbInput is an input type that accepts ClusterPublicLbArgs and ClusterPublicLbOutput values.
// You can construct a concrete instance of `ClusterPublicLbInput` via:
//
//	ClusterPublicLbArgs{...}
type ClusterPublicLbInput interface {
	pulumi.Input

	ToClusterPublicLbOutput() ClusterPublicLbOutput
	ToClusterPublicLbOutputWithContext(context.Context) ClusterPublicLbOutput
}

type ClusterPublicLbArgs struct {
	// List of CIDRs which allowed to access.
	AllowFromCidrs pulumi.StringArrayInput `pulumi:"allowFromCidrs"`
	// Indicates weather the public access LB enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Extra param text json.
	ExtraParam    pulumi.StringPtrInput `pulumi:"extraParam"`
	SecurityGroup pulumi.StringPtrInput `pulumi:"securityGroup"`
	// List of security allow IP or CIDRs, default deny all.
	SecurityPolicies pulumi.StringArrayInput `pulumi:"securityPolicies"`
}

func (ClusterPublicLbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPublicLb)(nil)).Elem()
}

func (i ClusterPublicLbArgs) ToClusterPublicLbOutput() ClusterPublicLbOutput {
	return i.ToClusterPublicLbOutputWithContext(context.Background())
}

func (i ClusterPublicLbArgs) ToClusterPublicLbOutputWithContext(ctx context.Context) ClusterPublicLbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPublicLbOutput)
}

func (i ClusterPublicLbArgs) ToClusterPublicLbPtrOutput() ClusterPublicLbPtrOutput {
	return i.ToClusterPublicLbPtrOutputWithContext(context.Background())
}

func (i ClusterPublicLbArgs) ToClusterPublicLbPtrOutputWithContext(ctx context.Context) ClusterPublicLbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPublicLbOutput).ToClusterPublicLbPtrOutputWithContext(ctx)
}

// ClusterPublicLbPtrInput is an input type that accepts ClusterPublicLbArgs, ClusterPublicLbPtr and ClusterPublicLbPtrOutput values.
// You can construct a concrete instance of `ClusterPublicLbPtrInput` via:
//
//	        ClusterPublicLbArgs{...}
//
//	or:
//
//	        nil
type ClusterPublicLbPtrInput interface {
	pulumi.Input

	ToClusterPublicLbPtrOutput() ClusterPublicLbPtrOutput
	ToClusterPublicLbPtrOutputWithContext(context.Context) ClusterPublicLbPtrOutput
}

type clusterPublicLbPtrType ClusterPublicLbArgs

func ClusterPublicLbPtr(v *ClusterPublicLbArgs) ClusterPublicLbPtrInput {
	return (*clusterPublicLbPtrType)(v)
}

func (*clusterPublicLbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPublicLb)(nil)).Elem()
}

func (i *clusterPublicLbPtrType) ToClusterPublicLbPtrOutput() ClusterPublicLbPtrOutput {
	return i.ToClusterPublicLbPtrOutputWithContext(context.Background())
}

func (i *clusterPublicLbPtrType) ToClusterPublicLbPtrOutputWithContext(ctx context.Context) ClusterPublicLbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPublicLbPtrOutput)
}

type ClusterPublicLbOutput struct{ *pulumi.OutputState }

func (ClusterPublicLbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPublicLb)(nil)).Elem()
}

func (o ClusterPublicLbOutput) ToClusterPublicLbOutput() ClusterPublicLbOutput {
	return o
}

func (o ClusterPublicLbOutput) ToClusterPublicLbOutputWithContext(ctx context.Context) ClusterPublicLbOutput {
	return o
}

func (o ClusterPublicLbOutput) ToClusterPublicLbPtrOutput() ClusterPublicLbPtrOutput {
	return o.ToClusterPublicLbPtrOutputWithContext(context.Background())
}

func (o ClusterPublicLbOutput) ToClusterPublicLbPtrOutputWithContext(ctx context.Context) ClusterPublicLbPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterPublicLb) *ClusterPublicLb {
		return &v
	}).(ClusterPublicLbPtrOutput)
}

// List of CIDRs which allowed to access.
func (o ClusterPublicLbOutput) AllowFromCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterPublicLb) []string { return v.AllowFromCidrs }).(pulumi.StringArrayOutput)
}

// Indicates weather the public access LB enabled.
func (o ClusterPublicLbOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterPublicLb) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Extra param text json.
func (o ClusterPublicLbOutput) ExtraParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPublicLb) *string { return v.ExtraParam }).(pulumi.StringPtrOutput)
}

func (o ClusterPublicLbOutput) SecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPublicLb) *string { return v.SecurityGroup }).(pulumi.StringPtrOutput)
}

// List of security allow IP or CIDRs, default deny all.
func (o ClusterPublicLbOutput) SecurityPolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterPublicLb) []string { return v.SecurityPolicies }).(pulumi.StringArrayOutput)
}

type ClusterPublicLbPtrOutput struct{ *pulumi.OutputState }

func (ClusterPublicLbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPublicLb)(nil)).Elem()
}

func (o ClusterPublicLbPtrOutput) ToClusterPublicLbPtrOutput() ClusterPublicLbPtrOutput {
	return o
}

func (o ClusterPublicLbPtrOutput) ToClusterPublicLbPtrOutputWithContext(ctx context.Context) ClusterPublicLbPtrOutput {
	return o
}

func (o ClusterPublicLbPtrOutput) Elem() ClusterPublicLbOutput {
	return o.ApplyT(func(v *ClusterPublicLb) ClusterPublicLb {
		if v != nil {
			return *v
		}
		var ret ClusterPublicLb
		return ret
	}).(ClusterPublicLbOutput)
}

// List of CIDRs which allowed to access.
func (o ClusterPublicLbPtrOutput) AllowFromCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterPublicLb) []string {
		if v == nil {
			return nil
		}
		return v.AllowFromCidrs
	}).(pulumi.StringArrayOutput)
}

// Indicates weather the public access LB enabled.
func (o ClusterPublicLbPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterPublicLb) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Extra param text json.
func (o ClusterPublicLbPtrOutput) ExtraParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPublicLb) *string {
		if v == nil {
			return nil
		}
		return v.ExtraParam
	}).(pulumi.StringPtrOutput)
}

func (o ClusterPublicLbPtrOutput) SecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPublicLb) *string {
		if v == nil {
			return nil
		}
		return v.SecurityGroup
	}).(pulumi.StringPtrOutput)
}

// List of security allow IP or CIDRs, default deny all.
func (o ClusterPublicLbPtrOutput) SecurityPolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterPublicLb) []string {
		if v == nil {
			return nil
		}
		return v.SecurityPolicies
	}).(pulumi.StringArrayOutput)
}

type ContainerInstanceCbsVolume struct {
	// ID of CBS.
	DiskId string `pulumi:"diskId"`
	// Name of CBS volume.
	Name string `pulumi:"name"`
}

// ContainerInstanceCbsVolumeInput is an input type that accepts ContainerInstanceCbsVolumeArgs and ContainerInstanceCbsVolumeOutput values.
// You can construct a concrete instance of `ContainerInstanceCbsVolumeInput` via:
//
//	ContainerInstanceCbsVolumeArgs{...}
type ContainerInstanceCbsVolumeInput interface {
	pulumi.Input

	ToContainerInstanceCbsVolumeOutput() ContainerInstanceCbsVolumeOutput
	ToContainerInstanceCbsVolumeOutputWithContext(context.Context) ContainerInstanceCbsVolumeOutput
}

type ContainerInstanceCbsVolumeArgs struct {
	// ID of CBS.
	DiskId pulumi.StringInput `pulumi:"diskId"`
	// Name of CBS volume.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ContainerInstanceCbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceCbsVolume)(nil)).Elem()
}

func (i ContainerInstanceCbsVolumeArgs) ToContainerInstanceCbsVolumeOutput() ContainerInstanceCbsVolumeOutput {
	return i.ToContainerInstanceCbsVolumeOutputWithContext(context.Background())
}

func (i ContainerInstanceCbsVolumeArgs) ToContainerInstanceCbsVolumeOutputWithContext(ctx context.Context) ContainerInstanceCbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceCbsVolumeOutput)
}

// ContainerInstanceCbsVolumeArrayInput is an input type that accepts ContainerInstanceCbsVolumeArray and ContainerInstanceCbsVolumeArrayOutput values.
// You can construct a concrete instance of `ContainerInstanceCbsVolumeArrayInput` via:
//
//	ContainerInstanceCbsVolumeArray{ ContainerInstanceCbsVolumeArgs{...} }
type ContainerInstanceCbsVolumeArrayInput interface {
	pulumi.Input

	ToContainerInstanceCbsVolumeArrayOutput() ContainerInstanceCbsVolumeArrayOutput
	ToContainerInstanceCbsVolumeArrayOutputWithContext(context.Context) ContainerInstanceCbsVolumeArrayOutput
}

type ContainerInstanceCbsVolumeArray []ContainerInstanceCbsVolumeInput

func (ContainerInstanceCbsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceCbsVolume)(nil)).Elem()
}

func (i ContainerInstanceCbsVolumeArray) ToContainerInstanceCbsVolumeArrayOutput() ContainerInstanceCbsVolumeArrayOutput {
	return i.ToContainerInstanceCbsVolumeArrayOutputWithContext(context.Background())
}

func (i ContainerInstanceCbsVolumeArray) ToContainerInstanceCbsVolumeArrayOutputWithContext(ctx context.Context) ContainerInstanceCbsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceCbsVolumeArrayOutput)
}

type ContainerInstanceCbsVolumeOutput struct{ *pulumi.OutputState }

func (ContainerInstanceCbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceCbsVolume)(nil)).Elem()
}

func (o ContainerInstanceCbsVolumeOutput) ToContainerInstanceCbsVolumeOutput() ContainerInstanceCbsVolumeOutput {
	return o
}

func (o ContainerInstanceCbsVolumeOutput) ToContainerInstanceCbsVolumeOutputWithContext(ctx context.Context) ContainerInstanceCbsVolumeOutput {
	return o
}

// ID of CBS.
func (o ContainerInstanceCbsVolumeOutput) DiskId() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceCbsVolume) string { return v.DiskId }).(pulumi.StringOutput)
}

// Name of CBS volume.
func (o ContainerInstanceCbsVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceCbsVolume) string { return v.Name }).(pulumi.StringOutput)
}

type ContainerInstanceCbsVolumeArrayOutput struct{ *pulumi.OutputState }

func (ContainerInstanceCbsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceCbsVolume)(nil)).Elem()
}

func (o ContainerInstanceCbsVolumeArrayOutput) ToContainerInstanceCbsVolumeArrayOutput() ContainerInstanceCbsVolumeArrayOutput {
	return o
}

func (o ContainerInstanceCbsVolumeArrayOutput) ToContainerInstanceCbsVolumeArrayOutputWithContext(ctx context.Context) ContainerInstanceCbsVolumeArrayOutput {
	return o
}

func (o ContainerInstanceCbsVolumeArrayOutput) Index(i pulumi.IntInput) ContainerInstanceCbsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerInstanceCbsVolume {
		return vs[0].([]ContainerInstanceCbsVolume)[vs[1].(int)]
	}).(ContainerInstanceCbsVolumeOutput)
}

type ContainerInstanceContainer struct {
	// Container launch argument list.
	Args []string `pulumi:"args"`
	// Container launch command list.
	Commands []string `pulumi:"commands"`
	// Number of cpu core of container.
	Cpu *float64 `pulumi:"cpu"`
	// Map of environment variables of container OS.
	EnvVars map[string]interface{} `pulumi:"envVars"`
	// Image of Container.
	Image string `pulumi:"image"`
	// Configuration block of LivenessProbe.
	LivenessProbe *ContainerInstanceContainerLivenessProbe `pulumi:"livenessProbe"`
	// Memory size of container.
	Memory *float64 `pulumi:"memory"`
	// Name of Container.
	Name string `pulumi:"name"`
	// Configuration block of ReadinessProbe.
	ReadinessProbe *ContainerInstanceContainerReadinessProbe `pulumi:"readinessProbe"`
	// List of volume mount informations.
	VolumeMounts []ContainerInstanceContainerVolumeMount `pulumi:"volumeMounts"`
	// Container working directory.
	WorkingDir *string `pulumi:"workingDir"`
}

// ContainerInstanceContainerInput is an input type that accepts ContainerInstanceContainerArgs and ContainerInstanceContainerOutput values.
// You can construct a concrete instance of `ContainerInstanceContainerInput` via:
//
//	ContainerInstanceContainerArgs{...}
type ContainerInstanceContainerInput interface {
	pulumi.Input

	ToContainerInstanceContainerOutput() ContainerInstanceContainerOutput
	ToContainerInstanceContainerOutputWithContext(context.Context) ContainerInstanceContainerOutput
}

type ContainerInstanceContainerArgs struct {
	// Container launch argument list.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Container launch command list.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
	// Number of cpu core of container.
	Cpu pulumi.Float64PtrInput `pulumi:"cpu"`
	// Map of environment variables of container OS.
	EnvVars pulumi.MapInput `pulumi:"envVars"`
	// Image of Container.
	Image pulumi.StringInput `pulumi:"image"`
	// Configuration block of LivenessProbe.
	LivenessProbe ContainerInstanceContainerLivenessProbePtrInput `pulumi:"livenessProbe"`
	// Memory size of container.
	Memory pulumi.Float64PtrInput `pulumi:"memory"`
	// Name of Container.
	Name pulumi.StringInput `pulumi:"name"`
	// Configuration block of ReadinessProbe.
	ReadinessProbe ContainerInstanceContainerReadinessProbePtrInput `pulumi:"readinessProbe"`
	// List of volume mount informations.
	VolumeMounts ContainerInstanceContainerVolumeMountArrayInput `pulumi:"volumeMounts"`
	// Container working directory.
	WorkingDir pulumi.StringPtrInput `pulumi:"workingDir"`
}

func (ContainerInstanceContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceContainer)(nil)).Elem()
}

func (i ContainerInstanceContainerArgs) ToContainerInstanceContainerOutput() ContainerInstanceContainerOutput {
	return i.ToContainerInstanceContainerOutputWithContext(context.Background())
}

func (i ContainerInstanceContainerArgs) ToContainerInstanceContainerOutputWithContext(ctx context.Context) ContainerInstanceContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerOutput)
}

// ContainerInstanceContainerArrayInput is an input type that accepts ContainerInstanceContainerArray and ContainerInstanceContainerArrayOutput values.
// You can construct a concrete instance of `ContainerInstanceContainerArrayInput` via:
//
//	ContainerInstanceContainerArray{ ContainerInstanceContainerArgs{...} }
type ContainerInstanceContainerArrayInput interface {
	pulumi.Input

	ToContainerInstanceContainerArrayOutput() ContainerInstanceContainerArrayOutput
	ToContainerInstanceContainerArrayOutputWithContext(context.Context) ContainerInstanceContainerArrayOutput
}

type ContainerInstanceContainerArray []ContainerInstanceContainerInput

func (ContainerInstanceContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceContainer)(nil)).Elem()
}

func (i ContainerInstanceContainerArray) ToContainerInstanceContainerArrayOutput() ContainerInstanceContainerArrayOutput {
	return i.ToContainerInstanceContainerArrayOutputWithContext(context.Background())
}

func (i ContainerInstanceContainerArray) ToContainerInstanceContainerArrayOutputWithContext(ctx context.Context) ContainerInstanceContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerArrayOutput)
}

type ContainerInstanceContainerOutput struct{ *pulumi.OutputState }

func (ContainerInstanceContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceContainer)(nil)).Elem()
}

func (o ContainerInstanceContainerOutput) ToContainerInstanceContainerOutput() ContainerInstanceContainerOutput {
	return o
}

func (o ContainerInstanceContainerOutput) ToContainerInstanceContainerOutputWithContext(ctx context.Context) ContainerInstanceContainerOutput {
	return o
}

// Container launch argument list.
func (o ContainerInstanceContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Container launch command list.
func (o ContainerInstanceContainerOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

// Number of cpu core of container.
func (o ContainerInstanceContainerOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// Map of environment variables of container OS.
func (o ContainerInstanceContainerOutput) EnvVars() pulumi.MapOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) map[string]interface{} { return v.EnvVars }).(pulumi.MapOutput)
}

// Image of Container.
func (o ContainerInstanceContainerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) string { return v.Image }).(pulumi.StringOutput)
}

// Configuration block of LivenessProbe.
func (o ContainerInstanceContainerOutput) LivenessProbe() ContainerInstanceContainerLivenessProbePtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) *ContainerInstanceContainerLivenessProbe { return v.LivenessProbe }).(ContainerInstanceContainerLivenessProbePtrOutput)
}

// Memory size of container.
func (o ContainerInstanceContainerOutput) Memory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) *float64 { return v.Memory }).(pulumi.Float64PtrOutput)
}

// Name of Container.
func (o ContainerInstanceContainerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) string { return v.Name }).(pulumi.StringOutput)
}

// Configuration block of ReadinessProbe.
func (o ContainerInstanceContainerOutput) ReadinessProbe() ContainerInstanceContainerReadinessProbePtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) *ContainerInstanceContainerReadinessProbe { return v.ReadinessProbe }).(ContainerInstanceContainerReadinessProbePtrOutput)
}

// List of volume mount informations.
func (o ContainerInstanceContainerOutput) VolumeMounts() ContainerInstanceContainerVolumeMountArrayOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) []ContainerInstanceContainerVolumeMount { return v.VolumeMounts }).(ContainerInstanceContainerVolumeMountArrayOutput)
}

// Container working directory.
func (o ContainerInstanceContainerOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) *string { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type ContainerInstanceContainerArrayOutput struct{ *pulumi.OutputState }

func (ContainerInstanceContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceContainer)(nil)).Elem()
}

func (o ContainerInstanceContainerArrayOutput) ToContainerInstanceContainerArrayOutput() ContainerInstanceContainerArrayOutput {
	return o
}

func (o ContainerInstanceContainerArrayOutput) ToContainerInstanceContainerArrayOutputWithContext(ctx context.Context) ContainerInstanceContainerArrayOutput {
	return o
}

func (o ContainerInstanceContainerArrayOutput) Index(i pulumi.IntInput) ContainerInstanceContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerInstanceContainer {
		return vs[0].([]ContainerInstanceContainer)[vs[1].(int)]
	}).(ContainerInstanceContainerOutput)
}

type ContainerInstanceContainerLivenessProbe struct {
	// List of execution commands.
	ExecCommands []string `pulumi:"execCommands"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// HttpGet detection path.
	HttpGetPath *string `pulumi:"httpGetPath"`
	// HttpGet detection port.
	HttpGetPort *int `pulumi:"httpGetPort"`
	// HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
	HttpGetScheme *string `pulumi:"httpGetScheme"`
	// Number of seconds after the container has started before probes are initiated.
	InitDelaySeconds *int `pulumi:"initDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// TCP Socket detection port.
	TcpSocketPort *int `pulumi:"tcpSocketPort"`
	// Number of seconds after which the probe times out.
	// Defaults to 1 second. Minimum value is `1`.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ContainerInstanceContainerLivenessProbeInput is an input type that accepts ContainerInstanceContainerLivenessProbeArgs and ContainerInstanceContainerLivenessProbeOutput values.
// You can construct a concrete instance of `ContainerInstanceContainerLivenessProbeInput` via:
//
//	ContainerInstanceContainerLivenessProbeArgs{...}
type ContainerInstanceContainerLivenessProbeInput interface {
	pulumi.Input

	ToContainerInstanceContainerLivenessProbeOutput() ContainerInstanceContainerLivenessProbeOutput
	ToContainerInstanceContainerLivenessProbeOutputWithContext(context.Context) ContainerInstanceContainerLivenessProbeOutput
}

type ContainerInstanceContainerLivenessProbeArgs struct {
	// List of execution commands.
	ExecCommands pulumi.StringArrayInput `pulumi:"execCommands"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// HttpGet detection path.
	HttpGetPath pulumi.StringPtrInput `pulumi:"httpGetPath"`
	// HttpGet detection port.
	HttpGetPort pulumi.IntPtrInput `pulumi:"httpGetPort"`
	// HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
	HttpGetScheme pulumi.StringPtrInput `pulumi:"httpGetScheme"`
	// Number of seconds after the container has started before probes are initiated.
	InitDelaySeconds pulumi.IntPtrInput `pulumi:"initDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// TCP Socket detection port.
	TcpSocketPort pulumi.IntPtrInput `pulumi:"tcpSocketPort"`
	// Number of seconds after which the probe times out.
	// Defaults to 1 second. Minimum value is `1`.
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ContainerInstanceContainerLivenessProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceContainerLivenessProbe)(nil)).Elem()
}

func (i ContainerInstanceContainerLivenessProbeArgs) ToContainerInstanceContainerLivenessProbeOutput() ContainerInstanceContainerLivenessProbeOutput {
	return i.ToContainerInstanceContainerLivenessProbeOutputWithContext(context.Background())
}

func (i ContainerInstanceContainerLivenessProbeArgs) ToContainerInstanceContainerLivenessProbeOutputWithContext(ctx context.Context) ContainerInstanceContainerLivenessProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerLivenessProbeOutput)
}

func (i ContainerInstanceContainerLivenessProbeArgs) ToContainerInstanceContainerLivenessProbePtrOutput() ContainerInstanceContainerLivenessProbePtrOutput {
	return i.ToContainerInstanceContainerLivenessProbePtrOutputWithContext(context.Background())
}

func (i ContainerInstanceContainerLivenessProbeArgs) ToContainerInstanceContainerLivenessProbePtrOutputWithContext(ctx context.Context) ContainerInstanceContainerLivenessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerLivenessProbeOutput).ToContainerInstanceContainerLivenessProbePtrOutputWithContext(ctx)
}

// ContainerInstanceContainerLivenessProbePtrInput is an input type that accepts ContainerInstanceContainerLivenessProbeArgs, ContainerInstanceContainerLivenessProbePtr and ContainerInstanceContainerLivenessProbePtrOutput values.
// You can construct a concrete instance of `ContainerInstanceContainerLivenessProbePtrInput` via:
//
//	        ContainerInstanceContainerLivenessProbeArgs{...}
//
//	or:
//
//	        nil
type ContainerInstanceContainerLivenessProbePtrInput interface {
	pulumi.Input

	ToContainerInstanceContainerLivenessProbePtrOutput() ContainerInstanceContainerLivenessProbePtrOutput
	ToContainerInstanceContainerLivenessProbePtrOutputWithContext(context.Context) ContainerInstanceContainerLivenessProbePtrOutput
}

type containerInstanceContainerLivenessProbePtrType ContainerInstanceContainerLivenessProbeArgs

func ContainerInstanceContainerLivenessProbePtr(v *ContainerInstanceContainerLivenessProbeArgs) ContainerInstanceContainerLivenessProbePtrInput {
	return (*containerInstanceContainerLivenessProbePtrType)(v)
}

func (*containerInstanceContainerLivenessProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerInstanceContainerLivenessProbe)(nil)).Elem()
}

func (i *containerInstanceContainerLivenessProbePtrType) ToContainerInstanceContainerLivenessProbePtrOutput() ContainerInstanceContainerLivenessProbePtrOutput {
	return i.ToContainerInstanceContainerLivenessProbePtrOutputWithContext(context.Background())
}

func (i *containerInstanceContainerLivenessProbePtrType) ToContainerInstanceContainerLivenessProbePtrOutputWithContext(ctx context.Context) ContainerInstanceContainerLivenessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerLivenessProbePtrOutput)
}

type ContainerInstanceContainerLivenessProbeOutput struct{ *pulumi.OutputState }

func (ContainerInstanceContainerLivenessProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceContainerLivenessProbe)(nil)).Elem()
}

func (o ContainerInstanceContainerLivenessProbeOutput) ToContainerInstanceContainerLivenessProbeOutput() ContainerInstanceContainerLivenessProbeOutput {
	return o
}

func (o ContainerInstanceContainerLivenessProbeOutput) ToContainerInstanceContainerLivenessProbeOutputWithContext(ctx context.Context) ContainerInstanceContainerLivenessProbeOutput {
	return o
}

func (o ContainerInstanceContainerLivenessProbeOutput) ToContainerInstanceContainerLivenessProbePtrOutput() ContainerInstanceContainerLivenessProbePtrOutput {
	return o.ToContainerInstanceContainerLivenessProbePtrOutputWithContext(context.Background())
}

func (o ContainerInstanceContainerLivenessProbeOutput) ToContainerInstanceContainerLivenessProbePtrOutputWithContext(ctx context.Context) ContainerInstanceContainerLivenessProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerInstanceContainerLivenessProbe) *ContainerInstanceContainerLivenessProbe {
		return &v
	}).(ContainerInstanceContainerLivenessProbePtrOutput)
}

// List of execution commands.
func (o ContainerInstanceContainerLivenessProbeOutput) ExecCommands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) []string { return v.ExecCommands }).(pulumi.StringArrayOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
func (o ContainerInstanceContainerLivenessProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// HttpGet detection path.
func (o ContainerInstanceContainerLivenessProbeOutput) HttpGetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *string { return v.HttpGetPath }).(pulumi.StringPtrOutput)
}

// HttpGet detection port.
func (o ContainerInstanceContainerLivenessProbeOutput) HttpGetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *int { return v.HttpGetPort }).(pulumi.IntPtrOutput)
}

// HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
func (o ContainerInstanceContainerLivenessProbeOutput) HttpGetScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *string { return v.HttpGetScheme }).(pulumi.StringPtrOutput)
}

// Number of seconds after the container has started before probes are initiated.
func (o ContainerInstanceContainerLivenessProbeOutput) InitDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *int { return v.InitDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
func (o ContainerInstanceContainerLivenessProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
func (o ContainerInstanceContainerLivenessProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// TCP Socket detection port.
func (o ContainerInstanceContainerLivenessProbeOutput) TcpSocketPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *int { return v.TcpSocketPort }).(pulumi.IntPtrOutput)
}

// Number of seconds after which the probe times out.
// Defaults to 1 second. Minimum value is `1`.
func (o ContainerInstanceContainerLivenessProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ContainerInstanceContainerLivenessProbePtrOutput struct{ *pulumi.OutputState }

func (ContainerInstanceContainerLivenessProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerInstanceContainerLivenessProbe)(nil)).Elem()
}

func (o ContainerInstanceContainerLivenessProbePtrOutput) ToContainerInstanceContainerLivenessProbePtrOutput() ContainerInstanceContainerLivenessProbePtrOutput {
	return o
}

func (o ContainerInstanceContainerLivenessProbePtrOutput) ToContainerInstanceContainerLivenessProbePtrOutputWithContext(ctx context.Context) ContainerInstanceContainerLivenessProbePtrOutput {
	return o
}

func (o ContainerInstanceContainerLivenessProbePtrOutput) Elem() ContainerInstanceContainerLivenessProbeOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) ContainerInstanceContainerLivenessProbe {
		if v != nil {
			return *v
		}
		var ret ContainerInstanceContainerLivenessProbe
		return ret
	}).(ContainerInstanceContainerLivenessProbeOutput)
}

// List of execution commands.
func (o ContainerInstanceContainerLivenessProbePtrOutput) ExecCommands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) []string {
		if v == nil {
			return nil
		}
		return v.ExecCommands
	}).(pulumi.StringArrayOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
func (o ContainerInstanceContainerLivenessProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// HttpGet detection path.
func (o ContainerInstanceContainerLivenessProbePtrOutput) HttpGetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *string {
		if v == nil {
			return nil
		}
		return v.HttpGetPath
	}).(pulumi.StringPtrOutput)
}

// HttpGet detection port.
func (o ContainerInstanceContainerLivenessProbePtrOutput) HttpGetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.HttpGetPort
	}).(pulumi.IntPtrOutput)
}

// HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
func (o ContainerInstanceContainerLivenessProbePtrOutput) HttpGetScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *string {
		if v == nil {
			return nil
		}
		return v.HttpGetScheme
	}).(pulumi.StringPtrOutput)
}

// Number of seconds after the container has started before probes are initiated.
func (o ContainerInstanceContainerLivenessProbePtrOutput) InitDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.InitDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
func (o ContainerInstanceContainerLivenessProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
func (o ContainerInstanceContainerLivenessProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// TCP Socket detection port.
func (o ContainerInstanceContainerLivenessProbePtrOutput) TcpSocketPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.TcpSocketPort
	}).(pulumi.IntPtrOutput)
}

// Number of seconds after which the probe times out.
// Defaults to 1 second. Minimum value is `1`.
func (o ContainerInstanceContainerLivenessProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type ContainerInstanceContainerReadinessProbe struct {
	// List of execution commands.
	ExecCommands []string `pulumi:"execCommands"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// HttpGet detection path.
	HttpGetPath *string `pulumi:"httpGetPath"`
	// HttpGet detection port.
	HttpGetPort *int `pulumi:"httpGetPort"`
	// HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
	HttpGetScheme *string `pulumi:"httpGetScheme"`
	// Number of seconds after the container has started before probes are initiated.
	InitDelaySeconds *int `pulumi:"initDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// TCP Socket detection port.
	TcpSocketPort *int `pulumi:"tcpSocketPort"`
	// Number of seconds after which the probe times out.
	// Defaults to 1 second. Minimum value is `1`.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ContainerInstanceContainerReadinessProbeInput is an input type that accepts ContainerInstanceContainerReadinessProbeArgs and ContainerInstanceContainerReadinessProbeOutput values.
// You can construct a concrete instance of `ContainerInstanceContainerReadinessProbeInput` via:
//
//	ContainerInstanceContainerReadinessProbeArgs{...}
type ContainerInstanceContainerReadinessProbeInput interface {
	pulumi.Input

	ToContainerInstanceContainerReadinessProbeOutput() ContainerInstanceContainerReadinessProbeOutput
	ToContainerInstanceContainerReadinessProbeOutputWithContext(context.Context) ContainerInstanceContainerReadinessProbeOutput
}

type ContainerInstanceContainerReadinessProbeArgs struct {
	// List of execution commands.
	ExecCommands pulumi.StringArrayInput `pulumi:"execCommands"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// HttpGet detection path.
	HttpGetPath pulumi.StringPtrInput `pulumi:"httpGetPath"`
	// HttpGet detection port.
	HttpGetPort pulumi.IntPtrInput `pulumi:"httpGetPort"`
	// HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
	HttpGetScheme pulumi.StringPtrInput `pulumi:"httpGetScheme"`
	// Number of seconds after the container has started before probes are initiated.
	InitDelaySeconds pulumi.IntPtrInput `pulumi:"initDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// TCP Socket detection port.
	TcpSocketPort pulumi.IntPtrInput `pulumi:"tcpSocketPort"`
	// Number of seconds after which the probe times out.
	// Defaults to 1 second. Minimum value is `1`.
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ContainerInstanceContainerReadinessProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceContainerReadinessProbe)(nil)).Elem()
}

func (i ContainerInstanceContainerReadinessProbeArgs) ToContainerInstanceContainerReadinessProbeOutput() ContainerInstanceContainerReadinessProbeOutput {
	return i.ToContainerInstanceContainerReadinessProbeOutputWithContext(context.Background())
}

func (i ContainerInstanceContainerReadinessProbeArgs) ToContainerInstanceContainerReadinessProbeOutputWithContext(ctx context.Context) ContainerInstanceContainerReadinessProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerReadinessProbeOutput)
}

func (i ContainerInstanceContainerReadinessProbeArgs) ToContainerInstanceContainerReadinessProbePtrOutput() ContainerInstanceContainerReadinessProbePtrOutput {
	return i.ToContainerInstanceContainerReadinessProbePtrOutputWithContext(context.Background())
}

func (i ContainerInstanceContainerReadinessProbeArgs) ToContainerInstanceContainerReadinessProbePtrOutputWithContext(ctx context.Context) ContainerInstanceContainerReadinessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerReadinessProbeOutput).ToContainerInstanceContainerReadinessProbePtrOutputWithContext(ctx)
}

// ContainerInstanceContainerReadinessProbePtrInput is an input type that accepts ContainerInstanceContainerReadinessProbeArgs, ContainerInstanceContainerReadinessProbePtr and ContainerInstanceContainerReadinessProbePtrOutput values.
// You can construct a concrete instance of `ContainerInstanceContainerReadinessProbePtrInput` via:
//
//	        ContainerInstanceContainerReadinessProbeArgs{...}
//
//	or:
//
//	        nil
type ContainerInstanceContainerReadinessProbePtrInput interface {
	pulumi.Input

	ToContainerInstanceContainerReadinessProbePtrOutput() ContainerInstanceContainerReadinessProbePtrOutput
	ToContainerInstanceContainerReadinessProbePtrOutputWithContext(context.Context) ContainerInstanceContainerReadinessProbePtrOutput
}

type containerInstanceContainerReadinessProbePtrType ContainerInstanceContainerReadinessProbeArgs

func ContainerInstanceContainerReadinessProbePtr(v *ContainerInstanceContainerReadinessProbeArgs) ContainerInstanceContainerReadinessProbePtrInput {
	return (*containerInstanceContainerReadinessProbePtrType)(v)
}

func (*containerInstanceContainerReadinessProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerInstanceContainerReadinessProbe)(nil)).Elem()
}

func (i *containerInstanceContainerReadinessProbePtrType) ToContainerInstanceContainerReadinessProbePtrOutput() ContainerInstanceContainerReadinessProbePtrOutput {
	return i.ToContainerInstanceContainerReadinessProbePtrOutputWithContext(context.Background())
}

func (i *containerInstanceContainerReadinessProbePtrType) ToContainerInstanceContainerReadinessProbePtrOutputWithContext(ctx context.Context) ContainerInstanceContainerReadinessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerReadinessProbePtrOutput)
}

type ContainerInstanceContainerReadinessProbeOutput struct{ *pulumi.OutputState }

func (ContainerInstanceContainerReadinessProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceContainerReadinessProbe)(nil)).Elem()
}

func (o ContainerInstanceContainerReadinessProbeOutput) ToContainerInstanceContainerReadinessProbeOutput() ContainerInstanceContainerReadinessProbeOutput {
	return o
}

func (o ContainerInstanceContainerReadinessProbeOutput) ToContainerInstanceContainerReadinessProbeOutputWithContext(ctx context.Context) ContainerInstanceContainerReadinessProbeOutput {
	return o
}

func (o ContainerInstanceContainerReadinessProbeOutput) ToContainerInstanceContainerReadinessProbePtrOutput() ContainerInstanceContainerReadinessProbePtrOutput {
	return o.ToContainerInstanceContainerReadinessProbePtrOutputWithContext(context.Background())
}

func (o ContainerInstanceContainerReadinessProbeOutput) ToContainerInstanceContainerReadinessProbePtrOutputWithContext(ctx context.Context) ContainerInstanceContainerReadinessProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerInstanceContainerReadinessProbe) *ContainerInstanceContainerReadinessProbe {
		return &v
	}).(ContainerInstanceContainerReadinessProbePtrOutput)
}

// List of execution commands.
func (o ContainerInstanceContainerReadinessProbeOutput) ExecCommands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) []string { return v.ExecCommands }).(pulumi.StringArrayOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
func (o ContainerInstanceContainerReadinessProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// HttpGet detection path.
func (o ContainerInstanceContainerReadinessProbeOutput) HttpGetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *string { return v.HttpGetPath }).(pulumi.StringPtrOutput)
}

// HttpGet detection port.
func (o ContainerInstanceContainerReadinessProbeOutput) HttpGetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *int { return v.HttpGetPort }).(pulumi.IntPtrOutput)
}

// HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
func (o ContainerInstanceContainerReadinessProbeOutput) HttpGetScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *string { return v.HttpGetScheme }).(pulumi.StringPtrOutput)
}

// Number of seconds after the container has started before probes are initiated.
func (o ContainerInstanceContainerReadinessProbeOutput) InitDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *int { return v.InitDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
func (o ContainerInstanceContainerReadinessProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
func (o ContainerInstanceContainerReadinessProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// TCP Socket detection port.
func (o ContainerInstanceContainerReadinessProbeOutput) TcpSocketPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *int { return v.TcpSocketPort }).(pulumi.IntPtrOutput)
}

// Number of seconds after which the probe times out.
// Defaults to 1 second. Minimum value is `1`.
func (o ContainerInstanceContainerReadinessProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ContainerInstanceContainerReadinessProbePtrOutput struct{ *pulumi.OutputState }

func (ContainerInstanceContainerReadinessProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerInstanceContainerReadinessProbe)(nil)).Elem()
}

func (o ContainerInstanceContainerReadinessProbePtrOutput) ToContainerInstanceContainerReadinessProbePtrOutput() ContainerInstanceContainerReadinessProbePtrOutput {
	return o
}

func (o ContainerInstanceContainerReadinessProbePtrOutput) ToContainerInstanceContainerReadinessProbePtrOutputWithContext(ctx context.Context) ContainerInstanceContainerReadinessProbePtrOutput {
	return o
}

func (o ContainerInstanceContainerReadinessProbePtrOutput) Elem() ContainerInstanceContainerReadinessProbeOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) ContainerInstanceContainerReadinessProbe {
		if v != nil {
			return *v
		}
		var ret ContainerInstanceContainerReadinessProbe
		return ret
	}).(ContainerInstanceContainerReadinessProbeOutput)
}

// List of execution commands.
func (o ContainerInstanceContainerReadinessProbePtrOutput) ExecCommands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) []string {
		if v == nil {
			return nil
		}
		return v.ExecCommands
	}).(pulumi.StringArrayOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
func (o ContainerInstanceContainerReadinessProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// HttpGet detection path.
func (o ContainerInstanceContainerReadinessProbePtrOutput) HttpGetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *string {
		if v == nil {
			return nil
		}
		return v.HttpGetPath
	}).(pulumi.StringPtrOutput)
}

// HttpGet detection port.
func (o ContainerInstanceContainerReadinessProbePtrOutput) HttpGetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.HttpGetPort
	}).(pulumi.IntPtrOutput)
}

// HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
func (o ContainerInstanceContainerReadinessProbePtrOutput) HttpGetScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *string {
		if v == nil {
			return nil
		}
		return v.HttpGetScheme
	}).(pulumi.StringPtrOutput)
}

// Number of seconds after the container has started before probes are initiated.
func (o ContainerInstanceContainerReadinessProbePtrOutput) InitDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.InitDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
func (o ContainerInstanceContainerReadinessProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
func (o ContainerInstanceContainerReadinessProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// TCP Socket detection port.
func (o ContainerInstanceContainerReadinessProbePtrOutput) TcpSocketPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.TcpSocketPort
	}).(pulumi.IntPtrOutput)
}

// Number of seconds after which the probe times out.
// Defaults to 1 second. Minimum value is `1`.
func (o ContainerInstanceContainerReadinessProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type ContainerInstanceContainerVolumeMount struct {
	// Volume mount propagation.
	MountPropagation *string `pulumi:"mountPropagation"`
	// Volume name.
	Name string `pulumi:"name"`
	// Volume mount path.
	Path string `pulumi:"path"`
	// Whether the volume is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
	// Volume mount sub-path.
	SubPath *string `pulumi:"subPath"`
	// Volume mount sub-path expression.
	SubPathExpr *string `pulumi:"subPathExpr"`
}

// ContainerInstanceContainerVolumeMountInput is an input type that accepts ContainerInstanceContainerVolumeMountArgs and ContainerInstanceContainerVolumeMountOutput values.
// You can construct a concrete instance of `ContainerInstanceContainerVolumeMountInput` via:
//
//	ContainerInstanceContainerVolumeMountArgs{...}
type ContainerInstanceContainerVolumeMountInput interface {
	pulumi.Input

	ToContainerInstanceContainerVolumeMountOutput() ContainerInstanceContainerVolumeMountOutput
	ToContainerInstanceContainerVolumeMountOutputWithContext(context.Context) ContainerInstanceContainerVolumeMountOutput
}

type ContainerInstanceContainerVolumeMountArgs struct {
	// Volume mount propagation.
	MountPropagation pulumi.StringPtrInput `pulumi:"mountPropagation"`
	// Volume name.
	Name pulumi.StringInput `pulumi:"name"`
	// Volume mount path.
	Path pulumi.StringInput `pulumi:"path"`
	// Whether the volume is read-only.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Volume mount sub-path.
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
	// Volume mount sub-path expression.
	SubPathExpr pulumi.StringPtrInput `pulumi:"subPathExpr"`
}

func (ContainerInstanceContainerVolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceContainerVolumeMount)(nil)).Elem()
}

func (i ContainerInstanceContainerVolumeMountArgs) ToContainerInstanceContainerVolumeMountOutput() ContainerInstanceContainerVolumeMountOutput {
	return i.ToContainerInstanceContainerVolumeMountOutputWithContext(context.Background())
}

func (i ContainerInstanceContainerVolumeMountArgs) ToContainerInstanceContainerVolumeMountOutputWithContext(ctx context.Context) ContainerInstanceContainerVolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerVolumeMountOutput)
}

// ContainerInstanceContainerVolumeMountArrayInput is an input type that accepts ContainerInstanceContainerVolumeMountArray and ContainerInstanceContainerVolumeMountArrayOutput values.
// You can construct a concrete instance of `ContainerInstanceContainerVolumeMountArrayInput` via:
//
//	ContainerInstanceContainerVolumeMountArray{ ContainerInstanceContainerVolumeMountArgs{...} }
type ContainerInstanceContainerVolumeMountArrayInput interface {
	pulumi.Input

	ToContainerInstanceContainerVolumeMountArrayOutput() ContainerInstanceContainerVolumeMountArrayOutput
	ToContainerInstanceContainerVolumeMountArrayOutputWithContext(context.Context) ContainerInstanceContainerVolumeMountArrayOutput
}

type ContainerInstanceContainerVolumeMountArray []ContainerInstanceContainerVolumeMountInput

func (ContainerInstanceContainerVolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceContainerVolumeMount)(nil)).Elem()
}

func (i ContainerInstanceContainerVolumeMountArray) ToContainerInstanceContainerVolumeMountArrayOutput() ContainerInstanceContainerVolumeMountArrayOutput {
	return i.ToContainerInstanceContainerVolumeMountArrayOutputWithContext(context.Background())
}

func (i ContainerInstanceContainerVolumeMountArray) ToContainerInstanceContainerVolumeMountArrayOutputWithContext(ctx context.Context) ContainerInstanceContainerVolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerVolumeMountArrayOutput)
}

type ContainerInstanceContainerVolumeMountOutput struct{ *pulumi.OutputState }

func (ContainerInstanceContainerVolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceContainerVolumeMount)(nil)).Elem()
}

func (o ContainerInstanceContainerVolumeMountOutput) ToContainerInstanceContainerVolumeMountOutput() ContainerInstanceContainerVolumeMountOutput {
	return o
}

func (o ContainerInstanceContainerVolumeMountOutput) ToContainerInstanceContainerVolumeMountOutputWithContext(ctx context.Context) ContainerInstanceContainerVolumeMountOutput {
	return o
}

// Volume mount propagation.
func (o ContainerInstanceContainerVolumeMountOutput) MountPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerVolumeMount) *string { return v.MountPropagation }).(pulumi.StringPtrOutput)
}

// Volume name.
func (o ContainerInstanceContainerVolumeMountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceContainerVolumeMount) string { return v.Name }).(pulumi.StringOutput)
}

// Volume mount path.
func (o ContainerInstanceContainerVolumeMountOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceContainerVolumeMount) string { return v.Path }).(pulumi.StringOutput)
}

// Whether the volume is read-only.
func (o ContainerInstanceContainerVolumeMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerVolumeMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Volume mount sub-path.
func (o ContainerInstanceContainerVolumeMountOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerVolumeMount) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

// Volume mount sub-path expression.
func (o ContainerInstanceContainerVolumeMountOutput) SubPathExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerVolumeMount) *string { return v.SubPathExpr }).(pulumi.StringPtrOutput)
}

type ContainerInstanceContainerVolumeMountArrayOutput struct{ *pulumi.OutputState }

func (ContainerInstanceContainerVolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceContainerVolumeMount)(nil)).Elem()
}

func (o ContainerInstanceContainerVolumeMountArrayOutput) ToContainerInstanceContainerVolumeMountArrayOutput() ContainerInstanceContainerVolumeMountArrayOutput {
	return o
}

func (o ContainerInstanceContainerVolumeMountArrayOutput) ToContainerInstanceContainerVolumeMountArrayOutputWithContext(ctx context.Context) ContainerInstanceContainerVolumeMountArrayOutput {
	return o
}

func (o ContainerInstanceContainerVolumeMountArrayOutput) Index(i pulumi.IntInput) ContainerInstanceContainerVolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerInstanceContainerVolumeMount {
		return vs[0].([]ContainerInstanceContainerVolumeMount)[vs[1].(int)]
	}).(ContainerInstanceContainerVolumeMountOutput)
}

type ContainerInstanceImageRegistryCredential struct {
	// Name of credential.
	Name *string `pulumi:"name"`
	// Password.
	Password *string `pulumi:"password"`
	// Address of image registry.
	Server *string `pulumi:"server"`
	// Username.
	Username *string `pulumi:"username"`
}

// ContainerInstanceImageRegistryCredentialInput is an input type that accepts ContainerInstanceImageRegistryCredentialArgs and ContainerInstanceImageRegistryCredentialOutput values.
// You can construct a concrete instance of `ContainerInstanceImageRegistryCredentialInput` via:
//
//	ContainerInstanceImageRegistryCredentialArgs{...}
type ContainerInstanceImageRegistryCredentialInput interface {
	pulumi.Input

	ToContainerInstanceImageRegistryCredentialOutput() ContainerInstanceImageRegistryCredentialOutput
	ToContainerInstanceImageRegistryCredentialOutputWithContext(context.Context) ContainerInstanceImageRegistryCredentialOutput
}

type ContainerInstanceImageRegistryCredentialArgs struct {
	// Name of credential.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Password.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Address of image registry.
	Server pulumi.StringPtrInput `pulumi:"server"`
	// Username.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ContainerInstanceImageRegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceImageRegistryCredential)(nil)).Elem()
}

func (i ContainerInstanceImageRegistryCredentialArgs) ToContainerInstanceImageRegistryCredentialOutput() ContainerInstanceImageRegistryCredentialOutput {
	return i.ToContainerInstanceImageRegistryCredentialOutputWithContext(context.Background())
}

func (i ContainerInstanceImageRegistryCredentialArgs) ToContainerInstanceImageRegistryCredentialOutputWithContext(ctx context.Context) ContainerInstanceImageRegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceImageRegistryCredentialOutput)
}

// ContainerInstanceImageRegistryCredentialArrayInput is an input type that accepts ContainerInstanceImageRegistryCredentialArray and ContainerInstanceImageRegistryCredentialArrayOutput values.
// You can construct a concrete instance of `ContainerInstanceImageRegistryCredentialArrayInput` via:
//
//	ContainerInstanceImageRegistryCredentialArray{ ContainerInstanceImageRegistryCredentialArgs{...} }
type ContainerInstanceImageRegistryCredentialArrayInput interface {
	pulumi.Input

	ToContainerInstanceImageRegistryCredentialArrayOutput() ContainerInstanceImageRegistryCredentialArrayOutput
	ToContainerInstanceImageRegistryCredentialArrayOutputWithContext(context.Context) ContainerInstanceImageRegistryCredentialArrayOutput
}

type ContainerInstanceImageRegistryCredentialArray []ContainerInstanceImageRegistryCredentialInput

func (ContainerInstanceImageRegistryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceImageRegistryCredential)(nil)).Elem()
}

func (i ContainerInstanceImageRegistryCredentialArray) ToContainerInstanceImageRegistryCredentialArrayOutput() ContainerInstanceImageRegistryCredentialArrayOutput {
	return i.ToContainerInstanceImageRegistryCredentialArrayOutputWithContext(context.Background())
}

func (i ContainerInstanceImageRegistryCredentialArray) ToContainerInstanceImageRegistryCredentialArrayOutputWithContext(ctx context.Context) ContainerInstanceImageRegistryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceImageRegistryCredentialArrayOutput)
}

type ContainerInstanceImageRegistryCredentialOutput struct{ *pulumi.OutputState }

func (ContainerInstanceImageRegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceImageRegistryCredential)(nil)).Elem()
}

func (o ContainerInstanceImageRegistryCredentialOutput) ToContainerInstanceImageRegistryCredentialOutput() ContainerInstanceImageRegistryCredentialOutput {
	return o
}

func (o ContainerInstanceImageRegistryCredentialOutput) ToContainerInstanceImageRegistryCredentialOutputWithContext(ctx context.Context) ContainerInstanceImageRegistryCredentialOutput {
	return o
}

// Name of credential.
func (o ContainerInstanceImageRegistryCredentialOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceImageRegistryCredential) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Password.
func (o ContainerInstanceImageRegistryCredentialOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceImageRegistryCredential) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Address of image registry.
func (o ContainerInstanceImageRegistryCredentialOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceImageRegistryCredential) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// Username.
func (o ContainerInstanceImageRegistryCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceImageRegistryCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ContainerInstanceImageRegistryCredentialArrayOutput struct{ *pulumi.OutputState }

func (ContainerInstanceImageRegistryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceImageRegistryCredential)(nil)).Elem()
}

func (o ContainerInstanceImageRegistryCredentialArrayOutput) ToContainerInstanceImageRegistryCredentialArrayOutput() ContainerInstanceImageRegistryCredentialArrayOutput {
	return o
}

func (o ContainerInstanceImageRegistryCredentialArrayOutput) ToContainerInstanceImageRegistryCredentialArrayOutputWithContext(ctx context.Context) ContainerInstanceImageRegistryCredentialArrayOutput {
	return o
}

func (o ContainerInstanceImageRegistryCredentialArrayOutput) Index(i pulumi.IntInput) ContainerInstanceImageRegistryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerInstanceImageRegistryCredential {
		return vs[0].([]ContainerInstanceImageRegistryCredential)[vs[1].(int)]
	}).(ContainerInstanceImageRegistryCredentialOutput)
}

type ContainerInstanceInitContainer struct {
	// Container launch argument list.
	Args []string `pulumi:"args"`
	// Container launch command list.
	Commands []string `pulumi:"commands"`
	// Number of cpu core of container.
	Cpu *float64 `pulumi:"cpu"`
	// Map of environment variables of container OS.
	EnvVars map[string]interface{} `pulumi:"envVars"`
	// Image of Container.
	Image string `pulumi:"image"`
	// Memory size of container.
	Memory *float64 `pulumi:"memory"`
	// Name of Container.
	Name string `pulumi:"name"`
	// List of volume mount informations.
	VolumeMounts []ContainerInstanceInitContainerVolumeMount `pulumi:"volumeMounts"`
	// Container working directory.
	WorkingDir *string `pulumi:"workingDir"`
}

// ContainerInstanceInitContainerInput is an input type that accepts ContainerInstanceInitContainerArgs and ContainerInstanceInitContainerOutput values.
// You can construct a concrete instance of `ContainerInstanceInitContainerInput` via:
//
//	ContainerInstanceInitContainerArgs{...}
type ContainerInstanceInitContainerInput interface {
	pulumi.Input

	ToContainerInstanceInitContainerOutput() ContainerInstanceInitContainerOutput
	ToContainerInstanceInitContainerOutputWithContext(context.Context) ContainerInstanceInitContainerOutput
}

type ContainerInstanceInitContainerArgs struct {
	// Container launch argument list.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Container launch command list.
	Commands pulumi.StringArrayInput `pulumi:"commands"`
	// Number of cpu core of container.
	Cpu pulumi.Float64PtrInput `pulumi:"cpu"`
	// Map of environment variables of container OS.
	EnvVars pulumi.MapInput `pulumi:"envVars"`
	// Image of Container.
	Image pulumi.StringInput `pulumi:"image"`
	// Memory size of container.
	Memory pulumi.Float64PtrInput `pulumi:"memory"`
	// Name of Container.
	Name pulumi.StringInput `pulumi:"name"`
	// List of volume mount informations.
	VolumeMounts ContainerInstanceInitContainerVolumeMountArrayInput `pulumi:"volumeMounts"`
	// Container working directory.
	WorkingDir pulumi.StringPtrInput `pulumi:"workingDir"`
}

func (ContainerInstanceInitContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceInitContainer)(nil)).Elem()
}

func (i ContainerInstanceInitContainerArgs) ToContainerInstanceInitContainerOutput() ContainerInstanceInitContainerOutput {
	return i.ToContainerInstanceInitContainerOutputWithContext(context.Background())
}

func (i ContainerInstanceInitContainerArgs) ToContainerInstanceInitContainerOutputWithContext(ctx context.Context) ContainerInstanceInitContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceInitContainerOutput)
}

// ContainerInstanceInitContainerArrayInput is an input type that accepts ContainerInstanceInitContainerArray and ContainerInstanceInitContainerArrayOutput values.
// You can construct a concrete instance of `ContainerInstanceInitContainerArrayInput` via:
//
//	ContainerInstanceInitContainerArray{ ContainerInstanceInitContainerArgs{...} }
type ContainerInstanceInitContainerArrayInput interface {
	pulumi.Input

	ToContainerInstanceInitContainerArrayOutput() ContainerInstanceInitContainerArrayOutput
	ToContainerInstanceInitContainerArrayOutputWithContext(context.Context) ContainerInstanceInitContainerArrayOutput
}

type ContainerInstanceInitContainerArray []ContainerInstanceInitContainerInput

func (ContainerInstanceInitContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceInitContainer)(nil)).Elem()
}

func (i ContainerInstanceInitContainerArray) ToContainerInstanceInitContainerArrayOutput() ContainerInstanceInitContainerArrayOutput {
	return i.ToContainerInstanceInitContainerArrayOutputWithContext(context.Background())
}

func (i ContainerInstanceInitContainerArray) ToContainerInstanceInitContainerArrayOutputWithContext(ctx context.Context) ContainerInstanceInitContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceInitContainerArrayOutput)
}

type ContainerInstanceInitContainerOutput struct{ *pulumi.OutputState }

func (ContainerInstanceInitContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceInitContainer)(nil)).Elem()
}

func (o ContainerInstanceInitContainerOutput) ToContainerInstanceInitContainerOutput() ContainerInstanceInitContainerOutput {
	return o
}

func (o ContainerInstanceInitContainerOutput) ToContainerInstanceInitContainerOutputWithContext(ctx context.Context) ContainerInstanceInitContainerOutput {
	return o
}

// Container launch argument list.
func (o ContainerInstanceInitContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Container launch command list.
func (o ContainerInstanceInitContainerOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

// Number of cpu core of container.
func (o ContainerInstanceInitContainerOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// Map of environment variables of container OS.
func (o ContainerInstanceInitContainerOutput) EnvVars() pulumi.MapOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) map[string]interface{} { return v.EnvVars }).(pulumi.MapOutput)
}

// Image of Container.
func (o ContainerInstanceInitContainerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) string { return v.Image }).(pulumi.StringOutput)
}

// Memory size of container.
func (o ContainerInstanceInitContainerOutput) Memory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) *float64 { return v.Memory }).(pulumi.Float64PtrOutput)
}

// Name of Container.
func (o ContainerInstanceInitContainerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) string { return v.Name }).(pulumi.StringOutput)
}

// List of volume mount informations.
func (o ContainerInstanceInitContainerOutput) VolumeMounts() ContainerInstanceInitContainerVolumeMountArrayOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) []ContainerInstanceInitContainerVolumeMount {
		return v.VolumeMounts
	}).(ContainerInstanceInitContainerVolumeMountArrayOutput)
}

// Container working directory.
func (o ContainerInstanceInitContainerOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) *string { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type ContainerInstanceInitContainerArrayOutput struct{ *pulumi.OutputState }

func (ContainerInstanceInitContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceInitContainer)(nil)).Elem()
}

func (o ContainerInstanceInitContainerArrayOutput) ToContainerInstanceInitContainerArrayOutput() ContainerInstanceInitContainerArrayOutput {
	return o
}

func (o ContainerInstanceInitContainerArrayOutput) ToContainerInstanceInitContainerArrayOutputWithContext(ctx context.Context) ContainerInstanceInitContainerArrayOutput {
	return o
}

func (o ContainerInstanceInitContainerArrayOutput) Index(i pulumi.IntInput) ContainerInstanceInitContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerInstanceInitContainer {
		return vs[0].([]ContainerInstanceInitContainer)[vs[1].(int)]
	}).(ContainerInstanceInitContainerOutput)
}

type ContainerInstanceInitContainerVolumeMount struct {
	// Volume mount propagation.
	MountPropagation *string `pulumi:"mountPropagation"`
	// Volume name.
	Name string `pulumi:"name"`
	// Volume mount path.
	Path string `pulumi:"path"`
	// Whether the volume is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
	// Volume mount sub-path.
	SubPath *string `pulumi:"subPath"`
	// Volume mount sub-path expression.
	SubPathExpr *string `pulumi:"subPathExpr"`
}

// ContainerInstanceInitContainerVolumeMountInput is an input type that accepts ContainerInstanceInitContainerVolumeMountArgs and ContainerInstanceInitContainerVolumeMountOutput values.
// You can construct a concrete instance of `ContainerInstanceInitContainerVolumeMountInput` via:
//
//	ContainerInstanceInitContainerVolumeMountArgs{...}
type ContainerInstanceInitContainerVolumeMountInput interface {
	pulumi.Input

	ToContainerInstanceInitContainerVolumeMountOutput() ContainerInstanceInitContainerVolumeMountOutput
	ToContainerInstanceInitContainerVolumeMountOutputWithContext(context.Context) ContainerInstanceInitContainerVolumeMountOutput
}

type ContainerInstanceInitContainerVolumeMountArgs struct {
	// Volume mount propagation.
	MountPropagation pulumi.StringPtrInput `pulumi:"mountPropagation"`
	// Volume name.
	Name pulumi.StringInput `pulumi:"name"`
	// Volume mount path.
	Path pulumi.StringInput `pulumi:"path"`
	// Whether the volume is read-only.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Volume mount sub-path.
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
	// Volume mount sub-path expression.
	SubPathExpr pulumi.StringPtrInput `pulumi:"subPathExpr"`
}

func (ContainerInstanceInitContainerVolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceInitContainerVolumeMount)(nil)).Elem()
}

func (i ContainerInstanceInitContainerVolumeMountArgs) ToContainerInstanceInitContainerVolumeMountOutput() ContainerInstanceInitContainerVolumeMountOutput {
	return i.ToContainerInstanceInitContainerVolumeMountOutputWithContext(context.Background())
}

func (i ContainerInstanceInitContainerVolumeMountArgs) ToContainerInstanceInitContainerVolumeMountOutputWithContext(ctx context.Context) ContainerInstanceInitContainerVolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceInitContainerVolumeMountOutput)
}

// ContainerInstanceInitContainerVolumeMountArrayInput is an input type that accepts ContainerInstanceInitContainerVolumeMountArray and ContainerInstanceInitContainerVolumeMountArrayOutput values.
// You can construct a concrete instance of `ContainerInstanceInitContainerVolumeMountArrayInput` via:
//
//	ContainerInstanceInitContainerVolumeMountArray{ ContainerInstanceInitContainerVolumeMountArgs{...} }
type ContainerInstanceInitContainerVolumeMountArrayInput interface {
	pulumi.Input

	ToContainerInstanceInitContainerVolumeMountArrayOutput() ContainerInstanceInitContainerVolumeMountArrayOutput
	ToContainerInstanceInitContainerVolumeMountArrayOutputWithContext(context.Context) ContainerInstanceInitContainerVolumeMountArrayOutput
}

type ContainerInstanceInitContainerVolumeMountArray []ContainerInstanceInitContainerVolumeMountInput

func (ContainerInstanceInitContainerVolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceInitContainerVolumeMount)(nil)).Elem()
}

func (i ContainerInstanceInitContainerVolumeMountArray) ToContainerInstanceInitContainerVolumeMountArrayOutput() ContainerInstanceInitContainerVolumeMountArrayOutput {
	return i.ToContainerInstanceInitContainerVolumeMountArrayOutputWithContext(context.Background())
}

func (i ContainerInstanceInitContainerVolumeMountArray) ToContainerInstanceInitContainerVolumeMountArrayOutputWithContext(ctx context.Context) ContainerInstanceInitContainerVolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceInitContainerVolumeMountArrayOutput)
}

type ContainerInstanceInitContainerVolumeMountOutput struct{ *pulumi.OutputState }

func (ContainerInstanceInitContainerVolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceInitContainerVolumeMount)(nil)).Elem()
}

func (o ContainerInstanceInitContainerVolumeMountOutput) ToContainerInstanceInitContainerVolumeMountOutput() ContainerInstanceInitContainerVolumeMountOutput {
	return o
}

func (o ContainerInstanceInitContainerVolumeMountOutput) ToContainerInstanceInitContainerVolumeMountOutputWithContext(ctx context.Context) ContainerInstanceInitContainerVolumeMountOutput {
	return o
}

// Volume mount propagation.
func (o ContainerInstanceInitContainerVolumeMountOutput) MountPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainerVolumeMount) *string { return v.MountPropagation }).(pulumi.StringPtrOutput)
}

// Volume name.
func (o ContainerInstanceInitContainerVolumeMountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainerVolumeMount) string { return v.Name }).(pulumi.StringOutput)
}

// Volume mount path.
func (o ContainerInstanceInitContainerVolumeMountOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainerVolumeMount) string { return v.Path }).(pulumi.StringOutput)
}

// Whether the volume is read-only.
func (o ContainerInstanceInitContainerVolumeMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainerVolumeMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Volume mount sub-path.
func (o ContainerInstanceInitContainerVolumeMountOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainerVolumeMount) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

// Volume mount sub-path expression.
func (o ContainerInstanceInitContainerVolumeMountOutput) SubPathExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainerVolumeMount) *string { return v.SubPathExpr }).(pulumi.StringPtrOutput)
}

type ContainerInstanceInitContainerVolumeMountArrayOutput struct{ *pulumi.OutputState }

func (ContainerInstanceInitContainerVolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceInitContainerVolumeMount)(nil)).Elem()
}

func (o ContainerInstanceInitContainerVolumeMountArrayOutput) ToContainerInstanceInitContainerVolumeMountArrayOutput() ContainerInstanceInitContainerVolumeMountArrayOutput {
	return o
}

func (o ContainerInstanceInitContainerVolumeMountArrayOutput) ToContainerInstanceInitContainerVolumeMountArrayOutputWithContext(ctx context.Context) ContainerInstanceInitContainerVolumeMountArrayOutput {
	return o
}

func (o ContainerInstanceInitContainerVolumeMountArrayOutput) Index(i pulumi.IntInput) ContainerInstanceInitContainerVolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerInstanceInitContainerVolumeMount {
		return vs[0].([]ContainerInstanceInitContainerVolumeMount)[vs[1].(int)]
	}).(ContainerInstanceInitContainerVolumeMountOutput)
}

type ContainerInstanceNfsVolume struct {
	// Name of NFS volume.
	Name string `pulumi:"name"`
	// NFS volume path.
	Path string `pulumi:"path"`
	// Indicates whether the volume is read only. Default is `false`.
	ReadOnly *bool `pulumi:"readOnly"`
	// NFS server address.
	Server string `pulumi:"server"`
}

// ContainerInstanceNfsVolumeInput is an input type that accepts ContainerInstanceNfsVolumeArgs and ContainerInstanceNfsVolumeOutput values.
// You can construct a concrete instance of `ContainerInstanceNfsVolumeInput` via:
//
//	ContainerInstanceNfsVolumeArgs{...}
type ContainerInstanceNfsVolumeInput interface {
	pulumi.Input

	ToContainerInstanceNfsVolumeOutput() ContainerInstanceNfsVolumeOutput
	ToContainerInstanceNfsVolumeOutputWithContext(context.Context) ContainerInstanceNfsVolumeOutput
}

type ContainerInstanceNfsVolumeArgs struct {
	// Name of NFS volume.
	Name pulumi.StringInput `pulumi:"name"`
	// NFS volume path.
	Path pulumi.StringInput `pulumi:"path"`
	// Indicates whether the volume is read only. Default is `false`.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// NFS server address.
	Server pulumi.StringInput `pulumi:"server"`
}

func (ContainerInstanceNfsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceNfsVolume)(nil)).Elem()
}

func (i ContainerInstanceNfsVolumeArgs) ToContainerInstanceNfsVolumeOutput() ContainerInstanceNfsVolumeOutput {
	return i.ToContainerInstanceNfsVolumeOutputWithContext(context.Background())
}

func (i ContainerInstanceNfsVolumeArgs) ToContainerInstanceNfsVolumeOutputWithContext(ctx context.Context) ContainerInstanceNfsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceNfsVolumeOutput)
}

// ContainerInstanceNfsVolumeArrayInput is an input type that accepts ContainerInstanceNfsVolumeArray and ContainerInstanceNfsVolumeArrayOutput values.
// You can construct a concrete instance of `ContainerInstanceNfsVolumeArrayInput` via:
//
//	ContainerInstanceNfsVolumeArray{ ContainerInstanceNfsVolumeArgs{...} }
type ContainerInstanceNfsVolumeArrayInput interface {
	pulumi.Input

	ToContainerInstanceNfsVolumeArrayOutput() ContainerInstanceNfsVolumeArrayOutput
	ToContainerInstanceNfsVolumeArrayOutputWithContext(context.Context) ContainerInstanceNfsVolumeArrayOutput
}

type ContainerInstanceNfsVolumeArray []ContainerInstanceNfsVolumeInput

func (ContainerInstanceNfsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceNfsVolume)(nil)).Elem()
}

func (i ContainerInstanceNfsVolumeArray) ToContainerInstanceNfsVolumeArrayOutput() ContainerInstanceNfsVolumeArrayOutput {
	return i.ToContainerInstanceNfsVolumeArrayOutputWithContext(context.Background())
}

func (i ContainerInstanceNfsVolumeArray) ToContainerInstanceNfsVolumeArrayOutputWithContext(ctx context.Context) ContainerInstanceNfsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceNfsVolumeArrayOutput)
}

type ContainerInstanceNfsVolumeOutput struct{ *pulumi.OutputState }

func (ContainerInstanceNfsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceNfsVolume)(nil)).Elem()
}

func (o ContainerInstanceNfsVolumeOutput) ToContainerInstanceNfsVolumeOutput() ContainerInstanceNfsVolumeOutput {
	return o
}

func (o ContainerInstanceNfsVolumeOutput) ToContainerInstanceNfsVolumeOutputWithContext(ctx context.Context) ContainerInstanceNfsVolumeOutput {
	return o
}

// Name of NFS volume.
func (o ContainerInstanceNfsVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceNfsVolume) string { return v.Name }).(pulumi.StringOutput)
}

// NFS volume path.
func (o ContainerInstanceNfsVolumeOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceNfsVolume) string { return v.Path }).(pulumi.StringOutput)
}

// Indicates whether the volume is read only. Default is `false`.
func (o ContainerInstanceNfsVolumeOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerInstanceNfsVolume) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// NFS server address.
func (o ContainerInstanceNfsVolumeOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceNfsVolume) string { return v.Server }).(pulumi.StringOutput)
}

type ContainerInstanceNfsVolumeArrayOutput struct{ *pulumi.OutputState }

func (ContainerInstanceNfsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceNfsVolume)(nil)).Elem()
}

func (o ContainerInstanceNfsVolumeArrayOutput) ToContainerInstanceNfsVolumeArrayOutput() ContainerInstanceNfsVolumeArrayOutput {
	return o
}

func (o ContainerInstanceNfsVolumeArrayOutput) ToContainerInstanceNfsVolumeArrayOutputWithContext(ctx context.Context) ContainerInstanceNfsVolumeArrayOutput {
	return o
}

func (o ContainerInstanceNfsVolumeArrayOutput) Index(i pulumi.IntInput) ContainerInstanceNfsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerInstanceNfsVolume {
		return vs[0].([]ContainerInstanceNfsVolume)[vs[1].(int)]
	}).(ContainerInstanceNfsVolumeOutput)
}

type GetClusterCredentialAddress struct {
	// IP Address.
	Ip string `pulumi:"ip"`
	// Port.
	Port string `pulumi:"port"`
	// Type of IP, can be `advertise`, `public`, etc.
	Type string `pulumi:"type"`
}

// GetClusterCredentialAddressInput is an input type that accepts GetClusterCredentialAddressArgs and GetClusterCredentialAddressOutput values.
// You can construct a concrete instance of `GetClusterCredentialAddressInput` via:
//
//	GetClusterCredentialAddressArgs{...}
type GetClusterCredentialAddressInput interface {
	pulumi.Input

	ToGetClusterCredentialAddressOutput() GetClusterCredentialAddressOutput
	ToGetClusterCredentialAddressOutputWithContext(context.Context) GetClusterCredentialAddressOutput
}

type GetClusterCredentialAddressArgs struct {
	// IP Address.
	Ip pulumi.StringInput `pulumi:"ip"`
	// Port.
	Port pulumi.StringInput `pulumi:"port"`
	// Type of IP, can be `advertise`, `public`, etc.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetClusterCredentialAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCredentialAddress)(nil)).Elem()
}

func (i GetClusterCredentialAddressArgs) ToGetClusterCredentialAddressOutput() GetClusterCredentialAddressOutput {
	return i.ToGetClusterCredentialAddressOutputWithContext(context.Background())
}

func (i GetClusterCredentialAddressArgs) ToGetClusterCredentialAddressOutputWithContext(ctx context.Context) GetClusterCredentialAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCredentialAddressOutput)
}

// GetClusterCredentialAddressArrayInput is an input type that accepts GetClusterCredentialAddressArray and GetClusterCredentialAddressArrayOutput values.
// You can construct a concrete instance of `GetClusterCredentialAddressArrayInput` via:
//
//	GetClusterCredentialAddressArray{ GetClusterCredentialAddressArgs{...} }
type GetClusterCredentialAddressArrayInput interface {
	pulumi.Input

	ToGetClusterCredentialAddressArrayOutput() GetClusterCredentialAddressArrayOutput
	ToGetClusterCredentialAddressArrayOutputWithContext(context.Context) GetClusterCredentialAddressArrayOutput
}

type GetClusterCredentialAddressArray []GetClusterCredentialAddressInput

func (GetClusterCredentialAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCredentialAddress)(nil)).Elem()
}

func (i GetClusterCredentialAddressArray) ToGetClusterCredentialAddressArrayOutput() GetClusterCredentialAddressArrayOutput {
	return i.ToGetClusterCredentialAddressArrayOutputWithContext(context.Background())
}

func (i GetClusterCredentialAddressArray) ToGetClusterCredentialAddressArrayOutputWithContext(ctx context.Context) GetClusterCredentialAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCredentialAddressArrayOutput)
}

type GetClusterCredentialAddressOutput struct{ *pulumi.OutputState }

func (GetClusterCredentialAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCredentialAddress)(nil)).Elem()
}

func (o GetClusterCredentialAddressOutput) ToGetClusterCredentialAddressOutput() GetClusterCredentialAddressOutput {
	return o
}

func (o GetClusterCredentialAddressOutput) ToGetClusterCredentialAddressOutputWithContext(ctx context.Context) GetClusterCredentialAddressOutput {
	return o
}

// IP Address.
func (o GetClusterCredentialAddressOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCredentialAddress) string { return v.Ip }).(pulumi.StringOutput)
}

// Port.
func (o GetClusterCredentialAddressOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCredentialAddress) string { return v.Port }).(pulumi.StringOutput)
}

// Type of IP, can be `advertise`, `public`, etc.
func (o GetClusterCredentialAddressOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCredentialAddress) string { return v.Type }).(pulumi.StringOutput)
}

type GetClusterCredentialAddressArrayOutput struct{ *pulumi.OutputState }

func (GetClusterCredentialAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCredentialAddress)(nil)).Elem()
}

func (o GetClusterCredentialAddressArrayOutput) ToGetClusterCredentialAddressArrayOutput() GetClusterCredentialAddressArrayOutput {
	return o
}

func (o GetClusterCredentialAddressArrayOutput) ToGetClusterCredentialAddressArrayOutputWithContext(ctx context.Context) GetClusterCredentialAddressArrayOutput {
	return o
}

func (o GetClusterCredentialAddressArrayOutput) Index(i pulumi.IntInput) GetClusterCredentialAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterCredentialAddress {
		return vs[0].([]GetClusterCredentialAddress)[vs[1].(int)]
	}).(GetClusterCredentialAddressOutput)
}

type GetClusterCredentialInternalLb struct {
	// Indicates weather the public access LB enabled.
	Enabled bool `pulumi:"enabled"`
	// ID of subnet which related to Internal LB.
	SubnetId string `pulumi:"subnetId"`
}

// GetClusterCredentialInternalLbInput is an input type that accepts GetClusterCredentialInternalLbArgs and GetClusterCredentialInternalLbOutput values.
// You can construct a concrete instance of `GetClusterCredentialInternalLbInput` via:
//
//	GetClusterCredentialInternalLbArgs{...}
type GetClusterCredentialInternalLbInput interface {
	pulumi.Input

	ToGetClusterCredentialInternalLbOutput() GetClusterCredentialInternalLbOutput
	ToGetClusterCredentialInternalLbOutputWithContext(context.Context) GetClusterCredentialInternalLbOutput
}

type GetClusterCredentialInternalLbArgs struct {
	// Indicates weather the public access LB enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// ID of subnet which related to Internal LB.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (GetClusterCredentialInternalLbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCredentialInternalLb)(nil)).Elem()
}

func (i GetClusterCredentialInternalLbArgs) ToGetClusterCredentialInternalLbOutput() GetClusterCredentialInternalLbOutput {
	return i.ToGetClusterCredentialInternalLbOutputWithContext(context.Background())
}

func (i GetClusterCredentialInternalLbArgs) ToGetClusterCredentialInternalLbOutputWithContext(ctx context.Context) GetClusterCredentialInternalLbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCredentialInternalLbOutput)
}

// GetClusterCredentialInternalLbArrayInput is an input type that accepts GetClusterCredentialInternalLbArray and GetClusterCredentialInternalLbArrayOutput values.
// You can construct a concrete instance of `GetClusterCredentialInternalLbArrayInput` via:
//
//	GetClusterCredentialInternalLbArray{ GetClusterCredentialInternalLbArgs{...} }
type GetClusterCredentialInternalLbArrayInput interface {
	pulumi.Input

	ToGetClusterCredentialInternalLbArrayOutput() GetClusterCredentialInternalLbArrayOutput
	ToGetClusterCredentialInternalLbArrayOutputWithContext(context.Context) GetClusterCredentialInternalLbArrayOutput
}

type GetClusterCredentialInternalLbArray []GetClusterCredentialInternalLbInput

func (GetClusterCredentialInternalLbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCredentialInternalLb)(nil)).Elem()
}

func (i GetClusterCredentialInternalLbArray) ToGetClusterCredentialInternalLbArrayOutput() GetClusterCredentialInternalLbArrayOutput {
	return i.ToGetClusterCredentialInternalLbArrayOutputWithContext(context.Background())
}

func (i GetClusterCredentialInternalLbArray) ToGetClusterCredentialInternalLbArrayOutputWithContext(ctx context.Context) GetClusterCredentialInternalLbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCredentialInternalLbArrayOutput)
}

type GetClusterCredentialInternalLbOutput struct{ *pulumi.OutputState }

func (GetClusterCredentialInternalLbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCredentialInternalLb)(nil)).Elem()
}

func (o GetClusterCredentialInternalLbOutput) ToGetClusterCredentialInternalLbOutput() GetClusterCredentialInternalLbOutput {
	return o
}

func (o GetClusterCredentialInternalLbOutput) ToGetClusterCredentialInternalLbOutputWithContext(ctx context.Context) GetClusterCredentialInternalLbOutput {
	return o
}

// Indicates weather the public access LB enabled.
func (o GetClusterCredentialInternalLbOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClusterCredentialInternalLb) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// ID of subnet which related to Internal LB.
func (o GetClusterCredentialInternalLbOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCredentialInternalLb) string { return v.SubnetId }).(pulumi.StringOutput)
}

type GetClusterCredentialInternalLbArrayOutput struct{ *pulumi.OutputState }

func (GetClusterCredentialInternalLbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCredentialInternalLb)(nil)).Elem()
}

func (o GetClusterCredentialInternalLbArrayOutput) ToGetClusterCredentialInternalLbArrayOutput() GetClusterCredentialInternalLbArrayOutput {
	return o
}

func (o GetClusterCredentialInternalLbArrayOutput) ToGetClusterCredentialInternalLbArrayOutputWithContext(ctx context.Context) GetClusterCredentialInternalLbArrayOutput {
	return o
}

func (o GetClusterCredentialInternalLbArrayOutput) Index(i pulumi.IntInput) GetClusterCredentialInternalLbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterCredentialInternalLb {
		return vs[0].([]GetClusterCredentialInternalLb)[vs[1].(int)]
	}).(GetClusterCredentialInternalLbOutput)
}

type GetClusterCredentialPublicLb struct {
	// List of CIDRs which allowed to access.
	AllowFromCidrs []string `pulumi:"allowFromCidrs"`
	// Indicates weather the public access LB enabled.
	Enabled bool `pulumi:"enabled"`
	// Extra param text json.
	ExtraParam string `pulumi:"extraParam"`
	// Security group.
	SecurityGroup string `pulumi:"securityGroup"`
	// List of security allow IP or CIDRs, default deny all.
	SecurityPolicies []string `pulumi:"securityPolicies"`
}

// GetClusterCredentialPublicLbInput is an input type that accepts GetClusterCredentialPublicLbArgs and GetClusterCredentialPublicLbOutput values.
// You can construct a concrete instance of `GetClusterCredentialPublicLbInput` via:
//
//	GetClusterCredentialPublicLbArgs{...}
type GetClusterCredentialPublicLbInput interface {
	pulumi.Input

	ToGetClusterCredentialPublicLbOutput() GetClusterCredentialPublicLbOutput
	ToGetClusterCredentialPublicLbOutputWithContext(context.Context) GetClusterCredentialPublicLbOutput
}

type GetClusterCredentialPublicLbArgs struct {
	// List of CIDRs which allowed to access.
	AllowFromCidrs pulumi.StringArrayInput `pulumi:"allowFromCidrs"`
	// Indicates weather the public access LB enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Extra param text json.
	ExtraParam pulumi.StringInput `pulumi:"extraParam"`
	// Security group.
	SecurityGroup pulumi.StringInput `pulumi:"securityGroup"`
	// List of security allow IP or CIDRs, default deny all.
	SecurityPolicies pulumi.StringArrayInput `pulumi:"securityPolicies"`
}

func (GetClusterCredentialPublicLbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCredentialPublicLb)(nil)).Elem()
}

func (i GetClusterCredentialPublicLbArgs) ToGetClusterCredentialPublicLbOutput() GetClusterCredentialPublicLbOutput {
	return i.ToGetClusterCredentialPublicLbOutputWithContext(context.Background())
}

func (i GetClusterCredentialPublicLbArgs) ToGetClusterCredentialPublicLbOutputWithContext(ctx context.Context) GetClusterCredentialPublicLbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCredentialPublicLbOutput)
}

// GetClusterCredentialPublicLbArrayInput is an input type that accepts GetClusterCredentialPublicLbArray and GetClusterCredentialPublicLbArrayOutput values.
// You can construct a concrete instance of `GetClusterCredentialPublicLbArrayInput` via:
//
//	GetClusterCredentialPublicLbArray{ GetClusterCredentialPublicLbArgs{...} }
type GetClusterCredentialPublicLbArrayInput interface {
	pulumi.Input

	ToGetClusterCredentialPublicLbArrayOutput() GetClusterCredentialPublicLbArrayOutput
	ToGetClusterCredentialPublicLbArrayOutputWithContext(context.Context) GetClusterCredentialPublicLbArrayOutput
}

type GetClusterCredentialPublicLbArray []GetClusterCredentialPublicLbInput

func (GetClusterCredentialPublicLbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCredentialPublicLb)(nil)).Elem()
}

func (i GetClusterCredentialPublicLbArray) ToGetClusterCredentialPublicLbArrayOutput() GetClusterCredentialPublicLbArrayOutput {
	return i.ToGetClusterCredentialPublicLbArrayOutputWithContext(context.Background())
}

func (i GetClusterCredentialPublicLbArray) ToGetClusterCredentialPublicLbArrayOutputWithContext(ctx context.Context) GetClusterCredentialPublicLbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCredentialPublicLbArrayOutput)
}

type GetClusterCredentialPublicLbOutput struct{ *pulumi.OutputState }

func (GetClusterCredentialPublicLbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCredentialPublicLb)(nil)).Elem()
}

func (o GetClusterCredentialPublicLbOutput) ToGetClusterCredentialPublicLbOutput() GetClusterCredentialPublicLbOutput {
	return o
}

func (o GetClusterCredentialPublicLbOutput) ToGetClusterCredentialPublicLbOutputWithContext(ctx context.Context) GetClusterCredentialPublicLbOutput {
	return o
}

// List of CIDRs which allowed to access.
func (o GetClusterCredentialPublicLbOutput) AllowFromCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClusterCredentialPublicLb) []string { return v.AllowFromCidrs }).(pulumi.StringArrayOutput)
}

// Indicates weather the public access LB enabled.
func (o GetClusterCredentialPublicLbOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClusterCredentialPublicLb) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Extra param text json.
func (o GetClusterCredentialPublicLbOutput) ExtraParam() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCredentialPublicLb) string { return v.ExtraParam }).(pulumi.StringOutput)
}

// Security group.
func (o GetClusterCredentialPublicLbOutput) SecurityGroup() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCredentialPublicLb) string { return v.SecurityGroup }).(pulumi.StringOutput)
}

// List of security allow IP or CIDRs, default deny all.
func (o GetClusterCredentialPublicLbOutput) SecurityPolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClusterCredentialPublicLb) []string { return v.SecurityPolicies }).(pulumi.StringArrayOutput)
}

type GetClusterCredentialPublicLbArrayOutput struct{ *pulumi.OutputState }

func (GetClusterCredentialPublicLbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCredentialPublicLb)(nil)).Elem()
}

func (o GetClusterCredentialPublicLbArrayOutput) ToGetClusterCredentialPublicLbArrayOutput() GetClusterCredentialPublicLbArrayOutput {
	return o
}

func (o GetClusterCredentialPublicLbArrayOutput) ToGetClusterCredentialPublicLbArrayOutputWithContext(ctx context.Context) GetClusterCredentialPublicLbArrayOutput {
	return o
}

func (o GetClusterCredentialPublicLbArrayOutput) Index(i pulumi.IntInput) GetClusterCredentialPublicLbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterCredentialPublicLb {
		return vs[0].([]GetClusterCredentialPublicLb)[vs[1].(int)]
	}).(GetClusterCredentialPublicLbOutput)
}

type GetClustersList struct {
	// Description of the cluster.
	ClusterDesc string `pulumi:"clusterDesc"`
	// ID of the cluster. Conflict with cluster_name, can not be set at the same time.
	ClusterId string `pulumi:"clusterId"`
	// Name of the cluster. Conflict with cluster_id, can not be set at the same time.
	ClusterName string `pulumi:"clusterName"`
	// Create time of the clusters.
	CreatedTime string `pulumi:"createdTime"`
	// List of cluster custom DNS Server info.
	DnsServers []GetClustersListDnsServer `pulumi:"dnsServers"`
	// Indicates whether to enable dns in user cluster, default value is `true`.
	EnableVpcCoreDns bool `pulumi:"enableVpcCoreDns"`
	// EKS cluster kubernetes version.
	K8sVersion string `pulumi:"k8sVersion"`
	// Indicates whether to delete CBS after EKS cluster remove.
	NeedDeleteCbs bool `pulumi:"needDeleteCbs"`
	// Subnet id of service.
	ServiceSubnetId string `pulumi:"serviceSubnetId"`
	// EKS status.
	Status string `pulumi:"status"`
	// Subnet id list.
	SubnetIds []string `pulumi:"subnetIds"`
	// Tags of EKS cluster.
	Tags map[string]interface{} `pulumi:"tags"`
	// Vpc id.
	VpcId string `pulumi:"vpcId"`
}

// GetClustersListInput is an input type that accepts GetClustersListArgs and GetClustersListOutput values.
// You can construct a concrete instance of `GetClustersListInput` via:
//
//	GetClustersListArgs{...}
type GetClustersListInput interface {
	pulumi.Input

	ToGetClustersListOutput() GetClustersListOutput
	ToGetClustersListOutputWithContext(context.Context) GetClustersListOutput
}

type GetClustersListArgs struct {
	// Description of the cluster.
	ClusterDesc pulumi.StringInput `pulumi:"clusterDesc"`
	// ID of the cluster. Conflict with cluster_name, can not be set at the same time.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// Name of the cluster. Conflict with cluster_id, can not be set at the same time.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// Create time of the clusters.
	CreatedTime pulumi.StringInput `pulumi:"createdTime"`
	// List of cluster custom DNS Server info.
	DnsServers GetClustersListDnsServerArrayInput `pulumi:"dnsServers"`
	// Indicates whether to enable dns in user cluster, default value is `true`.
	EnableVpcCoreDns pulumi.BoolInput `pulumi:"enableVpcCoreDns"`
	// EKS cluster kubernetes version.
	K8sVersion pulumi.StringInput `pulumi:"k8sVersion"`
	// Indicates whether to delete CBS after EKS cluster remove.
	NeedDeleteCbs pulumi.BoolInput `pulumi:"needDeleteCbs"`
	// Subnet id of service.
	ServiceSubnetId pulumi.StringInput `pulumi:"serviceSubnetId"`
	// EKS status.
	Status pulumi.StringInput `pulumi:"status"`
	// Subnet id list.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// Tags of EKS cluster.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Vpc id.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetClustersListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersList)(nil)).Elem()
}

func (i GetClustersListArgs) ToGetClustersListOutput() GetClustersListOutput {
	return i.ToGetClustersListOutputWithContext(context.Background())
}

func (i GetClustersListArgs) ToGetClustersListOutputWithContext(ctx context.Context) GetClustersListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersListOutput)
}

// GetClustersListArrayInput is an input type that accepts GetClustersListArray and GetClustersListArrayOutput values.
// You can construct a concrete instance of `GetClustersListArrayInput` via:
//
//	GetClustersListArray{ GetClustersListArgs{...} }
type GetClustersListArrayInput interface {
	pulumi.Input

	ToGetClustersListArrayOutput() GetClustersListArrayOutput
	ToGetClustersListArrayOutputWithContext(context.Context) GetClustersListArrayOutput
}

type GetClustersListArray []GetClustersListInput

func (GetClustersListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersList)(nil)).Elem()
}

func (i GetClustersListArray) ToGetClustersListArrayOutput() GetClustersListArrayOutput {
	return i.ToGetClustersListArrayOutputWithContext(context.Background())
}

func (i GetClustersListArray) ToGetClustersListArrayOutputWithContext(ctx context.Context) GetClustersListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersListArrayOutput)
}

type GetClustersListOutput struct{ *pulumi.OutputState }

func (GetClustersListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersList)(nil)).Elem()
}

func (o GetClustersListOutput) ToGetClustersListOutput() GetClustersListOutput {
	return o
}

func (o GetClustersListOutput) ToGetClustersListOutputWithContext(ctx context.Context) GetClustersListOutput {
	return o
}

// Description of the cluster.
func (o GetClustersListOutput) ClusterDesc() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersList) string { return v.ClusterDesc }).(pulumi.StringOutput)
}

// ID of the cluster. Conflict with cluster_name, can not be set at the same time.
func (o GetClustersListOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersList) string { return v.ClusterId }).(pulumi.StringOutput)
}

// Name of the cluster. Conflict with cluster_id, can not be set at the same time.
func (o GetClustersListOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersList) string { return v.ClusterName }).(pulumi.StringOutput)
}

// Create time of the clusters.
func (o GetClustersListOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersList) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// List of cluster custom DNS Server info.
func (o GetClustersListOutput) DnsServers() GetClustersListDnsServerArrayOutput {
	return o.ApplyT(func(v GetClustersList) []GetClustersListDnsServer { return v.DnsServers }).(GetClustersListDnsServerArrayOutput)
}

// Indicates whether to enable dns in user cluster, default value is `true`.
func (o GetClustersListOutput) EnableVpcCoreDns() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClustersList) bool { return v.EnableVpcCoreDns }).(pulumi.BoolOutput)
}

// EKS cluster kubernetes version.
func (o GetClustersListOutput) K8sVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersList) string { return v.K8sVersion }).(pulumi.StringOutput)
}

// Indicates whether to delete CBS after EKS cluster remove.
func (o GetClustersListOutput) NeedDeleteCbs() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClustersList) bool { return v.NeedDeleteCbs }).(pulumi.BoolOutput)
}

// Subnet id of service.
func (o GetClustersListOutput) ServiceSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersList) string { return v.ServiceSubnetId }).(pulumi.StringOutput)
}

// EKS status.
func (o GetClustersListOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersList) string { return v.Status }).(pulumi.StringOutput)
}

// Subnet id list.
func (o GetClustersListOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClustersList) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// Tags of EKS cluster.
func (o GetClustersListOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetClustersList) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// Vpc id.
func (o GetClustersListOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersList) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetClustersListArrayOutput struct{ *pulumi.OutputState }

func (GetClustersListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersList)(nil)).Elem()
}

func (o GetClustersListArrayOutput) ToGetClustersListArrayOutput() GetClustersListArrayOutput {
	return o
}

func (o GetClustersListArrayOutput) ToGetClustersListArrayOutputWithContext(ctx context.Context) GetClustersListArrayOutput {
	return o
}

func (o GetClustersListArrayOutput) Index(i pulumi.IntInput) GetClustersListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersList {
		return vs[0].([]GetClustersList)[vs[1].(int)]
	}).(GetClustersListOutput)
}

type GetClustersListDnsServer struct {
	// DNS Server domain. Empty indicates all domain.
	Domain string `pulumi:"domain"`
	// List of DNS Server IP address.
	Servers []string `pulumi:"servers"`
}

// GetClustersListDnsServerInput is an input type that accepts GetClustersListDnsServerArgs and GetClustersListDnsServerOutput values.
// You can construct a concrete instance of `GetClustersListDnsServerInput` via:
//
//	GetClustersListDnsServerArgs{...}
type GetClustersListDnsServerInput interface {
	pulumi.Input

	ToGetClustersListDnsServerOutput() GetClustersListDnsServerOutput
	ToGetClustersListDnsServerOutputWithContext(context.Context) GetClustersListDnsServerOutput
}

type GetClustersListDnsServerArgs struct {
	// DNS Server domain. Empty indicates all domain.
	Domain pulumi.StringInput `pulumi:"domain"`
	// List of DNS Server IP address.
	Servers pulumi.StringArrayInput `pulumi:"servers"`
}

func (GetClustersListDnsServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersListDnsServer)(nil)).Elem()
}

func (i GetClustersListDnsServerArgs) ToGetClustersListDnsServerOutput() GetClustersListDnsServerOutput {
	return i.ToGetClustersListDnsServerOutputWithContext(context.Background())
}

func (i GetClustersListDnsServerArgs) ToGetClustersListDnsServerOutputWithContext(ctx context.Context) GetClustersListDnsServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersListDnsServerOutput)
}

// GetClustersListDnsServerArrayInput is an input type that accepts GetClustersListDnsServerArray and GetClustersListDnsServerArrayOutput values.
// You can construct a concrete instance of `GetClustersListDnsServerArrayInput` via:
//
//	GetClustersListDnsServerArray{ GetClustersListDnsServerArgs{...} }
type GetClustersListDnsServerArrayInput interface {
	pulumi.Input

	ToGetClustersListDnsServerArrayOutput() GetClustersListDnsServerArrayOutput
	ToGetClustersListDnsServerArrayOutputWithContext(context.Context) GetClustersListDnsServerArrayOutput
}

type GetClustersListDnsServerArray []GetClustersListDnsServerInput

func (GetClustersListDnsServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersListDnsServer)(nil)).Elem()
}

func (i GetClustersListDnsServerArray) ToGetClustersListDnsServerArrayOutput() GetClustersListDnsServerArrayOutput {
	return i.ToGetClustersListDnsServerArrayOutputWithContext(context.Background())
}

func (i GetClustersListDnsServerArray) ToGetClustersListDnsServerArrayOutputWithContext(ctx context.Context) GetClustersListDnsServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersListDnsServerArrayOutput)
}

type GetClustersListDnsServerOutput struct{ *pulumi.OutputState }

func (GetClustersListDnsServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersListDnsServer)(nil)).Elem()
}

func (o GetClustersListDnsServerOutput) ToGetClustersListDnsServerOutput() GetClustersListDnsServerOutput {
	return o
}

func (o GetClustersListDnsServerOutput) ToGetClustersListDnsServerOutputWithContext(ctx context.Context) GetClustersListDnsServerOutput {
	return o
}

// DNS Server domain. Empty indicates all domain.
func (o GetClustersListDnsServerOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersListDnsServer) string { return v.Domain }).(pulumi.StringOutput)
}

// List of DNS Server IP address.
func (o GetClustersListDnsServerOutput) Servers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClustersListDnsServer) []string { return v.Servers }).(pulumi.StringArrayOutput)
}

type GetClustersListDnsServerArrayOutput struct{ *pulumi.OutputState }

func (GetClustersListDnsServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersListDnsServer)(nil)).Elem()
}

func (o GetClustersListDnsServerArrayOutput) ToGetClustersListDnsServerArrayOutput() GetClustersListDnsServerArrayOutput {
	return o
}

func (o GetClustersListDnsServerArrayOutput) ToGetClustersListDnsServerArrayOutputWithContext(ctx context.Context) GetClustersListDnsServerArrayOutput {
	return o
}

func (o GetClustersListDnsServerArrayOutput) Index(i pulumi.IntInput) GetClustersListDnsServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersListDnsServer {
		return vs[0].([]GetClustersListDnsServer)[vs[1].(int)]
	}).(GetClustersListDnsServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterDnsServerInput)(nil)).Elem(), ClusterDnsServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterDnsServerArrayInput)(nil)).Elem(), ClusterDnsServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInternalLbInput)(nil)).Elem(), ClusterInternalLbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInternalLbPtrInput)(nil)).Elem(), ClusterInternalLbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPublicLbInput)(nil)).Elem(), ClusterPublicLbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPublicLbPtrInput)(nil)).Elem(), ClusterPublicLbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceCbsVolumeInput)(nil)).Elem(), ContainerInstanceCbsVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceCbsVolumeArrayInput)(nil)).Elem(), ContainerInstanceCbsVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceContainerInput)(nil)).Elem(), ContainerInstanceContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceContainerArrayInput)(nil)).Elem(), ContainerInstanceContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceContainerLivenessProbeInput)(nil)).Elem(), ContainerInstanceContainerLivenessProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceContainerLivenessProbePtrInput)(nil)).Elem(), ContainerInstanceContainerLivenessProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceContainerReadinessProbeInput)(nil)).Elem(), ContainerInstanceContainerReadinessProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceContainerReadinessProbePtrInput)(nil)).Elem(), ContainerInstanceContainerReadinessProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceContainerVolumeMountInput)(nil)).Elem(), ContainerInstanceContainerVolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceContainerVolumeMountArrayInput)(nil)).Elem(), ContainerInstanceContainerVolumeMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceImageRegistryCredentialInput)(nil)).Elem(), ContainerInstanceImageRegistryCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceImageRegistryCredentialArrayInput)(nil)).Elem(), ContainerInstanceImageRegistryCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceInitContainerInput)(nil)).Elem(), ContainerInstanceInitContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceInitContainerArrayInput)(nil)).Elem(), ContainerInstanceInitContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceInitContainerVolumeMountInput)(nil)).Elem(), ContainerInstanceInitContainerVolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceInitContainerVolumeMountArrayInput)(nil)).Elem(), ContainerInstanceInitContainerVolumeMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceNfsVolumeInput)(nil)).Elem(), ContainerInstanceNfsVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceNfsVolumeArrayInput)(nil)).Elem(), ContainerInstanceNfsVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCredentialAddressInput)(nil)).Elem(), GetClusterCredentialAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCredentialAddressArrayInput)(nil)).Elem(), GetClusterCredentialAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCredentialInternalLbInput)(nil)).Elem(), GetClusterCredentialInternalLbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCredentialInternalLbArrayInput)(nil)).Elem(), GetClusterCredentialInternalLbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCredentialPublicLbInput)(nil)).Elem(), GetClusterCredentialPublicLbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCredentialPublicLbArrayInput)(nil)).Elem(), GetClusterCredentialPublicLbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersListInput)(nil)).Elem(), GetClustersListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersListArrayInput)(nil)).Elem(), GetClustersListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersListDnsServerInput)(nil)).Elem(), GetClustersListDnsServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersListDnsServerArrayInput)(nil)).Elem(), GetClustersListDnsServerArray{})
	pulumi.RegisterOutputType(ClusterDnsServerOutput{})
	pulumi.RegisterOutputType(ClusterDnsServerArrayOutput{})
	pulumi.RegisterOutputType(ClusterInternalLbOutput{})
	pulumi.RegisterOutputType(ClusterInternalLbPtrOutput{})
	pulumi.RegisterOutputType(ClusterPublicLbOutput{})
	pulumi.RegisterOutputType(ClusterPublicLbPtrOutput{})
	pulumi.RegisterOutputType(ContainerInstanceCbsVolumeOutput{})
	pulumi.RegisterOutputType(ContainerInstanceCbsVolumeArrayOutput{})
	pulumi.RegisterOutputType(ContainerInstanceContainerOutput{})
	pulumi.RegisterOutputType(ContainerInstanceContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerInstanceContainerLivenessProbeOutput{})
	pulumi.RegisterOutputType(ContainerInstanceContainerLivenessProbePtrOutput{})
	pulumi.RegisterOutputType(ContainerInstanceContainerReadinessProbeOutput{})
	pulumi.RegisterOutputType(ContainerInstanceContainerReadinessProbePtrOutput{})
	pulumi.RegisterOutputType(ContainerInstanceContainerVolumeMountOutput{})
	pulumi.RegisterOutputType(ContainerInstanceContainerVolumeMountArrayOutput{})
	pulumi.RegisterOutputType(ContainerInstanceImageRegistryCredentialOutput{})
	pulumi.RegisterOutputType(ContainerInstanceImageRegistryCredentialArrayOutput{})
	pulumi.RegisterOutputType(ContainerInstanceInitContainerOutput{})
	pulumi.RegisterOutputType(ContainerInstanceInitContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerInstanceInitContainerVolumeMountOutput{})
	pulumi.RegisterOutputType(ContainerInstanceInitContainerVolumeMountArrayOutput{})
	pulumi.RegisterOutputType(ContainerInstanceNfsVolumeOutput{})
	pulumi.RegisterOutputType(ContainerInstanceNfsVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetClusterCredentialAddressOutput{})
	pulumi.RegisterOutputType(GetClusterCredentialAddressArrayOutput{})
	pulumi.RegisterOutputType(GetClusterCredentialInternalLbOutput{})
	pulumi.RegisterOutputType(GetClusterCredentialInternalLbArrayOutput{})
	pulumi.RegisterOutputType(GetClusterCredentialPublicLbOutput{})
	pulumi.RegisterOutputType(GetClusterCredentialPublicLbArrayOutput{})
	pulumi.RegisterOutputType(GetClustersListOutput{})
	pulumi.RegisterOutputType(GetClustersListArrayOutput{})
	pulumi.RegisterOutputType(GetClustersListDnsServerOutput{})
	pulumi.RegisterOutputType(GetClustersListDnsServerArrayOutput{})
}
