// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eks

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClusterCredentialAddress struct {
	Ip   string `pulumi:"ip"`
	Port string `pulumi:"port"`
	Type string `pulumi:"type"`
}

// ClusterCredentialAddressInput is an input type that accepts ClusterCredentialAddressArgs and ClusterCredentialAddressOutput values.
// You can construct a concrete instance of `ClusterCredentialAddressInput` via:
//
//          ClusterCredentialAddressArgs{...}
type ClusterCredentialAddressInput interface {
	pulumi.Input

	ToClusterCredentialAddressOutput() ClusterCredentialAddressOutput
	ToClusterCredentialAddressOutputWithContext(context.Context) ClusterCredentialAddressOutput
}

type ClusterCredentialAddressArgs struct {
	Ip   pulumi.StringInput `pulumi:"ip"`
	Port pulumi.StringInput `pulumi:"port"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (ClusterCredentialAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCredentialAddress)(nil)).Elem()
}

func (i ClusterCredentialAddressArgs) ToClusterCredentialAddressOutput() ClusterCredentialAddressOutput {
	return i.ToClusterCredentialAddressOutputWithContext(context.Background())
}

func (i ClusterCredentialAddressArgs) ToClusterCredentialAddressOutputWithContext(ctx context.Context) ClusterCredentialAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCredentialAddressOutput)
}

// ClusterCredentialAddressArrayInput is an input type that accepts ClusterCredentialAddressArray and ClusterCredentialAddressArrayOutput values.
// You can construct a concrete instance of `ClusterCredentialAddressArrayInput` via:
//
//          ClusterCredentialAddressArray{ ClusterCredentialAddressArgs{...} }
type ClusterCredentialAddressArrayInput interface {
	pulumi.Input

	ToClusterCredentialAddressArrayOutput() ClusterCredentialAddressArrayOutput
	ToClusterCredentialAddressArrayOutputWithContext(context.Context) ClusterCredentialAddressArrayOutput
}

type ClusterCredentialAddressArray []ClusterCredentialAddressInput

func (ClusterCredentialAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCredentialAddress)(nil)).Elem()
}

func (i ClusterCredentialAddressArray) ToClusterCredentialAddressArrayOutput() ClusterCredentialAddressArrayOutput {
	return i.ToClusterCredentialAddressArrayOutputWithContext(context.Background())
}

func (i ClusterCredentialAddressArray) ToClusterCredentialAddressArrayOutputWithContext(ctx context.Context) ClusterCredentialAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCredentialAddressArrayOutput)
}

type ClusterCredentialAddressOutput struct{ *pulumi.OutputState }

func (ClusterCredentialAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCredentialAddress)(nil)).Elem()
}

func (o ClusterCredentialAddressOutput) ToClusterCredentialAddressOutput() ClusterCredentialAddressOutput {
	return o
}

func (o ClusterCredentialAddressOutput) ToClusterCredentialAddressOutputWithContext(ctx context.Context) ClusterCredentialAddressOutput {
	return o
}

func (o ClusterCredentialAddressOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCredentialAddress) string { return v.Ip }).(pulumi.StringOutput)
}

func (o ClusterCredentialAddressOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCredentialAddress) string { return v.Port }).(pulumi.StringOutput)
}

func (o ClusterCredentialAddressOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCredentialAddress) string { return v.Type }).(pulumi.StringOutput)
}

type ClusterCredentialAddressArrayOutput struct{ *pulumi.OutputState }

func (ClusterCredentialAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCredentialAddress)(nil)).Elem()
}

func (o ClusterCredentialAddressArrayOutput) ToClusterCredentialAddressArrayOutput() ClusterCredentialAddressArrayOutput {
	return o
}

func (o ClusterCredentialAddressArrayOutput) ToClusterCredentialAddressArrayOutputWithContext(ctx context.Context) ClusterCredentialAddressArrayOutput {
	return o
}

func (o ClusterCredentialAddressArrayOutput) Index(i pulumi.IntInput) ClusterCredentialAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterCredentialAddress {
		return vs[0].([]ClusterCredentialAddress)[vs[1].(int)]
	}).(ClusterCredentialAddressOutput)
}

type ClusterCredentialInternalLb struct {
	Enabled  bool   `pulumi:"enabled"`
	SubnetId string `pulumi:"subnetId"`
}

// ClusterCredentialInternalLbInput is an input type that accepts ClusterCredentialInternalLbArgs and ClusterCredentialInternalLbOutput values.
// You can construct a concrete instance of `ClusterCredentialInternalLbInput` via:
//
//          ClusterCredentialInternalLbArgs{...}
type ClusterCredentialInternalLbInput interface {
	pulumi.Input

	ToClusterCredentialInternalLbOutput() ClusterCredentialInternalLbOutput
	ToClusterCredentialInternalLbOutputWithContext(context.Context) ClusterCredentialInternalLbOutput
}

type ClusterCredentialInternalLbArgs struct {
	Enabled  pulumi.BoolInput   `pulumi:"enabled"`
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (ClusterCredentialInternalLbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCredentialInternalLb)(nil)).Elem()
}

func (i ClusterCredentialInternalLbArgs) ToClusterCredentialInternalLbOutput() ClusterCredentialInternalLbOutput {
	return i.ToClusterCredentialInternalLbOutputWithContext(context.Background())
}

func (i ClusterCredentialInternalLbArgs) ToClusterCredentialInternalLbOutputWithContext(ctx context.Context) ClusterCredentialInternalLbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCredentialInternalLbOutput)
}

// ClusterCredentialInternalLbArrayInput is an input type that accepts ClusterCredentialInternalLbArray and ClusterCredentialInternalLbArrayOutput values.
// You can construct a concrete instance of `ClusterCredentialInternalLbArrayInput` via:
//
//          ClusterCredentialInternalLbArray{ ClusterCredentialInternalLbArgs{...} }
type ClusterCredentialInternalLbArrayInput interface {
	pulumi.Input

	ToClusterCredentialInternalLbArrayOutput() ClusterCredentialInternalLbArrayOutput
	ToClusterCredentialInternalLbArrayOutputWithContext(context.Context) ClusterCredentialInternalLbArrayOutput
}

type ClusterCredentialInternalLbArray []ClusterCredentialInternalLbInput

func (ClusterCredentialInternalLbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCredentialInternalLb)(nil)).Elem()
}

func (i ClusterCredentialInternalLbArray) ToClusterCredentialInternalLbArrayOutput() ClusterCredentialInternalLbArrayOutput {
	return i.ToClusterCredentialInternalLbArrayOutputWithContext(context.Background())
}

func (i ClusterCredentialInternalLbArray) ToClusterCredentialInternalLbArrayOutputWithContext(ctx context.Context) ClusterCredentialInternalLbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCredentialInternalLbArrayOutput)
}

type ClusterCredentialInternalLbOutput struct{ *pulumi.OutputState }

func (ClusterCredentialInternalLbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCredentialInternalLb)(nil)).Elem()
}

func (o ClusterCredentialInternalLbOutput) ToClusterCredentialInternalLbOutput() ClusterCredentialInternalLbOutput {
	return o
}

func (o ClusterCredentialInternalLbOutput) ToClusterCredentialInternalLbOutputWithContext(ctx context.Context) ClusterCredentialInternalLbOutput {
	return o
}

func (o ClusterCredentialInternalLbOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterCredentialInternalLb) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o ClusterCredentialInternalLbOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCredentialInternalLb) string { return v.SubnetId }).(pulumi.StringOutput)
}

type ClusterCredentialInternalLbArrayOutput struct{ *pulumi.OutputState }

func (ClusterCredentialInternalLbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCredentialInternalLb)(nil)).Elem()
}

func (o ClusterCredentialInternalLbArrayOutput) ToClusterCredentialInternalLbArrayOutput() ClusterCredentialInternalLbArrayOutput {
	return o
}

func (o ClusterCredentialInternalLbArrayOutput) ToClusterCredentialInternalLbArrayOutputWithContext(ctx context.Context) ClusterCredentialInternalLbArrayOutput {
	return o
}

func (o ClusterCredentialInternalLbArrayOutput) Index(i pulumi.IntInput) ClusterCredentialInternalLbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterCredentialInternalLb {
		return vs[0].([]ClusterCredentialInternalLb)[vs[1].(int)]
	}).(ClusterCredentialInternalLbOutput)
}

type ClusterCredentialPublicLb struct {
	AllowFromCidrs   []string `pulumi:"allowFromCidrs"`
	Enabled          bool     `pulumi:"enabled"`
	ExtraParam       string   `pulumi:"extraParam"`
	SecurityGroup    string   `pulumi:"securityGroup"`
	SecurityPolicies []string `pulumi:"securityPolicies"`
}

// ClusterCredentialPublicLbInput is an input type that accepts ClusterCredentialPublicLbArgs and ClusterCredentialPublicLbOutput values.
// You can construct a concrete instance of `ClusterCredentialPublicLbInput` via:
//
//          ClusterCredentialPublicLbArgs{...}
type ClusterCredentialPublicLbInput interface {
	pulumi.Input

	ToClusterCredentialPublicLbOutput() ClusterCredentialPublicLbOutput
	ToClusterCredentialPublicLbOutputWithContext(context.Context) ClusterCredentialPublicLbOutput
}

type ClusterCredentialPublicLbArgs struct {
	AllowFromCidrs   pulumi.StringArrayInput `pulumi:"allowFromCidrs"`
	Enabled          pulumi.BoolInput        `pulumi:"enabled"`
	ExtraParam       pulumi.StringInput      `pulumi:"extraParam"`
	SecurityGroup    pulumi.StringInput      `pulumi:"securityGroup"`
	SecurityPolicies pulumi.StringArrayInput `pulumi:"securityPolicies"`
}

func (ClusterCredentialPublicLbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCredentialPublicLb)(nil)).Elem()
}

func (i ClusterCredentialPublicLbArgs) ToClusterCredentialPublicLbOutput() ClusterCredentialPublicLbOutput {
	return i.ToClusterCredentialPublicLbOutputWithContext(context.Background())
}

func (i ClusterCredentialPublicLbArgs) ToClusterCredentialPublicLbOutputWithContext(ctx context.Context) ClusterCredentialPublicLbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCredentialPublicLbOutput)
}

// ClusterCredentialPublicLbArrayInput is an input type that accepts ClusterCredentialPublicLbArray and ClusterCredentialPublicLbArrayOutput values.
// You can construct a concrete instance of `ClusterCredentialPublicLbArrayInput` via:
//
//          ClusterCredentialPublicLbArray{ ClusterCredentialPublicLbArgs{...} }
type ClusterCredentialPublicLbArrayInput interface {
	pulumi.Input

	ToClusterCredentialPublicLbArrayOutput() ClusterCredentialPublicLbArrayOutput
	ToClusterCredentialPublicLbArrayOutputWithContext(context.Context) ClusterCredentialPublicLbArrayOutput
}

type ClusterCredentialPublicLbArray []ClusterCredentialPublicLbInput

func (ClusterCredentialPublicLbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCredentialPublicLb)(nil)).Elem()
}

func (i ClusterCredentialPublicLbArray) ToClusterCredentialPublicLbArrayOutput() ClusterCredentialPublicLbArrayOutput {
	return i.ToClusterCredentialPublicLbArrayOutputWithContext(context.Background())
}

func (i ClusterCredentialPublicLbArray) ToClusterCredentialPublicLbArrayOutputWithContext(ctx context.Context) ClusterCredentialPublicLbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCredentialPublicLbArrayOutput)
}

type ClusterCredentialPublicLbOutput struct{ *pulumi.OutputState }

func (ClusterCredentialPublicLbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCredentialPublicLb)(nil)).Elem()
}

func (o ClusterCredentialPublicLbOutput) ToClusterCredentialPublicLbOutput() ClusterCredentialPublicLbOutput {
	return o
}

func (o ClusterCredentialPublicLbOutput) ToClusterCredentialPublicLbOutputWithContext(ctx context.Context) ClusterCredentialPublicLbOutput {
	return o
}

func (o ClusterCredentialPublicLbOutput) AllowFromCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterCredentialPublicLb) []string { return v.AllowFromCidrs }).(pulumi.StringArrayOutput)
}

func (o ClusterCredentialPublicLbOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterCredentialPublicLb) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o ClusterCredentialPublicLbOutput) ExtraParam() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCredentialPublicLb) string { return v.ExtraParam }).(pulumi.StringOutput)
}

func (o ClusterCredentialPublicLbOutput) SecurityGroup() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCredentialPublicLb) string { return v.SecurityGroup }).(pulumi.StringOutput)
}

func (o ClusterCredentialPublicLbOutput) SecurityPolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterCredentialPublicLb) []string { return v.SecurityPolicies }).(pulumi.StringArrayOutput)
}

type ClusterCredentialPublicLbArrayOutput struct{ *pulumi.OutputState }

func (ClusterCredentialPublicLbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCredentialPublicLb)(nil)).Elem()
}

func (o ClusterCredentialPublicLbArrayOutput) ToClusterCredentialPublicLbArrayOutput() ClusterCredentialPublicLbArrayOutput {
	return o
}

func (o ClusterCredentialPublicLbArrayOutput) ToClusterCredentialPublicLbArrayOutputWithContext(ctx context.Context) ClusterCredentialPublicLbArrayOutput {
	return o
}

func (o ClusterCredentialPublicLbArrayOutput) Index(i pulumi.IntInput) ClusterCredentialPublicLbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterCredentialPublicLb {
		return vs[0].([]ClusterCredentialPublicLb)[vs[1].(int)]
	}).(ClusterCredentialPublicLbOutput)
}

type ClusterDnsServer struct {
	Domain  *string  `pulumi:"domain"`
	Servers []string `pulumi:"servers"`
}

// ClusterDnsServerInput is an input type that accepts ClusterDnsServerArgs and ClusterDnsServerOutput values.
// You can construct a concrete instance of `ClusterDnsServerInput` via:
//
//          ClusterDnsServerArgs{...}
type ClusterDnsServerInput interface {
	pulumi.Input

	ToClusterDnsServerOutput() ClusterDnsServerOutput
	ToClusterDnsServerOutputWithContext(context.Context) ClusterDnsServerOutput
}

type ClusterDnsServerArgs struct {
	Domain  pulumi.StringPtrInput   `pulumi:"domain"`
	Servers pulumi.StringArrayInput `pulumi:"servers"`
}

func (ClusterDnsServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterDnsServer)(nil)).Elem()
}

func (i ClusterDnsServerArgs) ToClusterDnsServerOutput() ClusterDnsServerOutput {
	return i.ToClusterDnsServerOutputWithContext(context.Background())
}

func (i ClusterDnsServerArgs) ToClusterDnsServerOutputWithContext(ctx context.Context) ClusterDnsServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDnsServerOutput)
}

// ClusterDnsServerArrayInput is an input type that accepts ClusterDnsServerArray and ClusterDnsServerArrayOutput values.
// You can construct a concrete instance of `ClusterDnsServerArrayInput` via:
//
//          ClusterDnsServerArray{ ClusterDnsServerArgs{...} }
type ClusterDnsServerArrayInput interface {
	pulumi.Input

	ToClusterDnsServerArrayOutput() ClusterDnsServerArrayOutput
	ToClusterDnsServerArrayOutputWithContext(context.Context) ClusterDnsServerArrayOutput
}

type ClusterDnsServerArray []ClusterDnsServerInput

func (ClusterDnsServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterDnsServer)(nil)).Elem()
}

func (i ClusterDnsServerArray) ToClusterDnsServerArrayOutput() ClusterDnsServerArrayOutput {
	return i.ToClusterDnsServerArrayOutputWithContext(context.Background())
}

func (i ClusterDnsServerArray) ToClusterDnsServerArrayOutputWithContext(ctx context.Context) ClusterDnsServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDnsServerArrayOutput)
}

type ClusterDnsServerOutput struct{ *pulumi.OutputState }

func (ClusterDnsServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterDnsServer)(nil)).Elem()
}

func (o ClusterDnsServerOutput) ToClusterDnsServerOutput() ClusterDnsServerOutput {
	return o
}

func (o ClusterDnsServerOutput) ToClusterDnsServerOutputWithContext(ctx context.Context) ClusterDnsServerOutput {
	return o
}

func (o ClusterDnsServerOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterDnsServer) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o ClusterDnsServerOutput) Servers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterDnsServer) []string { return v.Servers }).(pulumi.StringArrayOutput)
}

type ClusterDnsServerArrayOutput struct{ *pulumi.OutputState }

func (ClusterDnsServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterDnsServer)(nil)).Elem()
}

func (o ClusterDnsServerArrayOutput) ToClusterDnsServerArrayOutput() ClusterDnsServerArrayOutput {
	return o
}

func (o ClusterDnsServerArrayOutput) ToClusterDnsServerArrayOutputWithContext(ctx context.Context) ClusterDnsServerArrayOutput {
	return o
}

func (o ClusterDnsServerArrayOutput) Index(i pulumi.IntInput) ClusterDnsServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterDnsServer {
		return vs[0].([]ClusterDnsServer)[vs[1].(int)]
	}).(ClusterDnsServerOutput)
}

type ClusterInternalLb struct {
	Enabled  bool    `pulumi:"enabled"`
	SubnetId *string `pulumi:"subnetId"`
}

// ClusterInternalLbInput is an input type that accepts ClusterInternalLbArgs and ClusterInternalLbOutput values.
// You can construct a concrete instance of `ClusterInternalLbInput` via:
//
//          ClusterInternalLbArgs{...}
type ClusterInternalLbInput interface {
	pulumi.Input

	ToClusterInternalLbOutput() ClusterInternalLbOutput
	ToClusterInternalLbOutputWithContext(context.Context) ClusterInternalLbOutput
}

type ClusterInternalLbArgs struct {
	Enabled  pulumi.BoolInput      `pulumi:"enabled"`
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (ClusterInternalLbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterInternalLb)(nil)).Elem()
}

func (i ClusterInternalLbArgs) ToClusterInternalLbOutput() ClusterInternalLbOutput {
	return i.ToClusterInternalLbOutputWithContext(context.Background())
}

func (i ClusterInternalLbArgs) ToClusterInternalLbOutputWithContext(ctx context.Context) ClusterInternalLbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterInternalLbOutput)
}

func (i ClusterInternalLbArgs) ToClusterInternalLbPtrOutput() ClusterInternalLbPtrOutput {
	return i.ToClusterInternalLbPtrOutputWithContext(context.Background())
}

func (i ClusterInternalLbArgs) ToClusterInternalLbPtrOutputWithContext(ctx context.Context) ClusterInternalLbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterInternalLbOutput).ToClusterInternalLbPtrOutputWithContext(ctx)
}

// ClusterInternalLbPtrInput is an input type that accepts ClusterInternalLbArgs, ClusterInternalLbPtr and ClusterInternalLbPtrOutput values.
// You can construct a concrete instance of `ClusterInternalLbPtrInput` via:
//
//          ClusterInternalLbArgs{...}
//
//  or:
//
//          nil
type ClusterInternalLbPtrInput interface {
	pulumi.Input

	ToClusterInternalLbPtrOutput() ClusterInternalLbPtrOutput
	ToClusterInternalLbPtrOutputWithContext(context.Context) ClusterInternalLbPtrOutput
}

type clusterInternalLbPtrType ClusterInternalLbArgs

func ClusterInternalLbPtr(v *ClusterInternalLbArgs) ClusterInternalLbPtrInput {
	return (*clusterInternalLbPtrType)(v)
}

func (*clusterInternalLbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterInternalLb)(nil)).Elem()
}

func (i *clusterInternalLbPtrType) ToClusterInternalLbPtrOutput() ClusterInternalLbPtrOutput {
	return i.ToClusterInternalLbPtrOutputWithContext(context.Background())
}

func (i *clusterInternalLbPtrType) ToClusterInternalLbPtrOutputWithContext(ctx context.Context) ClusterInternalLbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterInternalLbPtrOutput)
}

type ClusterInternalLbOutput struct{ *pulumi.OutputState }

func (ClusterInternalLbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterInternalLb)(nil)).Elem()
}

func (o ClusterInternalLbOutput) ToClusterInternalLbOutput() ClusterInternalLbOutput {
	return o
}

func (o ClusterInternalLbOutput) ToClusterInternalLbOutputWithContext(ctx context.Context) ClusterInternalLbOutput {
	return o
}

func (o ClusterInternalLbOutput) ToClusterInternalLbPtrOutput() ClusterInternalLbPtrOutput {
	return o.ToClusterInternalLbPtrOutputWithContext(context.Background())
}

func (o ClusterInternalLbOutput) ToClusterInternalLbPtrOutputWithContext(ctx context.Context) ClusterInternalLbPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterInternalLb) *ClusterInternalLb {
		return &v
	}).(ClusterInternalLbPtrOutput)
}

func (o ClusterInternalLbOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterInternalLb) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o ClusterInternalLbOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterInternalLb) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type ClusterInternalLbPtrOutput struct{ *pulumi.OutputState }

func (ClusterInternalLbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterInternalLb)(nil)).Elem()
}

func (o ClusterInternalLbPtrOutput) ToClusterInternalLbPtrOutput() ClusterInternalLbPtrOutput {
	return o
}

func (o ClusterInternalLbPtrOutput) ToClusterInternalLbPtrOutputWithContext(ctx context.Context) ClusterInternalLbPtrOutput {
	return o
}

func (o ClusterInternalLbPtrOutput) Elem() ClusterInternalLbOutput {
	return o.ApplyT(func(v *ClusterInternalLb) ClusterInternalLb {
		if v != nil {
			return *v
		}
		var ret ClusterInternalLb
		return ret
	}).(ClusterInternalLbOutput)
}

func (o ClusterInternalLbPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterInternalLb) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o ClusterInternalLbPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterInternalLb) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

type ClusterPublicLb struct {
	AllowFromCidrs   []string `pulumi:"allowFromCidrs"`
	Enabled          bool     `pulumi:"enabled"`
	ExtraParam       *string  `pulumi:"extraParam"`
	SecurityGroup    *string  `pulumi:"securityGroup"`
	SecurityPolicies []string `pulumi:"securityPolicies"`
}

// ClusterPublicLbInput is an input type that accepts ClusterPublicLbArgs and ClusterPublicLbOutput values.
// You can construct a concrete instance of `ClusterPublicLbInput` via:
//
//          ClusterPublicLbArgs{...}
type ClusterPublicLbInput interface {
	pulumi.Input

	ToClusterPublicLbOutput() ClusterPublicLbOutput
	ToClusterPublicLbOutputWithContext(context.Context) ClusterPublicLbOutput
}

type ClusterPublicLbArgs struct {
	AllowFromCidrs   pulumi.StringArrayInput `pulumi:"allowFromCidrs"`
	Enabled          pulumi.BoolInput        `pulumi:"enabled"`
	ExtraParam       pulumi.StringPtrInput   `pulumi:"extraParam"`
	SecurityGroup    pulumi.StringPtrInput   `pulumi:"securityGroup"`
	SecurityPolicies pulumi.StringArrayInput `pulumi:"securityPolicies"`
}

func (ClusterPublicLbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPublicLb)(nil)).Elem()
}

func (i ClusterPublicLbArgs) ToClusterPublicLbOutput() ClusterPublicLbOutput {
	return i.ToClusterPublicLbOutputWithContext(context.Background())
}

func (i ClusterPublicLbArgs) ToClusterPublicLbOutputWithContext(ctx context.Context) ClusterPublicLbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPublicLbOutput)
}

func (i ClusterPublicLbArgs) ToClusterPublicLbPtrOutput() ClusterPublicLbPtrOutput {
	return i.ToClusterPublicLbPtrOutputWithContext(context.Background())
}

func (i ClusterPublicLbArgs) ToClusterPublicLbPtrOutputWithContext(ctx context.Context) ClusterPublicLbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPublicLbOutput).ToClusterPublicLbPtrOutputWithContext(ctx)
}

// ClusterPublicLbPtrInput is an input type that accepts ClusterPublicLbArgs, ClusterPublicLbPtr and ClusterPublicLbPtrOutput values.
// You can construct a concrete instance of `ClusterPublicLbPtrInput` via:
//
//          ClusterPublicLbArgs{...}
//
//  or:
//
//          nil
type ClusterPublicLbPtrInput interface {
	pulumi.Input

	ToClusterPublicLbPtrOutput() ClusterPublicLbPtrOutput
	ToClusterPublicLbPtrOutputWithContext(context.Context) ClusterPublicLbPtrOutput
}

type clusterPublicLbPtrType ClusterPublicLbArgs

func ClusterPublicLbPtr(v *ClusterPublicLbArgs) ClusterPublicLbPtrInput {
	return (*clusterPublicLbPtrType)(v)
}

func (*clusterPublicLbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPublicLb)(nil)).Elem()
}

func (i *clusterPublicLbPtrType) ToClusterPublicLbPtrOutput() ClusterPublicLbPtrOutput {
	return i.ToClusterPublicLbPtrOutputWithContext(context.Background())
}

func (i *clusterPublicLbPtrType) ToClusterPublicLbPtrOutputWithContext(ctx context.Context) ClusterPublicLbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPublicLbPtrOutput)
}

type ClusterPublicLbOutput struct{ *pulumi.OutputState }

func (ClusterPublicLbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPublicLb)(nil)).Elem()
}

func (o ClusterPublicLbOutput) ToClusterPublicLbOutput() ClusterPublicLbOutput {
	return o
}

func (o ClusterPublicLbOutput) ToClusterPublicLbOutputWithContext(ctx context.Context) ClusterPublicLbOutput {
	return o
}

func (o ClusterPublicLbOutput) ToClusterPublicLbPtrOutput() ClusterPublicLbPtrOutput {
	return o.ToClusterPublicLbPtrOutputWithContext(context.Background())
}

func (o ClusterPublicLbOutput) ToClusterPublicLbPtrOutputWithContext(ctx context.Context) ClusterPublicLbPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterPublicLb) *ClusterPublicLb {
		return &v
	}).(ClusterPublicLbPtrOutput)
}

func (o ClusterPublicLbOutput) AllowFromCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterPublicLb) []string { return v.AllowFromCidrs }).(pulumi.StringArrayOutput)
}

func (o ClusterPublicLbOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterPublicLb) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o ClusterPublicLbOutput) ExtraParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPublicLb) *string { return v.ExtraParam }).(pulumi.StringPtrOutput)
}

func (o ClusterPublicLbOutput) SecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPublicLb) *string { return v.SecurityGroup }).(pulumi.StringPtrOutput)
}

func (o ClusterPublicLbOutput) SecurityPolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterPublicLb) []string { return v.SecurityPolicies }).(pulumi.StringArrayOutput)
}

type ClusterPublicLbPtrOutput struct{ *pulumi.OutputState }

func (ClusterPublicLbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPublicLb)(nil)).Elem()
}

func (o ClusterPublicLbPtrOutput) ToClusterPublicLbPtrOutput() ClusterPublicLbPtrOutput {
	return o
}

func (o ClusterPublicLbPtrOutput) ToClusterPublicLbPtrOutputWithContext(ctx context.Context) ClusterPublicLbPtrOutput {
	return o
}

func (o ClusterPublicLbPtrOutput) Elem() ClusterPublicLbOutput {
	return o.ApplyT(func(v *ClusterPublicLb) ClusterPublicLb {
		if v != nil {
			return *v
		}
		var ret ClusterPublicLb
		return ret
	}).(ClusterPublicLbOutput)
}

func (o ClusterPublicLbPtrOutput) AllowFromCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterPublicLb) []string {
		if v == nil {
			return nil
		}
		return v.AllowFromCidrs
	}).(pulumi.StringArrayOutput)
}

func (o ClusterPublicLbPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterPublicLb) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o ClusterPublicLbPtrOutput) ExtraParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPublicLb) *string {
		if v == nil {
			return nil
		}
		return v.ExtraParam
	}).(pulumi.StringPtrOutput)
}

func (o ClusterPublicLbPtrOutput) SecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPublicLb) *string {
		if v == nil {
			return nil
		}
		return v.SecurityGroup
	}).(pulumi.StringPtrOutput)
}

func (o ClusterPublicLbPtrOutput) SecurityPolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterPublicLb) []string {
		if v == nil {
			return nil
		}
		return v.SecurityPolicies
	}).(pulumi.StringArrayOutput)
}

type ClustersList struct {
	ClusterDesc      string                  `pulumi:"clusterDesc"`
	ClusterId        string                  `pulumi:"clusterId"`
	ClusterName      string                  `pulumi:"clusterName"`
	CreatedTime      string                  `pulumi:"createdTime"`
	DnsServers       []ClustersListDnsServer `pulumi:"dnsServers"`
	EnableVpcCoreDns bool                    `pulumi:"enableVpcCoreDns"`
	K8sVersion       string                  `pulumi:"k8sVersion"`
	NeedDeleteCbs    bool                    `pulumi:"needDeleteCbs"`
	ServiceSubnetId  string                  `pulumi:"serviceSubnetId"`
	Status           string                  `pulumi:"status"`
	SubnetIds        []string                `pulumi:"subnetIds"`
	Tags             map[string]interface{}  `pulumi:"tags"`
	VpcId            string                  `pulumi:"vpcId"`
}

// ClustersListInput is an input type that accepts ClustersListArgs and ClustersListOutput values.
// You can construct a concrete instance of `ClustersListInput` via:
//
//          ClustersListArgs{...}
type ClustersListInput interface {
	pulumi.Input

	ToClustersListOutput() ClustersListOutput
	ToClustersListOutputWithContext(context.Context) ClustersListOutput
}

type ClustersListArgs struct {
	ClusterDesc      pulumi.StringInput              `pulumi:"clusterDesc"`
	ClusterId        pulumi.StringInput              `pulumi:"clusterId"`
	ClusterName      pulumi.StringInput              `pulumi:"clusterName"`
	CreatedTime      pulumi.StringInput              `pulumi:"createdTime"`
	DnsServers       ClustersListDnsServerArrayInput `pulumi:"dnsServers"`
	EnableVpcCoreDns pulumi.BoolInput                `pulumi:"enableVpcCoreDns"`
	K8sVersion       pulumi.StringInput              `pulumi:"k8sVersion"`
	NeedDeleteCbs    pulumi.BoolInput                `pulumi:"needDeleteCbs"`
	ServiceSubnetId  pulumi.StringInput              `pulumi:"serviceSubnetId"`
	Status           pulumi.StringInput              `pulumi:"status"`
	SubnetIds        pulumi.StringArrayInput         `pulumi:"subnetIds"`
	Tags             pulumi.MapInput                 `pulumi:"tags"`
	VpcId            pulumi.StringInput              `pulumi:"vpcId"`
}

func (ClustersListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClustersList)(nil)).Elem()
}

func (i ClustersListArgs) ToClustersListOutput() ClustersListOutput {
	return i.ToClustersListOutputWithContext(context.Background())
}

func (i ClustersListArgs) ToClustersListOutputWithContext(ctx context.Context) ClustersListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClustersListOutput)
}

// ClustersListArrayInput is an input type that accepts ClustersListArray and ClustersListArrayOutput values.
// You can construct a concrete instance of `ClustersListArrayInput` via:
//
//          ClustersListArray{ ClustersListArgs{...} }
type ClustersListArrayInput interface {
	pulumi.Input

	ToClustersListArrayOutput() ClustersListArrayOutput
	ToClustersListArrayOutputWithContext(context.Context) ClustersListArrayOutput
}

type ClustersListArray []ClustersListInput

func (ClustersListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClustersList)(nil)).Elem()
}

func (i ClustersListArray) ToClustersListArrayOutput() ClustersListArrayOutput {
	return i.ToClustersListArrayOutputWithContext(context.Background())
}

func (i ClustersListArray) ToClustersListArrayOutputWithContext(ctx context.Context) ClustersListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClustersListArrayOutput)
}

type ClustersListOutput struct{ *pulumi.OutputState }

func (ClustersListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClustersList)(nil)).Elem()
}

func (o ClustersListOutput) ToClustersListOutput() ClustersListOutput {
	return o
}

func (o ClustersListOutput) ToClustersListOutputWithContext(ctx context.Context) ClustersListOutput {
	return o
}

func (o ClustersListOutput) ClusterDesc() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersList) string { return v.ClusterDesc }).(pulumi.StringOutput)
}

func (o ClustersListOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersList) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o ClustersListOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersList) string { return v.ClusterName }).(pulumi.StringOutput)
}

func (o ClustersListOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersList) string { return v.CreatedTime }).(pulumi.StringOutput)
}

func (o ClustersListOutput) DnsServers() ClustersListDnsServerArrayOutput {
	return o.ApplyT(func(v ClustersList) []ClustersListDnsServer { return v.DnsServers }).(ClustersListDnsServerArrayOutput)
}

func (o ClustersListOutput) EnableVpcCoreDns() pulumi.BoolOutput {
	return o.ApplyT(func(v ClustersList) bool { return v.EnableVpcCoreDns }).(pulumi.BoolOutput)
}

func (o ClustersListOutput) K8sVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersList) string { return v.K8sVersion }).(pulumi.StringOutput)
}

func (o ClustersListOutput) NeedDeleteCbs() pulumi.BoolOutput {
	return o.ApplyT(func(v ClustersList) bool { return v.NeedDeleteCbs }).(pulumi.BoolOutput)
}

func (o ClustersListOutput) ServiceSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersList) string { return v.ServiceSubnetId }).(pulumi.StringOutput)
}

func (o ClustersListOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersList) string { return v.Status }).(pulumi.StringOutput)
}

func (o ClustersListOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClustersList) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o ClustersListOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v ClustersList) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

func (o ClustersListOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersList) string { return v.VpcId }).(pulumi.StringOutput)
}

type ClustersListArrayOutput struct{ *pulumi.OutputState }

func (ClustersListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClustersList)(nil)).Elem()
}

func (o ClustersListArrayOutput) ToClustersListArrayOutput() ClustersListArrayOutput {
	return o
}

func (o ClustersListArrayOutput) ToClustersListArrayOutputWithContext(ctx context.Context) ClustersListArrayOutput {
	return o
}

func (o ClustersListArrayOutput) Index(i pulumi.IntInput) ClustersListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClustersList {
		return vs[0].([]ClustersList)[vs[1].(int)]
	}).(ClustersListOutput)
}

type ClustersListDnsServer struct {
	Domain  string   `pulumi:"domain"`
	Servers []string `pulumi:"servers"`
}

// ClustersListDnsServerInput is an input type that accepts ClustersListDnsServerArgs and ClustersListDnsServerOutput values.
// You can construct a concrete instance of `ClustersListDnsServerInput` via:
//
//          ClustersListDnsServerArgs{...}
type ClustersListDnsServerInput interface {
	pulumi.Input

	ToClustersListDnsServerOutput() ClustersListDnsServerOutput
	ToClustersListDnsServerOutputWithContext(context.Context) ClustersListDnsServerOutput
}

type ClustersListDnsServerArgs struct {
	Domain  pulumi.StringInput      `pulumi:"domain"`
	Servers pulumi.StringArrayInput `pulumi:"servers"`
}

func (ClustersListDnsServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClustersListDnsServer)(nil)).Elem()
}

func (i ClustersListDnsServerArgs) ToClustersListDnsServerOutput() ClustersListDnsServerOutput {
	return i.ToClustersListDnsServerOutputWithContext(context.Background())
}

func (i ClustersListDnsServerArgs) ToClustersListDnsServerOutputWithContext(ctx context.Context) ClustersListDnsServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClustersListDnsServerOutput)
}

// ClustersListDnsServerArrayInput is an input type that accepts ClustersListDnsServerArray and ClustersListDnsServerArrayOutput values.
// You can construct a concrete instance of `ClustersListDnsServerArrayInput` via:
//
//          ClustersListDnsServerArray{ ClustersListDnsServerArgs{...} }
type ClustersListDnsServerArrayInput interface {
	pulumi.Input

	ToClustersListDnsServerArrayOutput() ClustersListDnsServerArrayOutput
	ToClustersListDnsServerArrayOutputWithContext(context.Context) ClustersListDnsServerArrayOutput
}

type ClustersListDnsServerArray []ClustersListDnsServerInput

func (ClustersListDnsServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClustersListDnsServer)(nil)).Elem()
}

func (i ClustersListDnsServerArray) ToClustersListDnsServerArrayOutput() ClustersListDnsServerArrayOutput {
	return i.ToClustersListDnsServerArrayOutputWithContext(context.Background())
}

func (i ClustersListDnsServerArray) ToClustersListDnsServerArrayOutputWithContext(ctx context.Context) ClustersListDnsServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClustersListDnsServerArrayOutput)
}

type ClustersListDnsServerOutput struct{ *pulumi.OutputState }

func (ClustersListDnsServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClustersListDnsServer)(nil)).Elem()
}

func (o ClustersListDnsServerOutput) ToClustersListDnsServerOutput() ClustersListDnsServerOutput {
	return o
}

func (o ClustersListDnsServerOutput) ToClustersListDnsServerOutputWithContext(ctx context.Context) ClustersListDnsServerOutput {
	return o
}

func (o ClustersListDnsServerOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersListDnsServer) string { return v.Domain }).(pulumi.StringOutput)
}

func (o ClustersListDnsServerOutput) Servers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClustersListDnsServer) []string { return v.Servers }).(pulumi.StringArrayOutput)
}

type ClustersListDnsServerArrayOutput struct{ *pulumi.OutputState }

func (ClustersListDnsServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClustersListDnsServer)(nil)).Elem()
}

func (o ClustersListDnsServerArrayOutput) ToClustersListDnsServerArrayOutput() ClustersListDnsServerArrayOutput {
	return o
}

func (o ClustersListDnsServerArrayOutput) ToClustersListDnsServerArrayOutputWithContext(ctx context.Context) ClustersListDnsServerArrayOutput {
	return o
}

func (o ClustersListDnsServerArrayOutput) Index(i pulumi.IntInput) ClustersListDnsServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClustersListDnsServer {
		return vs[0].([]ClustersListDnsServer)[vs[1].(int)]
	}).(ClustersListDnsServerOutput)
}

type ContainerInstanceCbsVolume struct {
	DiskId string `pulumi:"diskId"`
	Name   string `pulumi:"name"`
}

// ContainerInstanceCbsVolumeInput is an input type that accepts ContainerInstanceCbsVolumeArgs and ContainerInstanceCbsVolumeOutput values.
// You can construct a concrete instance of `ContainerInstanceCbsVolumeInput` via:
//
//          ContainerInstanceCbsVolumeArgs{...}
type ContainerInstanceCbsVolumeInput interface {
	pulumi.Input

	ToContainerInstanceCbsVolumeOutput() ContainerInstanceCbsVolumeOutput
	ToContainerInstanceCbsVolumeOutputWithContext(context.Context) ContainerInstanceCbsVolumeOutput
}

type ContainerInstanceCbsVolumeArgs struct {
	DiskId pulumi.StringInput `pulumi:"diskId"`
	Name   pulumi.StringInput `pulumi:"name"`
}

func (ContainerInstanceCbsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceCbsVolume)(nil)).Elem()
}

func (i ContainerInstanceCbsVolumeArgs) ToContainerInstanceCbsVolumeOutput() ContainerInstanceCbsVolumeOutput {
	return i.ToContainerInstanceCbsVolumeOutputWithContext(context.Background())
}

func (i ContainerInstanceCbsVolumeArgs) ToContainerInstanceCbsVolumeOutputWithContext(ctx context.Context) ContainerInstanceCbsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceCbsVolumeOutput)
}

// ContainerInstanceCbsVolumeArrayInput is an input type that accepts ContainerInstanceCbsVolumeArray and ContainerInstanceCbsVolumeArrayOutput values.
// You can construct a concrete instance of `ContainerInstanceCbsVolumeArrayInput` via:
//
//          ContainerInstanceCbsVolumeArray{ ContainerInstanceCbsVolumeArgs{...} }
type ContainerInstanceCbsVolumeArrayInput interface {
	pulumi.Input

	ToContainerInstanceCbsVolumeArrayOutput() ContainerInstanceCbsVolumeArrayOutput
	ToContainerInstanceCbsVolumeArrayOutputWithContext(context.Context) ContainerInstanceCbsVolumeArrayOutput
}

type ContainerInstanceCbsVolumeArray []ContainerInstanceCbsVolumeInput

func (ContainerInstanceCbsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceCbsVolume)(nil)).Elem()
}

func (i ContainerInstanceCbsVolumeArray) ToContainerInstanceCbsVolumeArrayOutput() ContainerInstanceCbsVolumeArrayOutput {
	return i.ToContainerInstanceCbsVolumeArrayOutputWithContext(context.Background())
}

func (i ContainerInstanceCbsVolumeArray) ToContainerInstanceCbsVolumeArrayOutputWithContext(ctx context.Context) ContainerInstanceCbsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceCbsVolumeArrayOutput)
}

type ContainerInstanceCbsVolumeOutput struct{ *pulumi.OutputState }

func (ContainerInstanceCbsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceCbsVolume)(nil)).Elem()
}

func (o ContainerInstanceCbsVolumeOutput) ToContainerInstanceCbsVolumeOutput() ContainerInstanceCbsVolumeOutput {
	return o
}

func (o ContainerInstanceCbsVolumeOutput) ToContainerInstanceCbsVolumeOutputWithContext(ctx context.Context) ContainerInstanceCbsVolumeOutput {
	return o
}

func (o ContainerInstanceCbsVolumeOutput) DiskId() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceCbsVolume) string { return v.DiskId }).(pulumi.StringOutput)
}

func (o ContainerInstanceCbsVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceCbsVolume) string { return v.Name }).(pulumi.StringOutput)
}

type ContainerInstanceCbsVolumeArrayOutput struct{ *pulumi.OutputState }

func (ContainerInstanceCbsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceCbsVolume)(nil)).Elem()
}

func (o ContainerInstanceCbsVolumeArrayOutput) ToContainerInstanceCbsVolumeArrayOutput() ContainerInstanceCbsVolumeArrayOutput {
	return o
}

func (o ContainerInstanceCbsVolumeArrayOutput) ToContainerInstanceCbsVolumeArrayOutputWithContext(ctx context.Context) ContainerInstanceCbsVolumeArrayOutput {
	return o
}

func (o ContainerInstanceCbsVolumeArrayOutput) Index(i pulumi.IntInput) ContainerInstanceCbsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerInstanceCbsVolume {
		return vs[0].([]ContainerInstanceCbsVolume)[vs[1].(int)]
	}).(ContainerInstanceCbsVolumeOutput)
}

type ContainerInstanceContainer struct {
	Args           []string                                  `pulumi:"args"`
	Commands       []string                                  `pulumi:"commands"`
	Cpu            *float64                                  `pulumi:"cpu"`
	EnvVars        map[string]interface{}                    `pulumi:"envVars"`
	Image          string                                    `pulumi:"image"`
	LivenessProbe  *ContainerInstanceContainerLivenessProbe  `pulumi:"livenessProbe"`
	Memory         *float64                                  `pulumi:"memory"`
	Name           string                                    `pulumi:"name"`
	ReadinessProbe *ContainerInstanceContainerReadinessProbe `pulumi:"readinessProbe"`
	VolumeMounts   []ContainerInstanceContainerVolumeMount   `pulumi:"volumeMounts"`
	WorkingDir     *string                                   `pulumi:"workingDir"`
}

// ContainerInstanceContainerInput is an input type that accepts ContainerInstanceContainerArgs and ContainerInstanceContainerOutput values.
// You can construct a concrete instance of `ContainerInstanceContainerInput` via:
//
//          ContainerInstanceContainerArgs{...}
type ContainerInstanceContainerInput interface {
	pulumi.Input

	ToContainerInstanceContainerOutput() ContainerInstanceContainerOutput
	ToContainerInstanceContainerOutputWithContext(context.Context) ContainerInstanceContainerOutput
}

type ContainerInstanceContainerArgs struct {
	Args           pulumi.StringArrayInput                          `pulumi:"args"`
	Commands       pulumi.StringArrayInput                          `pulumi:"commands"`
	Cpu            pulumi.Float64PtrInput                           `pulumi:"cpu"`
	EnvVars        pulumi.MapInput                                  `pulumi:"envVars"`
	Image          pulumi.StringInput                               `pulumi:"image"`
	LivenessProbe  ContainerInstanceContainerLivenessProbePtrInput  `pulumi:"livenessProbe"`
	Memory         pulumi.Float64PtrInput                           `pulumi:"memory"`
	Name           pulumi.StringInput                               `pulumi:"name"`
	ReadinessProbe ContainerInstanceContainerReadinessProbePtrInput `pulumi:"readinessProbe"`
	VolumeMounts   ContainerInstanceContainerVolumeMountArrayInput  `pulumi:"volumeMounts"`
	WorkingDir     pulumi.StringPtrInput                            `pulumi:"workingDir"`
}

func (ContainerInstanceContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceContainer)(nil)).Elem()
}

func (i ContainerInstanceContainerArgs) ToContainerInstanceContainerOutput() ContainerInstanceContainerOutput {
	return i.ToContainerInstanceContainerOutputWithContext(context.Background())
}

func (i ContainerInstanceContainerArgs) ToContainerInstanceContainerOutputWithContext(ctx context.Context) ContainerInstanceContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerOutput)
}

// ContainerInstanceContainerArrayInput is an input type that accepts ContainerInstanceContainerArray and ContainerInstanceContainerArrayOutput values.
// You can construct a concrete instance of `ContainerInstanceContainerArrayInput` via:
//
//          ContainerInstanceContainerArray{ ContainerInstanceContainerArgs{...} }
type ContainerInstanceContainerArrayInput interface {
	pulumi.Input

	ToContainerInstanceContainerArrayOutput() ContainerInstanceContainerArrayOutput
	ToContainerInstanceContainerArrayOutputWithContext(context.Context) ContainerInstanceContainerArrayOutput
}

type ContainerInstanceContainerArray []ContainerInstanceContainerInput

func (ContainerInstanceContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceContainer)(nil)).Elem()
}

func (i ContainerInstanceContainerArray) ToContainerInstanceContainerArrayOutput() ContainerInstanceContainerArrayOutput {
	return i.ToContainerInstanceContainerArrayOutputWithContext(context.Background())
}

func (i ContainerInstanceContainerArray) ToContainerInstanceContainerArrayOutputWithContext(ctx context.Context) ContainerInstanceContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerArrayOutput)
}

type ContainerInstanceContainerOutput struct{ *pulumi.OutputState }

func (ContainerInstanceContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceContainer)(nil)).Elem()
}

func (o ContainerInstanceContainerOutput) ToContainerInstanceContainerOutput() ContainerInstanceContainerOutput {
	return o
}

func (o ContainerInstanceContainerOutput) ToContainerInstanceContainerOutputWithContext(ctx context.Context) ContainerInstanceContainerOutput {
	return o
}

func (o ContainerInstanceContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) []string { return v.Args }).(pulumi.StringArrayOutput)
}

func (o ContainerInstanceContainerOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

func (o ContainerInstanceContainerOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

func (o ContainerInstanceContainerOutput) EnvVars() pulumi.MapOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) map[string]interface{} { return v.EnvVars }).(pulumi.MapOutput)
}

func (o ContainerInstanceContainerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) string { return v.Image }).(pulumi.StringOutput)
}

func (o ContainerInstanceContainerOutput) LivenessProbe() ContainerInstanceContainerLivenessProbePtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) *ContainerInstanceContainerLivenessProbe { return v.LivenessProbe }).(ContainerInstanceContainerLivenessProbePtrOutput)
}

func (o ContainerInstanceContainerOutput) Memory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) *float64 { return v.Memory }).(pulumi.Float64PtrOutput)
}

func (o ContainerInstanceContainerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) string { return v.Name }).(pulumi.StringOutput)
}

func (o ContainerInstanceContainerOutput) ReadinessProbe() ContainerInstanceContainerReadinessProbePtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) *ContainerInstanceContainerReadinessProbe { return v.ReadinessProbe }).(ContainerInstanceContainerReadinessProbePtrOutput)
}

func (o ContainerInstanceContainerOutput) VolumeMounts() ContainerInstanceContainerVolumeMountArrayOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) []ContainerInstanceContainerVolumeMount { return v.VolumeMounts }).(ContainerInstanceContainerVolumeMountArrayOutput)
}

func (o ContainerInstanceContainerOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainer) *string { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type ContainerInstanceContainerArrayOutput struct{ *pulumi.OutputState }

func (ContainerInstanceContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceContainer)(nil)).Elem()
}

func (o ContainerInstanceContainerArrayOutput) ToContainerInstanceContainerArrayOutput() ContainerInstanceContainerArrayOutput {
	return o
}

func (o ContainerInstanceContainerArrayOutput) ToContainerInstanceContainerArrayOutputWithContext(ctx context.Context) ContainerInstanceContainerArrayOutput {
	return o
}

func (o ContainerInstanceContainerArrayOutput) Index(i pulumi.IntInput) ContainerInstanceContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerInstanceContainer {
		return vs[0].([]ContainerInstanceContainer)[vs[1].(int)]
	}).(ContainerInstanceContainerOutput)
}

type ContainerInstanceContainerLivenessProbe struct {
	ExecCommands     []string `pulumi:"execCommands"`
	FailureThreshold *int     `pulumi:"failureThreshold"`
	HttpGetPath      *string  `pulumi:"httpGetPath"`
	HttpGetPort      *int     `pulumi:"httpGetPort"`
	HttpGetScheme    *string  `pulumi:"httpGetScheme"`
	InitDelaySeconds *int     `pulumi:"initDelaySeconds"`
	PeriodSeconds    *int     `pulumi:"periodSeconds"`
	SuccessThreshold *int     `pulumi:"successThreshold"`
	TcpSocketPort    *int     `pulumi:"tcpSocketPort"`
	TimeoutSeconds   *int     `pulumi:"timeoutSeconds"`
}

// ContainerInstanceContainerLivenessProbeInput is an input type that accepts ContainerInstanceContainerLivenessProbeArgs and ContainerInstanceContainerLivenessProbeOutput values.
// You can construct a concrete instance of `ContainerInstanceContainerLivenessProbeInput` via:
//
//          ContainerInstanceContainerLivenessProbeArgs{...}
type ContainerInstanceContainerLivenessProbeInput interface {
	pulumi.Input

	ToContainerInstanceContainerLivenessProbeOutput() ContainerInstanceContainerLivenessProbeOutput
	ToContainerInstanceContainerLivenessProbeOutputWithContext(context.Context) ContainerInstanceContainerLivenessProbeOutput
}

type ContainerInstanceContainerLivenessProbeArgs struct {
	ExecCommands     pulumi.StringArrayInput `pulumi:"execCommands"`
	FailureThreshold pulumi.IntPtrInput      `pulumi:"failureThreshold"`
	HttpGetPath      pulumi.StringPtrInput   `pulumi:"httpGetPath"`
	HttpGetPort      pulumi.IntPtrInput      `pulumi:"httpGetPort"`
	HttpGetScheme    pulumi.StringPtrInput   `pulumi:"httpGetScheme"`
	InitDelaySeconds pulumi.IntPtrInput      `pulumi:"initDelaySeconds"`
	PeriodSeconds    pulumi.IntPtrInput      `pulumi:"periodSeconds"`
	SuccessThreshold pulumi.IntPtrInput      `pulumi:"successThreshold"`
	TcpSocketPort    pulumi.IntPtrInput      `pulumi:"tcpSocketPort"`
	TimeoutSeconds   pulumi.IntPtrInput      `pulumi:"timeoutSeconds"`
}

func (ContainerInstanceContainerLivenessProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceContainerLivenessProbe)(nil)).Elem()
}

func (i ContainerInstanceContainerLivenessProbeArgs) ToContainerInstanceContainerLivenessProbeOutput() ContainerInstanceContainerLivenessProbeOutput {
	return i.ToContainerInstanceContainerLivenessProbeOutputWithContext(context.Background())
}

func (i ContainerInstanceContainerLivenessProbeArgs) ToContainerInstanceContainerLivenessProbeOutputWithContext(ctx context.Context) ContainerInstanceContainerLivenessProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerLivenessProbeOutput)
}

func (i ContainerInstanceContainerLivenessProbeArgs) ToContainerInstanceContainerLivenessProbePtrOutput() ContainerInstanceContainerLivenessProbePtrOutput {
	return i.ToContainerInstanceContainerLivenessProbePtrOutputWithContext(context.Background())
}

func (i ContainerInstanceContainerLivenessProbeArgs) ToContainerInstanceContainerLivenessProbePtrOutputWithContext(ctx context.Context) ContainerInstanceContainerLivenessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerLivenessProbeOutput).ToContainerInstanceContainerLivenessProbePtrOutputWithContext(ctx)
}

// ContainerInstanceContainerLivenessProbePtrInput is an input type that accepts ContainerInstanceContainerLivenessProbeArgs, ContainerInstanceContainerLivenessProbePtr and ContainerInstanceContainerLivenessProbePtrOutput values.
// You can construct a concrete instance of `ContainerInstanceContainerLivenessProbePtrInput` via:
//
//          ContainerInstanceContainerLivenessProbeArgs{...}
//
//  or:
//
//          nil
type ContainerInstanceContainerLivenessProbePtrInput interface {
	pulumi.Input

	ToContainerInstanceContainerLivenessProbePtrOutput() ContainerInstanceContainerLivenessProbePtrOutput
	ToContainerInstanceContainerLivenessProbePtrOutputWithContext(context.Context) ContainerInstanceContainerLivenessProbePtrOutput
}

type containerInstanceContainerLivenessProbePtrType ContainerInstanceContainerLivenessProbeArgs

func ContainerInstanceContainerLivenessProbePtr(v *ContainerInstanceContainerLivenessProbeArgs) ContainerInstanceContainerLivenessProbePtrInput {
	return (*containerInstanceContainerLivenessProbePtrType)(v)
}

func (*containerInstanceContainerLivenessProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerInstanceContainerLivenessProbe)(nil)).Elem()
}

func (i *containerInstanceContainerLivenessProbePtrType) ToContainerInstanceContainerLivenessProbePtrOutput() ContainerInstanceContainerLivenessProbePtrOutput {
	return i.ToContainerInstanceContainerLivenessProbePtrOutputWithContext(context.Background())
}

func (i *containerInstanceContainerLivenessProbePtrType) ToContainerInstanceContainerLivenessProbePtrOutputWithContext(ctx context.Context) ContainerInstanceContainerLivenessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerLivenessProbePtrOutput)
}

type ContainerInstanceContainerLivenessProbeOutput struct{ *pulumi.OutputState }

func (ContainerInstanceContainerLivenessProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceContainerLivenessProbe)(nil)).Elem()
}

func (o ContainerInstanceContainerLivenessProbeOutput) ToContainerInstanceContainerLivenessProbeOutput() ContainerInstanceContainerLivenessProbeOutput {
	return o
}

func (o ContainerInstanceContainerLivenessProbeOutput) ToContainerInstanceContainerLivenessProbeOutputWithContext(ctx context.Context) ContainerInstanceContainerLivenessProbeOutput {
	return o
}

func (o ContainerInstanceContainerLivenessProbeOutput) ToContainerInstanceContainerLivenessProbePtrOutput() ContainerInstanceContainerLivenessProbePtrOutput {
	return o.ToContainerInstanceContainerLivenessProbePtrOutputWithContext(context.Background())
}

func (o ContainerInstanceContainerLivenessProbeOutput) ToContainerInstanceContainerLivenessProbePtrOutputWithContext(ctx context.Context) ContainerInstanceContainerLivenessProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerInstanceContainerLivenessProbe) *ContainerInstanceContainerLivenessProbe {
		return &v
	}).(ContainerInstanceContainerLivenessProbePtrOutput)
}

func (o ContainerInstanceContainerLivenessProbeOutput) ExecCommands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) []string { return v.ExecCommands }).(pulumi.StringArrayOutput)
}

func (o ContainerInstanceContainerLivenessProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerLivenessProbeOutput) HttpGetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *string { return v.HttpGetPath }).(pulumi.StringPtrOutput)
}

func (o ContainerInstanceContainerLivenessProbeOutput) HttpGetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *int { return v.HttpGetPort }).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerLivenessProbeOutput) HttpGetScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *string { return v.HttpGetScheme }).(pulumi.StringPtrOutput)
}

func (o ContainerInstanceContainerLivenessProbeOutput) InitDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *int { return v.InitDelaySeconds }).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerLivenessProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerLivenessProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerLivenessProbeOutput) TcpSocketPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *int { return v.TcpSocketPort }).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerLivenessProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerLivenessProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ContainerInstanceContainerLivenessProbePtrOutput struct{ *pulumi.OutputState }

func (ContainerInstanceContainerLivenessProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerInstanceContainerLivenessProbe)(nil)).Elem()
}

func (o ContainerInstanceContainerLivenessProbePtrOutput) ToContainerInstanceContainerLivenessProbePtrOutput() ContainerInstanceContainerLivenessProbePtrOutput {
	return o
}

func (o ContainerInstanceContainerLivenessProbePtrOutput) ToContainerInstanceContainerLivenessProbePtrOutputWithContext(ctx context.Context) ContainerInstanceContainerLivenessProbePtrOutput {
	return o
}

func (o ContainerInstanceContainerLivenessProbePtrOutput) Elem() ContainerInstanceContainerLivenessProbeOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) ContainerInstanceContainerLivenessProbe {
		if v != nil {
			return *v
		}
		var ret ContainerInstanceContainerLivenessProbe
		return ret
	}).(ContainerInstanceContainerLivenessProbeOutput)
}

func (o ContainerInstanceContainerLivenessProbePtrOutput) ExecCommands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) []string {
		if v == nil {
			return nil
		}
		return v.ExecCommands
	}).(pulumi.StringArrayOutput)
}

func (o ContainerInstanceContainerLivenessProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerLivenessProbePtrOutput) HttpGetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *string {
		if v == nil {
			return nil
		}
		return v.HttpGetPath
	}).(pulumi.StringPtrOutput)
}

func (o ContainerInstanceContainerLivenessProbePtrOutput) HttpGetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.HttpGetPort
	}).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerLivenessProbePtrOutput) HttpGetScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *string {
		if v == nil {
			return nil
		}
		return v.HttpGetScheme
	}).(pulumi.StringPtrOutput)
}

func (o ContainerInstanceContainerLivenessProbePtrOutput) InitDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.InitDelaySeconds
	}).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerLivenessProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerLivenessProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerLivenessProbePtrOutput) TcpSocketPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.TcpSocketPort
	}).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerLivenessProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerLivenessProbe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type ContainerInstanceContainerReadinessProbe struct {
	ExecCommands     []string `pulumi:"execCommands"`
	FailureThreshold *int     `pulumi:"failureThreshold"`
	HttpGetPath      *string  `pulumi:"httpGetPath"`
	HttpGetPort      *int     `pulumi:"httpGetPort"`
	HttpGetScheme    *string  `pulumi:"httpGetScheme"`
	InitDelaySeconds *int     `pulumi:"initDelaySeconds"`
	PeriodSeconds    *int     `pulumi:"periodSeconds"`
	SuccessThreshold *int     `pulumi:"successThreshold"`
	TcpSocketPort    *int     `pulumi:"tcpSocketPort"`
	TimeoutSeconds   *int     `pulumi:"timeoutSeconds"`
}

// ContainerInstanceContainerReadinessProbeInput is an input type that accepts ContainerInstanceContainerReadinessProbeArgs and ContainerInstanceContainerReadinessProbeOutput values.
// You can construct a concrete instance of `ContainerInstanceContainerReadinessProbeInput` via:
//
//          ContainerInstanceContainerReadinessProbeArgs{...}
type ContainerInstanceContainerReadinessProbeInput interface {
	pulumi.Input

	ToContainerInstanceContainerReadinessProbeOutput() ContainerInstanceContainerReadinessProbeOutput
	ToContainerInstanceContainerReadinessProbeOutputWithContext(context.Context) ContainerInstanceContainerReadinessProbeOutput
}

type ContainerInstanceContainerReadinessProbeArgs struct {
	ExecCommands     pulumi.StringArrayInput `pulumi:"execCommands"`
	FailureThreshold pulumi.IntPtrInput      `pulumi:"failureThreshold"`
	HttpGetPath      pulumi.StringPtrInput   `pulumi:"httpGetPath"`
	HttpGetPort      pulumi.IntPtrInput      `pulumi:"httpGetPort"`
	HttpGetScheme    pulumi.StringPtrInput   `pulumi:"httpGetScheme"`
	InitDelaySeconds pulumi.IntPtrInput      `pulumi:"initDelaySeconds"`
	PeriodSeconds    pulumi.IntPtrInput      `pulumi:"periodSeconds"`
	SuccessThreshold pulumi.IntPtrInput      `pulumi:"successThreshold"`
	TcpSocketPort    pulumi.IntPtrInput      `pulumi:"tcpSocketPort"`
	TimeoutSeconds   pulumi.IntPtrInput      `pulumi:"timeoutSeconds"`
}

func (ContainerInstanceContainerReadinessProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceContainerReadinessProbe)(nil)).Elem()
}

func (i ContainerInstanceContainerReadinessProbeArgs) ToContainerInstanceContainerReadinessProbeOutput() ContainerInstanceContainerReadinessProbeOutput {
	return i.ToContainerInstanceContainerReadinessProbeOutputWithContext(context.Background())
}

func (i ContainerInstanceContainerReadinessProbeArgs) ToContainerInstanceContainerReadinessProbeOutputWithContext(ctx context.Context) ContainerInstanceContainerReadinessProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerReadinessProbeOutput)
}

func (i ContainerInstanceContainerReadinessProbeArgs) ToContainerInstanceContainerReadinessProbePtrOutput() ContainerInstanceContainerReadinessProbePtrOutput {
	return i.ToContainerInstanceContainerReadinessProbePtrOutputWithContext(context.Background())
}

func (i ContainerInstanceContainerReadinessProbeArgs) ToContainerInstanceContainerReadinessProbePtrOutputWithContext(ctx context.Context) ContainerInstanceContainerReadinessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerReadinessProbeOutput).ToContainerInstanceContainerReadinessProbePtrOutputWithContext(ctx)
}

// ContainerInstanceContainerReadinessProbePtrInput is an input type that accepts ContainerInstanceContainerReadinessProbeArgs, ContainerInstanceContainerReadinessProbePtr and ContainerInstanceContainerReadinessProbePtrOutput values.
// You can construct a concrete instance of `ContainerInstanceContainerReadinessProbePtrInput` via:
//
//          ContainerInstanceContainerReadinessProbeArgs{...}
//
//  or:
//
//          nil
type ContainerInstanceContainerReadinessProbePtrInput interface {
	pulumi.Input

	ToContainerInstanceContainerReadinessProbePtrOutput() ContainerInstanceContainerReadinessProbePtrOutput
	ToContainerInstanceContainerReadinessProbePtrOutputWithContext(context.Context) ContainerInstanceContainerReadinessProbePtrOutput
}

type containerInstanceContainerReadinessProbePtrType ContainerInstanceContainerReadinessProbeArgs

func ContainerInstanceContainerReadinessProbePtr(v *ContainerInstanceContainerReadinessProbeArgs) ContainerInstanceContainerReadinessProbePtrInput {
	return (*containerInstanceContainerReadinessProbePtrType)(v)
}

func (*containerInstanceContainerReadinessProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerInstanceContainerReadinessProbe)(nil)).Elem()
}

func (i *containerInstanceContainerReadinessProbePtrType) ToContainerInstanceContainerReadinessProbePtrOutput() ContainerInstanceContainerReadinessProbePtrOutput {
	return i.ToContainerInstanceContainerReadinessProbePtrOutputWithContext(context.Background())
}

func (i *containerInstanceContainerReadinessProbePtrType) ToContainerInstanceContainerReadinessProbePtrOutputWithContext(ctx context.Context) ContainerInstanceContainerReadinessProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerReadinessProbePtrOutput)
}

type ContainerInstanceContainerReadinessProbeOutput struct{ *pulumi.OutputState }

func (ContainerInstanceContainerReadinessProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceContainerReadinessProbe)(nil)).Elem()
}

func (o ContainerInstanceContainerReadinessProbeOutput) ToContainerInstanceContainerReadinessProbeOutput() ContainerInstanceContainerReadinessProbeOutput {
	return o
}

func (o ContainerInstanceContainerReadinessProbeOutput) ToContainerInstanceContainerReadinessProbeOutputWithContext(ctx context.Context) ContainerInstanceContainerReadinessProbeOutput {
	return o
}

func (o ContainerInstanceContainerReadinessProbeOutput) ToContainerInstanceContainerReadinessProbePtrOutput() ContainerInstanceContainerReadinessProbePtrOutput {
	return o.ToContainerInstanceContainerReadinessProbePtrOutputWithContext(context.Background())
}

func (o ContainerInstanceContainerReadinessProbeOutput) ToContainerInstanceContainerReadinessProbePtrOutputWithContext(ctx context.Context) ContainerInstanceContainerReadinessProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerInstanceContainerReadinessProbe) *ContainerInstanceContainerReadinessProbe {
		return &v
	}).(ContainerInstanceContainerReadinessProbePtrOutput)
}

func (o ContainerInstanceContainerReadinessProbeOutput) ExecCommands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) []string { return v.ExecCommands }).(pulumi.StringArrayOutput)
}

func (o ContainerInstanceContainerReadinessProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerReadinessProbeOutput) HttpGetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *string { return v.HttpGetPath }).(pulumi.StringPtrOutput)
}

func (o ContainerInstanceContainerReadinessProbeOutput) HttpGetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *int { return v.HttpGetPort }).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerReadinessProbeOutput) HttpGetScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *string { return v.HttpGetScheme }).(pulumi.StringPtrOutput)
}

func (o ContainerInstanceContainerReadinessProbeOutput) InitDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *int { return v.InitDelaySeconds }).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerReadinessProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerReadinessProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerReadinessProbeOutput) TcpSocketPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *int { return v.TcpSocketPort }).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerReadinessProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerReadinessProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ContainerInstanceContainerReadinessProbePtrOutput struct{ *pulumi.OutputState }

func (ContainerInstanceContainerReadinessProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerInstanceContainerReadinessProbe)(nil)).Elem()
}

func (o ContainerInstanceContainerReadinessProbePtrOutput) ToContainerInstanceContainerReadinessProbePtrOutput() ContainerInstanceContainerReadinessProbePtrOutput {
	return o
}

func (o ContainerInstanceContainerReadinessProbePtrOutput) ToContainerInstanceContainerReadinessProbePtrOutputWithContext(ctx context.Context) ContainerInstanceContainerReadinessProbePtrOutput {
	return o
}

func (o ContainerInstanceContainerReadinessProbePtrOutput) Elem() ContainerInstanceContainerReadinessProbeOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) ContainerInstanceContainerReadinessProbe {
		if v != nil {
			return *v
		}
		var ret ContainerInstanceContainerReadinessProbe
		return ret
	}).(ContainerInstanceContainerReadinessProbeOutput)
}

func (o ContainerInstanceContainerReadinessProbePtrOutput) ExecCommands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) []string {
		if v == nil {
			return nil
		}
		return v.ExecCommands
	}).(pulumi.StringArrayOutput)
}

func (o ContainerInstanceContainerReadinessProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerReadinessProbePtrOutput) HttpGetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *string {
		if v == nil {
			return nil
		}
		return v.HttpGetPath
	}).(pulumi.StringPtrOutput)
}

func (o ContainerInstanceContainerReadinessProbePtrOutput) HttpGetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.HttpGetPort
	}).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerReadinessProbePtrOutput) HttpGetScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *string {
		if v == nil {
			return nil
		}
		return v.HttpGetScheme
	}).(pulumi.StringPtrOutput)
}

func (o ContainerInstanceContainerReadinessProbePtrOutput) InitDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.InitDelaySeconds
	}).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerReadinessProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerReadinessProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerReadinessProbePtrOutput) TcpSocketPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.TcpSocketPort
	}).(pulumi.IntPtrOutput)
}

func (o ContainerInstanceContainerReadinessProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerInstanceContainerReadinessProbe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type ContainerInstanceContainerVolumeMount struct {
	MountPropagation *string `pulumi:"mountPropagation"`
	Name             string  `pulumi:"name"`
	Path             string  `pulumi:"path"`
	ReadOnly         *bool   `pulumi:"readOnly"`
	SubPath          *string `pulumi:"subPath"`
	SubPathExpr      *string `pulumi:"subPathExpr"`
}

// ContainerInstanceContainerVolumeMountInput is an input type that accepts ContainerInstanceContainerVolumeMountArgs and ContainerInstanceContainerVolumeMountOutput values.
// You can construct a concrete instance of `ContainerInstanceContainerVolumeMountInput` via:
//
//          ContainerInstanceContainerVolumeMountArgs{...}
type ContainerInstanceContainerVolumeMountInput interface {
	pulumi.Input

	ToContainerInstanceContainerVolumeMountOutput() ContainerInstanceContainerVolumeMountOutput
	ToContainerInstanceContainerVolumeMountOutputWithContext(context.Context) ContainerInstanceContainerVolumeMountOutput
}

type ContainerInstanceContainerVolumeMountArgs struct {
	MountPropagation pulumi.StringPtrInput `pulumi:"mountPropagation"`
	Name             pulumi.StringInput    `pulumi:"name"`
	Path             pulumi.StringInput    `pulumi:"path"`
	ReadOnly         pulumi.BoolPtrInput   `pulumi:"readOnly"`
	SubPath          pulumi.StringPtrInput `pulumi:"subPath"`
	SubPathExpr      pulumi.StringPtrInput `pulumi:"subPathExpr"`
}

func (ContainerInstanceContainerVolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceContainerVolumeMount)(nil)).Elem()
}

func (i ContainerInstanceContainerVolumeMountArgs) ToContainerInstanceContainerVolumeMountOutput() ContainerInstanceContainerVolumeMountOutput {
	return i.ToContainerInstanceContainerVolumeMountOutputWithContext(context.Background())
}

func (i ContainerInstanceContainerVolumeMountArgs) ToContainerInstanceContainerVolumeMountOutputWithContext(ctx context.Context) ContainerInstanceContainerVolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerVolumeMountOutput)
}

// ContainerInstanceContainerVolumeMountArrayInput is an input type that accepts ContainerInstanceContainerVolumeMountArray and ContainerInstanceContainerVolumeMountArrayOutput values.
// You can construct a concrete instance of `ContainerInstanceContainerVolumeMountArrayInput` via:
//
//          ContainerInstanceContainerVolumeMountArray{ ContainerInstanceContainerVolumeMountArgs{...} }
type ContainerInstanceContainerVolumeMountArrayInput interface {
	pulumi.Input

	ToContainerInstanceContainerVolumeMountArrayOutput() ContainerInstanceContainerVolumeMountArrayOutput
	ToContainerInstanceContainerVolumeMountArrayOutputWithContext(context.Context) ContainerInstanceContainerVolumeMountArrayOutput
}

type ContainerInstanceContainerVolumeMountArray []ContainerInstanceContainerVolumeMountInput

func (ContainerInstanceContainerVolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceContainerVolumeMount)(nil)).Elem()
}

func (i ContainerInstanceContainerVolumeMountArray) ToContainerInstanceContainerVolumeMountArrayOutput() ContainerInstanceContainerVolumeMountArrayOutput {
	return i.ToContainerInstanceContainerVolumeMountArrayOutputWithContext(context.Background())
}

func (i ContainerInstanceContainerVolumeMountArray) ToContainerInstanceContainerVolumeMountArrayOutputWithContext(ctx context.Context) ContainerInstanceContainerVolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceContainerVolumeMountArrayOutput)
}

type ContainerInstanceContainerVolumeMountOutput struct{ *pulumi.OutputState }

func (ContainerInstanceContainerVolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceContainerVolumeMount)(nil)).Elem()
}

func (o ContainerInstanceContainerVolumeMountOutput) ToContainerInstanceContainerVolumeMountOutput() ContainerInstanceContainerVolumeMountOutput {
	return o
}

func (o ContainerInstanceContainerVolumeMountOutput) ToContainerInstanceContainerVolumeMountOutputWithContext(ctx context.Context) ContainerInstanceContainerVolumeMountOutput {
	return o
}

func (o ContainerInstanceContainerVolumeMountOutput) MountPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerVolumeMount) *string { return v.MountPropagation }).(pulumi.StringPtrOutput)
}

func (o ContainerInstanceContainerVolumeMountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceContainerVolumeMount) string { return v.Name }).(pulumi.StringOutput)
}

func (o ContainerInstanceContainerVolumeMountOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceContainerVolumeMount) string { return v.Path }).(pulumi.StringOutput)
}

func (o ContainerInstanceContainerVolumeMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerVolumeMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ContainerInstanceContainerVolumeMountOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerVolumeMount) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

func (o ContainerInstanceContainerVolumeMountOutput) SubPathExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceContainerVolumeMount) *string { return v.SubPathExpr }).(pulumi.StringPtrOutput)
}

type ContainerInstanceContainerVolumeMountArrayOutput struct{ *pulumi.OutputState }

func (ContainerInstanceContainerVolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceContainerVolumeMount)(nil)).Elem()
}

func (o ContainerInstanceContainerVolumeMountArrayOutput) ToContainerInstanceContainerVolumeMountArrayOutput() ContainerInstanceContainerVolumeMountArrayOutput {
	return o
}

func (o ContainerInstanceContainerVolumeMountArrayOutput) ToContainerInstanceContainerVolumeMountArrayOutputWithContext(ctx context.Context) ContainerInstanceContainerVolumeMountArrayOutput {
	return o
}

func (o ContainerInstanceContainerVolumeMountArrayOutput) Index(i pulumi.IntInput) ContainerInstanceContainerVolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerInstanceContainerVolumeMount {
		return vs[0].([]ContainerInstanceContainerVolumeMount)[vs[1].(int)]
	}).(ContainerInstanceContainerVolumeMountOutput)
}

type ContainerInstanceImageRegistryCredential struct {
	Name     *string `pulumi:"name"`
	Password *string `pulumi:"password"`
	Server   *string `pulumi:"server"`
	Username *string `pulumi:"username"`
}

// ContainerInstanceImageRegistryCredentialInput is an input type that accepts ContainerInstanceImageRegistryCredentialArgs and ContainerInstanceImageRegistryCredentialOutput values.
// You can construct a concrete instance of `ContainerInstanceImageRegistryCredentialInput` via:
//
//          ContainerInstanceImageRegistryCredentialArgs{...}
type ContainerInstanceImageRegistryCredentialInput interface {
	pulumi.Input

	ToContainerInstanceImageRegistryCredentialOutput() ContainerInstanceImageRegistryCredentialOutput
	ToContainerInstanceImageRegistryCredentialOutputWithContext(context.Context) ContainerInstanceImageRegistryCredentialOutput
}

type ContainerInstanceImageRegistryCredentialArgs struct {
	Name     pulumi.StringPtrInput `pulumi:"name"`
	Password pulumi.StringPtrInput `pulumi:"password"`
	Server   pulumi.StringPtrInput `pulumi:"server"`
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ContainerInstanceImageRegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceImageRegistryCredential)(nil)).Elem()
}

func (i ContainerInstanceImageRegistryCredentialArgs) ToContainerInstanceImageRegistryCredentialOutput() ContainerInstanceImageRegistryCredentialOutput {
	return i.ToContainerInstanceImageRegistryCredentialOutputWithContext(context.Background())
}

func (i ContainerInstanceImageRegistryCredentialArgs) ToContainerInstanceImageRegistryCredentialOutputWithContext(ctx context.Context) ContainerInstanceImageRegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceImageRegistryCredentialOutput)
}

// ContainerInstanceImageRegistryCredentialArrayInput is an input type that accepts ContainerInstanceImageRegistryCredentialArray and ContainerInstanceImageRegistryCredentialArrayOutput values.
// You can construct a concrete instance of `ContainerInstanceImageRegistryCredentialArrayInput` via:
//
//          ContainerInstanceImageRegistryCredentialArray{ ContainerInstanceImageRegistryCredentialArgs{...} }
type ContainerInstanceImageRegistryCredentialArrayInput interface {
	pulumi.Input

	ToContainerInstanceImageRegistryCredentialArrayOutput() ContainerInstanceImageRegistryCredentialArrayOutput
	ToContainerInstanceImageRegistryCredentialArrayOutputWithContext(context.Context) ContainerInstanceImageRegistryCredentialArrayOutput
}

type ContainerInstanceImageRegistryCredentialArray []ContainerInstanceImageRegistryCredentialInput

func (ContainerInstanceImageRegistryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceImageRegistryCredential)(nil)).Elem()
}

func (i ContainerInstanceImageRegistryCredentialArray) ToContainerInstanceImageRegistryCredentialArrayOutput() ContainerInstanceImageRegistryCredentialArrayOutput {
	return i.ToContainerInstanceImageRegistryCredentialArrayOutputWithContext(context.Background())
}

func (i ContainerInstanceImageRegistryCredentialArray) ToContainerInstanceImageRegistryCredentialArrayOutputWithContext(ctx context.Context) ContainerInstanceImageRegistryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceImageRegistryCredentialArrayOutput)
}

type ContainerInstanceImageRegistryCredentialOutput struct{ *pulumi.OutputState }

func (ContainerInstanceImageRegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceImageRegistryCredential)(nil)).Elem()
}

func (o ContainerInstanceImageRegistryCredentialOutput) ToContainerInstanceImageRegistryCredentialOutput() ContainerInstanceImageRegistryCredentialOutput {
	return o
}

func (o ContainerInstanceImageRegistryCredentialOutput) ToContainerInstanceImageRegistryCredentialOutputWithContext(ctx context.Context) ContainerInstanceImageRegistryCredentialOutput {
	return o
}

func (o ContainerInstanceImageRegistryCredentialOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceImageRegistryCredential) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ContainerInstanceImageRegistryCredentialOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceImageRegistryCredential) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o ContainerInstanceImageRegistryCredentialOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceImageRegistryCredential) *string { return v.Server }).(pulumi.StringPtrOutput)
}

func (o ContainerInstanceImageRegistryCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceImageRegistryCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ContainerInstanceImageRegistryCredentialArrayOutput struct{ *pulumi.OutputState }

func (ContainerInstanceImageRegistryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceImageRegistryCredential)(nil)).Elem()
}

func (o ContainerInstanceImageRegistryCredentialArrayOutput) ToContainerInstanceImageRegistryCredentialArrayOutput() ContainerInstanceImageRegistryCredentialArrayOutput {
	return o
}

func (o ContainerInstanceImageRegistryCredentialArrayOutput) ToContainerInstanceImageRegistryCredentialArrayOutputWithContext(ctx context.Context) ContainerInstanceImageRegistryCredentialArrayOutput {
	return o
}

func (o ContainerInstanceImageRegistryCredentialArrayOutput) Index(i pulumi.IntInput) ContainerInstanceImageRegistryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerInstanceImageRegistryCredential {
		return vs[0].([]ContainerInstanceImageRegistryCredential)[vs[1].(int)]
	}).(ContainerInstanceImageRegistryCredentialOutput)
}

type ContainerInstanceInitContainer struct {
	Args         []string                                    `pulumi:"args"`
	Commands     []string                                    `pulumi:"commands"`
	Cpu          *float64                                    `pulumi:"cpu"`
	EnvVars      map[string]interface{}                      `pulumi:"envVars"`
	Image        string                                      `pulumi:"image"`
	Memory       *float64                                    `pulumi:"memory"`
	Name         string                                      `pulumi:"name"`
	VolumeMounts []ContainerInstanceInitContainerVolumeMount `pulumi:"volumeMounts"`
	WorkingDir   *string                                     `pulumi:"workingDir"`
}

// ContainerInstanceInitContainerInput is an input type that accepts ContainerInstanceInitContainerArgs and ContainerInstanceInitContainerOutput values.
// You can construct a concrete instance of `ContainerInstanceInitContainerInput` via:
//
//          ContainerInstanceInitContainerArgs{...}
type ContainerInstanceInitContainerInput interface {
	pulumi.Input

	ToContainerInstanceInitContainerOutput() ContainerInstanceInitContainerOutput
	ToContainerInstanceInitContainerOutputWithContext(context.Context) ContainerInstanceInitContainerOutput
}

type ContainerInstanceInitContainerArgs struct {
	Args         pulumi.StringArrayInput                             `pulumi:"args"`
	Commands     pulumi.StringArrayInput                             `pulumi:"commands"`
	Cpu          pulumi.Float64PtrInput                              `pulumi:"cpu"`
	EnvVars      pulumi.MapInput                                     `pulumi:"envVars"`
	Image        pulumi.StringInput                                  `pulumi:"image"`
	Memory       pulumi.Float64PtrInput                              `pulumi:"memory"`
	Name         pulumi.StringInput                                  `pulumi:"name"`
	VolumeMounts ContainerInstanceInitContainerVolumeMountArrayInput `pulumi:"volumeMounts"`
	WorkingDir   pulumi.StringPtrInput                               `pulumi:"workingDir"`
}

func (ContainerInstanceInitContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceInitContainer)(nil)).Elem()
}

func (i ContainerInstanceInitContainerArgs) ToContainerInstanceInitContainerOutput() ContainerInstanceInitContainerOutput {
	return i.ToContainerInstanceInitContainerOutputWithContext(context.Background())
}

func (i ContainerInstanceInitContainerArgs) ToContainerInstanceInitContainerOutputWithContext(ctx context.Context) ContainerInstanceInitContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceInitContainerOutput)
}

// ContainerInstanceInitContainerArrayInput is an input type that accepts ContainerInstanceInitContainerArray and ContainerInstanceInitContainerArrayOutput values.
// You can construct a concrete instance of `ContainerInstanceInitContainerArrayInput` via:
//
//          ContainerInstanceInitContainerArray{ ContainerInstanceInitContainerArgs{...} }
type ContainerInstanceInitContainerArrayInput interface {
	pulumi.Input

	ToContainerInstanceInitContainerArrayOutput() ContainerInstanceInitContainerArrayOutput
	ToContainerInstanceInitContainerArrayOutputWithContext(context.Context) ContainerInstanceInitContainerArrayOutput
}

type ContainerInstanceInitContainerArray []ContainerInstanceInitContainerInput

func (ContainerInstanceInitContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceInitContainer)(nil)).Elem()
}

func (i ContainerInstanceInitContainerArray) ToContainerInstanceInitContainerArrayOutput() ContainerInstanceInitContainerArrayOutput {
	return i.ToContainerInstanceInitContainerArrayOutputWithContext(context.Background())
}

func (i ContainerInstanceInitContainerArray) ToContainerInstanceInitContainerArrayOutputWithContext(ctx context.Context) ContainerInstanceInitContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceInitContainerArrayOutput)
}

type ContainerInstanceInitContainerOutput struct{ *pulumi.OutputState }

func (ContainerInstanceInitContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceInitContainer)(nil)).Elem()
}

func (o ContainerInstanceInitContainerOutput) ToContainerInstanceInitContainerOutput() ContainerInstanceInitContainerOutput {
	return o
}

func (o ContainerInstanceInitContainerOutput) ToContainerInstanceInitContainerOutputWithContext(ctx context.Context) ContainerInstanceInitContainerOutput {
	return o
}

func (o ContainerInstanceInitContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) []string { return v.Args }).(pulumi.StringArrayOutput)
}

func (o ContainerInstanceInitContainerOutput) Commands() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) []string { return v.Commands }).(pulumi.StringArrayOutput)
}

func (o ContainerInstanceInitContainerOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

func (o ContainerInstanceInitContainerOutput) EnvVars() pulumi.MapOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) map[string]interface{} { return v.EnvVars }).(pulumi.MapOutput)
}

func (o ContainerInstanceInitContainerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) string { return v.Image }).(pulumi.StringOutput)
}

func (o ContainerInstanceInitContainerOutput) Memory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) *float64 { return v.Memory }).(pulumi.Float64PtrOutput)
}

func (o ContainerInstanceInitContainerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) string { return v.Name }).(pulumi.StringOutput)
}

func (o ContainerInstanceInitContainerOutput) VolumeMounts() ContainerInstanceInitContainerVolumeMountArrayOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) []ContainerInstanceInitContainerVolumeMount {
		return v.VolumeMounts
	}).(ContainerInstanceInitContainerVolumeMountArrayOutput)
}

func (o ContainerInstanceInitContainerOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainer) *string { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type ContainerInstanceInitContainerArrayOutput struct{ *pulumi.OutputState }

func (ContainerInstanceInitContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceInitContainer)(nil)).Elem()
}

func (o ContainerInstanceInitContainerArrayOutput) ToContainerInstanceInitContainerArrayOutput() ContainerInstanceInitContainerArrayOutput {
	return o
}

func (o ContainerInstanceInitContainerArrayOutput) ToContainerInstanceInitContainerArrayOutputWithContext(ctx context.Context) ContainerInstanceInitContainerArrayOutput {
	return o
}

func (o ContainerInstanceInitContainerArrayOutput) Index(i pulumi.IntInput) ContainerInstanceInitContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerInstanceInitContainer {
		return vs[0].([]ContainerInstanceInitContainer)[vs[1].(int)]
	}).(ContainerInstanceInitContainerOutput)
}

type ContainerInstanceInitContainerVolumeMount struct {
	MountPropagation *string `pulumi:"mountPropagation"`
	Name             string  `pulumi:"name"`
	Path             string  `pulumi:"path"`
	ReadOnly         *bool   `pulumi:"readOnly"`
	SubPath          *string `pulumi:"subPath"`
	SubPathExpr      *string `pulumi:"subPathExpr"`
}

// ContainerInstanceInitContainerVolumeMountInput is an input type that accepts ContainerInstanceInitContainerVolumeMountArgs and ContainerInstanceInitContainerVolumeMountOutput values.
// You can construct a concrete instance of `ContainerInstanceInitContainerVolumeMountInput` via:
//
//          ContainerInstanceInitContainerVolumeMountArgs{...}
type ContainerInstanceInitContainerVolumeMountInput interface {
	pulumi.Input

	ToContainerInstanceInitContainerVolumeMountOutput() ContainerInstanceInitContainerVolumeMountOutput
	ToContainerInstanceInitContainerVolumeMountOutputWithContext(context.Context) ContainerInstanceInitContainerVolumeMountOutput
}

type ContainerInstanceInitContainerVolumeMountArgs struct {
	MountPropagation pulumi.StringPtrInput `pulumi:"mountPropagation"`
	Name             pulumi.StringInput    `pulumi:"name"`
	Path             pulumi.StringInput    `pulumi:"path"`
	ReadOnly         pulumi.BoolPtrInput   `pulumi:"readOnly"`
	SubPath          pulumi.StringPtrInput `pulumi:"subPath"`
	SubPathExpr      pulumi.StringPtrInput `pulumi:"subPathExpr"`
}

func (ContainerInstanceInitContainerVolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceInitContainerVolumeMount)(nil)).Elem()
}

func (i ContainerInstanceInitContainerVolumeMountArgs) ToContainerInstanceInitContainerVolumeMountOutput() ContainerInstanceInitContainerVolumeMountOutput {
	return i.ToContainerInstanceInitContainerVolumeMountOutputWithContext(context.Background())
}

func (i ContainerInstanceInitContainerVolumeMountArgs) ToContainerInstanceInitContainerVolumeMountOutputWithContext(ctx context.Context) ContainerInstanceInitContainerVolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceInitContainerVolumeMountOutput)
}

// ContainerInstanceInitContainerVolumeMountArrayInput is an input type that accepts ContainerInstanceInitContainerVolumeMountArray and ContainerInstanceInitContainerVolumeMountArrayOutput values.
// You can construct a concrete instance of `ContainerInstanceInitContainerVolumeMountArrayInput` via:
//
//          ContainerInstanceInitContainerVolumeMountArray{ ContainerInstanceInitContainerVolumeMountArgs{...} }
type ContainerInstanceInitContainerVolumeMountArrayInput interface {
	pulumi.Input

	ToContainerInstanceInitContainerVolumeMountArrayOutput() ContainerInstanceInitContainerVolumeMountArrayOutput
	ToContainerInstanceInitContainerVolumeMountArrayOutputWithContext(context.Context) ContainerInstanceInitContainerVolumeMountArrayOutput
}

type ContainerInstanceInitContainerVolumeMountArray []ContainerInstanceInitContainerVolumeMountInput

func (ContainerInstanceInitContainerVolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceInitContainerVolumeMount)(nil)).Elem()
}

func (i ContainerInstanceInitContainerVolumeMountArray) ToContainerInstanceInitContainerVolumeMountArrayOutput() ContainerInstanceInitContainerVolumeMountArrayOutput {
	return i.ToContainerInstanceInitContainerVolumeMountArrayOutputWithContext(context.Background())
}

func (i ContainerInstanceInitContainerVolumeMountArray) ToContainerInstanceInitContainerVolumeMountArrayOutputWithContext(ctx context.Context) ContainerInstanceInitContainerVolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceInitContainerVolumeMountArrayOutput)
}

type ContainerInstanceInitContainerVolumeMountOutput struct{ *pulumi.OutputState }

func (ContainerInstanceInitContainerVolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceInitContainerVolumeMount)(nil)).Elem()
}

func (o ContainerInstanceInitContainerVolumeMountOutput) ToContainerInstanceInitContainerVolumeMountOutput() ContainerInstanceInitContainerVolumeMountOutput {
	return o
}

func (o ContainerInstanceInitContainerVolumeMountOutput) ToContainerInstanceInitContainerVolumeMountOutputWithContext(ctx context.Context) ContainerInstanceInitContainerVolumeMountOutput {
	return o
}

func (o ContainerInstanceInitContainerVolumeMountOutput) MountPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainerVolumeMount) *string { return v.MountPropagation }).(pulumi.StringPtrOutput)
}

func (o ContainerInstanceInitContainerVolumeMountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainerVolumeMount) string { return v.Name }).(pulumi.StringOutput)
}

func (o ContainerInstanceInitContainerVolumeMountOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainerVolumeMount) string { return v.Path }).(pulumi.StringOutput)
}

func (o ContainerInstanceInitContainerVolumeMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainerVolumeMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ContainerInstanceInitContainerVolumeMountOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainerVolumeMount) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

func (o ContainerInstanceInitContainerVolumeMountOutput) SubPathExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerInstanceInitContainerVolumeMount) *string { return v.SubPathExpr }).(pulumi.StringPtrOutput)
}

type ContainerInstanceInitContainerVolumeMountArrayOutput struct{ *pulumi.OutputState }

func (ContainerInstanceInitContainerVolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceInitContainerVolumeMount)(nil)).Elem()
}

func (o ContainerInstanceInitContainerVolumeMountArrayOutput) ToContainerInstanceInitContainerVolumeMountArrayOutput() ContainerInstanceInitContainerVolumeMountArrayOutput {
	return o
}

func (o ContainerInstanceInitContainerVolumeMountArrayOutput) ToContainerInstanceInitContainerVolumeMountArrayOutputWithContext(ctx context.Context) ContainerInstanceInitContainerVolumeMountArrayOutput {
	return o
}

func (o ContainerInstanceInitContainerVolumeMountArrayOutput) Index(i pulumi.IntInput) ContainerInstanceInitContainerVolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerInstanceInitContainerVolumeMount {
		return vs[0].([]ContainerInstanceInitContainerVolumeMount)[vs[1].(int)]
	}).(ContainerInstanceInitContainerVolumeMountOutput)
}

type ContainerInstanceNfsVolume struct {
	Name     string `pulumi:"name"`
	Path     string `pulumi:"path"`
	ReadOnly *bool  `pulumi:"readOnly"`
	Server   string `pulumi:"server"`
}

// ContainerInstanceNfsVolumeInput is an input type that accepts ContainerInstanceNfsVolumeArgs and ContainerInstanceNfsVolumeOutput values.
// You can construct a concrete instance of `ContainerInstanceNfsVolumeInput` via:
//
//          ContainerInstanceNfsVolumeArgs{...}
type ContainerInstanceNfsVolumeInput interface {
	pulumi.Input

	ToContainerInstanceNfsVolumeOutput() ContainerInstanceNfsVolumeOutput
	ToContainerInstanceNfsVolumeOutputWithContext(context.Context) ContainerInstanceNfsVolumeOutput
}

type ContainerInstanceNfsVolumeArgs struct {
	Name     pulumi.StringInput  `pulumi:"name"`
	Path     pulumi.StringInput  `pulumi:"path"`
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	Server   pulumi.StringInput  `pulumi:"server"`
}

func (ContainerInstanceNfsVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceNfsVolume)(nil)).Elem()
}

func (i ContainerInstanceNfsVolumeArgs) ToContainerInstanceNfsVolumeOutput() ContainerInstanceNfsVolumeOutput {
	return i.ToContainerInstanceNfsVolumeOutputWithContext(context.Background())
}

func (i ContainerInstanceNfsVolumeArgs) ToContainerInstanceNfsVolumeOutputWithContext(ctx context.Context) ContainerInstanceNfsVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceNfsVolumeOutput)
}

// ContainerInstanceNfsVolumeArrayInput is an input type that accepts ContainerInstanceNfsVolumeArray and ContainerInstanceNfsVolumeArrayOutput values.
// You can construct a concrete instance of `ContainerInstanceNfsVolumeArrayInput` via:
//
//          ContainerInstanceNfsVolumeArray{ ContainerInstanceNfsVolumeArgs{...} }
type ContainerInstanceNfsVolumeArrayInput interface {
	pulumi.Input

	ToContainerInstanceNfsVolumeArrayOutput() ContainerInstanceNfsVolumeArrayOutput
	ToContainerInstanceNfsVolumeArrayOutputWithContext(context.Context) ContainerInstanceNfsVolumeArrayOutput
}

type ContainerInstanceNfsVolumeArray []ContainerInstanceNfsVolumeInput

func (ContainerInstanceNfsVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceNfsVolume)(nil)).Elem()
}

func (i ContainerInstanceNfsVolumeArray) ToContainerInstanceNfsVolumeArrayOutput() ContainerInstanceNfsVolumeArrayOutput {
	return i.ToContainerInstanceNfsVolumeArrayOutputWithContext(context.Background())
}

func (i ContainerInstanceNfsVolumeArray) ToContainerInstanceNfsVolumeArrayOutputWithContext(ctx context.Context) ContainerInstanceNfsVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerInstanceNfsVolumeArrayOutput)
}

type ContainerInstanceNfsVolumeOutput struct{ *pulumi.OutputState }

func (ContainerInstanceNfsVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerInstanceNfsVolume)(nil)).Elem()
}

func (o ContainerInstanceNfsVolumeOutput) ToContainerInstanceNfsVolumeOutput() ContainerInstanceNfsVolumeOutput {
	return o
}

func (o ContainerInstanceNfsVolumeOutput) ToContainerInstanceNfsVolumeOutputWithContext(ctx context.Context) ContainerInstanceNfsVolumeOutput {
	return o
}

func (o ContainerInstanceNfsVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceNfsVolume) string { return v.Name }).(pulumi.StringOutput)
}

func (o ContainerInstanceNfsVolumeOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceNfsVolume) string { return v.Path }).(pulumi.StringOutput)
}

func (o ContainerInstanceNfsVolumeOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContainerInstanceNfsVolume) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ContainerInstanceNfsVolumeOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerInstanceNfsVolume) string { return v.Server }).(pulumi.StringOutput)
}

type ContainerInstanceNfsVolumeArrayOutput struct{ *pulumi.OutputState }

func (ContainerInstanceNfsVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerInstanceNfsVolume)(nil)).Elem()
}

func (o ContainerInstanceNfsVolumeArrayOutput) ToContainerInstanceNfsVolumeArrayOutput() ContainerInstanceNfsVolumeArrayOutput {
	return o
}

func (o ContainerInstanceNfsVolumeArrayOutput) ToContainerInstanceNfsVolumeArrayOutputWithContext(ctx context.Context) ContainerInstanceNfsVolumeArrayOutput {
	return o
}

func (o ContainerInstanceNfsVolumeArrayOutput) Index(i pulumi.IntInput) ContainerInstanceNfsVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerInstanceNfsVolume {
		return vs[0].([]ContainerInstanceNfsVolume)[vs[1].(int)]
	}).(ContainerInstanceNfsVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCredentialAddressInput)(nil)).Elem(), ClusterCredentialAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCredentialAddressArrayInput)(nil)).Elem(), ClusterCredentialAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCredentialInternalLbInput)(nil)).Elem(), ClusterCredentialInternalLbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCredentialInternalLbArrayInput)(nil)).Elem(), ClusterCredentialInternalLbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCredentialPublicLbInput)(nil)).Elem(), ClusterCredentialPublicLbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCredentialPublicLbArrayInput)(nil)).Elem(), ClusterCredentialPublicLbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterDnsServerInput)(nil)).Elem(), ClusterDnsServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterDnsServerArrayInput)(nil)).Elem(), ClusterDnsServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInternalLbInput)(nil)).Elem(), ClusterInternalLbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInternalLbPtrInput)(nil)).Elem(), ClusterInternalLbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPublicLbInput)(nil)).Elem(), ClusterPublicLbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPublicLbPtrInput)(nil)).Elem(), ClusterPublicLbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClustersListInput)(nil)).Elem(), ClustersListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClustersListArrayInput)(nil)).Elem(), ClustersListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClustersListDnsServerInput)(nil)).Elem(), ClustersListDnsServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClustersListDnsServerArrayInput)(nil)).Elem(), ClustersListDnsServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceCbsVolumeInput)(nil)).Elem(), ContainerInstanceCbsVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceCbsVolumeArrayInput)(nil)).Elem(), ContainerInstanceCbsVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceContainerInput)(nil)).Elem(), ContainerInstanceContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceContainerArrayInput)(nil)).Elem(), ContainerInstanceContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceContainerLivenessProbeInput)(nil)).Elem(), ContainerInstanceContainerLivenessProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceContainerLivenessProbePtrInput)(nil)).Elem(), ContainerInstanceContainerLivenessProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceContainerReadinessProbeInput)(nil)).Elem(), ContainerInstanceContainerReadinessProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceContainerReadinessProbePtrInput)(nil)).Elem(), ContainerInstanceContainerReadinessProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceContainerVolumeMountInput)(nil)).Elem(), ContainerInstanceContainerVolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceContainerVolumeMountArrayInput)(nil)).Elem(), ContainerInstanceContainerVolumeMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceImageRegistryCredentialInput)(nil)).Elem(), ContainerInstanceImageRegistryCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceImageRegistryCredentialArrayInput)(nil)).Elem(), ContainerInstanceImageRegistryCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceInitContainerInput)(nil)).Elem(), ContainerInstanceInitContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceInitContainerArrayInput)(nil)).Elem(), ContainerInstanceInitContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceInitContainerVolumeMountInput)(nil)).Elem(), ContainerInstanceInitContainerVolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceInitContainerVolumeMountArrayInput)(nil)).Elem(), ContainerInstanceInitContainerVolumeMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceNfsVolumeInput)(nil)).Elem(), ContainerInstanceNfsVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInstanceNfsVolumeArrayInput)(nil)).Elem(), ContainerInstanceNfsVolumeArray{})
	pulumi.RegisterOutputType(ClusterCredentialAddressOutput{})
	pulumi.RegisterOutputType(ClusterCredentialAddressArrayOutput{})
	pulumi.RegisterOutputType(ClusterCredentialInternalLbOutput{})
	pulumi.RegisterOutputType(ClusterCredentialInternalLbArrayOutput{})
	pulumi.RegisterOutputType(ClusterCredentialPublicLbOutput{})
	pulumi.RegisterOutputType(ClusterCredentialPublicLbArrayOutput{})
	pulumi.RegisterOutputType(ClusterDnsServerOutput{})
	pulumi.RegisterOutputType(ClusterDnsServerArrayOutput{})
	pulumi.RegisterOutputType(ClusterInternalLbOutput{})
	pulumi.RegisterOutputType(ClusterInternalLbPtrOutput{})
	pulumi.RegisterOutputType(ClusterPublicLbOutput{})
	pulumi.RegisterOutputType(ClusterPublicLbPtrOutput{})
	pulumi.RegisterOutputType(ClustersListOutput{})
	pulumi.RegisterOutputType(ClustersListArrayOutput{})
	pulumi.RegisterOutputType(ClustersListDnsServerOutput{})
	pulumi.RegisterOutputType(ClustersListDnsServerArrayOutput{})
	pulumi.RegisterOutputType(ContainerInstanceCbsVolumeOutput{})
	pulumi.RegisterOutputType(ContainerInstanceCbsVolumeArrayOutput{})
	pulumi.RegisterOutputType(ContainerInstanceContainerOutput{})
	pulumi.RegisterOutputType(ContainerInstanceContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerInstanceContainerLivenessProbeOutput{})
	pulumi.RegisterOutputType(ContainerInstanceContainerLivenessProbePtrOutput{})
	pulumi.RegisterOutputType(ContainerInstanceContainerReadinessProbeOutput{})
	pulumi.RegisterOutputType(ContainerInstanceContainerReadinessProbePtrOutput{})
	pulumi.RegisterOutputType(ContainerInstanceContainerVolumeMountOutput{})
	pulumi.RegisterOutputType(ContainerInstanceContainerVolumeMountArrayOutput{})
	pulumi.RegisterOutputType(ContainerInstanceImageRegistryCredentialOutput{})
	pulumi.RegisterOutputType(ContainerInstanceImageRegistryCredentialArrayOutput{})
	pulumi.RegisterOutputType(ContainerInstanceInitContainerOutput{})
	pulumi.RegisterOutputType(ContainerInstanceInitContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerInstanceInitContainerVolumeMountOutput{})
	pulumi.RegisterOutputType(ContainerInstanceInitContainerVolumeMountArrayOutput{})
	pulumi.RegisterOutputType(ContainerInstanceNfsVolumeOutput{})
	pulumi.RegisterOutputType(ContainerInstanceNfsVolumeArrayOutput{})
}
