// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package security

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GroupRuleAddressTemplate struct {
	// Address template group ID, conflicts with `templateId`.
	GroupId *string `pulumi:"groupId"`
	// Address template ID, conflicts with `groupId`.
	TemplateId *string `pulumi:"templateId"`
}

// GroupRuleAddressTemplateInput is an input type that accepts GroupRuleAddressTemplateArgs and GroupRuleAddressTemplateOutput values.
// You can construct a concrete instance of `GroupRuleAddressTemplateInput` via:
//
//          GroupRuleAddressTemplateArgs{...}
type GroupRuleAddressTemplateInput interface {
	pulumi.Input

	ToGroupRuleAddressTemplateOutput() GroupRuleAddressTemplateOutput
	ToGroupRuleAddressTemplateOutputWithContext(context.Context) GroupRuleAddressTemplateOutput
}

type GroupRuleAddressTemplateArgs struct {
	// Address template group ID, conflicts with `templateId`.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Address template ID, conflicts with `groupId`.
	TemplateId pulumi.StringPtrInput `pulumi:"templateId"`
}

func (GroupRuleAddressTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupRuleAddressTemplate)(nil)).Elem()
}

func (i GroupRuleAddressTemplateArgs) ToGroupRuleAddressTemplateOutput() GroupRuleAddressTemplateOutput {
	return i.ToGroupRuleAddressTemplateOutputWithContext(context.Background())
}

func (i GroupRuleAddressTemplateArgs) ToGroupRuleAddressTemplateOutputWithContext(ctx context.Context) GroupRuleAddressTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRuleAddressTemplateOutput)
}

func (i GroupRuleAddressTemplateArgs) ToGroupRuleAddressTemplatePtrOutput() GroupRuleAddressTemplatePtrOutput {
	return i.ToGroupRuleAddressTemplatePtrOutputWithContext(context.Background())
}

func (i GroupRuleAddressTemplateArgs) ToGroupRuleAddressTemplatePtrOutputWithContext(ctx context.Context) GroupRuleAddressTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRuleAddressTemplateOutput).ToGroupRuleAddressTemplatePtrOutputWithContext(ctx)
}

// GroupRuleAddressTemplatePtrInput is an input type that accepts GroupRuleAddressTemplateArgs, GroupRuleAddressTemplatePtr and GroupRuleAddressTemplatePtrOutput values.
// You can construct a concrete instance of `GroupRuleAddressTemplatePtrInput` via:
//
//          GroupRuleAddressTemplateArgs{...}
//
//  or:
//
//          nil
type GroupRuleAddressTemplatePtrInput interface {
	pulumi.Input

	ToGroupRuleAddressTemplatePtrOutput() GroupRuleAddressTemplatePtrOutput
	ToGroupRuleAddressTemplatePtrOutputWithContext(context.Context) GroupRuleAddressTemplatePtrOutput
}

type groupRuleAddressTemplatePtrType GroupRuleAddressTemplateArgs

func GroupRuleAddressTemplatePtr(v *GroupRuleAddressTemplateArgs) GroupRuleAddressTemplatePtrInput {
	return (*groupRuleAddressTemplatePtrType)(v)
}

func (*groupRuleAddressTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupRuleAddressTemplate)(nil)).Elem()
}

func (i *groupRuleAddressTemplatePtrType) ToGroupRuleAddressTemplatePtrOutput() GroupRuleAddressTemplatePtrOutput {
	return i.ToGroupRuleAddressTemplatePtrOutputWithContext(context.Background())
}

func (i *groupRuleAddressTemplatePtrType) ToGroupRuleAddressTemplatePtrOutputWithContext(ctx context.Context) GroupRuleAddressTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRuleAddressTemplatePtrOutput)
}

type GroupRuleAddressTemplateOutput struct{ *pulumi.OutputState }

func (GroupRuleAddressTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupRuleAddressTemplate)(nil)).Elem()
}

func (o GroupRuleAddressTemplateOutput) ToGroupRuleAddressTemplateOutput() GroupRuleAddressTemplateOutput {
	return o
}

func (o GroupRuleAddressTemplateOutput) ToGroupRuleAddressTemplateOutputWithContext(ctx context.Context) GroupRuleAddressTemplateOutput {
	return o
}

func (o GroupRuleAddressTemplateOutput) ToGroupRuleAddressTemplatePtrOutput() GroupRuleAddressTemplatePtrOutput {
	return o.ToGroupRuleAddressTemplatePtrOutputWithContext(context.Background())
}

func (o GroupRuleAddressTemplateOutput) ToGroupRuleAddressTemplatePtrOutputWithContext(ctx context.Context) GroupRuleAddressTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupRuleAddressTemplate) *GroupRuleAddressTemplate {
		return &v
	}).(GroupRuleAddressTemplatePtrOutput)
}

// Address template group ID, conflicts with `templateId`.
func (o GroupRuleAddressTemplateOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupRuleAddressTemplate) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Address template ID, conflicts with `groupId`.
func (o GroupRuleAddressTemplateOutput) TemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupRuleAddressTemplate) *string { return v.TemplateId }).(pulumi.StringPtrOutput)
}

type GroupRuleAddressTemplatePtrOutput struct{ *pulumi.OutputState }

func (GroupRuleAddressTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupRuleAddressTemplate)(nil)).Elem()
}

func (o GroupRuleAddressTemplatePtrOutput) ToGroupRuleAddressTemplatePtrOutput() GroupRuleAddressTemplatePtrOutput {
	return o
}

func (o GroupRuleAddressTemplatePtrOutput) ToGroupRuleAddressTemplatePtrOutputWithContext(ctx context.Context) GroupRuleAddressTemplatePtrOutput {
	return o
}

func (o GroupRuleAddressTemplatePtrOutput) Elem() GroupRuleAddressTemplateOutput {
	return o.ApplyT(func(v *GroupRuleAddressTemplate) GroupRuleAddressTemplate {
		if v != nil {
			return *v
		}
		var ret GroupRuleAddressTemplate
		return ret
	}).(GroupRuleAddressTemplateOutput)
}

// Address template group ID, conflicts with `templateId`.
func (o GroupRuleAddressTemplatePtrOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupRuleAddressTemplate) *string {
		if v == nil {
			return nil
		}
		return v.GroupId
	}).(pulumi.StringPtrOutput)
}

// Address template ID, conflicts with `groupId`.
func (o GroupRuleAddressTemplatePtrOutput) TemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupRuleAddressTemplate) *string {
		if v == nil {
			return nil
		}
		return v.TemplateId
	}).(pulumi.StringPtrOutput)
}

type GroupRuleProtocolTemplate struct {
	// Address template group ID, conflicts with `templateId`.
	GroupId *string `pulumi:"groupId"`
	// Address template ID, conflicts with `groupId`.
	TemplateId *string `pulumi:"templateId"`
}

// GroupRuleProtocolTemplateInput is an input type that accepts GroupRuleProtocolTemplateArgs and GroupRuleProtocolTemplateOutput values.
// You can construct a concrete instance of `GroupRuleProtocolTemplateInput` via:
//
//          GroupRuleProtocolTemplateArgs{...}
type GroupRuleProtocolTemplateInput interface {
	pulumi.Input

	ToGroupRuleProtocolTemplateOutput() GroupRuleProtocolTemplateOutput
	ToGroupRuleProtocolTemplateOutputWithContext(context.Context) GroupRuleProtocolTemplateOutput
}

type GroupRuleProtocolTemplateArgs struct {
	// Address template group ID, conflicts with `templateId`.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Address template ID, conflicts with `groupId`.
	TemplateId pulumi.StringPtrInput `pulumi:"templateId"`
}

func (GroupRuleProtocolTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupRuleProtocolTemplate)(nil)).Elem()
}

func (i GroupRuleProtocolTemplateArgs) ToGroupRuleProtocolTemplateOutput() GroupRuleProtocolTemplateOutput {
	return i.ToGroupRuleProtocolTemplateOutputWithContext(context.Background())
}

func (i GroupRuleProtocolTemplateArgs) ToGroupRuleProtocolTemplateOutputWithContext(ctx context.Context) GroupRuleProtocolTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRuleProtocolTemplateOutput)
}

func (i GroupRuleProtocolTemplateArgs) ToGroupRuleProtocolTemplatePtrOutput() GroupRuleProtocolTemplatePtrOutput {
	return i.ToGroupRuleProtocolTemplatePtrOutputWithContext(context.Background())
}

func (i GroupRuleProtocolTemplateArgs) ToGroupRuleProtocolTemplatePtrOutputWithContext(ctx context.Context) GroupRuleProtocolTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRuleProtocolTemplateOutput).ToGroupRuleProtocolTemplatePtrOutputWithContext(ctx)
}

// GroupRuleProtocolTemplatePtrInput is an input type that accepts GroupRuleProtocolTemplateArgs, GroupRuleProtocolTemplatePtr and GroupRuleProtocolTemplatePtrOutput values.
// You can construct a concrete instance of `GroupRuleProtocolTemplatePtrInput` via:
//
//          GroupRuleProtocolTemplateArgs{...}
//
//  or:
//
//          nil
type GroupRuleProtocolTemplatePtrInput interface {
	pulumi.Input

	ToGroupRuleProtocolTemplatePtrOutput() GroupRuleProtocolTemplatePtrOutput
	ToGroupRuleProtocolTemplatePtrOutputWithContext(context.Context) GroupRuleProtocolTemplatePtrOutput
}

type groupRuleProtocolTemplatePtrType GroupRuleProtocolTemplateArgs

func GroupRuleProtocolTemplatePtr(v *GroupRuleProtocolTemplateArgs) GroupRuleProtocolTemplatePtrInput {
	return (*groupRuleProtocolTemplatePtrType)(v)
}

func (*groupRuleProtocolTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupRuleProtocolTemplate)(nil)).Elem()
}

func (i *groupRuleProtocolTemplatePtrType) ToGroupRuleProtocolTemplatePtrOutput() GroupRuleProtocolTemplatePtrOutput {
	return i.ToGroupRuleProtocolTemplatePtrOutputWithContext(context.Background())
}

func (i *groupRuleProtocolTemplatePtrType) ToGroupRuleProtocolTemplatePtrOutputWithContext(ctx context.Context) GroupRuleProtocolTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRuleProtocolTemplatePtrOutput)
}

type GroupRuleProtocolTemplateOutput struct{ *pulumi.OutputState }

func (GroupRuleProtocolTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupRuleProtocolTemplate)(nil)).Elem()
}

func (o GroupRuleProtocolTemplateOutput) ToGroupRuleProtocolTemplateOutput() GroupRuleProtocolTemplateOutput {
	return o
}

func (o GroupRuleProtocolTemplateOutput) ToGroupRuleProtocolTemplateOutputWithContext(ctx context.Context) GroupRuleProtocolTemplateOutput {
	return o
}

func (o GroupRuleProtocolTemplateOutput) ToGroupRuleProtocolTemplatePtrOutput() GroupRuleProtocolTemplatePtrOutput {
	return o.ToGroupRuleProtocolTemplatePtrOutputWithContext(context.Background())
}

func (o GroupRuleProtocolTemplateOutput) ToGroupRuleProtocolTemplatePtrOutputWithContext(ctx context.Context) GroupRuleProtocolTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupRuleProtocolTemplate) *GroupRuleProtocolTemplate {
		return &v
	}).(GroupRuleProtocolTemplatePtrOutput)
}

// Address template group ID, conflicts with `templateId`.
func (o GroupRuleProtocolTemplateOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupRuleProtocolTemplate) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Address template ID, conflicts with `groupId`.
func (o GroupRuleProtocolTemplateOutput) TemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupRuleProtocolTemplate) *string { return v.TemplateId }).(pulumi.StringPtrOutput)
}

type GroupRuleProtocolTemplatePtrOutput struct{ *pulumi.OutputState }

func (GroupRuleProtocolTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupRuleProtocolTemplate)(nil)).Elem()
}

func (o GroupRuleProtocolTemplatePtrOutput) ToGroupRuleProtocolTemplatePtrOutput() GroupRuleProtocolTemplatePtrOutput {
	return o
}

func (o GroupRuleProtocolTemplatePtrOutput) ToGroupRuleProtocolTemplatePtrOutputWithContext(ctx context.Context) GroupRuleProtocolTemplatePtrOutput {
	return o
}

func (o GroupRuleProtocolTemplatePtrOutput) Elem() GroupRuleProtocolTemplateOutput {
	return o.ApplyT(func(v *GroupRuleProtocolTemplate) GroupRuleProtocolTemplate {
		if v != nil {
			return *v
		}
		var ret GroupRuleProtocolTemplate
		return ret
	}).(GroupRuleProtocolTemplateOutput)
}

// Address template group ID, conflicts with `templateId`.
func (o GroupRuleProtocolTemplatePtrOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupRuleProtocolTemplate) *string {
		if v == nil {
			return nil
		}
		return v.GroupId
	}).(pulumi.StringPtrOutput)
}

// Address template ID, conflicts with `groupId`.
func (o GroupRuleProtocolTemplatePtrOutput) TemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupRuleProtocolTemplate) *string {
		if v == nil {
			return nil
		}
		return v.TemplateId
	}).(pulumi.StringPtrOutput)
}

type GetGroupsSecurityGroup struct {
	// Number of security group binding resources.
	BeAssociateCount int `pulumi:"beAssociateCount"`
	// Creation time of security group.
	CreateTime string `pulumi:"createTime"`
	// Description of the security group.
	Description string `pulumi:"description"`
	// Egress rules set. For items like `[action]#[cidrIp]#[port]#[protocol]`, it means a regular rule; for items like `sg-XXXX`, it means a nested security group.
	Egresses []string `pulumi:"egresses"`
	// Ingress rules set. For items like `[action]#[cidrIp]#[port]#[protocol]`, it means a regular rule; for items like `sg-XXXX`, it means a nested security group.
	Ingresses []string `pulumi:"ingresses"`
	// Name of the security group to be queried. Conflict with `securityGroupId`.
	Name string `pulumi:"name"`
	// Project ID of the security group to be queried. Conflict with `securityGroupId`.
	ProjectId int `pulumi:"projectId"`
	// ID of the security group to be queried. Conflict with `name` and `projectId`.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// Tags of the security group to be queried. Conflict with `securityGroupId`.
	Tags map[string]interface{} `pulumi:"tags"`
}

// GetGroupsSecurityGroupInput is an input type that accepts GetGroupsSecurityGroupArgs and GetGroupsSecurityGroupOutput values.
// You can construct a concrete instance of `GetGroupsSecurityGroupInput` via:
//
//          GetGroupsSecurityGroupArgs{...}
type GetGroupsSecurityGroupInput interface {
	pulumi.Input

	ToGetGroupsSecurityGroupOutput() GetGroupsSecurityGroupOutput
	ToGetGroupsSecurityGroupOutputWithContext(context.Context) GetGroupsSecurityGroupOutput
}

type GetGroupsSecurityGroupArgs struct {
	// Number of security group binding resources.
	BeAssociateCount pulumi.IntInput `pulumi:"beAssociateCount"`
	// Creation time of security group.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Description of the security group.
	Description pulumi.StringInput `pulumi:"description"`
	// Egress rules set. For items like `[action]#[cidrIp]#[port]#[protocol]`, it means a regular rule; for items like `sg-XXXX`, it means a nested security group.
	Egresses pulumi.StringArrayInput `pulumi:"egresses"`
	// Ingress rules set. For items like `[action]#[cidrIp]#[port]#[protocol]`, it means a regular rule; for items like `sg-XXXX`, it means a nested security group.
	Ingresses pulumi.StringArrayInput `pulumi:"ingresses"`
	// Name of the security group to be queried. Conflict with `securityGroupId`.
	Name pulumi.StringInput `pulumi:"name"`
	// Project ID of the security group to be queried. Conflict with `securityGroupId`.
	ProjectId pulumi.IntInput `pulumi:"projectId"`
	// ID of the security group to be queried. Conflict with `name` and `projectId`.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// Tags of the security group to be queried. Conflict with `securityGroupId`.
	Tags pulumi.MapInput `pulumi:"tags"`
}

func (GetGroupsSecurityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsSecurityGroup)(nil)).Elem()
}

func (i GetGroupsSecurityGroupArgs) ToGetGroupsSecurityGroupOutput() GetGroupsSecurityGroupOutput {
	return i.ToGetGroupsSecurityGroupOutputWithContext(context.Background())
}

func (i GetGroupsSecurityGroupArgs) ToGetGroupsSecurityGroupOutputWithContext(ctx context.Context) GetGroupsSecurityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsSecurityGroupOutput)
}

// GetGroupsSecurityGroupArrayInput is an input type that accepts GetGroupsSecurityGroupArray and GetGroupsSecurityGroupArrayOutput values.
// You can construct a concrete instance of `GetGroupsSecurityGroupArrayInput` via:
//
//          GetGroupsSecurityGroupArray{ GetGroupsSecurityGroupArgs{...} }
type GetGroupsSecurityGroupArrayInput interface {
	pulumi.Input

	ToGetGroupsSecurityGroupArrayOutput() GetGroupsSecurityGroupArrayOutput
	ToGetGroupsSecurityGroupArrayOutputWithContext(context.Context) GetGroupsSecurityGroupArrayOutput
}

type GetGroupsSecurityGroupArray []GetGroupsSecurityGroupInput

func (GetGroupsSecurityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsSecurityGroup)(nil)).Elem()
}

func (i GetGroupsSecurityGroupArray) ToGetGroupsSecurityGroupArrayOutput() GetGroupsSecurityGroupArrayOutput {
	return i.ToGetGroupsSecurityGroupArrayOutputWithContext(context.Background())
}

func (i GetGroupsSecurityGroupArray) ToGetGroupsSecurityGroupArrayOutputWithContext(ctx context.Context) GetGroupsSecurityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsSecurityGroupArrayOutput)
}

type GetGroupsSecurityGroupOutput struct{ *pulumi.OutputState }

func (GetGroupsSecurityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsSecurityGroup)(nil)).Elem()
}

func (o GetGroupsSecurityGroupOutput) ToGetGroupsSecurityGroupOutput() GetGroupsSecurityGroupOutput {
	return o
}

func (o GetGroupsSecurityGroupOutput) ToGetGroupsSecurityGroupOutputWithContext(ctx context.Context) GetGroupsSecurityGroupOutput {
	return o
}

// Number of security group binding resources.
func (o GetGroupsSecurityGroupOutput) BeAssociateCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupsSecurityGroup) int { return v.BeAssociateCount }).(pulumi.IntOutput)
}

// Creation time of security group.
func (o GetGroupsSecurityGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsSecurityGroup) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the security group.
func (o GetGroupsSecurityGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsSecurityGroup) string { return v.Description }).(pulumi.StringOutput)
}

// Egress rules set. For items like `[action]#[cidrIp]#[port]#[protocol]`, it means a regular rule; for items like `sg-XXXX`, it means a nested security group.
func (o GetGroupsSecurityGroupOutput) Egresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetGroupsSecurityGroup) []string { return v.Egresses }).(pulumi.StringArrayOutput)
}

// Ingress rules set. For items like `[action]#[cidrIp]#[port]#[protocol]`, it means a regular rule; for items like `sg-XXXX`, it means a nested security group.
func (o GetGroupsSecurityGroupOutput) Ingresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetGroupsSecurityGroup) []string { return v.Ingresses }).(pulumi.StringArrayOutput)
}

// Name of the security group to be queried. Conflict with `securityGroupId`.
func (o GetGroupsSecurityGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsSecurityGroup) string { return v.Name }).(pulumi.StringOutput)
}

// Project ID of the security group to be queried. Conflict with `securityGroupId`.
func (o GetGroupsSecurityGroupOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupsSecurityGroup) int { return v.ProjectId }).(pulumi.IntOutput)
}

// ID of the security group to be queried. Conflict with `name` and `projectId`.
func (o GetGroupsSecurityGroupOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsSecurityGroup) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// Tags of the security group to be queried. Conflict with `securityGroupId`.
func (o GetGroupsSecurityGroupOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetGroupsSecurityGroup) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

type GetGroupsSecurityGroupArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsSecurityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsSecurityGroup)(nil)).Elem()
}

func (o GetGroupsSecurityGroupArrayOutput) ToGetGroupsSecurityGroupArrayOutput() GetGroupsSecurityGroupArrayOutput {
	return o
}

func (o GetGroupsSecurityGroupArrayOutput) ToGetGroupsSecurityGroupArrayOutputWithContext(ctx context.Context) GetGroupsSecurityGroupArrayOutput {
	return o
}

func (o GetGroupsSecurityGroupArrayOutput) Index(i pulumi.IntInput) GetGroupsSecurityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsSecurityGroup {
		return vs[0].([]GetGroupsSecurityGroup)[vs[1].(int)]
	}).(GetGroupsSecurityGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRuleAddressTemplateInput)(nil)).Elem(), GroupRuleAddressTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRuleAddressTemplatePtrInput)(nil)).Elem(), GroupRuleAddressTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRuleProtocolTemplateInput)(nil)).Elem(), GroupRuleProtocolTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRuleProtocolTemplatePtrInput)(nil)).Elem(), GroupRuleProtocolTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsSecurityGroupInput)(nil)).Elem(), GetGroupsSecurityGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsSecurityGroupArrayInput)(nil)).Elem(), GetGroupsSecurityGroupArray{})
	pulumi.RegisterOutputType(GroupRuleAddressTemplateOutput{})
	pulumi.RegisterOutputType(GroupRuleAddressTemplatePtrOutput{})
	pulumi.RegisterOutputType(GroupRuleProtocolTemplateOutput{})
	pulumi.RegisterOutputType(GroupRuleProtocolTemplatePtrOutput{})
	pulumi.RegisterOutputType(GetGroupsSecurityGroupOutput{})
	pulumi.RegisterOutputType(GetGroupsSecurityGroupArrayOutput{})
}
