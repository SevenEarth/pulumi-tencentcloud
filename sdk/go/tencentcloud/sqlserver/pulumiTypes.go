// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqlserver

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccountDBAttachmentsList struct {
	AccountName string `pulumi:"accountName"`
	DbName      string `pulumi:"dbName"`
	InstanceId  string `pulumi:"instanceId"`
	Privilege   string `pulumi:"privilege"`
}

// AccountDBAttachmentsListInput is an input type that accepts AccountDBAttachmentsListArgs and AccountDBAttachmentsListOutput values.
// You can construct a concrete instance of `AccountDBAttachmentsListInput` via:
//
//          AccountDBAttachmentsListArgs{...}
type AccountDBAttachmentsListInput interface {
	pulumi.Input

	ToAccountDBAttachmentsListOutput() AccountDBAttachmentsListOutput
	ToAccountDBAttachmentsListOutputWithContext(context.Context) AccountDBAttachmentsListOutput
}

type AccountDBAttachmentsListArgs struct {
	AccountName pulumi.StringInput `pulumi:"accountName"`
	DbName      pulumi.StringInput `pulumi:"dbName"`
	InstanceId  pulumi.StringInput `pulumi:"instanceId"`
	Privilege   pulumi.StringInput `pulumi:"privilege"`
}

func (AccountDBAttachmentsListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountDBAttachmentsList)(nil)).Elem()
}

func (i AccountDBAttachmentsListArgs) ToAccountDBAttachmentsListOutput() AccountDBAttachmentsListOutput {
	return i.ToAccountDBAttachmentsListOutputWithContext(context.Background())
}

func (i AccountDBAttachmentsListArgs) ToAccountDBAttachmentsListOutputWithContext(ctx context.Context) AccountDBAttachmentsListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountDBAttachmentsListOutput)
}

// AccountDBAttachmentsListArrayInput is an input type that accepts AccountDBAttachmentsListArray and AccountDBAttachmentsListArrayOutput values.
// You can construct a concrete instance of `AccountDBAttachmentsListArrayInput` via:
//
//          AccountDBAttachmentsListArray{ AccountDBAttachmentsListArgs{...} }
type AccountDBAttachmentsListArrayInput interface {
	pulumi.Input

	ToAccountDBAttachmentsListArrayOutput() AccountDBAttachmentsListArrayOutput
	ToAccountDBAttachmentsListArrayOutputWithContext(context.Context) AccountDBAttachmentsListArrayOutput
}

type AccountDBAttachmentsListArray []AccountDBAttachmentsListInput

func (AccountDBAttachmentsListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountDBAttachmentsList)(nil)).Elem()
}

func (i AccountDBAttachmentsListArray) ToAccountDBAttachmentsListArrayOutput() AccountDBAttachmentsListArrayOutput {
	return i.ToAccountDBAttachmentsListArrayOutputWithContext(context.Background())
}

func (i AccountDBAttachmentsListArray) ToAccountDBAttachmentsListArrayOutputWithContext(ctx context.Context) AccountDBAttachmentsListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountDBAttachmentsListArrayOutput)
}

type AccountDBAttachmentsListOutput struct{ *pulumi.OutputState }

func (AccountDBAttachmentsListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountDBAttachmentsList)(nil)).Elem()
}

func (o AccountDBAttachmentsListOutput) ToAccountDBAttachmentsListOutput() AccountDBAttachmentsListOutput {
	return o
}

func (o AccountDBAttachmentsListOutput) ToAccountDBAttachmentsListOutputWithContext(ctx context.Context) AccountDBAttachmentsListOutput {
	return o
}

func (o AccountDBAttachmentsListOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AccountDBAttachmentsList) string { return v.AccountName }).(pulumi.StringOutput)
}

func (o AccountDBAttachmentsListOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v AccountDBAttachmentsList) string { return v.DbName }).(pulumi.StringOutput)
}

func (o AccountDBAttachmentsListOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v AccountDBAttachmentsList) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o AccountDBAttachmentsListOutput) Privilege() pulumi.StringOutput {
	return o.ApplyT(func(v AccountDBAttachmentsList) string { return v.Privilege }).(pulumi.StringOutput)
}

type AccountDBAttachmentsListArrayOutput struct{ *pulumi.OutputState }

func (AccountDBAttachmentsListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountDBAttachmentsList)(nil)).Elem()
}

func (o AccountDBAttachmentsListArrayOutput) ToAccountDBAttachmentsListArrayOutput() AccountDBAttachmentsListArrayOutput {
	return o
}

func (o AccountDBAttachmentsListArrayOutput) ToAccountDBAttachmentsListArrayOutputWithContext(ctx context.Context) AccountDBAttachmentsListArrayOutput {
	return o
}

func (o AccountDBAttachmentsListArrayOutput) Index(i pulumi.IntInput) AccountDBAttachmentsListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountDBAttachmentsList {
		return vs[0].([]AccountDBAttachmentsList)[vs[1].(int)]
	}).(AccountDBAttachmentsListOutput)
}

type AccountsList struct {
	CreateTime string `pulumi:"createTime"`
	InstanceId string `pulumi:"instanceId"`
	Name       string `pulumi:"name"`
	Remark     string `pulumi:"remark"`
	Status     int    `pulumi:"status"`
	UpdateTime string `pulumi:"updateTime"`
}

// AccountsListInput is an input type that accepts AccountsListArgs and AccountsListOutput values.
// You can construct a concrete instance of `AccountsListInput` via:
//
//          AccountsListArgs{...}
type AccountsListInput interface {
	pulumi.Input

	ToAccountsListOutput() AccountsListOutput
	ToAccountsListOutputWithContext(context.Context) AccountsListOutput
}

type AccountsListArgs struct {
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	Name       pulumi.StringInput `pulumi:"name"`
	Remark     pulumi.StringInput `pulumi:"remark"`
	Status     pulumi.IntInput    `pulumi:"status"`
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (AccountsListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsList)(nil)).Elem()
}

func (i AccountsListArgs) ToAccountsListOutput() AccountsListOutput {
	return i.ToAccountsListOutputWithContext(context.Background())
}

func (i AccountsListArgs) ToAccountsListOutputWithContext(ctx context.Context) AccountsListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountsListOutput)
}

// AccountsListArrayInput is an input type that accepts AccountsListArray and AccountsListArrayOutput values.
// You can construct a concrete instance of `AccountsListArrayInput` via:
//
//          AccountsListArray{ AccountsListArgs{...} }
type AccountsListArrayInput interface {
	pulumi.Input

	ToAccountsListArrayOutput() AccountsListArrayOutput
	ToAccountsListArrayOutputWithContext(context.Context) AccountsListArrayOutput
}

type AccountsListArray []AccountsListInput

func (AccountsListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountsList)(nil)).Elem()
}

func (i AccountsListArray) ToAccountsListArrayOutput() AccountsListArrayOutput {
	return i.ToAccountsListArrayOutputWithContext(context.Background())
}

func (i AccountsListArray) ToAccountsListArrayOutputWithContext(ctx context.Context) AccountsListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountsListArrayOutput)
}

type AccountsListOutput struct{ *pulumi.OutputState }

func (AccountsListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsList)(nil)).Elem()
}

func (o AccountsListOutput) ToAccountsListOutput() AccountsListOutput {
	return o
}

func (o AccountsListOutput) ToAccountsListOutputWithContext(ctx context.Context) AccountsListOutput {
	return o
}

func (o AccountsListOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsList) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o AccountsListOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsList) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o AccountsListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsList) string { return v.Name }).(pulumi.StringOutput)
}

func (o AccountsListOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsList) string { return v.Remark }).(pulumi.StringOutput)
}

func (o AccountsListOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v AccountsList) int { return v.Status }).(pulumi.IntOutput)
}

func (o AccountsListOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsList) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type AccountsListArrayOutput struct{ *pulumi.OutputState }

func (AccountsListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountsList)(nil)).Elem()
}

func (o AccountsListArrayOutput) ToAccountsListArrayOutput() AccountsListArrayOutput {
	return o
}

func (o AccountsListArrayOutput) ToAccountsListArrayOutputWithContext(ctx context.Context) AccountsListArrayOutput {
	return o
}

func (o AccountsListArrayOutput) Index(i pulumi.IntInput) AccountsListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountsList {
		return vs[0].([]AccountsList)[vs[1].(int)]
	}).(AccountsListOutput)
}

type BackupsList struct {
	DbLists      []string `pulumi:"dbLists"`
	EndTime      string   `pulumi:"endTime"`
	FileName     string   `pulumi:"fileName"`
	Id           string   `pulumi:"id"`
	InstanceId   string   `pulumi:"instanceId"`
	InternetUrl  string   `pulumi:"internetUrl"`
	IntranetUrl  string   `pulumi:"intranetUrl"`
	Size         int      `pulumi:"size"`
	StartTime    string   `pulumi:"startTime"`
	Status       int      `pulumi:"status"`
	Strategy     int      `pulumi:"strategy"`
	TriggerModel int      `pulumi:"triggerModel"`
}

// BackupsListInput is an input type that accepts BackupsListArgs and BackupsListOutput values.
// You can construct a concrete instance of `BackupsListInput` via:
//
//          BackupsListArgs{...}
type BackupsListInput interface {
	pulumi.Input

	ToBackupsListOutput() BackupsListOutput
	ToBackupsListOutputWithContext(context.Context) BackupsListOutput
}

type BackupsListArgs struct {
	DbLists      pulumi.StringArrayInput `pulumi:"dbLists"`
	EndTime      pulumi.StringInput      `pulumi:"endTime"`
	FileName     pulumi.StringInput      `pulumi:"fileName"`
	Id           pulumi.StringInput      `pulumi:"id"`
	InstanceId   pulumi.StringInput      `pulumi:"instanceId"`
	InternetUrl  pulumi.StringInput      `pulumi:"internetUrl"`
	IntranetUrl  pulumi.StringInput      `pulumi:"intranetUrl"`
	Size         pulumi.IntInput         `pulumi:"size"`
	StartTime    pulumi.StringInput      `pulumi:"startTime"`
	Status       pulumi.IntInput         `pulumi:"status"`
	Strategy     pulumi.IntInput         `pulumi:"strategy"`
	TriggerModel pulumi.IntInput         `pulumi:"triggerModel"`
}

func (BackupsListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupsList)(nil)).Elem()
}

func (i BackupsListArgs) ToBackupsListOutput() BackupsListOutput {
	return i.ToBackupsListOutputWithContext(context.Background())
}

func (i BackupsListArgs) ToBackupsListOutputWithContext(ctx context.Context) BackupsListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupsListOutput)
}

// BackupsListArrayInput is an input type that accepts BackupsListArray and BackupsListArrayOutput values.
// You can construct a concrete instance of `BackupsListArrayInput` via:
//
//          BackupsListArray{ BackupsListArgs{...} }
type BackupsListArrayInput interface {
	pulumi.Input

	ToBackupsListArrayOutput() BackupsListArrayOutput
	ToBackupsListArrayOutputWithContext(context.Context) BackupsListArrayOutput
}

type BackupsListArray []BackupsListInput

func (BackupsListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupsList)(nil)).Elem()
}

func (i BackupsListArray) ToBackupsListArrayOutput() BackupsListArrayOutput {
	return i.ToBackupsListArrayOutputWithContext(context.Background())
}

func (i BackupsListArray) ToBackupsListArrayOutputWithContext(ctx context.Context) BackupsListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupsListArrayOutput)
}

type BackupsListOutput struct{ *pulumi.OutputState }

func (BackupsListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupsList)(nil)).Elem()
}

func (o BackupsListOutput) ToBackupsListOutput() BackupsListOutput {
	return o
}

func (o BackupsListOutput) ToBackupsListOutputWithContext(ctx context.Context) BackupsListOutput {
	return o
}

func (o BackupsListOutput) DbLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupsList) []string { return v.DbLists }).(pulumi.StringArrayOutput)
}

func (o BackupsListOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsList) string { return v.EndTime }).(pulumi.StringOutput)
}

func (o BackupsListOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsList) string { return v.FileName }).(pulumi.StringOutput)
}

func (o BackupsListOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsList) string { return v.Id }).(pulumi.StringOutput)
}

func (o BackupsListOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsList) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o BackupsListOutput) InternetUrl() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsList) string { return v.InternetUrl }).(pulumi.StringOutput)
}

func (o BackupsListOutput) IntranetUrl() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsList) string { return v.IntranetUrl }).(pulumi.StringOutput)
}

func (o BackupsListOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v BackupsList) int { return v.Size }).(pulumi.IntOutput)
}

func (o BackupsListOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsList) string { return v.StartTime }).(pulumi.StringOutput)
}

func (o BackupsListOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v BackupsList) int { return v.Status }).(pulumi.IntOutput)
}

func (o BackupsListOutput) Strategy() pulumi.IntOutput {
	return o.ApplyT(func(v BackupsList) int { return v.Strategy }).(pulumi.IntOutput)
}

func (o BackupsListOutput) TriggerModel() pulumi.IntOutput {
	return o.ApplyT(func(v BackupsList) int { return v.TriggerModel }).(pulumi.IntOutput)
}

type BackupsListArrayOutput struct{ *pulumi.OutputState }

func (BackupsListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupsList)(nil)).Elem()
}

func (o BackupsListArrayOutput) ToBackupsListArrayOutput() BackupsListArrayOutput {
	return o
}

func (o BackupsListArrayOutput) ToBackupsListArrayOutputWithContext(ctx context.Context) BackupsListArrayOutput {
	return o
}

func (o BackupsListArrayOutput) Index(i pulumi.IntInput) BackupsListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupsList {
		return vs[0].([]BackupsList)[vs[1].(int)]
	}).(BackupsListOutput)
}

type BasicInstancesInstanceList struct {
	AvailabilityZone string                 `pulumi:"availabilityZone"`
	ChargeType       string                 `pulumi:"chargeType"`
	Cpu              int                    `pulumi:"cpu"`
	CreateTime       string                 `pulumi:"createTime"`
	EngineVersion    string                 `pulumi:"engineVersion"`
	Id               string                 `pulumi:"id"`
	Memory           int                    `pulumi:"memory"`
	Name             string                 `pulumi:"name"`
	ProjectId        int                    `pulumi:"projectId"`
	Status           int                    `pulumi:"status"`
	Storage          int                    `pulumi:"storage"`
	SubnetId         string                 `pulumi:"subnetId"`
	Tags             map[string]interface{} `pulumi:"tags"`
	UsedStorage      int                    `pulumi:"usedStorage"`
	Vip              string                 `pulumi:"vip"`
	VpcId            string                 `pulumi:"vpcId"`
	Vport            int                    `pulumi:"vport"`
}

// BasicInstancesInstanceListInput is an input type that accepts BasicInstancesInstanceListArgs and BasicInstancesInstanceListOutput values.
// You can construct a concrete instance of `BasicInstancesInstanceListInput` via:
//
//          BasicInstancesInstanceListArgs{...}
type BasicInstancesInstanceListInput interface {
	pulumi.Input

	ToBasicInstancesInstanceListOutput() BasicInstancesInstanceListOutput
	ToBasicInstancesInstanceListOutputWithContext(context.Context) BasicInstancesInstanceListOutput
}

type BasicInstancesInstanceListArgs struct {
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	ChargeType       pulumi.StringInput `pulumi:"chargeType"`
	Cpu              pulumi.IntInput    `pulumi:"cpu"`
	CreateTime       pulumi.StringInput `pulumi:"createTime"`
	EngineVersion    pulumi.StringInput `pulumi:"engineVersion"`
	Id               pulumi.StringInput `pulumi:"id"`
	Memory           pulumi.IntInput    `pulumi:"memory"`
	Name             pulumi.StringInput `pulumi:"name"`
	ProjectId        pulumi.IntInput    `pulumi:"projectId"`
	Status           pulumi.IntInput    `pulumi:"status"`
	Storage          pulumi.IntInput    `pulumi:"storage"`
	SubnetId         pulumi.StringInput `pulumi:"subnetId"`
	Tags             pulumi.MapInput    `pulumi:"tags"`
	UsedStorage      pulumi.IntInput    `pulumi:"usedStorage"`
	Vip              pulumi.StringInput `pulumi:"vip"`
	VpcId            pulumi.StringInput `pulumi:"vpcId"`
	Vport            pulumi.IntInput    `pulumi:"vport"`
}

func (BasicInstancesInstanceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicInstancesInstanceList)(nil)).Elem()
}

func (i BasicInstancesInstanceListArgs) ToBasicInstancesInstanceListOutput() BasicInstancesInstanceListOutput {
	return i.ToBasicInstancesInstanceListOutputWithContext(context.Background())
}

func (i BasicInstancesInstanceListArgs) ToBasicInstancesInstanceListOutputWithContext(ctx context.Context) BasicInstancesInstanceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicInstancesInstanceListOutput)
}

// BasicInstancesInstanceListArrayInput is an input type that accepts BasicInstancesInstanceListArray and BasicInstancesInstanceListArrayOutput values.
// You can construct a concrete instance of `BasicInstancesInstanceListArrayInput` via:
//
//          BasicInstancesInstanceListArray{ BasicInstancesInstanceListArgs{...} }
type BasicInstancesInstanceListArrayInput interface {
	pulumi.Input

	ToBasicInstancesInstanceListArrayOutput() BasicInstancesInstanceListArrayOutput
	ToBasicInstancesInstanceListArrayOutputWithContext(context.Context) BasicInstancesInstanceListArrayOutput
}

type BasicInstancesInstanceListArray []BasicInstancesInstanceListInput

func (BasicInstancesInstanceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BasicInstancesInstanceList)(nil)).Elem()
}

func (i BasicInstancesInstanceListArray) ToBasicInstancesInstanceListArrayOutput() BasicInstancesInstanceListArrayOutput {
	return i.ToBasicInstancesInstanceListArrayOutputWithContext(context.Background())
}

func (i BasicInstancesInstanceListArray) ToBasicInstancesInstanceListArrayOutputWithContext(ctx context.Context) BasicInstancesInstanceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BasicInstancesInstanceListArrayOutput)
}

type BasicInstancesInstanceListOutput struct{ *pulumi.OutputState }

func (BasicInstancesInstanceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicInstancesInstanceList)(nil)).Elem()
}

func (o BasicInstancesInstanceListOutput) ToBasicInstancesInstanceListOutput() BasicInstancesInstanceListOutput {
	return o
}

func (o BasicInstancesInstanceListOutput) ToBasicInstancesInstanceListOutputWithContext(ctx context.Context) BasicInstancesInstanceListOutput {
	return o
}

func (o BasicInstancesInstanceListOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o BasicInstancesInstanceListOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) string { return v.ChargeType }).(pulumi.StringOutput)
}

func (o BasicInstancesInstanceListOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) int { return v.Cpu }).(pulumi.IntOutput)
}

func (o BasicInstancesInstanceListOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o BasicInstancesInstanceListOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) string { return v.EngineVersion }).(pulumi.StringOutput)
}

func (o BasicInstancesInstanceListOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) string { return v.Id }).(pulumi.StringOutput)
}

func (o BasicInstancesInstanceListOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) int { return v.Memory }).(pulumi.IntOutput)
}

func (o BasicInstancesInstanceListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) string { return v.Name }).(pulumi.StringOutput)
}

func (o BasicInstancesInstanceListOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) int { return v.ProjectId }).(pulumi.IntOutput)
}

func (o BasicInstancesInstanceListOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) int { return v.Status }).(pulumi.IntOutput)
}

func (o BasicInstancesInstanceListOutput) Storage() pulumi.IntOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) int { return v.Storage }).(pulumi.IntOutput)
}

func (o BasicInstancesInstanceListOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) string { return v.SubnetId }).(pulumi.StringOutput)
}

func (o BasicInstancesInstanceListOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

func (o BasicInstancesInstanceListOutput) UsedStorage() pulumi.IntOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) int { return v.UsedStorage }).(pulumi.IntOutput)
}

func (o BasicInstancesInstanceListOutput) Vip() pulumi.StringOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) string { return v.Vip }).(pulumi.StringOutput)
}

func (o BasicInstancesInstanceListOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) string { return v.VpcId }).(pulumi.StringOutput)
}

func (o BasicInstancesInstanceListOutput) Vport() pulumi.IntOutput {
	return o.ApplyT(func(v BasicInstancesInstanceList) int { return v.Vport }).(pulumi.IntOutput)
}

type BasicInstancesInstanceListArrayOutput struct{ *pulumi.OutputState }

func (BasicInstancesInstanceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BasicInstancesInstanceList)(nil)).Elem()
}

func (o BasicInstancesInstanceListArrayOutput) ToBasicInstancesInstanceListArrayOutput() BasicInstancesInstanceListArrayOutput {
	return o
}

func (o BasicInstancesInstanceListArrayOutput) ToBasicInstancesInstanceListArrayOutputWithContext(ctx context.Context) BasicInstancesInstanceListArrayOutput {
	return o
}

func (o BasicInstancesInstanceListArrayOutput) Index(i pulumi.IntInput) BasicInstancesInstanceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BasicInstancesInstanceList {
		return vs[0].([]BasicInstancesInstanceList)[vs[1].(int)]
	}).(BasicInstancesInstanceListOutput)
}

type DBsDbList struct {
	Charset    string `pulumi:"charset"`
	CreateTime string `pulumi:"createTime"`
	InstanceId string `pulumi:"instanceId"`
	Name       string `pulumi:"name"`
	Remark     string `pulumi:"remark"`
	Status     string `pulumi:"status"`
}

// DBsDbListInput is an input type that accepts DBsDbListArgs and DBsDbListOutput values.
// You can construct a concrete instance of `DBsDbListInput` via:
//
//          DBsDbListArgs{...}
type DBsDbListInput interface {
	pulumi.Input

	ToDBsDbListOutput() DBsDbListOutput
	ToDBsDbListOutputWithContext(context.Context) DBsDbListOutput
}

type DBsDbListArgs struct {
	Charset    pulumi.StringInput `pulumi:"charset"`
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	Name       pulumi.StringInput `pulumi:"name"`
	Remark     pulumi.StringInput `pulumi:"remark"`
	Status     pulumi.StringInput `pulumi:"status"`
}

func (DBsDbListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DBsDbList)(nil)).Elem()
}

func (i DBsDbListArgs) ToDBsDbListOutput() DBsDbListOutput {
	return i.ToDBsDbListOutputWithContext(context.Background())
}

func (i DBsDbListArgs) ToDBsDbListOutputWithContext(ctx context.Context) DBsDbListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DBsDbListOutput)
}

// DBsDbListArrayInput is an input type that accepts DBsDbListArray and DBsDbListArrayOutput values.
// You can construct a concrete instance of `DBsDbListArrayInput` via:
//
//          DBsDbListArray{ DBsDbListArgs{...} }
type DBsDbListArrayInput interface {
	pulumi.Input

	ToDBsDbListArrayOutput() DBsDbListArrayOutput
	ToDBsDbListArrayOutputWithContext(context.Context) DBsDbListArrayOutput
}

type DBsDbListArray []DBsDbListInput

func (DBsDbListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DBsDbList)(nil)).Elem()
}

func (i DBsDbListArray) ToDBsDbListArrayOutput() DBsDbListArrayOutput {
	return i.ToDBsDbListArrayOutputWithContext(context.Background())
}

func (i DBsDbListArray) ToDBsDbListArrayOutputWithContext(ctx context.Context) DBsDbListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DBsDbListArrayOutput)
}

type DBsDbListOutput struct{ *pulumi.OutputState }

func (DBsDbListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DBsDbList)(nil)).Elem()
}

func (o DBsDbListOutput) ToDBsDbListOutput() DBsDbListOutput {
	return o
}

func (o DBsDbListOutput) ToDBsDbListOutputWithContext(ctx context.Context) DBsDbListOutput {
	return o
}

func (o DBsDbListOutput) Charset() pulumi.StringOutput {
	return o.ApplyT(func(v DBsDbList) string { return v.Charset }).(pulumi.StringOutput)
}

func (o DBsDbListOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v DBsDbList) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o DBsDbListOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v DBsDbList) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o DBsDbListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DBsDbList) string { return v.Name }).(pulumi.StringOutput)
}

func (o DBsDbListOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v DBsDbList) string { return v.Remark }).(pulumi.StringOutput)
}

func (o DBsDbListOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v DBsDbList) string { return v.Status }).(pulumi.StringOutput)
}

type DBsDbListArrayOutput struct{ *pulumi.OutputState }

func (DBsDbListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DBsDbList)(nil)).Elem()
}

func (o DBsDbListArrayOutput) ToDBsDbListArrayOutput() DBsDbListArrayOutput {
	return o
}

func (o DBsDbListArrayOutput) ToDBsDbListArrayOutputWithContext(ctx context.Context) DBsDbListArrayOutput {
	return o
}

func (o DBsDbListArrayOutput) Index(i pulumi.IntInput) DBsDbListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DBsDbList {
		return vs[0].([]DBsDbList)[vs[1].(int)]
	}).(DBsDbListOutput)
}

type InstancesInstanceList struct {
	AvailabilityZone string                 `pulumi:"availabilityZone"`
	ChargeType       string                 `pulumi:"chargeType"`
	CreateTime       string                 `pulumi:"createTime"`
	EngineVersion    string                 `pulumi:"engineVersion"`
	HaType           string                 `pulumi:"haType"`
	Id               string                 `pulumi:"id"`
	Memory           int                    `pulumi:"memory"`
	Name             string                 `pulumi:"name"`
	ProjectId        int                    `pulumi:"projectId"`
	RoFlag           string                 `pulumi:"roFlag"`
	Status           int                    `pulumi:"status"`
	Storage          int                    `pulumi:"storage"`
	SubnetId         string                 `pulumi:"subnetId"`
	Tags             map[string]interface{} `pulumi:"tags"`
	UsedStorage      int                    `pulumi:"usedStorage"`
	Vip              string                 `pulumi:"vip"`
	VpcId            string                 `pulumi:"vpcId"`
	Vport            int                    `pulumi:"vport"`
}

// InstancesInstanceListInput is an input type that accepts InstancesInstanceListArgs and InstancesInstanceListOutput values.
// You can construct a concrete instance of `InstancesInstanceListInput` via:
//
//          InstancesInstanceListArgs{...}
type InstancesInstanceListInput interface {
	pulumi.Input

	ToInstancesInstanceListOutput() InstancesInstanceListOutput
	ToInstancesInstanceListOutputWithContext(context.Context) InstancesInstanceListOutput
}

type InstancesInstanceListArgs struct {
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	ChargeType       pulumi.StringInput `pulumi:"chargeType"`
	CreateTime       pulumi.StringInput `pulumi:"createTime"`
	EngineVersion    pulumi.StringInput `pulumi:"engineVersion"`
	HaType           pulumi.StringInput `pulumi:"haType"`
	Id               pulumi.StringInput `pulumi:"id"`
	Memory           pulumi.IntInput    `pulumi:"memory"`
	Name             pulumi.StringInput `pulumi:"name"`
	ProjectId        pulumi.IntInput    `pulumi:"projectId"`
	RoFlag           pulumi.StringInput `pulumi:"roFlag"`
	Status           pulumi.IntInput    `pulumi:"status"`
	Storage          pulumi.IntInput    `pulumi:"storage"`
	SubnetId         pulumi.StringInput `pulumi:"subnetId"`
	Tags             pulumi.MapInput    `pulumi:"tags"`
	UsedStorage      pulumi.IntInput    `pulumi:"usedStorage"`
	Vip              pulumi.StringInput `pulumi:"vip"`
	VpcId            pulumi.StringInput `pulumi:"vpcId"`
	Vport            pulumi.IntInput    `pulumi:"vport"`
}

func (InstancesInstanceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceList)(nil)).Elem()
}

func (i InstancesInstanceListArgs) ToInstancesInstanceListOutput() InstancesInstanceListOutput {
	return i.ToInstancesInstanceListOutputWithContext(context.Background())
}

func (i InstancesInstanceListArgs) ToInstancesInstanceListOutputWithContext(ctx context.Context) InstancesInstanceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceListOutput)
}

// InstancesInstanceListArrayInput is an input type that accepts InstancesInstanceListArray and InstancesInstanceListArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceListArrayInput` via:
//
//          InstancesInstanceListArray{ InstancesInstanceListArgs{...} }
type InstancesInstanceListArrayInput interface {
	pulumi.Input

	ToInstancesInstanceListArrayOutput() InstancesInstanceListArrayOutput
	ToInstancesInstanceListArrayOutputWithContext(context.Context) InstancesInstanceListArrayOutput
}

type InstancesInstanceListArray []InstancesInstanceListInput

func (InstancesInstanceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceList)(nil)).Elem()
}

func (i InstancesInstanceListArray) ToInstancesInstanceListArrayOutput() InstancesInstanceListArrayOutput {
	return i.ToInstancesInstanceListArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceListArray) ToInstancesInstanceListArrayOutputWithContext(ctx context.Context) InstancesInstanceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceListArrayOutput)
}

type InstancesInstanceListOutput struct{ *pulumi.OutputState }

func (InstancesInstanceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceList)(nil)).Elem()
}

func (o InstancesInstanceListOutput) ToInstancesInstanceListOutput() InstancesInstanceListOutput {
	return o
}

func (o InstancesInstanceListOutput) ToInstancesInstanceListOutputWithContext(ctx context.Context) InstancesInstanceListOutput {
	return o
}

func (o InstancesInstanceListOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceList) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o InstancesInstanceListOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceList) string { return v.ChargeType }).(pulumi.StringOutput)
}

func (o InstancesInstanceListOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceList) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o InstancesInstanceListOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceList) string { return v.EngineVersion }).(pulumi.StringOutput)
}

func (o InstancesInstanceListOutput) HaType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceList) string { return v.HaType }).(pulumi.StringOutput)
}

func (o InstancesInstanceListOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceList) string { return v.Id }).(pulumi.StringOutput)
}

func (o InstancesInstanceListOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceList) int { return v.Memory }).(pulumi.IntOutput)
}

func (o InstancesInstanceListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceList) string { return v.Name }).(pulumi.StringOutput)
}

func (o InstancesInstanceListOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceList) int { return v.ProjectId }).(pulumi.IntOutput)
}

func (o InstancesInstanceListOutput) RoFlag() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceList) string { return v.RoFlag }).(pulumi.StringOutput)
}

func (o InstancesInstanceListOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceList) int { return v.Status }).(pulumi.IntOutput)
}

func (o InstancesInstanceListOutput) Storage() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceList) int { return v.Storage }).(pulumi.IntOutput)
}

func (o InstancesInstanceListOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceList) string { return v.SubnetId }).(pulumi.StringOutput)
}

func (o InstancesInstanceListOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v InstancesInstanceList) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

func (o InstancesInstanceListOutput) UsedStorage() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceList) int { return v.UsedStorage }).(pulumi.IntOutput)
}

func (o InstancesInstanceListOutput) Vip() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceList) string { return v.Vip }).(pulumi.StringOutput)
}

func (o InstancesInstanceListOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceList) string { return v.VpcId }).(pulumi.StringOutput)
}

func (o InstancesInstanceListOutput) Vport() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceList) int { return v.Vport }).(pulumi.IntOutput)
}

type InstancesInstanceListArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceList)(nil)).Elem()
}

func (o InstancesInstanceListArrayOutput) ToInstancesInstanceListArrayOutput() InstancesInstanceListArrayOutput {
	return o
}

func (o InstancesInstanceListArrayOutput) ToInstancesInstanceListArrayOutputWithContext(ctx context.Context) InstancesInstanceListArrayOutput {
	return o
}

func (o InstancesInstanceListArrayOutput) Index(i pulumi.IntInput) InstancesInstanceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceList {
		return vs[0].([]InstancesInstanceList)[vs[1].(int)]
	}).(InstancesInstanceListOutput)
}

type PublishSubscribeDatabaseTuple struct {
	PublishDatabase string `pulumi:"publishDatabase"`
}

// PublishSubscribeDatabaseTupleInput is an input type that accepts PublishSubscribeDatabaseTupleArgs and PublishSubscribeDatabaseTupleOutput values.
// You can construct a concrete instance of `PublishSubscribeDatabaseTupleInput` via:
//
//          PublishSubscribeDatabaseTupleArgs{...}
type PublishSubscribeDatabaseTupleInput interface {
	pulumi.Input

	ToPublishSubscribeDatabaseTupleOutput() PublishSubscribeDatabaseTupleOutput
	ToPublishSubscribeDatabaseTupleOutputWithContext(context.Context) PublishSubscribeDatabaseTupleOutput
}

type PublishSubscribeDatabaseTupleArgs struct {
	PublishDatabase pulumi.StringInput `pulumi:"publishDatabase"`
}

func (PublishSubscribeDatabaseTupleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublishSubscribeDatabaseTuple)(nil)).Elem()
}

func (i PublishSubscribeDatabaseTupleArgs) ToPublishSubscribeDatabaseTupleOutput() PublishSubscribeDatabaseTupleOutput {
	return i.ToPublishSubscribeDatabaseTupleOutputWithContext(context.Background())
}

func (i PublishSubscribeDatabaseTupleArgs) ToPublishSubscribeDatabaseTupleOutputWithContext(ctx context.Context) PublishSubscribeDatabaseTupleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishSubscribeDatabaseTupleOutput)
}

// PublishSubscribeDatabaseTupleArrayInput is an input type that accepts PublishSubscribeDatabaseTupleArray and PublishSubscribeDatabaseTupleArrayOutput values.
// You can construct a concrete instance of `PublishSubscribeDatabaseTupleArrayInput` via:
//
//          PublishSubscribeDatabaseTupleArray{ PublishSubscribeDatabaseTupleArgs{...} }
type PublishSubscribeDatabaseTupleArrayInput interface {
	pulumi.Input

	ToPublishSubscribeDatabaseTupleArrayOutput() PublishSubscribeDatabaseTupleArrayOutput
	ToPublishSubscribeDatabaseTupleArrayOutputWithContext(context.Context) PublishSubscribeDatabaseTupleArrayOutput
}

type PublishSubscribeDatabaseTupleArray []PublishSubscribeDatabaseTupleInput

func (PublishSubscribeDatabaseTupleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublishSubscribeDatabaseTuple)(nil)).Elem()
}

func (i PublishSubscribeDatabaseTupleArray) ToPublishSubscribeDatabaseTupleArrayOutput() PublishSubscribeDatabaseTupleArrayOutput {
	return i.ToPublishSubscribeDatabaseTupleArrayOutputWithContext(context.Background())
}

func (i PublishSubscribeDatabaseTupleArray) ToPublishSubscribeDatabaseTupleArrayOutputWithContext(ctx context.Context) PublishSubscribeDatabaseTupleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishSubscribeDatabaseTupleArrayOutput)
}

type PublishSubscribeDatabaseTupleOutput struct{ *pulumi.OutputState }

func (PublishSubscribeDatabaseTupleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublishSubscribeDatabaseTuple)(nil)).Elem()
}

func (o PublishSubscribeDatabaseTupleOutput) ToPublishSubscribeDatabaseTupleOutput() PublishSubscribeDatabaseTupleOutput {
	return o
}

func (o PublishSubscribeDatabaseTupleOutput) ToPublishSubscribeDatabaseTupleOutputWithContext(ctx context.Context) PublishSubscribeDatabaseTupleOutput {
	return o
}

func (o PublishSubscribeDatabaseTupleOutput) PublishDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v PublishSubscribeDatabaseTuple) string { return v.PublishDatabase }).(pulumi.StringOutput)
}

type PublishSubscribeDatabaseTupleArrayOutput struct{ *pulumi.OutputState }

func (PublishSubscribeDatabaseTupleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublishSubscribeDatabaseTuple)(nil)).Elem()
}

func (o PublishSubscribeDatabaseTupleArrayOutput) ToPublishSubscribeDatabaseTupleArrayOutput() PublishSubscribeDatabaseTupleArrayOutput {
	return o
}

func (o PublishSubscribeDatabaseTupleArrayOutput) ToPublishSubscribeDatabaseTupleArrayOutputWithContext(ctx context.Context) PublishSubscribeDatabaseTupleArrayOutput {
	return o
}

func (o PublishSubscribeDatabaseTupleArrayOutput) Index(i pulumi.IntInput) PublishSubscribeDatabaseTupleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PublishSubscribeDatabaseTuple {
		return vs[0].([]PublishSubscribeDatabaseTuple)[vs[1].(int)]
	}).(PublishSubscribeDatabaseTupleOutput)
}

type PublishSubscribesPublishSubscribeList struct {
	DatabaseTuples        []PublishSubscribesPublishSubscribeListDatabaseTuple `pulumi:"databaseTuples"`
	PublishInstanceId     string                                               `pulumi:"publishInstanceId"`
	PublishInstanceIp     string                                               `pulumi:"publishInstanceIp"`
	PublishInstanceName   string                                               `pulumi:"publishInstanceName"`
	PublishSubscribeId    int                                                  `pulumi:"publishSubscribeId"`
	PublishSubscribeName  string                                               `pulumi:"publishSubscribeName"`
	SubscribeInstanceId   string                                               `pulumi:"subscribeInstanceId"`
	SubscribeInstanceIp   string                                               `pulumi:"subscribeInstanceIp"`
	SubscribeInstanceName string                                               `pulumi:"subscribeInstanceName"`
}

// PublishSubscribesPublishSubscribeListInput is an input type that accepts PublishSubscribesPublishSubscribeListArgs and PublishSubscribesPublishSubscribeListOutput values.
// You can construct a concrete instance of `PublishSubscribesPublishSubscribeListInput` via:
//
//          PublishSubscribesPublishSubscribeListArgs{...}
type PublishSubscribesPublishSubscribeListInput interface {
	pulumi.Input

	ToPublishSubscribesPublishSubscribeListOutput() PublishSubscribesPublishSubscribeListOutput
	ToPublishSubscribesPublishSubscribeListOutputWithContext(context.Context) PublishSubscribesPublishSubscribeListOutput
}

type PublishSubscribesPublishSubscribeListArgs struct {
	DatabaseTuples        PublishSubscribesPublishSubscribeListDatabaseTupleArrayInput `pulumi:"databaseTuples"`
	PublishInstanceId     pulumi.StringInput                                           `pulumi:"publishInstanceId"`
	PublishInstanceIp     pulumi.StringInput                                           `pulumi:"publishInstanceIp"`
	PublishInstanceName   pulumi.StringInput                                           `pulumi:"publishInstanceName"`
	PublishSubscribeId    pulumi.IntInput                                              `pulumi:"publishSubscribeId"`
	PublishSubscribeName  pulumi.StringInput                                           `pulumi:"publishSubscribeName"`
	SubscribeInstanceId   pulumi.StringInput                                           `pulumi:"subscribeInstanceId"`
	SubscribeInstanceIp   pulumi.StringInput                                           `pulumi:"subscribeInstanceIp"`
	SubscribeInstanceName pulumi.StringInput                                           `pulumi:"subscribeInstanceName"`
}

func (PublishSubscribesPublishSubscribeListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublishSubscribesPublishSubscribeList)(nil)).Elem()
}

func (i PublishSubscribesPublishSubscribeListArgs) ToPublishSubscribesPublishSubscribeListOutput() PublishSubscribesPublishSubscribeListOutput {
	return i.ToPublishSubscribesPublishSubscribeListOutputWithContext(context.Background())
}

func (i PublishSubscribesPublishSubscribeListArgs) ToPublishSubscribesPublishSubscribeListOutputWithContext(ctx context.Context) PublishSubscribesPublishSubscribeListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishSubscribesPublishSubscribeListOutput)
}

// PublishSubscribesPublishSubscribeListArrayInput is an input type that accepts PublishSubscribesPublishSubscribeListArray and PublishSubscribesPublishSubscribeListArrayOutput values.
// You can construct a concrete instance of `PublishSubscribesPublishSubscribeListArrayInput` via:
//
//          PublishSubscribesPublishSubscribeListArray{ PublishSubscribesPublishSubscribeListArgs{...} }
type PublishSubscribesPublishSubscribeListArrayInput interface {
	pulumi.Input

	ToPublishSubscribesPublishSubscribeListArrayOutput() PublishSubscribesPublishSubscribeListArrayOutput
	ToPublishSubscribesPublishSubscribeListArrayOutputWithContext(context.Context) PublishSubscribesPublishSubscribeListArrayOutput
}

type PublishSubscribesPublishSubscribeListArray []PublishSubscribesPublishSubscribeListInput

func (PublishSubscribesPublishSubscribeListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublishSubscribesPublishSubscribeList)(nil)).Elem()
}

func (i PublishSubscribesPublishSubscribeListArray) ToPublishSubscribesPublishSubscribeListArrayOutput() PublishSubscribesPublishSubscribeListArrayOutput {
	return i.ToPublishSubscribesPublishSubscribeListArrayOutputWithContext(context.Background())
}

func (i PublishSubscribesPublishSubscribeListArray) ToPublishSubscribesPublishSubscribeListArrayOutputWithContext(ctx context.Context) PublishSubscribesPublishSubscribeListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishSubscribesPublishSubscribeListArrayOutput)
}

type PublishSubscribesPublishSubscribeListOutput struct{ *pulumi.OutputState }

func (PublishSubscribesPublishSubscribeListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublishSubscribesPublishSubscribeList)(nil)).Elem()
}

func (o PublishSubscribesPublishSubscribeListOutput) ToPublishSubscribesPublishSubscribeListOutput() PublishSubscribesPublishSubscribeListOutput {
	return o
}

func (o PublishSubscribesPublishSubscribeListOutput) ToPublishSubscribesPublishSubscribeListOutputWithContext(ctx context.Context) PublishSubscribesPublishSubscribeListOutput {
	return o
}

func (o PublishSubscribesPublishSubscribeListOutput) DatabaseTuples() PublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput {
	return o.ApplyT(func(v PublishSubscribesPublishSubscribeList) []PublishSubscribesPublishSubscribeListDatabaseTuple {
		return v.DatabaseTuples
	}).(PublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput)
}

func (o PublishSubscribesPublishSubscribeListOutput) PublishInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v PublishSubscribesPublishSubscribeList) string { return v.PublishInstanceId }).(pulumi.StringOutput)
}

func (o PublishSubscribesPublishSubscribeListOutput) PublishInstanceIp() pulumi.StringOutput {
	return o.ApplyT(func(v PublishSubscribesPublishSubscribeList) string { return v.PublishInstanceIp }).(pulumi.StringOutput)
}

func (o PublishSubscribesPublishSubscribeListOutput) PublishInstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v PublishSubscribesPublishSubscribeList) string { return v.PublishInstanceName }).(pulumi.StringOutput)
}

func (o PublishSubscribesPublishSubscribeListOutput) PublishSubscribeId() pulumi.IntOutput {
	return o.ApplyT(func(v PublishSubscribesPublishSubscribeList) int { return v.PublishSubscribeId }).(pulumi.IntOutput)
}

func (o PublishSubscribesPublishSubscribeListOutput) PublishSubscribeName() pulumi.StringOutput {
	return o.ApplyT(func(v PublishSubscribesPublishSubscribeList) string { return v.PublishSubscribeName }).(pulumi.StringOutput)
}

func (o PublishSubscribesPublishSubscribeListOutput) SubscribeInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v PublishSubscribesPublishSubscribeList) string { return v.SubscribeInstanceId }).(pulumi.StringOutput)
}

func (o PublishSubscribesPublishSubscribeListOutput) SubscribeInstanceIp() pulumi.StringOutput {
	return o.ApplyT(func(v PublishSubscribesPublishSubscribeList) string { return v.SubscribeInstanceIp }).(pulumi.StringOutput)
}

func (o PublishSubscribesPublishSubscribeListOutput) SubscribeInstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v PublishSubscribesPublishSubscribeList) string { return v.SubscribeInstanceName }).(pulumi.StringOutput)
}

type PublishSubscribesPublishSubscribeListArrayOutput struct{ *pulumi.OutputState }

func (PublishSubscribesPublishSubscribeListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublishSubscribesPublishSubscribeList)(nil)).Elem()
}

func (o PublishSubscribesPublishSubscribeListArrayOutput) ToPublishSubscribesPublishSubscribeListArrayOutput() PublishSubscribesPublishSubscribeListArrayOutput {
	return o
}

func (o PublishSubscribesPublishSubscribeListArrayOutput) ToPublishSubscribesPublishSubscribeListArrayOutputWithContext(ctx context.Context) PublishSubscribesPublishSubscribeListArrayOutput {
	return o
}

func (o PublishSubscribesPublishSubscribeListArrayOutput) Index(i pulumi.IntInput) PublishSubscribesPublishSubscribeListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PublishSubscribesPublishSubscribeList {
		return vs[0].([]PublishSubscribesPublishSubscribeList)[vs[1].(int)]
	}).(PublishSubscribesPublishSubscribeListOutput)
}

type PublishSubscribesPublishSubscribeListDatabaseTuple struct {
	LastSyncTime      string `pulumi:"lastSyncTime"`
	PublishDatabase   string `pulumi:"publishDatabase"`
	Status            string `pulumi:"status"`
	SubscribeDatabase string `pulumi:"subscribeDatabase"`
}

// PublishSubscribesPublishSubscribeListDatabaseTupleInput is an input type that accepts PublishSubscribesPublishSubscribeListDatabaseTupleArgs and PublishSubscribesPublishSubscribeListDatabaseTupleOutput values.
// You can construct a concrete instance of `PublishSubscribesPublishSubscribeListDatabaseTupleInput` via:
//
//          PublishSubscribesPublishSubscribeListDatabaseTupleArgs{...}
type PublishSubscribesPublishSubscribeListDatabaseTupleInput interface {
	pulumi.Input

	ToPublishSubscribesPublishSubscribeListDatabaseTupleOutput() PublishSubscribesPublishSubscribeListDatabaseTupleOutput
	ToPublishSubscribesPublishSubscribeListDatabaseTupleOutputWithContext(context.Context) PublishSubscribesPublishSubscribeListDatabaseTupleOutput
}

type PublishSubscribesPublishSubscribeListDatabaseTupleArgs struct {
	LastSyncTime      pulumi.StringInput `pulumi:"lastSyncTime"`
	PublishDatabase   pulumi.StringInput `pulumi:"publishDatabase"`
	Status            pulumi.StringInput `pulumi:"status"`
	SubscribeDatabase pulumi.StringInput `pulumi:"subscribeDatabase"`
}

func (PublishSubscribesPublishSubscribeListDatabaseTupleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublishSubscribesPublishSubscribeListDatabaseTuple)(nil)).Elem()
}

func (i PublishSubscribesPublishSubscribeListDatabaseTupleArgs) ToPublishSubscribesPublishSubscribeListDatabaseTupleOutput() PublishSubscribesPublishSubscribeListDatabaseTupleOutput {
	return i.ToPublishSubscribesPublishSubscribeListDatabaseTupleOutputWithContext(context.Background())
}

func (i PublishSubscribesPublishSubscribeListDatabaseTupleArgs) ToPublishSubscribesPublishSubscribeListDatabaseTupleOutputWithContext(ctx context.Context) PublishSubscribesPublishSubscribeListDatabaseTupleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishSubscribesPublishSubscribeListDatabaseTupleOutput)
}

// PublishSubscribesPublishSubscribeListDatabaseTupleArrayInput is an input type that accepts PublishSubscribesPublishSubscribeListDatabaseTupleArray and PublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput values.
// You can construct a concrete instance of `PublishSubscribesPublishSubscribeListDatabaseTupleArrayInput` via:
//
//          PublishSubscribesPublishSubscribeListDatabaseTupleArray{ PublishSubscribesPublishSubscribeListDatabaseTupleArgs{...} }
type PublishSubscribesPublishSubscribeListDatabaseTupleArrayInput interface {
	pulumi.Input

	ToPublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput() PublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput
	ToPublishSubscribesPublishSubscribeListDatabaseTupleArrayOutputWithContext(context.Context) PublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput
}

type PublishSubscribesPublishSubscribeListDatabaseTupleArray []PublishSubscribesPublishSubscribeListDatabaseTupleInput

func (PublishSubscribesPublishSubscribeListDatabaseTupleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublishSubscribesPublishSubscribeListDatabaseTuple)(nil)).Elem()
}

func (i PublishSubscribesPublishSubscribeListDatabaseTupleArray) ToPublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput() PublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput {
	return i.ToPublishSubscribesPublishSubscribeListDatabaseTupleArrayOutputWithContext(context.Background())
}

func (i PublishSubscribesPublishSubscribeListDatabaseTupleArray) ToPublishSubscribesPublishSubscribeListDatabaseTupleArrayOutputWithContext(ctx context.Context) PublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput)
}

type PublishSubscribesPublishSubscribeListDatabaseTupleOutput struct{ *pulumi.OutputState }

func (PublishSubscribesPublishSubscribeListDatabaseTupleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublishSubscribesPublishSubscribeListDatabaseTuple)(nil)).Elem()
}

func (o PublishSubscribesPublishSubscribeListDatabaseTupleOutput) ToPublishSubscribesPublishSubscribeListDatabaseTupleOutput() PublishSubscribesPublishSubscribeListDatabaseTupleOutput {
	return o
}

func (o PublishSubscribesPublishSubscribeListDatabaseTupleOutput) ToPublishSubscribesPublishSubscribeListDatabaseTupleOutputWithContext(ctx context.Context) PublishSubscribesPublishSubscribeListDatabaseTupleOutput {
	return o
}

func (o PublishSubscribesPublishSubscribeListDatabaseTupleOutput) LastSyncTime() pulumi.StringOutput {
	return o.ApplyT(func(v PublishSubscribesPublishSubscribeListDatabaseTuple) string { return v.LastSyncTime }).(pulumi.StringOutput)
}

func (o PublishSubscribesPublishSubscribeListDatabaseTupleOutput) PublishDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v PublishSubscribesPublishSubscribeListDatabaseTuple) string { return v.PublishDatabase }).(pulumi.StringOutput)
}

func (o PublishSubscribesPublishSubscribeListDatabaseTupleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PublishSubscribesPublishSubscribeListDatabaseTuple) string { return v.Status }).(pulumi.StringOutput)
}

func (o PublishSubscribesPublishSubscribeListDatabaseTupleOutput) SubscribeDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v PublishSubscribesPublishSubscribeListDatabaseTuple) string { return v.SubscribeDatabase }).(pulumi.StringOutput)
}

type PublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput struct{ *pulumi.OutputState }

func (PublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublishSubscribesPublishSubscribeListDatabaseTuple)(nil)).Elem()
}

func (o PublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput) ToPublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput() PublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput {
	return o
}

func (o PublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput) ToPublishSubscribesPublishSubscribeListDatabaseTupleArrayOutputWithContext(ctx context.Context) PublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput {
	return o
}

func (o PublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput) Index(i pulumi.IntInput) PublishSubscribesPublishSubscribeListDatabaseTupleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PublishSubscribesPublishSubscribeListDatabaseTuple {
		return vs[0].([]PublishSubscribesPublishSubscribeListDatabaseTuple)[vs[1].(int)]
	}).(PublishSubscribesPublishSubscribeListDatabaseTupleOutput)
}

type ReadonlyGroupsList struct {
	Id                   string   `pulumi:"id"`
	IsOfflineDelay       int      `pulumi:"isOfflineDelay"`
	MasterInstanceId     string   `pulumi:"masterInstanceId"`
	MaxDelayTime         int      `pulumi:"maxDelayTime"`
	MinInstances         int      `pulumi:"minInstances"`
	Name                 string   `pulumi:"name"`
	ReadonlyInstanceSets []string `pulumi:"readonlyInstanceSets"`
	Status               int      `pulumi:"status"`
	Vip                  string   `pulumi:"vip"`
	Vport                int      `pulumi:"vport"`
}

// ReadonlyGroupsListInput is an input type that accepts ReadonlyGroupsListArgs and ReadonlyGroupsListOutput values.
// You can construct a concrete instance of `ReadonlyGroupsListInput` via:
//
//          ReadonlyGroupsListArgs{...}
type ReadonlyGroupsListInput interface {
	pulumi.Input

	ToReadonlyGroupsListOutput() ReadonlyGroupsListOutput
	ToReadonlyGroupsListOutputWithContext(context.Context) ReadonlyGroupsListOutput
}

type ReadonlyGroupsListArgs struct {
	Id                   pulumi.StringInput      `pulumi:"id"`
	IsOfflineDelay       pulumi.IntInput         `pulumi:"isOfflineDelay"`
	MasterInstanceId     pulumi.StringInput      `pulumi:"masterInstanceId"`
	MaxDelayTime         pulumi.IntInput         `pulumi:"maxDelayTime"`
	MinInstances         pulumi.IntInput         `pulumi:"minInstances"`
	Name                 pulumi.StringInput      `pulumi:"name"`
	ReadonlyInstanceSets pulumi.StringArrayInput `pulumi:"readonlyInstanceSets"`
	Status               pulumi.IntInput         `pulumi:"status"`
	Vip                  pulumi.StringInput      `pulumi:"vip"`
	Vport                pulumi.IntInput         `pulumi:"vport"`
}

func (ReadonlyGroupsListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadonlyGroupsList)(nil)).Elem()
}

func (i ReadonlyGroupsListArgs) ToReadonlyGroupsListOutput() ReadonlyGroupsListOutput {
	return i.ToReadonlyGroupsListOutputWithContext(context.Background())
}

func (i ReadonlyGroupsListArgs) ToReadonlyGroupsListOutputWithContext(ctx context.Context) ReadonlyGroupsListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadonlyGroupsListOutput)
}

// ReadonlyGroupsListArrayInput is an input type that accepts ReadonlyGroupsListArray and ReadonlyGroupsListArrayOutput values.
// You can construct a concrete instance of `ReadonlyGroupsListArrayInput` via:
//
//          ReadonlyGroupsListArray{ ReadonlyGroupsListArgs{...} }
type ReadonlyGroupsListArrayInput interface {
	pulumi.Input

	ToReadonlyGroupsListArrayOutput() ReadonlyGroupsListArrayOutput
	ToReadonlyGroupsListArrayOutputWithContext(context.Context) ReadonlyGroupsListArrayOutput
}

type ReadonlyGroupsListArray []ReadonlyGroupsListInput

func (ReadonlyGroupsListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReadonlyGroupsList)(nil)).Elem()
}

func (i ReadonlyGroupsListArray) ToReadonlyGroupsListArrayOutput() ReadonlyGroupsListArrayOutput {
	return i.ToReadonlyGroupsListArrayOutputWithContext(context.Background())
}

func (i ReadonlyGroupsListArray) ToReadonlyGroupsListArrayOutputWithContext(ctx context.Context) ReadonlyGroupsListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadonlyGroupsListArrayOutput)
}

type ReadonlyGroupsListOutput struct{ *pulumi.OutputState }

func (ReadonlyGroupsListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadonlyGroupsList)(nil)).Elem()
}

func (o ReadonlyGroupsListOutput) ToReadonlyGroupsListOutput() ReadonlyGroupsListOutput {
	return o
}

func (o ReadonlyGroupsListOutput) ToReadonlyGroupsListOutputWithContext(ctx context.Context) ReadonlyGroupsListOutput {
	return o
}

func (o ReadonlyGroupsListOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ReadonlyGroupsList) string { return v.Id }).(pulumi.StringOutput)
}

func (o ReadonlyGroupsListOutput) IsOfflineDelay() pulumi.IntOutput {
	return o.ApplyT(func(v ReadonlyGroupsList) int { return v.IsOfflineDelay }).(pulumi.IntOutput)
}

func (o ReadonlyGroupsListOutput) MasterInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v ReadonlyGroupsList) string { return v.MasterInstanceId }).(pulumi.StringOutput)
}

func (o ReadonlyGroupsListOutput) MaxDelayTime() pulumi.IntOutput {
	return o.ApplyT(func(v ReadonlyGroupsList) int { return v.MaxDelayTime }).(pulumi.IntOutput)
}

func (o ReadonlyGroupsListOutput) MinInstances() pulumi.IntOutput {
	return o.ApplyT(func(v ReadonlyGroupsList) int { return v.MinInstances }).(pulumi.IntOutput)
}

func (o ReadonlyGroupsListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReadonlyGroupsList) string { return v.Name }).(pulumi.StringOutput)
}

func (o ReadonlyGroupsListOutput) ReadonlyInstanceSets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReadonlyGroupsList) []string { return v.ReadonlyInstanceSets }).(pulumi.StringArrayOutput)
}

func (o ReadonlyGroupsListOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v ReadonlyGroupsList) int { return v.Status }).(pulumi.IntOutput)
}

func (o ReadonlyGroupsListOutput) Vip() pulumi.StringOutput {
	return o.ApplyT(func(v ReadonlyGroupsList) string { return v.Vip }).(pulumi.StringOutput)
}

func (o ReadonlyGroupsListOutput) Vport() pulumi.IntOutput {
	return o.ApplyT(func(v ReadonlyGroupsList) int { return v.Vport }).(pulumi.IntOutput)
}

type ReadonlyGroupsListArrayOutput struct{ *pulumi.OutputState }

func (ReadonlyGroupsListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReadonlyGroupsList)(nil)).Elem()
}

func (o ReadonlyGroupsListArrayOutput) ToReadonlyGroupsListArrayOutput() ReadonlyGroupsListArrayOutput {
	return o
}

func (o ReadonlyGroupsListArrayOutput) ToReadonlyGroupsListArrayOutputWithContext(ctx context.Context) ReadonlyGroupsListArrayOutput {
	return o
}

func (o ReadonlyGroupsListArrayOutput) Index(i pulumi.IntInput) ReadonlyGroupsListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReadonlyGroupsList {
		return vs[0].([]ReadonlyGroupsList)[vs[1].(int)]
	}).(ReadonlyGroupsListOutput)
}

type ZoneConfigZoneList struct {
	AvailabilityZone string                           `pulumi:"availabilityZone"`
	SpecinfoLists    []ZoneConfigZoneListSpecinfoList `pulumi:"specinfoLists"`
	ZoneId           int                              `pulumi:"zoneId"`
}

// ZoneConfigZoneListInput is an input type that accepts ZoneConfigZoneListArgs and ZoneConfigZoneListOutput values.
// You can construct a concrete instance of `ZoneConfigZoneListInput` via:
//
//          ZoneConfigZoneListArgs{...}
type ZoneConfigZoneListInput interface {
	pulumi.Input

	ToZoneConfigZoneListOutput() ZoneConfigZoneListOutput
	ToZoneConfigZoneListOutputWithContext(context.Context) ZoneConfigZoneListOutput
}

type ZoneConfigZoneListArgs struct {
	AvailabilityZone pulumi.StringInput                       `pulumi:"availabilityZone"`
	SpecinfoLists    ZoneConfigZoneListSpecinfoListArrayInput `pulumi:"specinfoLists"`
	ZoneId           pulumi.IntInput                          `pulumi:"zoneId"`
}

func (ZoneConfigZoneListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneConfigZoneList)(nil)).Elem()
}

func (i ZoneConfigZoneListArgs) ToZoneConfigZoneListOutput() ZoneConfigZoneListOutput {
	return i.ToZoneConfigZoneListOutputWithContext(context.Background())
}

func (i ZoneConfigZoneListArgs) ToZoneConfigZoneListOutputWithContext(ctx context.Context) ZoneConfigZoneListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneConfigZoneListOutput)
}

// ZoneConfigZoneListArrayInput is an input type that accepts ZoneConfigZoneListArray and ZoneConfigZoneListArrayOutput values.
// You can construct a concrete instance of `ZoneConfigZoneListArrayInput` via:
//
//          ZoneConfigZoneListArray{ ZoneConfigZoneListArgs{...} }
type ZoneConfigZoneListArrayInput interface {
	pulumi.Input

	ToZoneConfigZoneListArrayOutput() ZoneConfigZoneListArrayOutput
	ToZoneConfigZoneListArrayOutputWithContext(context.Context) ZoneConfigZoneListArrayOutput
}

type ZoneConfigZoneListArray []ZoneConfigZoneListInput

func (ZoneConfigZoneListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneConfigZoneList)(nil)).Elem()
}

func (i ZoneConfigZoneListArray) ToZoneConfigZoneListArrayOutput() ZoneConfigZoneListArrayOutput {
	return i.ToZoneConfigZoneListArrayOutputWithContext(context.Background())
}

func (i ZoneConfigZoneListArray) ToZoneConfigZoneListArrayOutputWithContext(ctx context.Context) ZoneConfigZoneListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneConfigZoneListArrayOutput)
}

type ZoneConfigZoneListOutput struct{ *pulumi.OutputState }

func (ZoneConfigZoneListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneConfigZoneList)(nil)).Elem()
}

func (o ZoneConfigZoneListOutput) ToZoneConfigZoneListOutput() ZoneConfigZoneListOutput {
	return o
}

func (o ZoneConfigZoneListOutput) ToZoneConfigZoneListOutputWithContext(ctx context.Context) ZoneConfigZoneListOutput {
	return o
}

func (o ZoneConfigZoneListOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneConfigZoneList) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o ZoneConfigZoneListOutput) SpecinfoLists() ZoneConfigZoneListSpecinfoListArrayOutput {
	return o.ApplyT(func(v ZoneConfigZoneList) []ZoneConfigZoneListSpecinfoList { return v.SpecinfoLists }).(ZoneConfigZoneListSpecinfoListArrayOutput)
}

func (o ZoneConfigZoneListOutput) ZoneId() pulumi.IntOutput {
	return o.ApplyT(func(v ZoneConfigZoneList) int { return v.ZoneId }).(pulumi.IntOutput)
}

type ZoneConfigZoneListArrayOutput struct{ *pulumi.OutputState }

func (ZoneConfigZoneListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneConfigZoneList)(nil)).Elem()
}

func (o ZoneConfigZoneListArrayOutput) ToZoneConfigZoneListArrayOutput() ZoneConfigZoneListArrayOutput {
	return o
}

func (o ZoneConfigZoneListArrayOutput) ToZoneConfigZoneListArrayOutputWithContext(ctx context.Context) ZoneConfigZoneListArrayOutput {
	return o
}

func (o ZoneConfigZoneListArrayOutput) Index(i pulumi.IntInput) ZoneConfigZoneListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZoneConfigZoneList {
		return vs[0].([]ZoneConfigZoneList)[vs[1].(int)]
	}).(ZoneConfigZoneListOutput)
}

type ZoneConfigZoneListSpecinfoList struct {
	ChargeType     string `pulumi:"chargeType"`
	Cpu            int    `pulumi:"cpu"`
	DbVersion      string `pulumi:"dbVersion"`
	DbVersionName  string `pulumi:"dbVersionName"`
	MachineType    string `pulumi:"machineType"`
	MaxStorageSize int    `pulumi:"maxStorageSize"`
	Memory         int    `pulumi:"memory"`
	MinStorageSize int    `pulumi:"minStorageSize"`
	Qps            int    `pulumi:"qps"`
	SpecId         int    `pulumi:"specId"`
}

// ZoneConfigZoneListSpecinfoListInput is an input type that accepts ZoneConfigZoneListSpecinfoListArgs and ZoneConfigZoneListSpecinfoListOutput values.
// You can construct a concrete instance of `ZoneConfigZoneListSpecinfoListInput` via:
//
//          ZoneConfigZoneListSpecinfoListArgs{...}
type ZoneConfigZoneListSpecinfoListInput interface {
	pulumi.Input

	ToZoneConfigZoneListSpecinfoListOutput() ZoneConfigZoneListSpecinfoListOutput
	ToZoneConfigZoneListSpecinfoListOutputWithContext(context.Context) ZoneConfigZoneListSpecinfoListOutput
}

type ZoneConfigZoneListSpecinfoListArgs struct {
	ChargeType     pulumi.StringInput `pulumi:"chargeType"`
	Cpu            pulumi.IntInput    `pulumi:"cpu"`
	DbVersion      pulumi.StringInput `pulumi:"dbVersion"`
	DbVersionName  pulumi.StringInput `pulumi:"dbVersionName"`
	MachineType    pulumi.StringInput `pulumi:"machineType"`
	MaxStorageSize pulumi.IntInput    `pulumi:"maxStorageSize"`
	Memory         pulumi.IntInput    `pulumi:"memory"`
	MinStorageSize pulumi.IntInput    `pulumi:"minStorageSize"`
	Qps            pulumi.IntInput    `pulumi:"qps"`
	SpecId         pulumi.IntInput    `pulumi:"specId"`
}

func (ZoneConfigZoneListSpecinfoListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneConfigZoneListSpecinfoList)(nil)).Elem()
}

func (i ZoneConfigZoneListSpecinfoListArgs) ToZoneConfigZoneListSpecinfoListOutput() ZoneConfigZoneListSpecinfoListOutput {
	return i.ToZoneConfigZoneListSpecinfoListOutputWithContext(context.Background())
}

func (i ZoneConfigZoneListSpecinfoListArgs) ToZoneConfigZoneListSpecinfoListOutputWithContext(ctx context.Context) ZoneConfigZoneListSpecinfoListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneConfigZoneListSpecinfoListOutput)
}

// ZoneConfigZoneListSpecinfoListArrayInput is an input type that accepts ZoneConfigZoneListSpecinfoListArray and ZoneConfigZoneListSpecinfoListArrayOutput values.
// You can construct a concrete instance of `ZoneConfigZoneListSpecinfoListArrayInput` via:
//
//          ZoneConfigZoneListSpecinfoListArray{ ZoneConfigZoneListSpecinfoListArgs{...} }
type ZoneConfigZoneListSpecinfoListArrayInput interface {
	pulumi.Input

	ToZoneConfigZoneListSpecinfoListArrayOutput() ZoneConfigZoneListSpecinfoListArrayOutput
	ToZoneConfigZoneListSpecinfoListArrayOutputWithContext(context.Context) ZoneConfigZoneListSpecinfoListArrayOutput
}

type ZoneConfigZoneListSpecinfoListArray []ZoneConfigZoneListSpecinfoListInput

func (ZoneConfigZoneListSpecinfoListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneConfigZoneListSpecinfoList)(nil)).Elem()
}

func (i ZoneConfigZoneListSpecinfoListArray) ToZoneConfigZoneListSpecinfoListArrayOutput() ZoneConfigZoneListSpecinfoListArrayOutput {
	return i.ToZoneConfigZoneListSpecinfoListArrayOutputWithContext(context.Background())
}

func (i ZoneConfigZoneListSpecinfoListArray) ToZoneConfigZoneListSpecinfoListArrayOutputWithContext(ctx context.Context) ZoneConfigZoneListSpecinfoListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneConfigZoneListSpecinfoListArrayOutput)
}

type ZoneConfigZoneListSpecinfoListOutput struct{ *pulumi.OutputState }

func (ZoneConfigZoneListSpecinfoListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneConfigZoneListSpecinfoList)(nil)).Elem()
}

func (o ZoneConfigZoneListSpecinfoListOutput) ToZoneConfigZoneListSpecinfoListOutput() ZoneConfigZoneListSpecinfoListOutput {
	return o
}

func (o ZoneConfigZoneListSpecinfoListOutput) ToZoneConfigZoneListSpecinfoListOutputWithContext(ctx context.Context) ZoneConfigZoneListSpecinfoListOutput {
	return o
}

func (o ZoneConfigZoneListSpecinfoListOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneConfigZoneListSpecinfoList) string { return v.ChargeType }).(pulumi.StringOutput)
}

func (o ZoneConfigZoneListSpecinfoListOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v ZoneConfigZoneListSpecinfoList) int { return v.Cpu }).(pulumi.IntOutput)
}

func (o ZoneConfigZoneListSpecinfoListOutput) DbVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneConfigZoneListSpecinfoList) string { return v.DbVersion }).(pulumi.StringOutput)
}

func (o ZoneConfigZoneListSpecinfoListOutput) DbVersionName() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneConfigZoneListSpecinfoList) string { return v.DbVersionName }).(pulumi.StringOutput)
}

func (o ZoneConfigZoneListSpecinfoListOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneConfigZoneListSpecinfoList) string { return v.MachineType }).(pulumi.StringOutput)
}

func (o ZoneConfigZoneListSpecinfoListOutput) MaxStorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v ZoneConfigZoneListSpecinfoList) int { return v.MaxStorageSize }).(pulumi.IntOutput)
}

func (o ZoneConfigZoneListSpecinfoListOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v ZoneConfigZoneListSpecinfoList) int { return v.Memory }).(pulumi.IntOutput)
}

func (o ZoneConfigZoneListSpecinfoListOutput) MinStorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v ZoneConfigZoneListSpecinfoList) int { return v.MinStorageSize }).(pulumi.IntOutput)
}

func (o ZoneConfigZoneListSpecinfoListOutput) Qps() pulumi.IntOutput {
	return o.ApplyT(func(v ZoneConfigZoneListSpecinfoList) int { return v.Qps }).(pulumi.IntOutput)
}

func (o ZoneConfigZoneListSpecinfoListOutput) SpecId() pulumi.IntOutput {
	return o.ApplyT(func(v ZoneConfigZoneListSpecinfoList) int { return v.SpecId }).(pulumi.IntOutput)
}

type ZoneConfigZoneListSpecinfoListArrayOutput struct{ *pulumi.OutputState }

func (ZoneConfigZoneListSpecinfoListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneConfigZoneListSpecinfoList)(nil)).Elem()
}

func (o ZoneConfigZoneListSpecinfoListArrayOutput) ToZoneConfigZoneListSpecinfoListArrayOutput() ZoneConfigZoneListSpecinfoListArrayOutput {
	return o
}

func (o ZoneConfigZoneListSpecinfoListArrayOutput) ToZoneConfigZoneListSpecinfoListArrayOutputWithContext(ctx context.Context) ZoneConfigZoneListSpecinfoListArrayOutput {
	return o
}

func (o ZoneConfigZoneListSpecinfoListArrayOutput) Index(i pulumi.IntInput) ZoneConfigZoneListSpecinfoListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZoneConfigZoneListSpecinfoList {
		return vs[0].([]ZoneConfigZoneListSpecinfoList)[vs[1].(int)]
	}).(ZoneConfigZoneListSpecinfoListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountDBAttachmentsListInput)(nil)).Elem(), AccountDBAttachmentsListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountDBAttachmentsListArrayInput)(nil)).Elem(), AccountDBAttachmentsListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountsListInput)(nil)).Elem(), AccountsListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountsListArrayInput)(nil)).Elem(), AccountsListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupsListInput)(nil)).Elem(), BackupsListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupsListArrayInput)(nil)).Elem(), BackupsListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasicInstancesInstanceListInput)(nil)).Elem(), BasicInstancesInstanceListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BasicInstancesInstanceListArrayInput)(nil)).Elem(), BasicInstancesInstanceListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DBsDbListInput)(nil)).Elem(), DBsDbListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DBsDbListArrayInput)(nil)).Elem(), DBsDbListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceListInput)(nil)).Elem(), InstancesInstanceListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceListArrayInput)(nil)).Elem(), InstancesInstanceListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublishSubscribeDatabaseTupleInput)(nil)).Elem(), PublishSubscribeDatabaseTupleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublishSubscribeDatabaseTupleArrayInput)(nil)).Elem(), PublishSubscribeDatabaseTupleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublishSubscribesPublishSubscribeListInput)(nil)).Elem(), PublishSubscribesPublishSubscribeListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublishSubscribesPublishSubscribeListArrayInput)(nil)).Elem(), PublishSubscribesPublishSubscribeListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublishSubscribesPublishSubscribeListDatabaseTupleInput)(nil)).Elem(), PublishSubscribesPublishSubscribeListDatabaseTupleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublishSubscribesPublishSubscribeListDatabaseTupleArrayInput)(nil)).Elem(), PublishSubscribesPublishSubscribeListDatabaseTupleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadonlyGroupsListInput)(nil)).Elem(), ReadonlyGroupsListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadonlyGroupsListArrayInput)(nil)).Elem(), ReadonlyGroupsListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneConfigZoneListInput)(nil)).Elem(), ZoneConfigZoneListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneConfigZoneListArrayInput)(nil)).Elem(), ZoneConfigZoneListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneConfigZoneListSpecinfoListInput)(nil)).Elem(), ZoneConfigZoneListSpecinfoListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneConfigZoneListSpecinfoListArrayInput)(nil)).Elem(), ZoneConfigZoneListSpecinfoListArray{})
	pulumi.RegisterOutputType(AccountDBAttachmentsListOutput{})
	pulumi.RegisterOutputType(AccountDBAttachmentsListArrayOutput{})
	pulumi.RegisterOutputType(AccountsListOutput{})
	pulumi.RegisterOutputType(AccountsListArrayOutput{})
	pulumi.RegisterOutputType(BackupsListOutput{})
	pulumi.RegisterOutputType(BackupsListArrayOutput{})
	pulumi.RegisterOutputType(BasicInstancesInstanceListOutput{})
	pulumi.RegisterOutputType(BasicInstancesInstanceListArrayOutput{})
	pulumi.RegisterOutputType(DBsDbListOutput{})
	pulumi.RegisterOutputType(DBsDbListArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceListOutput{})
	pulumi.RegisterOutputType(InstancesInstanceListArrayOutput{})
	pulumi.RegisterOutputType(PublishSubscribeDatabaseTupleOutput{})
	pulumi.RegisterOutputType(PublishSubscribeDatabaseTupleArrayOutput{})
	pulumi.RegisterOutputType(PublishSubscribesPublishSubscribeListOutput{})
	pulumi.RegisterOutputType(PublishSubscribesPublishSubscribeListArrayOutput{})
	pulumi.RegisterOutputType(PublishSubscribesPublishSubscribeListDatabaseTupleOutput{})
	pulumi.RegisterOutputType(PublishSubscribesPublishSubscribeListDatabaseTupleArrayOutput{})
	pulumi.RegisterOutputType(ReadonlyGroupsListOutput{})
	pulumi.RegisterOutputType(ReadonlyGroupsListArrayOutput{})
	pulumi.RegisterOutputType(ZoneConfigZoneListOutput{})
	pulumi.RegisterOutputType(ZoneConfigZoneListArrayOutput{})
	pulumi.RegisterOutputType(ZoneConfigZoneListSpecinfoListOutput{})
	pulumi.RegisterOutputType(ZoneConfigZoneListSpecinfoListArrayOutput{})
}
