// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqlserver

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DB struct {
	pulumi.CustomResourceState

	// Character set DB uses. Valid values: `Chinese_PRC_CI_AS`, `Chinese_PRC_CS_AS`, `Chinese_PRC_BIN`,
	// `Chinese_Taiwan_Stroke_CI_AS`, `SQL_Latin1_General_CP1_CI_AS`, and `SQL_Latin1_General_CP1_CS_AS`. Default value is
	// `Chinese_PRC_CI_AS`.
	Charset pulumi.StringPtrOutput `pulumi:"charset"`
	// Database creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// SQL Server instance ID which DB belongs to.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Name of SQL Server DB. The database name must be unique and must be composed of numbers, letters and underlines, and the
	// first one can not be underline.
	Name pulumi.StringOutput `pulumi:"name"`
	// Remark of the DB.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// Database status, could be `creating`, `running`, `modifying` which means changing the remark, and `deleting`.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewDB registers a new resource with the given unique name, arguments, and options.
func NewDB(ctx *pulumi.Context,
	name string, args *DBArgs, opts ...pulumi.ResourceOption) (*DB, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	var resource DB
	err := ctx.RegisterResource("tencentcloud:Sqlserver/dB:DB", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDB gets an existing DB resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDB(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DBState, opts ...pulumi.ResourceOption) (*DB, error) {
	var resource DB
	err := ctx.ReadResource("tencentcloud:Sqlserver/dB:DB", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DB resources.
type dbState struct {
	// Character set DB uses. Valid values: `Chinese_PRC_CI_AS`, `Chinese_PRC_CS_AS`, `Chinese_PRC_BIN`,
	// `Chinese_Taiwan_Stroke_CI_AS`, `SQL_Latin1_General_CP1_CI_AS`, and `SQL_Latin1_General_CP1_CS_AS`. Default value is
	// `Chinese_PRC_CI_AS`.
	Charset *string `pulumi:"charset"`
	// Database creation time.
	CreateTime *string `pulumi:"createTime"`
	// SQL Server instance ID which DB belongs to.
	InstanceId *string `pulumi:"instanceId"`
	// Name of SQL Server DB. The database name must be unique and must be composed of numbers, letters and underlines, and the
	// first one can not be underline.
	Name *string `pulumi:"name"`
	// Remark of the DB.
	Remark *string `pulumi:"remark"`
	// Database status, could be `creating`, `running`, `modifying` which means changing the remark, and `deleting`.
	Status *string `pulumi:"status"`
}

type DBState struct {
	// Character set DB uses. Valid values: `Chinese_PRC_CI_AS`, `Chinese_PRC_CS_AS`, `Chinese_PRC_BIN`,
	// `Chinese_Taiwan_Stroke_CI_AS`, `SQL_Latin1_General_CP1_CI_AS`, and `SQL_Latin1_General_CP1_CS_AS`. Default value is
	// `Chinese_PRC_CI_AS`.
	Charset pulumi.StringPtrInput
	// Database creation time.
	CreateTime pulumi.StringPtrInput
	// SQL Server instance ID which DB belongs to.
	InstanceId pulumi.StringPtrInput
	// Name of SQL Server DB. The database name must be unique and must be composed of numbers, letters and underlines, and the
	// first one can not be underline.
	Name pulumi.StringPtrInput
	// Remark of the DB.
	Remark pulumi.StringPtrInput
	// Database status, could be `creating`, `running`, `modifying` which means changing the remark, and `deleting`.
	Status pulumi.StringPtrInput
}

func (DBState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbState)(nil)).Elem()
}

type dbArgs struct {
	// Character set DB uses. Valid values: `Chinese_PRC_CI_AS`, `Chinese_PRC_CS_AS`, `Chinese_PRC_BIN`,
	// `Chinese_Taiwan_Stroke_CI_AS`, `SQL_Latin1_General_CP1_CI_AS`, and `SQL_Latin1_General_CP1_CS_AS`. Default value is
	// `Chinese_PRC_CI_AS`.
	Charset *string `pulumi:"charset"`
	// SQL Server instance ID which DB belongs to.
	InstanceId string `pulumi:"instanceId"`
	// Name of SQL Server DB. The database name must be unique and must be composed of numbers, letters and underlines, and the
	// first one can not be underline.
	Name *string `pulumi:"name"`
	// Remark of the DB.
	Remark *string `pulumi:"remark"`
}

// The set of arguments for constructing a DB resource.
type DBArgs struct {
	// Character set DB uses. Valid values: `Chinese_PRC_CI_AS`, `Chinese_PRC_CS_AS`, `Chinese_PRC_BIN`,
	// `Chinese_Taiwan_Stroke_CI_AS`, `SQL_Latin1_General_CP1_CI_AS`, and `SQL_Latin1_General_CP1_CS_AS`. Default value is
	// `Chinese_PRC_CI_AS`.
	Charset pulumi.StringPtrInput
	// SQL Server instance ID which DB belongs to.
	InstanceId pulumi.StringInput
	// Name of SQL Server DB. The database name must be unique and must be composed of numbers, letters and underlines, and the
	// first one can not be underline.
	Name pulumi.StringPtrInput
	// Remark of the DB.
	Remark pulumi.StringPtrInput
}

func (DBArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbArgs)(nil)).Elem()
}

type DBInput interface {
	pulumi.Input

	ToDBOutput() DBOutput
	ToDBOutputWithContext(ctx context.Context) DBOutput
}

func (*DB) ElementType() reflect.Type {
	return reflect.TypeOf((**DB)(nil)).Elem()
}

func (i *DB) ToDBOutput() DBOutput {
	return i.ToDBOutputWithContext(context.Background())
}

func (i *DB) ToDBOutputWithContext(ctx context.Context) DBOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DBOutput)
}

// DBArrayInput is an input type that accepts DBArray and DBArrayOutput values.
// You can construct a concrete instance of `DBArrayInput` via:
//
//          DBArray{ DBArgs{...} }
type DBArrayInput interface {
	pulumi.Input

	ToDBArrayOutput() DBArrayOutput
	ToDBArrayOutputWithContext(context.Context) DBArrayOutput
}

type DBArray []DBInput

func (DBArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DB)(nil)).Elem()
}

func (i DBArray) ToDBArrayOutput() DBArrayOutput {
	return i.ToDBArrayOutputWithContext(context.Background())
}

func (i DBArray) ToDBArrayOutputWithContext(ctx context.Context) DBArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DBArrayOutput)
}

// DBMapInput is an input type that accepts DBMap and DBMapOutput values.
// You can construct a concrete instance of `DBMapInput` via:
//
//          DBMap{ "key": DBArgs{...} }
type DBMapInput interface {
	pulumi.Input

	ToDBMapOutput() DBMapOutput
	ToDBMapOutputWithContext(context.Context) DBMapOutput
}

type DBMap map[string]DBInput

func (DBMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DB)(nil)).Elem()
}

func (i DBMap) ToDBMapOutput() DBMapOutput {
	return i.ToDBMapOutputWithContext(context.Background())
}

func (i DBMap) ToDBMapOutputWithContext(ctx context.Context) DBMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DBMapOutput)
}

type DBOutput struct{ *pulumi.OutputState }

func (DBOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DB)(nil)).Elem()
}

func (o DBOutput) ToDBOutput() DBOutput {
	return o
}

func (o DBOutput) ToDBOutputWithContext(ctx context.Context) DBOutput {
	return o
}

// Character set DB uses. Valid values: `Chinese_PRC_CI_AS`, `Chinese_PRC_CS_AS`, `Chinese_PRC_BIN`,
// `Chinese_Taiwan_Stroke_CI_AS`, `SQL_Latin1_General_CP1_CI_AS`, and `SQL_Latin1_General_CP1_CS_AS`. Default value is
// `Chinese_PRC_CI_AS`.
func (o DBOutput) Charset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB) pulumi.StringPtrOutput { return v.Charset }).(pulumi.StringPtrOutput)
}

// Database creation time.
func (o DBOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DB) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// SQL Server instance ID which DB belongs to.
func (o DBOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DB) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Name of SQL Server DB. The database name must be unique and must be composed of numbers, letters and underlines, and the
// first one can not be underline.
func (o DBOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DB) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Remark of the DB.
func (o DBOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// Database status, could be `creating`, `running`, `modifying` which means changing the remark, and `deleting`.
func (o DBOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DB) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type DBArrayOutput struct{ *pulumi.OutputState }

func (DBArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DB)(nil)).Elem()
}

func (o DBArrayOutput) ToDBArrayOutput() DBArrayOutput {
	return o
}

func (o DBArrayOutput) ToDBArrayOutputWithContext(ctx context.Context) DBArrayOutput {
	return o
}

func (o DBArrayOutput) Index(i pulumi.IntInput) DBOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DB {
		return vs[0].([]*DB)[vs[1].(int)]
	}).(DBOutput)
}

type DBMapOutput struct{ *pulumi.OutputState }

func (DBMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DB)(nil)).Elem()
}

func (o DBMapOutput) ToDBMapOutput() DBMapOutput {
	return o
}

func (o DBMapOutput) ToDBMapOutputWithContext(ctx context.Context) DBMapOutput {
	return o
}

func (o DBMapOutput) MapIndex(k pulumi.StringInput) DBOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DB {
		return vs[0].(map[string]*DB)[vs[1].(string)]
	}).(DBOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DBInput)(nil)).Elem(), &DB{})
	pulumi.RegisterInputType(reflect.TypeOf((*DBArrayInput)(nil)).Elem(), DBArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DBMapInput)(nil)).Elem(), DBMap{})
	pulumi.RegisterOutputType(DBOutput{})
	pulumi.RegisterOutputType(DBArrayOutput{})
	pulumi.RegisterOutputType(DBMapOutput{})
}
