// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vod

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func SuperPlayerConfigs(ctx *pulumi.Context, args *SuperPlayerConfigsArgs, opts ...pulumi.InvokeOption) (*SuperPlayerConfigsResult, error) {
	var rv SuperPlayerConfigsResult
	err := ctx.Invoke("tencentcloud:Vod/superPlayerConfigs:SuperPlayerConfigs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking SuperPlayerConfigs.
type SuperPlayerConfigsArgs struct {
	Name             *string `pulumi:"name"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	SubAppId         *int    `pulumi:"subAppId"`
	Type             *string `pulumi:"type"`
}

// A collection of values returned by SuperPlayerConfigs.
type SuperPlayerConfigsResult struct {
	ConfigLists []SuperPlayerConfigsConfigList `pulumi:"configLists"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	Name             *string `pulumi:"name"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	SubAppId         *int    `pulumi:"subAppId"`
	Type             *string `pulumi:"type"`
}

func SuperPlayerConfigsOutput(ctx *pulumi.Context, args SuperPlayerConfigsOutputArgs, opts ...pulumi.InvokeOption) SuperPlayerConfigsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (SuperPlayerConfigsResult, error) {
			args := v.(SuperPlayerConfigsArgs)
			r, err := SuperPlayerConfigs(ctx, &args, opts...)
			var s SuperPlayerConfigsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(SuperPlayerConfigsResultOutput)
}

// A collection of arguments for invoking SuperPlayerConfigs.
type SuperPlayerConfigsOutputArgs struct {
	Name             pulumi.StringPtrInput `pulumi:"name"`
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	SubAppId         pulumi.IntPtrInput    `pulumi:"subAppId"`
	Type             pulumi.StringPtrInput `pulumi:"type"`
}

func (SuperPlayerConfigsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperPlayerConfigsArgs)(nil)).Elem()
}

// A collection of values returned by SuperPlayerConfigs.
type SuperPlayerConfigsResultOutput struct{ *pulumi.OutputState }

func (SuperPlayerConfigsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperPlayerConfigsResult)(nil)).Elem()
}

func (o SuperPlayerConfigsResultOutput) ToSuperPlayerConfigsResultOutput() SuperPlayerConfigsResultOutput {
	return o
}

func (o SuperPlayerConfigsResultOutput) ToSuperPlayerConfigsResultOutputWithContext(ctx context.Context) SuperPlayerConfigsResultOutput {
	return o
}

func (o SuperPlayerConfigsResultOutput) ConfigLists() SuperPlayerConfigsConfigListArrayOutput {
	return o.ApplyT(func(v SuperPlayerConfigsResult) []SuperPlayerConfigsConfigList { return v.ConfigLists }).(SuperPlayerConfigsConfigListArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o SuperPlayerConfigsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SuperPlayerConfigsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o SuperPlayerConfigsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperPlayerConfigsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o SuperPlayerConfigsResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperPlayerConfigsResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o SuperPlayerConfigsResultOutput) SubAppId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SuperPlayerConfigsResult) *int { return v.SubAppId }).(pulumi.IntPtrOutput)
}

func (o SuperPlayerConfigsResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperPlayerConfigsResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(SuperPlayerConfigsResultOutput{})
}
