// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ha

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HaVip struct {
	pulumi.CustomResourceState

	// EIP that is associated.
	AddressIp pulumi.StringOutput `pulumi:"addressIp"`
	// Create time of the HA VIP.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Instance ID that is associated.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Name of the HA VIP. The length of character is limited to 1-60.
	Name pulumi.StringOutput `pulumi:"name"`
	// Network interface ID that is associated.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
	// State of the HA VIP. Valid value: `AVAILABLE`, `UNBIND`.
	State pulumi.StringOutput `pulumi:"state"`
	// Subnet ID.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Virtual IP address, it must not be occupied and in this VPC network segment. If not set, it will be assigned after
	// resource created automatically.
	Vip pulumi.StringOutput `pulumi:"vip"`
	// VPC ID.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewHaVip registers a new resource with the given unique name, arguments, and options.
func NewHaVip(ctx *pulumi.Context,
	name string, args *HaVipArgs, opts ...pulumi.ResourceOption) (*HaVip, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource HaVip
	err := ctx.RegisterResource("tencentcloud:Ha/haVip:HaVip", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHaVip gets an existing HaVip resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHaVip(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HaVipState, opts ...pulumi.ResourceOption) (*HaVip, error) {
	var resource HaVip
	err := ctx.ReadResource("tencentcloud:Ha/haVip:HaVip", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HaVip resources.
type haVipState struct {
	// EIP that is associated.
	AddressIp *string `pulumi:"addressIp"`
	// Create time of the HA VIP.
	CreateTime *string `pulumi:"createTime"`
	// Instance ID that is associated.
	InstanceId *string `pulumi:"instanceId"`
	// Name of the HA VIP. The length of character is limited to 1-60.
	Name *string `pulumi:"name"`
	// Network interface ID that is associated.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// State of the HA VIP. Valid value: `AVAILABLE`, `UNBIND`.
	State *string `pulumi:"state"`
	// Subnet ID.
	SubnetId *string `pulumi:"subnetId"`
	// Virtual IP address, it must not be occupied and in this VPC network segment. If not set, it will be assigned after
	// resource created automatically.
	Vip *string `pulumi:"vip"`
	// VPC ID.
	VpcId *string `pulumi:"vpcId"`
}

type HaVipState struct {
	// EIP that is associated.
	AddressIp pulumi.StringPtrInput
	// Create time of the HA VIP.
	CreateTime pulumi.StringPtrInput
	// Instance ID that is associated.
	InstanceId pulumi.StringPtrInput
	// Name of the HA VIP. The length of character is limited to 1-60.
	Name pulumi.StringPtrInput
	// Network interface ID that is associated.
	NetworkInterfaceId pulumi.StringPtrInput
	// State of the HA VIP. Valid value: `AVAILABLE`, `UNBIND`.
	State pulumi.StringPtrInput
	// Subnet ID.
	SubnetId pulumi.StringPtrInput
	// Virtual IP address, it must not be occupied and in this VPC network segment. If not set, it will be assigned after
	// resource created automatically.
	Vip pulumi.StringPtrInput
	// VPC ID.
	VpcId pulumi.StringPtrInput
}

func (HaVipState) ElementType() reflect.Type {
	return reflect.TypeOf((*haVipState)(nil)).Elem()
}

type haVipArgs struct {
	// Name of the HA VIP. The length of character is limited to 1-60.
	Name *string `pulumi:"name"`
	// Subnet ID.
	SubnetId string `pulumi:"subnetId"`
	// Virtual IP address, it must not be occupied and in this VPC network segment. If not set, it will be assigned after
	// resource created automatically.
	Vip *string `pulumi:"vip"`
	// VPC ID.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a HaVip resource.
type HaVipArgs struct {
	// Name of the HA VIP. The length of character is limited to 1-60.
	Name pulumi.StringPtrInput
	// Subnet ID.
	SubnetId pulumi.StringInput
	// Virtual IP address, it must not be occupied and in this VPC network segment. If not set, it will be assigned after
	// resource created automatically.
	Vip pulumi.StringPtrInput
	// VPC ID.
	VpcId pulumi.StringInput
}

func (HaVipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*haVipArgs)(nil)).Elem()
}

type HaVipInput interface {
	pulumi.Input

	ToHaVipOutput() HaVipOutput
	ToHaVipOutputWithContext(ctx context.Context) HaVipOutput
}

func (*HaVip) ElementType() reflect.Type {
	return reflect.TypeOf((**HaVip)(nil)).Elem()
}

func (i *HaVip) ToHaVipOutput() HaVipOutput {
	return i.ToHaVipOutputWithContext(context.Background())
}

func (i *HaVip) ToHaVipOutputWithContext(ctx context.Context) HaVipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaVipOutput)
}

// HaVipArrayInput is an input type that accepts HaVipArray and HaVipArrayOutput values.
// You can construct a concrete instance of `HaVipArrayInput` via:
//
//          HaVipArray{ HaVipArgs{...} }
type HaVipArrayInput interface {
	pulumi.Input

	ToHaVipArrayOutput() HaVipArrayOutput
	ToHaVipArrayOutputWithContext(context.Context) HaVipArrayOutput
}

type HaVipArray []HaVipInput

func (HaVipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HaVip)(nil)).Elem()
}

func (i HaVipArray) ToHaVipArrayOutput() HaVipArrayOutput {
	return i.ToHaVipArrayOutputWithContext(context.Background())
}

func (i HaVipArray) ToHaVipArrayOutputWithContext(ctx context.Context) HaVipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaVipArrayOutput)
}

// HaVipMapInput is an input type that accepts HaVipMap and HaVipMapOutput values.
// You can construct a concrete instance of `HaVipMapInput` via:
//
//          HaVipMap{ "key": HaVipArgs{...} }
type HaVipMapInput interface {
	pulumi.Input

	ToHaVipMapOutput() HaVipMapOutput
	ToHaVipMapOutputWithContext(context.Context) HaVipMapOutput
}

type HaVipMap map[string]HaVipInput

func (HaVipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HaVip)(nil)).Elem()
}

func (i HaVipMap) ToHaVipMapOutput() HaVipMapOutput {
	return i.ToHaVipMapOutputWithContext(context.Background())
}

func (i HaVipMap) ToHaVipMapOutputWithContext(ctx context.Context) HaVipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaVipMapOutput)
}

type HaVipOutput struct{ *pulumi.OutputState }

func (HaVipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HaVip)(nil)).Elem()
}

func (o HaVipOutput) ToHaVipOutput() HaVipOutput {
	return o
}

func (o HaVipOutput) ToHaVipOutputWithContext(ctx context.Context) HaVipOutput {
	return o
}

// EIP that is associated.
func (o HaVipOutput) AddressIp() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.AddressIp }).(pulumi.StringOutput)
}

// Create time of the HA VIP.
func (o HaVipOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Instance ID that is associated.
func (o HaVipOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Name of the HA VIP. The length of character is limited to 1-60.
func (o HaVipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network interface ID that is associated.
func (o HaVipOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// State of the HA VIP. Valid value: `AVAILABLE`, `UNBIND`.
func (o HaVipOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Subnet ID.
func (o HaVipOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Virtual IP address, it must not be occupied and in this VPC network segment. If not set, it will be assigned after
// resource created automatically.
func (o HaVipOutput) Vip() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.Vip }).(pulumi.StringOutput)
}

// VPC ID.
func (o HaVipOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type HaVipArrayOutput struct{ *pulumi.OutputState }

func (HaVipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HaVip)(nil)).Elem()
}

func (o HaVipArrayOutput) ToHaVipArrayOutput() HaVipArrayOutput {
	return o
}

func (o HaVipArrayOutput) ToHaVipArrayOutputWithContext(ctx context.Context) HaVipArrayOutput {
	return o
}

func (o HaVipArrayOutput) Index(i pulumi.IntInput) HaVipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HaVip {
		return vs[0].([]*HaVip)[vs[1].(int)]
	}).(HaVipOutput)
}

type HaVipMapOutput struct{ *pulumi.OutputState }

func (HaVipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HaVip)(nil)).Elem()
}

func (o HaVipMapOutput) ToHaVipMapOutput() HaVipMapOutput {
	return o
}

func (o HaVipMapOutput) ToHaVipMapOutputWithContext(ctx context.Context) HaVipMapOutput {
	return o
}

func (o HaVipMapOutput) MapIndex(k pulumi.StringInput) HaVipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HaVip {
		return vs[0].(map[string]*HaVip)[vs[1].(string)]
	}).(HaVipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HaVipInput)(nil)).Elem(), &HaVip{})
	pulumi.RegisterInputType(reflect.TypeOf((*HaVipArrayInput)(nil)).Elem(), HaVipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HaVipMapInput)(nil)).Elem(), HaVipMap{})
	pulumi.RegisterOutputType(HaVipOutput{})
	pulumi.RegisterOutputType(HaVipArrayOutput{})
	pulumi.RegisterOutputType(HaVipMapOutput{})
}
