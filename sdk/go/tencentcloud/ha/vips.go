// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func Vips(ctx *pulumi.Context, args *VipsArgs, opts ...pulumi.InvokeOption) (*VipsResult, error) {
	var rv VipsResult
	err := ctx.Invoke("tencentcloud:Ha/vips:Vips", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Vips.
type VipsArgs struct {
	AddressIp        *string `pulumi:"addressIp"`
	Id               *string `pulumi:"id"`
	Name             *string `pulumi:"name"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	SubnetId         *string `pulumi:"subnetId"`
	VpcId            *string `pulumi:"vpcId"`
}

// A collection of values returned by Vips.
type VipsResult struct {
	AddressIp        *string         `pulumi:"addressIp"`
	HaVipLists       []VipsHaVipList `pulumi:"haVipLists"`
	Id               *string         `pulumi:"id"`
	Name             *string         `pulumi:"name"`
	ResultOutputFile *string         `pulumi:"resultOutputFile"`
	SubnetId         *string         `pulumi:"subnetId"`
	VpcId            *string         `pulumi:"vpcId"`
}

func VipsOutput(ctx *pulumi.Context, args VipsOutputArgs, opts ...pulumi.InvokeOption) VipsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (VipsResult, error) {
			args := v.(VipsArgs)
			r, err := Vips(ctx, &args, opts...)
			var s VipsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(VipsResultOutput)
}

// A collection of arguments for invoking Vips.
type VipsOutputArgs struct {
	AddressIp        pulumi.StringPtrInput `pulumi:"addressIp"`
	Id               pulumi.StringPtrInput `pulumi:"id"`
	Name             pulumi.StringPtrInput `pulumi:"name"`
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	SubnetId         pulumi.StringPtrInput `pulumi:"subnetId"`
	VpcId            pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (VipsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VipsArgs)(nil)).Elem()
}

// A collection of values returned by Vips.
type VipsResultOutput struct{ *pulumi.OutputState }

func (VipsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VipsResult)(nil)).Elem()
}

func (o VipsResultOutput) ToVipsResultOutput() VipsResultOutput {
	return o
}

func (o VipsResultOutput) ToVipsResultOutputWithContext(ctx context.Context) VipsResultOutput {
	return o
}

func (o VipsResultOutput) AddressIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VipsResult) *string { return v.AddressIp }).(pulumi.StringPtrOutput)
}

func (o VipsResultOutput) HaVipLists() VipsHaVipListArrayOutput {
	return o.ApplyT(func(v VipsResult) []VipsHaVipList { return v.HaVipLists }).(VipsHaVipListArrayOutput)
}

func (o VipsResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VipsResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o VipsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VipsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o VipsResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VipsResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o VipsResultOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VipsResult) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

func (o VipsResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VipsResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(VipsResultOutput{})
}
