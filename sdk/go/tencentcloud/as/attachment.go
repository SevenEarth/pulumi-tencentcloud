// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package as

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to attach or detach CVM instances to a specified scaling group.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/As"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Images"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Instance"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// zones, err := Availability.GetZonesByProduct(ctx, &availability.GetZonesByProductArgs{
// Product: "as",
// }, nil);
// if err != nil {
// return err
// }
// image, err := Images.GetInstance(ctx, &images.GetInstanceArgs{
// ImageTypes: []string{
// "PUBLIC_IMAGE",
// },
// OsName: pulumi.StringRef("TencentOS Server 3.2 (Final)"),
// }, nil);
// if err != nil {
// return err
// }
// instanceTypes, err := Instance.GetTypes(ctx, &instance.GetTypesArgs{
// Filters: []instance.GetTypesFilter{
// {
// Name: "zone",
// Values: interface{}{
// zones.Zones[0].Name,
// },
// },
// {
// Name: "instance-family",
// Values: []string{
// "S5",
// },
// },
// },
// CpuCoreCount: pulumi.IntRef(2),
// ExcludeSoldOut: pulumi.BoolRef(true),
// }, nil);
// if err != nil {
// return err
// }
// vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
// CidrBlock: pulumi.String("10.0.0.0/16"),
// })
// if err != nil {
// return err
// }
// subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
// VpcId: vpc.ID(),
// CidrBlock: pulumi.String("10.0.0.0/16"),
// AvailabilityZone: pulumi.String(zones.Zones[0].Name),
// })
// if err != nil {
// return err
// }
// exampleScalingConfig, err := As.NewScalingConfig(ctx, "exampleScalingConfig", &As.ScalingConfigArgs{
// ConfigurationName: pulumi.String("tf-example"),
// ImageId: pulumi.String(image.Images[0].ImageId),
// InstanceTypes: pulumi.StringArray{
// pulumi.String("SA1.SMALL1"),
// pulumi.String("SA2.SMALL1"),
// pulumi.String("SA2.SMALL2"),
// pulumi.String("SA2.SMALL4"),
// },
// InstanceNameSettings: &as.ScalingConfigInstanceNameSettingsArgs{
// InstanceName: pulumi.String("test-ins-name"),
// },
// })
// if err != nil {
// return err
// }
// exampleScalingGroup, err := As.NewScalingGroup(ctx, "exampleScalingGroup", &As.ScalingGroupArgs{
// ScalingGroupName: pulumi.String("tf-example"),
// ConfigurationId: exampleScalingConfig.ID(),
// MaxSize: pulumi.Int(1),
// MinSize: pulumi.Int(0),
// VpcId: vpc.ID(),
// SubnetIds: pulumi.StringArray{
// subnet.ID(),
// },
// })
// if err != nil {
// return err
// }
// exampleInstance, err := Instance.NewInstance(ctx, "exampleInstance", &Instance.InstanceArgs{
// InstanceName: pulumi.String("tf_example_instance"),
// AvailabilityZone: pulumi.String(zones.Zones[0].Name),
// ImageId: pulumi.String(image.Images[0].ImageId),
// InstanceType: pulumi.String(instanceTypes.InstanceTypes[0].InstanceType),
// SystemDiskType: pulumi.String("CLOUD_PREMIUM"),
// SystemDiskSize: pulumi.Int(50),
// AllocatePublicIp: pulumi.Bool(true),
// InternetMaxBandwidthOut: pulumi.Int(10),
// VpcId: vpc.ID(),
// SubnetId: subnet.ID(),
// })
// if err != nil {
// return err
// }
// _, err = As.NewAttachment(ctx, "attachment", &As.AttachmentArgs{
// ScalingGroupId: exampleScalingGroup.ID(),
// InstanceIds: pulumi.StringArray{
// exampleInstance.ID(),
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
// <!--End PulumiCodeChooser -->
type Attachment struct {
	pulumi.CustomResourceState

	// ID list of CVM instances to be attached to the scaling group.
	InstanceIds pulumi.StringArrayOutput `pulumi:"instanceIds"`
	// ID of a scaling group.
	ScalingGroupId pulumi.StringOutput `pulumi:"scalingGroupId"`
}

// NewAttachment registers a new resource with the given unique name, arguments, and options.
func NewAttachment(ctx *pulumi.Context,
	name string, args *AttachmentArgs, opts ...pulumi.ResourceOption) (*Attachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceIds == nil {
		return nil, errors.New("invalid value for required argument 'InstanceIds'")
	}
	if args.ScalingGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ScalingGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Attachment
	err := ctx.RegisterResource("tencentcloud:As/attachment:Attachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttachment gets an existing Attachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttachmentState, opts ...pulumi.ResourceOption) (*Attachment, error) {
	var resource Attachment
	err := ctx.ReadResource("tencentcloud:As/attachment:Attachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Attachment resources.
type attachmentState struct {
	// ID list of CVM instances to be attached to the scaling group.
	InstanceIds []string `pulumi:"instanceIds"`
	// ID of a scaling group.
	ScalingGroupId *string `pulumi:"scalingGroupId"`
}

type AttachmentState struct {
	// ID list of CVM instances to be attached to the scaling group.
	InstanceIds pulumi.StringArrayInput
	// ID of a scaling group.
	ScalingGroupId pulumi.StringPtrInput
}

func (AttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*attachmentState)(nil)).Elem()
}

type attachmentArgs struct {
	// ID list of CVM instances to be attached to the scaling group.
	InstanceIds []string `pulumi:"instanceIds"`
	// ID of a scaling group.
	ScalingGroupId string `pulumi:"scalingGroupId"`
}

// The set of arguments for constructing a Attachment resource.
type AttachmentArgs struct {
	// ID list of CVM instances to be attached to the scaling group.
	InstanceIds pulumi.StringArrayInput
	// ID of a scaling group.
	ScalingGroupId pulumi.StringInput
}

func (AttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attachmentArgs)(nil)).Elem()
}

type AttachmentInput interface {
	pulumi.Input

	ToAttachmentOutput() AttachmentOutput
	ToAttachmentOutputWithContext(ctx context.Context) AttachmentOutput
}

func (*Attachment) ElementType() reflect.Type {
	return reflect.TypeOf((**Attachment)(nil)).Elem()
}

func (i *Attachment) ToAttachmentOutput() AttachmentOutput {
	return i.ToAttachmentOutputWithContext(context.Background())
}

func (i *Attachment) ToAttachmentOutputWithContext(ctx context.Context) AttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachmentOutput)
}

// AttachmentArrayInput is an input type that accepts AttachmentArray and AttachmentArrayOutput values.
// You can construct a concrete instance of `AttachmentArrayInput` via:
//
//	AttachmentArray{ AttachmentArgs{...} }
type AttachmentArrayInput interface {
	pulumi.Input

	ToAttachmentArrayOutput() AttachmentArrayOutput
	ToAttachmentArrayOutputWithContext(context.Context) AttachmentArrayOutput
}

type AttachmentArray []AttachmentInput

func (AttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Attachment)(nil)).Elem()
}

func (i AttachmentArray) ToAttachmentArrayOutput() AttachmentArrayOutput {
	return i.ToAttachmentArrayOutputWithContext(context.Background())
}

func (i AttachmentArray) ToAttachmentArrayOutputWithContext(ctx context.Context) AttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachmentArrayOutput)
}

// AttachmentMapInput is an input type that accepts AttachmentMap and AttachmentMapOutput values.
// You can construct a concrete instance of `AttachmentMapInput` via:
//
//	AttachmentMap{ "key": AttachmentArgs{...} }
type AttachmentMapInput interface {
	pulumi.Input

	ToAttachmentMapOutput() AttachmentMapOutput
	ToAttachmentMapOutputWithContext(context.Context) AttachmentMapOutput
}

type AttachmentMap map[string]AttachmentInput

func (AttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Attachment)(nil)).Elem()
}

func (i AttachmentMap) ToAttachmentMapOutput() AttachmentMapOutput {
	return i.ToAttachmentMapOutputWithContext(context.Background())
}

func (i AttachmentMap) ToAttachmentMapOutputWithContext(ctx context.Context) AttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachmentMapOutput)
}

type AttachmentOutput struct{ *pulumi.OutputState }

func (AttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Attachment)(nil)).Elem()
}

func (o AttachmentOutput) ToAttachmentOutput() AttachmentOutput {
	return o
}

func (o AttachmentOutput) ToAttachmentOutputWithContext(ctx context.Context) AttachmentOutput {
	return o
}

// ID list of CVM instances to be attached to the scaling group.
func (o AttachmentOutput) InstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Attachment) pulumi.StringArrayOutput { return v.InstanceIds }).(pulumi.StringArrayOutput)
}

// ID of a scaling group.
func (o AttachmentOutput) ScalingGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Attachment) pulumi.StringOutput { return v.ScalingGroupId }).(pulumi.StringOutput)
}

type AttachmentArrayOutput struct{ *pulumi.OutputState }

func (AttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Attachment)(nil)).Elem()
}

func (o AttachmentArrayOutput) ToAttachmentArrayOutput() AttachmentArrayOutput {
	return o
}

func (o AttachmentArrayOutput) ToAttachmentArrayOutputWithContext(ctx context.Context) AttachmentArrayOutput {
	return o
}

func (o AttachmentArrayOutput) Index(i pulumi.IntInput) AttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Attachment {
		return vs[0].([]*Attachment)[vs[1].(int)]
	}).(AttachmentOutput)
}

type AttachmentMapOutput struct{ *pulumi.OutputState }

func (AttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Attachment)(nil)).Elem()
}

func (o AttachmentMapOutput) ToAttachmentMapOutput() AttachmentMapOutput {
	return o
}

func (o AttachmentMapOutput) ToAttachmentMapOutputWithContext(ctx context.Context) AttachmentMapOutput {
	return o
}

func (o AttachmentMapOutput) MapIndex(k pulumi.StringInput) AttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Attachment {
		return vs[0].(map[string]*Attachment)[vs[1].(string)]
	}).(AttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttachmentInput)(nil)).Elem(), &Attachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachmentArrayInput)(nil)).Elem(), AttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachmentMapInput)(nil)).Elem(), AttachmentMap{})
	pulumi.RegisterOutputType(AttachmentOutput{})
	pulumi.RegisterOutputType(AttachmentArrayOutput{})
	pulumi.RegisterOutputType(AttachmentMapOutput{})
}
