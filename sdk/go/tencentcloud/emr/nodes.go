// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func Nodes(ctx *pulumi.Context, args *NodesArgs, opts ...pulumi.InvokeOption) (*NodesResult, error) {
	var rv NodesResult
	err := ctx.Invoke("tencentcloud:Emr/nodes:Nodes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Nodes.
type NodesArgs struct {
	HardwareResourceType *string `pulumi:"hardwareResourceType"`
	InstanceId           string  `pulumi:"instanceId"`
	Limit                *int    `pulumi:"limit"`
	NodeFlag             string  `pulumi:"nodeFlag"`
	Offset               *int    `pulumi:"offset"`
	ResultOutputFile     *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by Nodes.
type NodesResult struct {
	HardwareResourceType *string `pulumi:"hardwareResourceType"`
	// The provider-assigned unique ID for this managed resource.
	Id               string      `pulumi:"id"`
	InstanceId       string      `pulumi:"instanceId"`
	Limit            *int        `pulumi:"limit"`
	NodeFlag         string      `pulumi:"nodeFlag"`
	Nodes            []NodesNode `pulumi:"nodes"`
	Offset           *int        `pulumi:"offset"`
	ResultOutputFile *string     `pulumi:"resultOutputFile"`
}

func NodesOutput(ctx *pulumi.Context, args NodesOutputArgs, opts ...pulumi.InvokeOption) NodesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (NodesResult, error) {
			args := v.(NodesArgs)
			r, err := Nodes(ctx, &args, opts...)
			var s NodesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(NodesResultOutput)
}

// A collection of arguments for invoking Nodes.
type NodesOutputArgs struct {
	HardwareResourceType pulumi.StringPtrInput `pulumi:"hardwareResourceType"`
	InstanceId           pulumi.StringInput    `pulumi:"instanceId"`
	Limit                pulumi.IntPtrInput    `pulumi:"limit"`
	NodeFlag             pulumi.StringInput    `pulumi:"nodeFlag"`
	Offset               pulumi.IntPtrInput    `pulumi:"offset"`
	ResultOutputFile     pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (NodesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodesArgs)(nil)).Elem()
}

// A collection of values returned by Nodes.
type NodesResultOutput struct{ *pulumi.OutputState }

func (NodesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodesResult)(nil)).Elem()
}

func (o NodesResultOutput) ToNodesResultOutput() NodesResultOutput {
	return o
}

func (o NodesResultOutput) ToNodesResultOutputWithContext(ctx context.Context) NodesResultOutput {
	return o
}

func (o NodesResultOutput) HardwareResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodesResult) *string { return v.HardwareResourceType }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o NodesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v NodesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o NodesResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v NodesResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o NodesResultOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodesResult) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

func (o NodesResultOutput) NodeFlag() pulumi.StringOutput {
	return o.ApplyT(func(v NodesResult) string { return v.NodeFlag }).(pulumi.StringOutput)
}

func (o NodesResultOutput) Nodes() NodesNodeArrayOutput {
	return o.ApplyT(func(v NodesResult) []NodesNode { return v.Nodes }).(NodesNodeArrayOutput)
}

func (o NodesResultOutput) Offset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodesResult) *int { return v.Offset }).(pulumi.IntPtrOutput)
}

func (o NodesResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodesResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(NodesResultOutput{})
}
