// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OIDCSSO struct {
	pulumi.CustomResourceState

	// Authorization request Endpoint, OpenID Connect identity provider authorization address. Corresponds to the value of the
	// `authorization_endpoint` field in the Openid-configuration provided by the Enterprise IdP.
	AuthorizationEndpoint pulumi.StringOutput `pulumi:"authorizationEndpoint"`
	// Client ID, the client ID registered with the OpenID Connect identity provider.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// The signature public key requires base64_encode. Verify the public key signed by the OpenID Connect identity provider ID
	// Token. For the security of your account, we recommend that you rotate the signed public key regularly.
	IdentityKey pulumi.StringOutput `pulumi:"identityKey"`
	// Identity provider URL. OpenID Connect identity provider identity.Corresponds to the value of the `issuer` field in the
	// Openid-configuration provided by the Enterprise IdP.
	IdentityUrl pulumi.StringOutput `pulumi:"identityUrl"`
	// Map field names. Which field in the IdP's id_token maps to the user name of the subuser, usually the sub or name field.
	MappingFiled pulumi.StringOutput `pulumi:"mappingFiled"`
	// Authorize the request Forsonse mode. Authorization request return mode, form_post and frogment two optional modes,
	// recommended to select form_post mode.
	ResponseMode pulumi.StringOutput `pulumi:"responseMode"`
	// Authorization requests The Response type, with a fixed value id_token.
	ResponseType pulumi.StringOutput `pulumi:"responseType"`
	// Authorize the request Scope. openid; email; profile; Authorization request information scope. The default is required
	// openid.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
}

// NewOIDCSSO registers a new resource with the given unique name, arguments, and options.
func NewOIDCSSO(ctx *pulumi.Context,
	name string, args *OIDCSSOArgs, opts ...pulumi.ResourceOption) (*OIDCSSO, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthorizationEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationEndpoint'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.IdentityKey == nil {
		return nil, errors.New("invalid value for required argument 'IdentityKey'")
	}
	if args.IdentityUrl == nil {
		return nil, errors.New("invalid value for required argument 'IdentityUrl'")
	}
	if args.MappingFiled == nil {
		return nil, errors.New("invalid value for required argument 'MappingFiled'")
	}
	if args.ResponseMode == nil {
		return nil, errors.New("invalid value for required argument 'ResponseMode'")
	}
	if args.ResponseType == nil {
		return nil, errors.New("invalid value for required argument 'ResponseType'")
	}
	var resource OIDCSSO
	err := ctx.RegisterResource("tencentcloud:Cam/oIDCSSO:OIDCSSO", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOIDCSSO gets an existing OIDCSSO resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOIDCSSO(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OIDCSSOState, opts ...pulumi.ResourceOption) (*OIDCSSO, error) {
	var resource OIDCSSO
	err := ctx.ReadResource("tencentcloud:Cam/oIDCSSO:OIDCSSO", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OIDCSSO resources.
type oidcssoState struct {
	// Authorization request Endpoint, OpenID Connect identity provider authorization address. Corresponds to the value of the
	// `authorization_endpoint` field in the Openid-configuration provided by the Enterprise IdP.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// Client ID, the client ID registered with the OpenID Connect identity provider.
	ClientId *string `pulumi:"clientId"`
	// The signature public key requires base64_encode. Verify the public key signed by the OpenID Connect identity provider ID
	// Token. For the security of your account, we recommend that you rotate the signed public key regularly.
	IdentityKey *string `pulumi:"identityKey"`
	// Identity provider URL. OpenID Connect identity provider identity.Corresponds to the value of the `issuer` field in the
	// Openid-configuration provided by the Enterprise IdP.
	IdentityUrl *string `pulumi:"identityUrl"`
	// Map field names. Which field in the IdP's id_token maps to the user name of the subuser, usually the sub or name field.
	MappingFiled *string `pulumi:"mappingFiled"`
	// Authorize the request Forsonse mode. Authorization request return mode, form_post and frogment two optional modes,
	// recommended to select form_post mode.
	ResponseMode *string `pulumi:"responseMode"`
	// Authorization requests The Response type, with a fixed value id_token.
	ResponseType *string `pulumi:"responseType"`
	// Authorize the request Scope. openid; email; profile; Authorization request information scope. The default is required
	// openid.
	Scopes []string `pulumi:"scopes"`
}

type OIDCSSOState struct {
	// Authorization request Endpoint, OpenID Connect identity provider authorization address. Corresponds to the value of the
	// `authorization_endpoint` field in the Openid-configuration provided by the Enterprise IdP.
	AuthorizationEndpoint pulumi.StringPtrInput
	// Client ID, the client ID registered with the OpenID Connect identity provider.
	ClientId pulumi.StringPtrInput
	// The signature public key requires base64_encode. Verify the public key signed by the OpenID Connect identity provider ID
	// Token. For the security of your account, we recommend that you rotate the signed public key regularly.
	IdentityKey pulumi.StringPtrInput
	// Identity provider URL. OpenID Connect identity provider identity.Corresponds to the value of the `issuer` field in the
	// Openid-configuration provided by the Enterprise IdP.
	IdentityUrl pulumi.StringPtrInput
	// Map field names. Which field in the IdP's id_token maps to the user name of the subuser, usually the sub or name field.
	MappingFiled pulumi.StringPtrInput
	// Authorize the request Forsonse mode. Authorization request return mode, form_post and frogment two optional modes,
	// recommended to select form_post mode.
	ResponseMode pulumi.StringPtrInput
	// Authorization requests The Response type, with a fixed value id_token.
	ResponseType pulumi.StringPtrInput
	// Authorize the request Scope. openid; email; profile; Authorization request information scope. The default is required
	// openid.
	Scopes pulumi.StringArrayInput
}

func (OIDCSSOState) ElementType() reflect.Type {
	return reflect.TypeOf((*oidcssoState)(nil)).Elem()
}

type oidcssoArgs struct {
	// Authorization request Endpoint, OpenID Connect identity provider authorization address. Corresponds to the value of the
	// `authorization_endpoint` field in the Openid-configuration provided by the Enterprise IdP.
	AuthorizationEndpoint string `pulumi:"authorizationEndpoint"`
	// Client ID, the client ID registered with the OpenID Connect identity provider.
	ClientId string `pulumi:"clientId"`
	// The signature public key requires base64_encode. Verify the public key signed by the OpenID Connect identity provider ID
	// Token. For the security of your account, we recommend that you rotate the signed public key regularly.
	IdentityKey string `pulumi:"identityKey"`
	// Identity provider URL. OpenID Connect identity provider identity.Corresponds to the value of the `issuer` field in the
	// Openid-configuration provided by the Enterprise IdP.
	IdentityUrl string `pulumi:"identityUrl"`
	// Map field names. Which field in the IdP's id_token maps to the user name of the subuser, usually the sub or name field.
	MappingFiled string `pulumi:"mappingFiled"`
	// Authorize the request Forsonse mode. Authorization request return mode, form_post and frogment two optional modes,
	// recommended to select form_post mode.
	ResponseMode string `pulumi:"responseMode"`
	// Authorization requests The Response type, with a fixed value id_token.
	ResponseType string `pulumi:"responseType"`
	// Authorize the request Scope. openid; email; profile; Authorization request information scope. The default is required
	// openid.
	Scopes []string `pulumi:"scopes"`
}

// The set of arguments for constructing a OIDCSSO resource.
type OIDCSSOArgs struct {
	// Authorization request Endpoint, OpenID Connect identity provider authorization address. Corresponds to the value of the
	// `authorization_endpoint` field in the Openid-configuration provided by the Enterprise IdP.
	AuthorizationEndpoint pulumi.StringInput
	// Client ID, the client ID registered with the OpenID Connect identity provider.
	ClientId pulumi.StringInput
	// The signature public key requires base64_encode. Verify the public key signed by the OpenID Connect identity provider ID
	// Token. For the security of your account, we recommend that you rotate the signed public key regularly.
	IdentityKey pulumi.StringInput
	// Identity provider URL. OpenID Connect identity provider identity.Corresponds to the value of the `issuer` field in the
	// Openid-configuration provided by the Enterprise IdP.
	IdentityUrl pulumi.StringInput
	// Map field names. Which field in the IdP's id_token maps to the user name of the subuser, usually the sub or name field.
	MappingFiled pulumi.StringInput
	// Authorize the request Forsonse mode. Authorization request return mode, form_post and frogment two optional modes,
	// recommended to select form_post mode.
	ResponseMode pulumi.StringInput
	// Authorization requests The Response type, with a fixed value id_token.
	ResponseType pulumi.StringInput
	// Authorize the request Scope. openid; email; profile; Authorization request information scope. The default is required
	// openid.
	Scopes pulumi.StringArrayInput
}

func (OIDCSSOArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oidcssoArgs)(nil)).Elem()
}

type OIDCSSOInput interface {
	pulumi.Input

	ToOIDCSSOOutput() OIDCSSOOutput
	ToOIDCSSOOutputWithContext(ctx context.Context) OIDCSSOOutput
}

func (*OIDCSSO) ElementType() reflect.Type {
	return reflect.TypeOf((**OIDCSSO)(nil)).Elem()
}

func (i *OIDCSSO) ToOIDCSSOOutput() OIDCSSOOutput {
	return i.ToOIDCSSOOutputWithContext(context.Background())
}

func (i *OIDCSSO) ToOIDCSSOOutputWithContext(ctx context.Context) OIDCSSOOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OIDCSSOOutput)
}

// OIDCSSOArrayInput is an input type that accepts OIDCSSOArray and OIDCSSOArrayOutput values.
// You can construct a concrete instance of `OIDCSSOArrayInput` via:
//
//          OIDCSSOArray{ OIDCSSOArgs{...} }
type OIDCSSOArrayInput interface {
	pulumi.Input

	ToOIDCSSOArrayOutput() OIDCSSOArrayOutput
	ToOIDCSSOArrayOutputWithContext(context.Context) OIDCSSOArrayOutput
}

type OIDCSSOArray []OIDCSSOInput

func (OIDCSSOArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OIDCSSO)(nil)).Elem()
}

func (i OIDCSSOArray) ToOIDCSSOArrayOutput() OIDCSSOArrayOutput {
	return i.ToOIDCSSOArrayOutputWithContext(context.Background())
}

func (i OIDCSSOArray) ToOIDCSSOArrayOutputWithContext(ctx context.Context) OIDCSSOArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OIDCSSOArrayOutput)
}

// OIDCSSOMapInput is an input type that accepts OIDCSSOMap and OIDCSSOMapOutput values.
// You can construct a concrete instance of `OIDCSSOMapInput` via:
//
//          OIDCSSOMap{ "key": OIDCSSOArgs{...} }
type OIDCSSOMapInput interface {
	pulumi.Input

	ToOIDCSSOMapOutput() OIDCSSOMapOutput
	ToOIDCSSOMapOutputWithContext(context.Context) OIDCSSOMapOutput
}

type OIDCSSOMap map[string]OIDCSSOInput

func (OIDCSSOMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OIDCSSO)(nil)).Elem()
}

func (i OIDCSSOMap) ToOIDCSSOMapOutput() OIDCSSOMapOutput {
	return i.ToOIDCSSOMapOutputWithContext(context.Background())
}

func (i OIDCSSOMap) ToOIDCSSOMapOutputWithContext(ctx context.Context) OIDCSSOMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OIDCSSOMapOutput)
}

type OIDCSSOOutput struct{ *pulumi.OutputState }

func (OIDCSSOOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OIDCSSO)(nil)).Elem()
}

func (o OIDCSSOOutput) ToOIDCSSOOutput() OIDCSSOOutput {
	return o
}

func (o OIDCSSOOutput) ToOIDCSSOOutputWithContext(ctx context.Context) OIDCSSOOutput {
	return o
}

// Authorization request Endpoint, OpenID Connect identity provider authorization address. Corresponds to the value of the
// `authorization_endpoint` field in the Openid-configuration provided by the Enterprise IdP.
func (o OIDCSSOOutput) AuthorizationEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *OIDCSSO) pulumi.StringOutput { return v.AuthorizationEndpoint }).(pulumi.StringOutput)
}

// Client ID, the client ID registered with the OpenID Connect identity provider.
func (o OIDCSSOOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *OIDCSSO) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// The signature public key requires base64_encode. Verify the public key signed by the OpenID Connect identity provider ID
// Token. For the security of your account, we recommend that you rotate the signed public key regularly.
func (o OIDCSSOOutput) IdentityKey() pulumi.StringOutput {
	return o.ApplyT(func(v *OIDCSSO) pulumi.StringOutput { return v.IdentityKey }).(pulumi.StringOutput)
}

// Identity provider URL. OpenID Connect identity provider identity.Corresponds to the value of the `issuer` field in the
// Openid-configuration provided by the Enterprise IdP.
func (o OIDCSSOOutput) IdentityUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *OIDCSSO) pulumi.StringOutput { return v.IdentityUrl }).(pulumi.StringOutput)
}

// Map field names. Which field in the IdP's id_token maps to the user name of the subuser, usually the sub or name field.
func (o OIDCSSOOutput) MappingFiled() pulumi.StringOutput {
	return o.ApplyT(func(v *OIDCSSO) pulumi.StringOutput { return v.MappingFiled }).(pulumi.StringOutput)
}

// Authorize the request Forsonse mode. Authorization request return mode, form_post and frogment two optional modes,
// recommended to select form_post mode.
func (o OIDCSSOOutput) ResponseMode() pulumi.StringOutput {
	return o.ApplyT(func(v *OIDCSSO) pulumi.StringOutput { return v.ResponseMode }).(pulumi.StringOutput)
}

// Authorization requests The Response type, with a fixed value id_token.
func (o OIDCSSOOutput) ResponseType() pulumi.StringOutput {
	return o.ApplyT(func(v *OIDCSSO) pulumi.StringOutput { return v.ResponseType }).(pulumi.StringOutput)
}

// Authorize the request Scope. openid; email; profile; Authorization request information scope. The default is required
// openid.
func (o OIDCSSOOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OIDCSSO) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

type OIDCSSOArrayOutput struct{ *pulumi.OutputState }

func (OIDCSSOArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OIDCSSO)(nil)).Elem()
}

func (o OIDCSSOArrayOutput) ToOIDCSSOArrayOutput() OIDCSSOArrayOutput {
	return o
}

func (o OIDCSSOArrayOutput) ToOIDCSSOArrayOutputWithContext(ctx context.Context) OIDCSSOArrayOutput {
	return o
}

func (o OIDCSSOArrayOutput) Index(i pulumi.IntInput) OIDCSSOOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OIDCSSO {
		return vs[0].([]*OIDCSSO)[vs[1].(int)]
	}).(OIDCSSOOutput)
}

type OIDCSSOMapOutput struct{ *pulumi.OutputState }

func (OIDCSSOMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OIDCSSO)(nil)).Elem()
}

func (o OIDCSSOMapOutput) ToOIDCSSOMapOutput() OIDCSSOMapOutput {
	return o
}

func (o OIDCSSOMapOutput) ToOIDCSSOMapOutputWithContext(ctx context.Context) OIDCSSOMapOutput {
	return o
}

func (o OIDCSSOMapOutput) MapIndex(k pulumi.StringInput) OIDCSSOOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OIDCSSO {
		return vs[0].(map[string]*OIDCSSO)[vs[1].(string)]
	}).(OIDCSSOOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OIDCSSOInput)(nil)).Elem(), &OIDCSSO{})
	pulumi.RegisterInputType(reflect.TypeOf((*OIDCSSOArrayInput)(nil)).Elem(), OIDCSSOArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OIDCSSOMapInput)(nil)).Elem(), OIDCSSOMap{})
	pulumi.RegisterOutputType(OIDCSSOOutput{})
	pulumi.RegisterOutputType(OIDCSSOArrayOutput{})
	pulumi.RegisterOutputType(OIDCSSOMapOutput{})
}
