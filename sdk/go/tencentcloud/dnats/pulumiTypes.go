// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnats

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type InstancesDnatList struct {
	Description *string `pulumi:"description"`
	ElasticIp   string  `pulumi:"elasticIp"`
	ElasticPort string  `pulumi:"elasticPort"`
	NatId       string  `pulumi:"natId"`
	PrivateIp   string  `pulumi:"privateIp"`
	PrivatePort string  `pulumi:"privatePort"`
	Protocol    string  `pulumi:"protocol"`
	VpcId       string  `pulumi:"vpcId"`
}

// InstancesDnatListInput is an input type that accepts InstancesDnatListArgs and InstancesDnatListOutput values.
// You can construct a concrete instance of `InstancesDnatListInput` via:
//
//          InstancesDnatListArgs{...}
type InstancesDnatListInput interface {
	pulumi.Input

	ToInstancesDnatListOutput() InstancesDnatListOutput
	ToInstancesDnatListOutputWithContext(context.Context) InstancesDnatListOutput
}

type InstancesDnatListArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	ElasticIp   pulumi.StringInput    `pulumi:"elasticIp"`
	ElasticPort pulumi.StringInput    `pulumi:"elasticPort"`
	NatId       pulumi.StringInput    `pulumi:"natId"`
	PrivateIp   pulumi.StringInput    `pulumi:"privateIp"`
	PrivatePort pulumi.StringInput    `pulumi:"privatePort"`
	Protocol    pulumi.StringInput    `pulumi:"protocol"`
	VpcId       pulumi.StringInput    `pulumi:"vpcId"`
}

func (InstancesDnatListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesDnatList)(nil)).Elem()
}

func (i InstancesDnatListArgs) ToInstancesDnatListOutput() InstancesDnatListOutput {
	return i.ToInstancesDnatListOutputWithContext(context.Background())
}

func (i InstancesDnatListArgs) ToInstancesDnatListOutputWithContext(ctx context.Context) InstancesDnatListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesDnatListOutput)
}

// InstancesDnatListArrayInput is an input type that accepts InstancesDnatListArray and InstancesDnatListArrayOutput values.
// You can construct a concrete instance of `InstancesDnatListArrayInput` via:
//
//          InstancesDnatListArray{ InstancesDnatListArgs{...} }
type InstancesDnatListArrayInput interface {
	pulumi.Input

	ToInstancesDnatListArrayOutput() InstancesDnatListArrayOutput
	ToInstancesDnatListArrayOutputWithContext(context.Context) InstancesDnatListArrayOutput
}

type InstancesDnatListArray []InstancesDnatListInput

func (InstancesDnatListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesDnatList)(nil)).Elem()
}

func (i InstancesDnatListArray) ToInstancesDnatListArrayOutput() InstancesDnatListArrayOutput {
	return i.ToInstancesDnatListArrayOutputWithContext(context.Background())
}

func (i InstancesDnatListArray) ToInstancesDnatListArrayOutputWithContext(ctx context.Context) InstancesDnatListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesDnatListArrayOutput)
}

type InstancesDnatListOutput struct{ *pulumi.OutputState }

func (InstancesDnatListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesDnatList)(nil)).Elem()
}

func (o InstancesDnatListOutput) ToInstancesDnatListOutput() InstancesDnatListOutput {
	return o
}

func (o InstancesDnatListOutput) ToInstancesDnatListOutputWithContext(ctx context.Context) InstancesDnatListOutput {
	return o
}

func (o InstancesDnatListOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancesDnatList) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InstancesDnatListOutput) ElasticIp() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesDnatList) string { return v.ElasticIp }).(pulumi.StringOutput)
}

func (o InstancesDnatListOutput) ElasticPort() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesDnatList) string { return v.ElasticPort }).(pulumi.StringOutput)
}

func (o InstancesDnatListOutput) NatId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesDnatList) string { return v.NatId }).(pulumi.StringOutput)
}

func (o InstancesDnatListOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesDnatList) string { return v.PrivateIp }).(pulumi.StringOutput)
}

func (o InstancesDnatListOutput) PrivatePort() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesDnatList) string { return v.PrivatePort }).(pulumi.StringOutput)
}

func (o InstancesDnatListOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesDnatList) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o InstancesDnatListOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesDnatList) string { return v.VpcId }).(pulumi.StringOutput)
}

type InstancesDnatListArrayOutput struct{ *pulumi.OutputState }

func (InstancesDnatListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesDnatList)(nil)).Elem()
}

func (o InstancesDnatListArrayOutput) ToInstancesDnatListArrayOutput() InstancesDnatListArrayOutput {
	return o
}

func (o InstancesDnatListArrayOutput) ToInstancesDnatListArrayOutputWithContext(ctx context.Context) InstancesDnatListArrayOutput {
	return o
}

func (o InstancesDnatListArrayOutput) Index(i pulumi.IntInput) InstancesDnatListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesDnatList {
		return vs[0].([]InstancesDnatList)[vs[1].(int)]
	}).(InstancesDnatListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesDnatListInput)(nil)).Elem(), InstancesDnatListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesDnatListArrayInput)(nil)).Elem(), InstancesDnatListArray{})
	pulumi.RegisterOutputType(InstancesDnatListOutput{})
	pulumi.RegisterOutputType(InstancesDnatListArrayOutput{})
}
