// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KeysKeyList struct {
	Alias              string `pulumi:"alias"`
	CreateTime         int    `pulumi:"createTime"`
	CreatorUin         int    `pulumi:"creatorUin"`
	DeletionDate       int    `pulumi:"deletionDate"`
	Description        string `pulumi:"description"`
	KeyId              string `pulumi:"keyId"`
	KeyRotationEnabled bool   `pulumi:"keyRotationEnabled"`
	KeyState           string `pulumi:"keyState"`
	KeyUsage           string `pulumi:"keyUsage"`
	NextRotateTime     int    `pulumi:"nextRotateTime"`
	Origin             string `pulumi:"origin"`
	Owner              string `pulumi:"owner"`
	ValidTo            int    `pulumi:"validTo"`
}

// KeysKeyListInput is an input type that accepts KeysKeyListArgs and KeysKeyListOutput values.
// You can construct a concrete instance of `KeysKeyListInput` via:
//
//          KeysKeyListArgs{...}
type KeysKeyListInput interface {
	pulumi.Input

	ToKeysKeyListOutput() KeysKeyListOutput
	ToKeysKeyListOutputWithContext(context.Context) KeysKeyListOutput
}

type KeysKeyListArgs struct {
	Alias              pulumi.StringInput `pulumi:"alias"`
	CreateTime         pulumi.IntInput    `pulumi:"createTime"`
	CreatorUin         pulumi.IntInput    `pulumi:"creatorUin"`
	DeletionDate       pulumi.IntInput    `pulumi:"deletionDate"`
	Description        pulumi.StringInput `pulumi:"description"`
	KeyId              pulumi.StringInput `pulumi:"keyId"`
	KeyRotationEnabled pulumi.BoolInput   `pulumi:"keyRotationEnabled"`
	KeyState           pulumi.StringInput `pulumi:"keyState"`
	KeyUsage           pulumi.StringInput `pulumi:"keyUsage"`
	NextRotateTime     pulumi.IntInput    `pulumi:"nextRotateTime"`
	Origin             pulumi.StringInput `pulumi:"origin"`
	Owner              pulumi.StringInput `pulumi:"owner"`
	ValidTo            pulumi.IntInput    `pulumi:"validTo"`
}

func (KeysKeyListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysKeyList)(nil)).Elem()
}

func (i KeysKeyListArgs) ToKeysKeyListOutput() KeysKeyListOutput {
	return i.ToKeysKeyListOutputWithContext(context.Background())
}

func (i KeysKeyListArgs) ToKeysKeyListOutputWithContext(ctx context.Context) KeysKeyListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysKeyListOutput)
}

// KeysKeyListArrayInput is an input type that accepts KeysKeyListArray and KeysKeyListArrayOutput values.
// You can construct a concrete instance of `KeysKeyListArrayInput` via:
//
//          KeysKeyListArray{ KeysKeyListArgs{...} }
type KeysKeyListArrayInput interface {
	pulumi.Input

	ToKeysKeyListArrayOutput() KeysKeyListArrayOutput
	ToKeysKeyListArrayOutputWithContext(context.Context) KeysKeyListArrayOutput
}

type KeysKeyListArray []KeysKeyListInput

func (KeysKeyListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeysKeyList)(nil)).Elem()
}

func (i KeysKeyListArray) ToKeysKeyListArrayOutput() KeysKeyListArrayOutput {
	return i.ToKeysKeyListArrayOutputWithContext(context.Background())
}

func (i KeysKeyListArray) ToKeysKeyListArrayOutputWithContext(ctx context.Context) KeysKeyListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysKeyListArrayOutput)
}

type KeysKeyListOutput struct{ *pulumi.OutputState }

func (KeysKeyListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysKeyList)(nil)).Elem()
}

func (o KeysKeyListOutput) ToKeysKeyListOutput() KeysKeyListOutput {
	return o
}

func (o KeysKeyListOutput) ToKeysKeyListOutputWithContext(ctx context.Context) KeysKeyListOutput {
	return o
}

func (o KeysKeyListOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKeyList) string { return v.Alias }).(pulumi.StringOutput)
}

func (o KeysKeyListOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v KeysKeyList) int { return v.CreateTime }).(pulumi.IntOutput)
}

func (o KeysKeyListOutput) CreatorUin() pulumi.IntOutput {
	return o.ApplyT(func(v KeysKeyList) int { return v.CreatorUin }).(pulumi.IntOutput)
}

func (o KeysKeyListOutput) DeletionDate() pulumi.IntOutput {
	return o.ApplyT(func(v KeysKeyList) int { return v.DeletionDate }).(pulumi.IntOutput)
}

func (o KeysKeyListOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKeyList) string { return v.Description }).(pulumi.StringOutput)
}

func (o KeysKeyListOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKeyList) string { return v.KeyId }).(pulumi.StringOutput)
}

func (o KeysKeyListOutput) KeyRotationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v KeysKeyList) bool { return v.KeyRotationEnabled }).(pulumi.BoolOutput)
}

func (o KeysKeyListOutput) KeyState() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKeyList) string { return v.KeyState }).(pulumi.StringOutput)
}

func (o KeysKeyListOutput) KeyUsage() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKeyList) string { return v.KeyUsage }).(pulumi.StringOutput)
}

func (o KeysKeyListOutput) NextRotateTime() pulumi.IntOutput {
	return o.ApplyT(func(v KeysKeyList) int { return v.NextRotateTime }).(pulumi.IntOutput)
}

func (o KeysKeyListOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKeyList) string { return v.Origin }).(pulumi.StringOutput)
}

func (o KeysKeyListOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKeyList) string { return v.Owner }).(pulumi.StringOutput)
}

func (o KeysKeyListOutput) ValidTo() pulumi.IntOutput {
	return o.ApplyT(func(v KeysKeyList) int { return v.ValidTo }).(pulumi.IntOutput)
}

type KeysKeyListArrayOutput struct{ *pulumi.OutputState }

func (KeysKeyListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeysKeyList)(nil)).Elem()
}

func (o KeysKeyListArrayOutput) ToKeysKeyListArrayOutput() KeysKeyListArrayOutput {
	return o
}

func (o KeysKeyListArrayOutput) ToKeysKeyListArrayOutputWithContext(ctx context.Context) KeysKeyListArrayOutput {
	return o
}

func (o KeysKeyListArrayOutput) Index(i pulumi.IntInput) KeysKeyListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeysKeyList {
		return vs[0].([]KeysKeyList)[vs[1].(int)]
	}).(KeysKeyListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeysKeyListInput)(nil)).Elem(), KeysKeyListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeysKeyListArrayInput)(nil)).Elem(), KeysKeyListArray{})
	pulumi.RegisterOutputType(KeysKeyListOutput{})
	pulumi.RegisterOutputType(KeysKeyListArrayOutput{})
}
