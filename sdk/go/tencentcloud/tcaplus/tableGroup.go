// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tcaplus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TableGroup struct {
	pulumi.CustomResourceState

	// ID of the TcaplusDB cluster to which the table group belongs.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Create time of the TcaplusDB table group.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Number of tables.
	TableCount pulumi.IntOutput `pulumi:"tableCount"`
	// Name of the TcaplusDB table group. Name length should be between 1 and 30.
	TablegroupName pulumi.StringOutput `pulumi:"tablegroupName"`
	// Total storage size (MB).
	TotalSize pulumi.IntOutput `pulumi:"totalSize"`
}

// NewTableGroup registers a new resource with the given unique name, arguments, and options.
func NewTableGroup(ctx *pulumi.Context,
	name string, args *TableGroupArgs, opts ...pulumi.ResourceOption) (*TableGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.TablegroupName == nil {
		return nil, errors.New("invalid value for required argument 'TablegroupName'")
	}
	var resource TableGroup
	err := ctx.RegisterResource("tencentcloud:Tcaplus/tableGroup:TableGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTableGroup gets an existing TableGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTableGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableGroupState, opts ...pulumi.ResourceOption) (*TableGroup, error) {
	var resource TableGroup
	err := ctx.ReadResource("tencentcloud:Tcaplus/tableGroup:TableGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TableGroup resources.
type tableGroupState struct {
	// ID of the TcaplusDB cluster to which the table group belongs.
	ClusterId *string `pulumi:"clusterId"`
	// Create time of the TcaplusDB table group.
	CreateTime *string `pulumi:"createTime"`
	// Number of tables.
	TableCount *int `pulumi:"tableCount"`
	// Name of the TcaplusDB table group. Name length should be between 1 and 30.
	TablegroupName *string `pulumi:"tablegroupName"`
	// Total storage size (MB).
	TotalSize *int `pulumi:"totalSize"`
}

type TableGroupState struct {
	// ID of the TcaplusDB cluster to which the table group belongs.
	ClusterId pulumi.StringPtrInput
	// Create time of the TcaplusDB table group.
	CreateTime pulumi.StringPtrInput
	// Number of tables.
	TableCount pulumi.IntPtrInput
	// Name of the TcaplusDB table group. Name length should be between 1 and 30.
	TablegroupName pulumi.StringPtrInput
	// Total storage size (MB).
	TotalSize pulumi.IntPtrInput
}

func (TableGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableGroupState)(nil)).Elem()
}

type tableGroupArgs struct {
	// ID of the TcaplusDB cluster to which the table group belongs.
	ClusterId string `pulumi:"clusterId"`
	// Name of the TcaplusDB table group. Name length should be between 1 and 30.
	TablegroupName string `pulumi:"tablegroupName"`
}

// The set of arguments for constructing a TableGroup resource.
type TableGroupArgs struct {
	// ID of the TcaplusDB cluster to which the table group belongs.
	ClusterId pulumi.StringInput
	// Name of the TcaplusDB table group. Name length should be between 1 and 30.
	TablegroupName pulumi.StringInput
}

func (TableGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableGroupArgs)(nil)).Elem()
}

type TableGroupInput interface {
	pulumi.Input

	ToTableGroupOutput() TableGroupOutput
	ToTableGroupOutputWithContext(ctx context.Context) TableGroupOutput
}

func (*TableGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**TableGroup)(nil)).Elem()
}

func (i *TableGroup) ToTableGroupOutput() TableGroupOutput {
	return i.ToTableGroupOutputWithContext(context.Background())
}

func (i *TableGroup) ToTableGroupOutputWithContext(ctx context.Context) TableGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableGroupOutput)
}

// TableGroupArrayInput is an input type that accepts TableGroupArray and TableGroupArrayOutput values.
// You can construct a concrete instance of `TableGroupArrayInput` via:
//
//          TableGroupArray{ TableGroupArgs{...} }
type TableGroupArrayInput interface {
	pulumi.Input

	ToTableGroupArrayOutput() TableGroupArrayOutput
	ToTableGroupArrayOutputWithContext(context.Context) TableGroupArrayOutput
}

type TableGroupArray []TableGroupInput

func (TableGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TableGroup)(nil)).Elem()
}

func (i TableGroupArray) ToTableGroupArrayOutput() TableGroupArrayOutput {
	return i.ToTableGroupArrayOutputWithContext(context.Background())
}

func (i TableGroupArray) ToTableGroupArrayOutputWithContext(ctx context.Context) TableGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableGroupArrayOutput)
}

// TableGroupMapInput is an input type that accepts TableGroupMap and TableGroupMapOutput values.
// You can construct a concrete instance of `TableGroupMapInput` via:
//
//          TableGroupMap{ "key": TableGroupArgs{...} }
type TableGroupMapInput interface {
	pulumi.Input

	ToTableGroupMapOutput() TableGroupMapOutput
	ToTableGroupMapOutputWithContext(context.Context) TableGroupMapOutput
}

type TableGroupMap map[string]TableGroupInput

func (TableGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TableGroup)(nil)).Elem()
}

func (i TableGroupMap) ToTableGroupMapOutput() TableGroupMapOutput {
	return i.ToTableGroupMapOutputWithContext(context.Background())
}

func (i TableGroupMap) ToTableGroupMapOutputWithContext(ctx context.Context) TableGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableGroupMapOutput)
}

type TableGroupOutput struct{ *pulumi.OutputState }

func (TableGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableGroup)(nil)).Elem()
}

func (o TableGroupOutput) ToTableGroupOutput() TableGroupOutput {
	return o
}

func (o TableGroupOutput) ToTableGroupOutputWithContext(ctx context.Context) TableGroupOutput {
	return o
}

// ID of the TcaplusDB cluster to which the table group belongs.
func (o TableGroupOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *TableGroup) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Create time of the TcaplusDB table group.
func (o TableGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TableGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Number of tables.
func (o TableGroupOutput) TableCount() pulumi.IntOutput {
	return o.ApplyT(func(v *TableGroup) pulumi.IntOutput { return v.TableCount }).(pulumi.IntOutput)
}

// Name of the TcaplusDB table group. Name length should be between 1 and 30.
func (o TableGroupOutput) TablegroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *TableGroup) pulumi.StringOutput { return v.TablegroupName }).(pulumi.StringOutput)
}

// Total storage size (MB).
func (o TableGroupOutput) TotalSize() pulumi.IntOutput {
	return o.ApplyT(func(v *TableGroup) pulumi.IntOutput { return v.TotalSize }).(pulumi.IntOutput)
}

type TableGroupArrayOutput struct{ *pulumi.OutputState }

func (TableGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TableGroup)(nil)).Elem()
}

func (o TableGroupArrayOutput) ToTableGroupArrayOutput() TableGroupArrayOutput {
	return o
}

func (o TableGroupArrayOutput) ToTableGroupArrayOutputWithContext(ctx context.Context) TableGroupArrayOutput {
	return o
}

func (o TableGroupArrayOutput) Index(i pulumi.IntInput) TableGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TableGroup {
		return vs[0].([]*TableGroup)[vs[1].(int)]
	}).(TableGroupOutput)
}

type TableGroupMapOutput struct{ *pulumi.OutputState }

func (TableGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TableGroup)(nil)).Elem()
}

func (o TableGroupMapOutput) ToTableGroupMapOutput() TableGroupMapOutput {
	return o
}

func (o TableGroupMapOutput) ToTableGroupMapOutputWithContext(ctx context.Context) TableGroupMapOutput {
	return o
}

func (o TableGroupMapOutput) MapIndex(k pulumi.StringInput) TableGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TableGroup {
		return vs[0].(map[string]*TableGroup)[vs[1].(string)]
	}).(TableGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableGroupInput)(nil)).Elem(), &TableGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableGroupArrayInput)(nil)).Elem(), TableGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableGroupMapInput)(nil)).Elem(), TableGroupMap{})
	pulumi.RegisterOutputType(TableGroupOutput{})
	pulumi.RegisterOutputType(TableGroupArrayOutput{})
	pulumi.RegisterOutputType(TableGroupMapOutput{})
}
