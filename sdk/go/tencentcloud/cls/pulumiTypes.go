// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConfigExcludePath struct {
	// Type. Valid values: File, Path.
	Type *string `pulumi:"type"`
	// Specific content corresponding to Type.
	Value *string `pulumi:"value"`
}

// ConfigExcludePathInput is an input type that accepts ConfigExcludePathArgs and ConfigExcludePathOutput values.
// You can construct a concrete instance of `ConfigExcludePathInput` via:
//
//	ConfigExcludePathArgs{...}
type ConfigExcludePathInput interface {
	pulumi.Input

	ToConfigExcludePathOutput() ConfigExcludePathOutput
	ToConfigExcludePathOutputWithContext(context.Context) ConfigExcludePathOutput
}

type ConfigExcludePathArgs struct {
	// Type. Valid values: File, Path.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Specific content corresponding to Type.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ConfigExcludePathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExcludePath)(nil)).Elem()
}

func (i ConfigExcludePathArgs) ToConfigExcludePathOutput() ConfigExcludePathOutput {
	return i.ToConfigExcludePathOutputWithContext(context.Background())
}

func (i ConfigExcludePathArgs) ToConfigExcludePathOutputWithContext(ctx context.Context) ConfigExcludePathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExcludePathOutput)
}

// ConfigExcludePathArrayInput is an input type that accepts ConfigExcludePathArray and ConfigExcludePathArrayOutput values.
// You can construct a concrete instance of `ConfigExcludePathArrayInput` via:
//
//	ConfigExcludePathArray{ ConfigExcludePathArgs{...} }
type ConfigExcludePathArrayInput interface {
	pulumi.Input

	ToConfigExcludePathArrayOutput() ConfigExcludePathArrayOutput
	ToConfigExcludePathArrayOutputWithContext(context.Context) ConfigExcludePathArrayOutput
}

type ConfigExcludePathArray []ConfigExcludePathInput

func (ConfigExcludePathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigExcludePath)(nil)).Elem()
}

func (i ConfigExcludePathArray) ToConfigExcludePathArrayOutput() ConfigExcludePathArrayOutput {
	return i.ToConfigExcludePathArrayOutputWithContext(context.Background())
}

func (i ConfigExcludePathArray) ToConfigExcludePathArrayOutputWithContext(ctx context.Context) ConfigExcludePathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExcludePathArrayOutput)
}

type ConfigExcludePathOutput struct{ *pulumi.OutputState }

func (ConfigExcludePathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExcludePath)(nil)).Elem()
}

func (o ConfigExcludePathOutput) ToConfigExcludePathOutput() ConfigExcludePathOutput {
	return o
}

func (o ConfigExcludePathOutput) ToConfigExcludePathOutputWithContext(ctx context.Context) ConfigExcludePathOutput {
	return o
}

// Type. Valid values: File, Path.
func (o ConfigExcludePathOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExcludePath) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Specific content corresponding to Type.
func (o ConfigExcludePathOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExcludePath) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ConfigExcludePathArrayOutput struct{ *pulumi.OutputState }

func (ConfigExcludePathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigExcludePath)(nil)).Elem()
}

func (o ConfigExcludePathArrayOutput) ToConfigExcludePathArrayOutput() ConfigExcludePathArrayOutput {
	return o
}

func (o ConfigExcludePathArrayOutput) ToConfigExcludePathArrayOutputWithContext(ctx context.Context) ConfigExcludePathArrayOutput {
	return o
}

func (o ConfigExcludePathArrayOutput) Index(i pulumi.IntInput) ConfigExcludePathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigExcludePath {
		return vs[0].([]ConfigExcludePath)[vs[1].(int)]
	}).(ConfigExcludePathOutput)
}

type ConfigExtraContainerFile struct {
	// Container name.
	Container string `pulumi:"container"`
	// Pod label to be excluded.
	ExcludeLabels []string `pulumi:"excludeLabels"`
	// Namespaces to be excluded, separated by separators, such as A, B.
	ExcludeNamespace *string `pulumi:"excludeNamespace"`
	// log name.
	FilePattern string `pulumi:"filePattern"`
	// Pod label info.
	IncludeLabels []string `pulumi:"includeLabels"`
	// Log Path.
	LogPath string `pulumi:"logPath"`
	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	Namespace string `pulumi:"namespace"`
	// Workload info.
	Workload *ConfigExtraContainerFileWorkload `pulumi:"workload"`
}

// ConfigExtraContainerFileInput is an input type that accepts ConfigExtraContainerFileArgs and ConfigExtraContainerFileOutput values.
// You can construct a concrete instance of `ConfigExtraContainerFileInput` via:
//
//	ConfigExtraContainerFileArgs{...}
type ConfigExtraContainerFileInput interface {
	pulumi.Input

	ToConfigExtraContainerFileOutput() ConfigExtraContainerFileOutput
	ToConfigExtraContainerFileOutputWithContext(context.Context) ConfigExtraContainerFileOutput
}

type ConfigExtraContainerFileArgs struct {
	// Container name.
	Container pulumi.StringInput `pulumi:"container"`
	// Pod label to be excluded.
	ExcludeLabels pulumi.StringArrayInput `pulumi:"excludeLabels"`
	// Namespaces to be excluded, separated by separators, such as A, B.
	ExcludeNamespace pulumi.StringPtrInput `pulumi:"excludeNamespace"`
	// log name.
	FilePattern pulumi.StringInput `pulumi:"filePattern"`
	// Pod label info.
	IncludeLabels pulumi.StringArrayInput `pulumi:"includeLabels"`
	// Log Path.
	LogPath pulumi.StringInput `pulumi:"logPath"`
	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// Workload info.
	Workload ConfigExtraContainerFileWorkloadPtrInput `pulumi:"workload"`
}

func (ConfigExtraContainerFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtraContainerFile)(nil)).Elem()
}

func (i ConfigExtraContainerFileArgs) ToConfigExtraContainerFileOutput() ConfigExtraContainerFileOutput {
	return i.ToConfigExtraContainerFileOutputWithContext(context.Background())
}

func (i ConfigExtraContainerFileArgs) ToConfigExtraContainerFileOutputWithContext(ctx context.Context) ConfigExtraContainerFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraContainerFileOutput)
}

func (i ConfigExtraContainerFileArgs) ToConfigExtraContainerFilePtrOutput() ConfigExtraContainerFilePtrOutput {
	return i.ToConfigExtraContainerFilePtrOutputWithContext(context.Background())
}

func (i ConfigExtraContainerFileArgs) ToConfigExtraContainerFilePtrOutputWithContext(ctx context.Context) ConfigExtraContainerFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraContainerFileOutput).ToConfigExtraContainerFilePtrOutputWithContext(ctx)
}

// ConfigExtraContainerFilePtrInput is an input type that accepts ConfigExtraContainerFileArgs, ConfigExtraContainerFilePtr and ConfigExtraContainerFilePtrOutput values.
// You can construct a concrete instance of `ConfigExtraContainerFilePtrInput` via:
//
//	        ConfigExtraContainerFileArgs{...}
//
//	or:
//
//	        nil
type ConfigExtraContainerFilePtrInput interface {
	pulumi.Input

	ToConfigExtraContainerFilePtrOutput() ConfigExtraContainerFilePtrOutput
	ToConfigExtraContainerFilePtrOutputWithContext(context.Context) ConfigExtraContainerFilePtrOutput
}

type configExtraContainerFilePtrType ConfigExtraContainerFileArgs

func ConfigExtraContainerFilePtr(v *ConfigExtraContainerFileArgs) ConfigExtraContainerFilePtrInput {
	return (*configExtraContainerFilePtrType)(v)
}

func (*configExtraContainerFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigExtraContainerFile)(nil)).Elem()
}

func (i *configExtraContainerFilePtrType) ToConfigExtraContainerFilePtrOutput() ConfigExtraContainerFilePtrOutput {
	return i.ToConfigExtraContainerFilePtrOutputWithContext(context.Background())
}

func (i *configExtraContainerFilePtrType) ToConfigExtraContainerFilePtrOutputWithContext(ctx context.Context) ConfigExtraContainerFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraContainerFilePtrOutput)
}

type ConfigExtraContainerFileOutput struct{ *pulumi.OutputState }

func (ConfigExtraContainerFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtraContainerFile)(nil)).Elem()
}

func (o ConfigExtraContainerFileOutput) ToConfigExtraContainerFileOutput() ConfigExtraContainerFileOutput {
	return o
}

func (o ConfigExtraContainerFileOutput) ToConfigExtraContainerFileOutputWithContext(ctx context.Context) ConfigExtraContainerFileOutput {
	return o
}

func (o ConfigExtraContainerFileOutput) ToConfigExtraContainerFilePtrOutput() ConfigExtraContainerFilePtrOutput {
	return o.ToConfigExtraContainerFilePtrOutputWithContext(context.Background())
}

func (o ConfigExtraContainerFileOutput) ToConfigExtraContainerFilePtrOutputWithContext(ctx context.Context) ConfigExtraContainerFilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigExtraContainerFile) *ConfigExtraContainerFile {
		return &v
	}).(ConfigExtraContainerFilePtrOutput)
}

// Container name.
func (o ConfigExtraContainerFileOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigExtraContainerFile) string { return v.Container }).(pulumi.StringOutput)
}

// Pod label to be excluded.
func (o ConfigExtraContainerFileOutput) ExcludeLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigExtraContainerFile) []string { return v.ExcludeLabels }).(pulumi.StringArrayOutput)
}

// Namespaces to be excluded, separated by separators, such as A, B.
func (o ConfigExtraContainerFileOutput) ExcludeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraContainerFile) *string { return v.ExcludeNamespace }).(pulumi.StringPtrOutput)
}

// log name.
func (o ConfigExtraContainerFileOutput) FilePattern() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigExtraContainerFile) string { return v.FilePattern }).(pulumi.StringOutput)
}

// Pod label info.
func (o ConfigExtraContainerFileOutput) IncludeLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigExtraContainerFile) []string { return v.IncludeLabels }).(pulumi.StringArrayOutput)
}

// Log Path.
func (o ConfigExtraContainerFileOutput) LogPath() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigExtraContainerFile) string { return v.LogPath }).(pulumi.StringOutput)
}

// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
func (o ConfigExtraContainerFileOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigExtraContainerFile) string { return v.Namespace }).(pulumi.StringOutput)
}

// Workload info.
func (o ConfigExtraContainerFileOutput) Workload() ConfigExtraContainerFileWorkloadPtrOutput {
	return o.ApplyT(func(v ConfigExtraContainerFile) *ConfigExtraContainerFileWorkload { return v.Workload }).(ConfigExtraContainerFileWorkloadPtrOutput)
}

type ConfigExtraContainerFilePtrOutput struct{ *pulumi.OutputState }

func (ConfigExtraContainerFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigExtraContainerFile)(nil)).Elem()
}

func (o ConfigExtraContainerFilePtrOutput) ToConfigExtraContainerFilePtrOutput() ConfigExtraContainerFilePtrOutput {
	return o
}

func (o ConfigExtraContainerFilePtrOutput) ToConfigExtraContainerFilePtrOutputWithContext(ctx context.Context) ConfigExtraContainerFilePtrOutput {
	return o
}

func (o ConfigExtraContainerFilePtrOutput) Elem() ConfigExtraContainerFileOutput {
	return o.ApplyT(func(v *ConfigExtraContainerFile) ConfigExtraContainerFile {
		if v != nil {
			return *v
		}
		var ret ConfigExtraContainerFile
		return ret
	}).(ConfigExtraContainerFileOutput)
}

// Container name.
func (o ConfigExtraContainerFilePtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraContainerFile) *string {
		if v == nil {
			return nil
		}
		return &v.Container
	}).(pulumi.StringPtrOutput)
}

// Pod label to be excluded.
func (o ConfigExtraContainerFilePtrOutput) ExcludeLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigExtraContainerFile) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeLabels
	}).(pulumi.StringArrayOutput)
}

// Namespaces to be excluded, separated by separators, such as A, B.
func (o ConfigExtraContainerFilePtrOutput) ExcludeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraContainerFile) *string {
		if v == nil {
			return nil
		}
		return v.ExcludeNamespace
	}).(pulumi.StringPtrOutput)
}

// log name.
func (o ConfigExtraContainerFilePtrOutput) FilePattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraContainerFile) *string {
		if v == nil {
			return nil
		}
		return &v.FilePattern
	}).(pulumi.StringPtrOutput)
}

// Pod label info.
func (o ConfigExtraContainerFilePtrOutput) IncludeLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigExtraContainerFile) []string {
		if v == nil {
			return nil
		}
		return v.IncludeLabels
	}).(pulumi.StringArrayOutput)
}

// Log Path.
func (o ConfigExtraContainerFilePtrOutput) LogPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraContainerFile) *string {
		if v == nil {
			return nil
		}
		return &v.LogPath
	}).(pulumi.StringPtrOutput)
}

// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
func (o ConfigExtraContainerFilePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraContainerFile) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Workload info.
func (o ConfigExtraContainerFilePtrOutput) Workload() ConfigExtraContainerFileWorkloadPtrOutput {
	return o.ApplyT(func(v *ConfigExtraContainerFile) *ConfigExtraContainerFileWorkload {
		if v == nil {
			return nil
		}
		return v.Workload
	}).(ConfigExtraContainerFileWorkloadPtrOutput)
}

type ConfigExtraContainerFileWorkload struct {
	// container name.
	Container *string `pulumi:"container"`
	// workload type.
	Kind string `pulumi:"kind"`
	// workload name.
	Name string `pulumi:"name"`
	// namespace.
	Namespace *string `pulumi:"namespace"`
}

// ConfigExtraContainerFileWorkloadInput is an input type that accepts ConfigExtraContainerFileWorkloadArgs and ConfigExtraContainerFileWorkloadOutput values.
// You can construct a concrete instance of `ConfigExtraContainerFileWorkloadInput` via:
//
//	ConfigExtraContainerFileWorkloadArgs{...}
type ConfigExtraContainerFileWorkloadInput interface {
	pulumi.Input

	ToConfigExtraContainerFileWorkloadOutput() ConfigExtraContainerFileWorkloadOutput
	ToConfigExtraContainerFileWorkloadOutputWithContext(context.Context) ConfigExtraContainerFileWorkloadOutput
}

type ConfigExtraContainerFileWorkloadArgs struct {
	// container name.
	Container pulumi.StringPtrInput `pulumi:"container"`
	// workload type.
	Kind pulumi.StringInput `pulumi:"kind"`
	// workload name.
	Name pulumi.StringInput `pulumi:"name"`
	// namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ConfigExtraContainerFileWorkloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtraContainerFileWorkload)(nil)).Elem()
}

func (i ConfigExtraContainerFileWorkloadArgs) ToConfigExtraContainerFileWorkloadOutput() ConfigExtraContainerFileWorkloadOutput {
	return i.ToConfigExtraContainerFileWorkloadOutputWithContext(context.Background())
}

func (i ConfigExtraContainerFileWorkloadArgs) ToConfigExtraContainerFileWorkloadOutputWithContext(ctx context.Context) ConfigExtraContainerFileWorkloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraContainerFileWorkloadOutput)
}

func (i ConfigExtraContainerFileWorkloadArgs) ToConfigExtraContainerFileWorkloadPtrOutput() ConfigExtraContainerFileWorkloadPtrOutput {
	return i.ToConfigExtraContainerFileWorkloadPtrOutputWithContext(context.Background())
}

func (i ConfigExtraContainerFileWorkloadArgs) ToConfigExtraContainerFileWorkloadPtrOutputWithContext(ctx context.Context) ConfigExtraContainerFileWorkloadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraContainerFileWorkloadOutput).ToConfigExtraContainerFileWorkloadPtrOutputWithContext(ctx)
}

// ConfigExtraContainerFileWorkloadPtrInput is an input type that accepts ConfigExtraContainerFileWorkloadArgs, ConfigExtraContainerFileWorkloadPtr and ConfigExtraContainerFileWorkloadPtrOutput values.
// You can construct a concrete instance of `ConfigExtraContainerFileWorkloadPtrInput` via:
//
//	        ConfigExtraContainerFileWorkloadArgs{...}
//
//	or:
//
//	        nil
type ConfigExtraContainerFileWorkloadPtrInput interface {
	pulumi.Input

	ToConfigExtraContainerFileWorkloadPtrOutput() ConfigExtraContainerFileWorkloadPtrOutput
	ToConfigExtraContainerFileWorkloadPtrOutputWithContext(context.Context) ConfigExtraContainerFileWorkloadPtrOutput
}

type configExtraContainerFileWorkloadPtrType ConfigExtraContainerFileWorkloadArgs

func ConfigExtraContainerFileWorkloadPtr(v *ConfigExtraContainerFileWorkloadArgs) ConfigExtraContainerFileWorkloadPtrInput {
	return (*configExtraContainerFileWorkloadPtrType)(v)
}

func (*configExtraContainerFileWorkloadPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigExtraContainerFileWorkload)(nil)).Elem()
}

func (i *configExtraContainerFileWorkloadPtrType) ToConfigExtraContainerFileWorkloadPtrOutput() ConfigExtraContainerFileWorkloadPtrOutput {
	return i.ToConfigExtraContainerFileWorkloadPtrOutputWithContext(context.Background())
}

func (i *configExtraContainerFileWorkloadPtrType) ToConfigExtraContainerFileWorkloadPtrOutputWithContext(ctx context.Context) ConfigExtraContainerFileWorkloadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraContainerFileWorkloadPtrOutput)
}

type ConfigExtraContainerFileWorkloadOutput struct{ *pulumi.OutputState }

func (ConfigExtraContainerFileWorkloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtraContainerFileWorkload)(nil)).Elem()
}

func (o ConfigExtraContainerFileWorkloadOutput) ToConfigExtraContainerFileWorkloadOutput() ConfigExtraContainerFileWorkloadOutput {
	return o
}

func (o ConfigExtraContainerFileWorkloadOutput) ToConfigExtraContainerFileWorkloadOutputWithContext(ctx context.Context) ConfigExtraContainerFileWorkloadOutput {
	return o
}

func (o ConfigExtraContainerFileWorkloadOutput) ToConfigExtraContainerFileWorkloadPtrOutput() ConfigExtraContainerFileWorkloadPtrOutput {
	return o.ToConfigExtraContainerFileWorkloadPtrOutputWithContext(context.Background())
}

func (o ConfigExtraContainerFileWorkloadOutput) ToConfigExtraContainerFileWorkloadPtrOutputWithContext(ctx context.Context) ConfigExtraContainerFileWorkloadPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigExtraContainerFileWorkload) *ConfigExtraContainerFileWorkload {
		return &v
	}).(ConfigExtraContainerFileWorkloadPtrOutput)
}

// container name.
func (o ConfigExtraContainerFileWorkloadOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraContainerFileWorkload) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// workload type.
func (o ConfigExtraContainerFileWorkloadOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigExtraContainerFileWorkload) string { return v.Kind }).(pulumi.StringOutput)
}

// workload name.
func (o ConfigExtraContainerFileWorkloadOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigExtraContainerFileWorkload) string { return v.Name }).(pulumi.StringOutput)
}

// namespace.
func (o ConfigExtraContainerFileWorkloadOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraContainerFileWorkload) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ConfigExtraContainerFileWorkloadPtrOutput struct{ *pulumi.OutputState }

func (ConfigExtraContainerFileWorkloadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigExtraContainerFileWorkload)(nil)).Elem()
}

func (o ConfigExtraContainerFileWorkloadPtrOutput) ToConfigExtraContainerFileWorkloadPtrOutput() ConfigExtraContainerFileWorkloadPtrOutput {
	return o
}

func (o ConfigExtraContainerFileWorkloadPtrOutput) ToConfigExtraContainerFileWorkloadPtrOutputWithContext(ctx context.Context) ConfigExtraContainerFileWorkloadPtrOutput {
	return o
}

func (o ConfigExtraContainerFileWorkloadPtrOutput) Elem() ConfigExtraContainerFileWorkloadOutput {
	return o.ApplyT(func(v *ConfigExtraContainerFileWorkload) ConfigExtraContainerFileWorkload {
		if v != nil {
			return *v
		}
		var ret ConfigExtraContainerFileWorkload
		return ret
	}).(ConfigExtraContainerFileWorkloadOutput)
}

// container name.
func (o ConfigExtraContainerFileWorkloadPtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraContainerFileWorkload) *string {
		if v == nil {
			return nil
		}
		return v.Container
	}).(pulumi.StringPtrOutput)
}

// workload type.
func (o ConfigExtraContainerFileWorkloadPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraContainerFileWorkload) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// workload name.
func (o ConfigExtraContainerFileWorkloadPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraContainerFileWorkload) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// namespace.
func (o ConfigExtraContainerFileWorkloadPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraContainerFileWorkload) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ConfigExtraContainerStdout struct {
	// Is all containers.
	AllContainers bool `pulumi:"allContainers"`
	// Pod label to be excluded.
	ExcludeLabels []string `pulumi:"excludeLabels"`
	// Namespaces to be excluded, separated by separators, such as A, B.
	ExcludeNamespace *string `pulumi:"excludeNamespace"`
	// Pod label info.
	IncludeLabels []string `pulumi:"includeLabels"`
	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	Namespace *string `pulumi:"namespace"`
	// Workload info.
	Workloads []ConfigExtraContainerStdoutWorkload `pulumi:"workloads"`
}

// ConfigExtraContainerStdoutInput is an input type that accepts ConfigExtraContainerStdoutArgs and ConfigExtraContainerStdoutOutput values.
// You can construct a concrete instance of `ConfigExtraContainerStdoutInput` via:
//
//	ConfigExtraContainerStdoutArgs{...}
type ConfigExtraContainerStdoutInput interface {
	pulumi.Input

	ToConfigExtraContainerStdoutOutput() ConfigExtraContainerStdoutOutput
	ToConfigExtraContainerStdoutOutputWithContext(context.Context) ConfigExtraContainerStdoutOutput
}

type ConfigExtraContainerStdoutArgs struct {
	// Is all containers.
	AllContainers pulumi.BoolInput `pulumi:"allContainers"`
	// Pod label to be excluded.
	ExcludeLabels pulumi.StringArrayInput `pulumi:"excludeLabels"`
	// Namespaces to be excluded, separated by separators, such as A, B.
	ExcludeNamespace pulumi.StringPtrInput `pulumi:"excludeNamespace"`
	// Pod label info.
	IncludeLabels pulumi.StringArrayInput `pulumi:"includeLabels"`
	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Workload info.
	Workloads ConfigExtraContainerStdoutWorkloadArrayInput `pulumi:"workloads"`
}

func (ConfigExtraContainerStdoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtraContainerStdout)(nil)).Elem()
}

func (i ConfigExtraContainerStdoutArgs) ToConfigExtraContainerStdoutOutput() ConfigExtraContainerStdoutOutput {
	return i.ToConfigExtraContainerStdoutOutputWithContext(context.Background())
}

func (i ConfigExtraContainerStdoutArgs) ToConfigExtraContainerStdoutOutputWithContext(ctx context.Context) ConfigExtraContainerStdoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraContainerStdoutOutput)
}

func (i ConfigExtraContainerStdoutArgs) ToConfigExtraContainerStdoutPtrOutput() ConfigExtraContainerStdoutPtrOutput {
	return i.ToConfigExtraContainerStdoutPtrOutputWithContext(context.Background())
}

func (i ConfigExtraContainerStdoutArgs) ToConfigExtraContainerStdoutPtrOutputWithContext(ctx context.Context) ConfigExtraContainerStdoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraContainerStdoutOutput).ToConfigExtraContainerStdoutPtrOutputWithContext(ctx)
}

// ConfigExtraContainerStdoutPtrInput is an input type that accepts ConfigExtraContainerStdoutArgs, ConfigExtraContainerStdoutPtr and ConfigExtraContainerStdoutPtrOutput values.
// You can construct a concrete instance of `ConfigExtraContainerStdoutPtrInput` via:
//
//	        ConfigExtraContainerStdoutArgs{...}
//
//	or:
//
//	        nil
type ConfigExtraContainerStdoutPtrInput interface {
	pulumi.Input

	ToConfigExtraContainerStdoutPtrOutput() ConfigExtraContainerStdoutPtrOutput
	ToConfigExtraContainerStdoutPtrOutputWithContext(context.Context) ConfigExtraContainerStdoutPtrOutput
}

type configExtraContainerStdoutPtrType ConfigExtraContainerStdoutArgs

func ConfigExtraContainerStdoutPtr(v *ConfigExtraContainerStdoutArgs) ConfigExtraContainerStdoutPtrInput {
	return (*configExtraContainerStdoutPtrType)(v)
}

func (*configExtraContainerStdoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigExtraContainerStdout)(nil)).Elem()
}

func (i *configExtraContainerStdoutPtrType) ToConfigExtraContainerStdoutPtrOutput() ConfigExtraContainerStdoutPtrOutput {
	return i.ToConfigExtraContainerStdoutPtrOutputWithContext(context.Background())
}

func (i *configExtraContainerStdoutPtrType) ToConfigExtraContainerStdoutPtrOutputWithContext(ctx context.Context) ConfigExtraContainerStdoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraContainerStdoutPtrOutput)
}

type ConfigExtraContainerStdoutOutput struct{ *pulumi.OutputState }

func (ConfigExtraContainerStdoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtraContainerStdout)(nil)).Elem()
}

func (o ConfigExtraContainerStdoutOutput) ToConfigExtraContainerStdoutOutput() ConfigExtraContainerStdoutOutput {
	return o
}

func (o ConfigExtraContainerStdoutOutput) ToConfigExtraContainerStdoutOutputWithContext(ctx context.Context) ConfigExtraContainerStdoutOutput {
	return o
}

func (o ConfigExtraContainerStdoutOutput) ToConfigExtraContainerStdoutPtrOutput() ConfigExtraContainerStdoutPtrOutput {
	return o.ToConfigExtraContainerStdoutPtrOutputWithContext(context.Background())
}

func (o ConfigExtraContainerStdoutOutput) ToConfigExtraContainerStdoutPtrOutputWithContext(ctx context.Context) ConfigExtraContainerStdoutPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigExtraContainerStdout) *ConfigExtraContainerStdout {
		return &v
	}).(ConfigExtraContainerStdoutPtrOutput)
}

// Is all containers.
func (o ConfigExtraContainerStdoutOutput) AllContainers() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigExtraContainerStdout) bool { return v.AllContainers }).(pulumi.BoolOutput)
}

// Pod label to be excluded.
func (o ConfigExtraContainerStdoutOutput) ExcludeLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigExtraContainerStdout) []string { return v.ExcludeLabels }).(pulumi.StringArrayOutput)
}

// Namespaces to be excluded, separated by separators, such as A, B.
func (o ConfigExtraContainerStdoutOutput) ExcludeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraContainerStdout) *string { return v.ExcludeNamespace }).(pulumi.StringPtrOutput)
}

// Pod label info.
func (o ConfigExtraContainerStdoutOutput) IncludeLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigExtraContainerStdout) []string { return v.IncludeLabels }).(pulumi.StringArrayOutput)
}

// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
func (o ConfigExtraContainerStdoutOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraContainerStdout) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Workload info.
func (o ConfigExtraContainerStdoutOutput) Workloads() ConfigExtraContainerStdoutWorkloadArrayOutput {
	return o.ApplyT(func(v ConfigExtraContainerStdout) []ConfigExtraContainerStdoutWorkload { return v.Workloads }).(ConfigExtraContainerStdoutWorkloadArrayOutput)
}

type ConfigExtraContainerStdoutPtrOutput struct{ *pulumi.OutputState }

func (ConfigExtraContainerStdoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigExtraContainerStdout)(nil)).Elem()
}

func (o ConfigExtraContainerStdoutPtrOutput) ToConfigExtraContainerStdoutPtrOutput() ConfigExtraContainerStdoutPtrOutput {
	return o
}

func (o ConfigExtraContainerStdoutPtrOutput) ToConfigExtraContainerStdoutPtrOutputWithContext(ctx context.Context) ConfigExtraContainerStdoutPtrOutput {
	return o
}

func (o ConfigExtraContainerStdoutPtrOutput) Elem() ConfigExtraContainerStdoutOutput {
	return o.ApplyT(func(v *ConfigExtraContainerStdout) ConfigExtraContainerStdout {
		if v != nil {
			return *v
		}
		var ret ConfigExtraContainerStdout
		return ret
	}).(ConfigExtraContainerStdoutOutput)
}

// Is all containers.
func (o ConfigExtraContainerStdoutPtrOutput) AllContainers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigExtraContainerStdout) *bool {
		if v == nil {
			return nil
		}
		return &v.AllContainers
	}).(pulumi.BoolPtrOutput)
}

// Pod label to be excluded.
func (o ConfigExtraContainerStdoutPtrOutput) ExcludeLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigExtraContainerStdout) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeLabels
	}).(pulumi.StringArrayOutput)
}

// Namespaces to be excluded, separated by separators, such as A, B.
func (o ConfigExtraContainerStdoutPtrOutput) ExcludeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraContainerStdout) *string {
		if v == nil {
			return nil
		}
		return v.ExcludeNamespace
	}).(pulumi.StringPtrOutput)
}

// Pod label info.
func (o ConfigExtraContainerStdoutPtrOutput) IncludeLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigExtraContainerStdout) []string {
		if v == nil {
			return nil
		}
		return v.IncludeLabels
	}).(pulumi.StringArrayOutput)
}

// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
func (o ConfigExtraContainerStdoutPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraContainerStdout) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Workload info.
func (o ConfigExtraContainerStdoutPtrOutput) Workloads() ConfigExtraContainerStdoutWorkloadArrayOutput {
	return o.ApplyT(func(v *ConfigExtraContainerStdout) []ConfigExtraContainerStdoutWorkload {
		if v == nil {
			return nil
		}
		return v.Workloads
	}).(ConfigExtraContainerStdoutWorkloadArrayOutput)
}

type ConfigExtraContainerStdoutWorkload struct {
	// container name.
	Container *string `pulumi:"container"`
	// workload type.
	Kind string `pulumi:"kind"`
	// workload name.
	Name string `pulumi:"name"`
	// namespace.
	Namespace *string `pulumi:"namespace"`
}

// ConfigExtraContainerStdoutWorkloadInput is an input type that accepts ConfigExtraContainerStdoutWorkloadArgs and ConfigExtraContainerStdoutWorkloadOutput values.
// You can construct a concrete instance of `ConfigExtraContainerStdoutWorkloadInput` via:
//
//	ConfigExtraContainerStdoutWorkloadArgs{...}
type ConfigExtraContainerStdoutWorkloadInput interface {
	pulumi.Input

	ToConfigExtraContainerStdoutWorkloadOutput() ConfigExtraContainerStdoutWorkloadOutput
	ToConfigExtraContainerStdoutWorkloadOutputWithContext(context.Context) ConfigExtraContainerStdoutWorkloadOutput
}

type ConfigExtraContainerStdoutWorkloadArgs struct {
	// container name.
	Container pulumi.StringPtrInput `pulumi:"container"`
	// workload type.
	Kind pulumi.StringInput `pulumi:"kind"`
	// workload name.
	Name pulumi.StringInput `pulumi:"name"`
	// namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ConfigExtraContainerStdoutWorkloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtraContainerStdoutWorkload)(nil)).Elem()
}

func (i ConfigExtraContainerStdoutWorkloadArgs) ToConfigExtraContainerStdoutWorkloadOutput() ConfigExtraContainerStdoutWorkloadOutput {
	return i.ToConfigExtraContainerStdoutWorkloadOutputWithContext(context.Background())
}

func (i ConfigExtraContainerStdoutWorkloadArgs) ToConfigExtraContainerStdoutWorkloadOutputWithContext(ctx context.Context) ConfigExtraContainerStdoutWorkloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraContainerStdoutWorkloadOutput)
}

// ConfigExtraContainerStdoutWorkloadArrayInput is an input type that accepts ConfigExtraContainerStdoutWorkloadArray and ConfigExtraContainerStdoutWorkloadArrayOutput values.
// You can construct a concrete instance of `ConfigExtraContainerStdoutWorkloadArrayInput` via:
//
//	ConfigExtraContainerStdoutWorkloadArray{ ConfigExtraContainerStdoutWorkloadArgs{...} }
type ConfigExtraContainerStdoutWorkloadArrayInput interface {
	pulumi.Input

	ToConfigExtraContainerStdoutWorkloadArrayOutput() ConfigExtraContainerStdoutWorkloadArrayOutput
	ToConfigExtraContainerStdoutWorkloadArrayOutputWithContext(context.Context) ConfigExtraContainerStdoutWorkloadArrayOutput
}

type ConfigExtraContainerStdoutWorkloadArray []ConfigExtraContainerStdoutWorkloadInput

func (ConfigExtraContainerStdoutWorkloadArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigExtraContainerStdoutWorkload)(nil)).Elem()
}

func (i ConfigExtraContainerStdoutWorkloadArray) ToConfigExtraContainerStdoutWorkloadArrayOutput() ConfigExtraContainerStdoutWorkloadArrayOutput {
	return i.ToConfigExtraContainerStdoutWorkloadArrayOutputWithContext(context.Background())
}

func (i ConfigExtraContainerStdoutWorkloadArray) ToConfigExtraContainerStdoutWorkloadArrayOutputWithContext(ctx context.Context) ConfigExtraContainerStdoutWorkloadArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraContainerStdoutWorkloadArrayOutput)
}

type ConfigExtraContainerStdoutWorkloadOutput struct{ *pulumi.OutputState }

func (ConfigExtraContainerStdoutWorkloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtraContainerStdoutWorkload)(nil)).Elem()
}

func (o ConfigExtraContainerStdoutWorkloadOutput) ToConfigExtraContainerStdoutWorkloadOutput() ConfigExtraContainerStdoutWorkloadOutput {
	return o
}

func (o ConfigExtraContainerStdoutWorkloadOutput) ToConfigExtraContainerStdoutWorkloadOutputWithContext(ctx context.Context) ConfigExtraContainerStdoutWorkloadOutput {
	return o
}

// container name.
func (o ConfigExtraContainerStdoutWorkloadOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraContainerStdoutWorkload) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// workload type.
func (o ConfigExtraContainerStdoutWorkloadOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigExtraContainerStdoutWorkload) string { return v.Kind }).(pulumi.StringOutput)
}

// workload name.
func (o ConfigExtraContainerStdoutWorkloadOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigExtraContainerStdoutWorkload) string { return v.Name }).(pulumi.StringOutput)
}

// namespace.
func (o ConfigExtraContainerStdoutWorkloadOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraContainerStdoutWorkload) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ConfigExtraContainerStdoutWorkloadArrayOutput struct{ *pulumi.OutputState }

func (ConfigExtraContainerStdoutWorkloadArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigExtraContainerStdoutWorkload)(nil)).Elem()
}

func (o ConfigExtraContainerStdoutWorkloadArrayOutput) ToConfigExtraContainerStdoutWorkloadArrayOutput() ConfigExtraContainerStdoutWorkloadArrayOutput {
	return o
}

func (o ConfigExtraContainerStdoutWorkloadArrayOutput) ToConfigExtraContainerStdoutWorkloadArrayOutputWithContext(ctx context.Context) ConfigExtraContainerStdoutWorkloadArrayOutput {
	return o
}

func (o ConfigExtraContainerStdoutWorkloadArrayOutput) Index(i pulumi.IntInput) ConfigExtraContainerStdoutWorkloadOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigExtraContainerStdoutWorkload {
		return vs[0].([]ConfigExtraContainerStdoutWorkload)[vs[1].(int)]
	}).(ConfigExtraContainerStdoutWorkloadOutput)
}

type ConfigExtraExcludePath struct {
	// Type. Valid values: File, Path.
	Type *string `pulumi:"type"`
	// Specific content corresponding to Type.
	Value *string `pulumi:"value"`
}

// ConfigExtraExcludePathInput is an input type that accepts ConfigExtraExcludePathArgs and ConfigExtraExcludePathOutput values.
// You can construct a concrete instance of `ConfigExtraExcludePathInput` via:
//
//	ConfigExtraExcludePathArgs{...}
type ConfigExtraExcludePathInput interface {
	pulumi.Input

	ToConfigExtraExcludePathOutput() ConfigExtraExcludePathOutput
	ToConfigExtraExcludePathOutputWithContext(context.Context) ConfigExtraExcludePathOutput
}

type ConfigExtraExcludePathArgs struct {
	// Type. Valid values: File, Path.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Specific content corresponding to Type.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ConfigExtraExcludePathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtraExcludePath)(nil)).Elem()
}

func (i ConfigExtraExcludePathArgs) ToConfigExtraExcludePathOutput() ConfigExtraExcludePathOutput {
	return i.ToConfigExtraExcludePathOutputWithContext(context.Background())
}

func (i ConfigExtraExcludePathArgs) ToConfigExtraExcludePathOutputWithContext(ctx context.Context) ConfigExtraExcludePathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraExcludePathOutput)
}

// ConfigExtraExcludePathArrayInput is an input type that accepts ConfigExtraExcludePathArray and ConfigExtraExcludePathArrayOutput values.
// You can construct a concrete instance of `ConfigExtraExcludePathArrayInput` via:
//
//	ConfigExtraExcludePathArray{ ConfigExtraExcludePathArgs{...} }
type ConfigExtraExcludePathArrayInput interface {
	pulumi.Input

	ToConfigExtraExcludePathArrayOutput() ConfigExtraExcludePathArrayOutput
	ToConfigExtraExcludePathArrayOutputWithContext(context.Context) ConfigExtraExcludePathArrayOutput
}

type ConfigExtraExcludePathArray []ConfigExtraExcludePathInput

func (ConfigExtraExcludePathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigExtraExcludePath)(nil)).Elem()
}

func (i ConfigExtraExcludePathArray) ToConfigExtraExcludePathArrayOutput() ConfigExtraExcludePathArrayOutput {
	return i.ToConfigExtraExcludePathArrayOutputWithContext(context.Background())
}

func (i ConfigExtraExcludePathArray) ToConfigExtraExcludePathArrayOutputWithContext(ctx context.Context) ConfigExtraExcludePathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraExcludePathArrayOutput)
}

type ConfigExtraExcludePathOutput struct{ *pulumi.OutputState }

func (ConfigExtraExcludePathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtraExcludePath)(nil)).Elem()
}

func (o ConfigExtraExcludePathOutput) ToConfigExtraExcludePathOutput() ConfigExtraExcludePathOutput {
	return o
}

func (o ConfigExtraExcludePathOutput) ToConfigExtraExcludePathOutputWithContext(ctx context.Context) ConfigExtraExcludePathOutput {
	return o
}

// Type. Valid values: File, Path.
func (o ConfigExtraExcludePathOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraExcludePath) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Specific content corresponding to Type.
func (o ConfigExtraExcludePathOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraExcludePath) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ConfigExtraExcludePathArrayOutput struct{ *pulumi.OutputState }

func (ConfigExtraExcludePathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigExtraExcludePath)(nil)).Elem()
}

func (o ConfigExtraExcludePathArrayOutput) ToConfigExtraExcludePathArrayOutput() ConfigExtraExcludePathArrayOutput {
	return o
}

func (o ConfigExtraExcludePathArrayOutput) ToConfigExtraExcludePathArrayOutputWithContext(ctx context.Context) ConfigExtraExcludePathArrayOutput {
	return o
}

func (o ConfigExtraExcludePathArrayOutput) Index(i pulumi.IntInput) ConfigExtraExcludePathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigExtraExcludePath {
		return vs[0].([]ConfigExtraExcludePath)[vs[1].(int)]
	}).(ConfigExtraExcludePathOutput)
}

type ConfigExtraExtractRule struct {
	// Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
	Backtracking *int `pulumi:"backtracking"`
	// First-Line matching rule, which is valid only if logType is multilineLog or fullregex_log.
	BeginRegex *string `pulumi:"beginRegex"`
	// Delimiter for delimited log, which is valid only if logType is delimiter_log.
	Delimiter *string `pulumi:"delimiter"`
	// Log keys to be filtered and the corresponding regex.
	FilterKeyRegexes []ConfigExtraExtractRuleFilterKeyRegex `pulumi:"filterKeyRegexes"`
	// Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if logType is delimiter_log. jsonLog logs use the key of JSON itself.
	Keys []string `pulumi:"keys"`
	// Full log matching rule, which is valid only if logType is fullregex_log.
	LogRegex *string `pulumi:"logRegex"`
	// Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
	TimeFormat *string `pulumi:"timeFormat"`
	// Time field key name. timeKey and timeFormat must appear in pair.
	TimeKey *string `pulumi:"timeKey"`
	// Unmatched log key.
	UnMatchLogKey *string `pulumi:"unMatchLogKey"`
	// Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
	UnMatchUpLoadSwitch *bool `pulumi:"unMatchUpLoadSwitch"`
}

// ConfigExtraExtractRuleInput is an input type that accepts ConfigExtraExtractRuleArgs and ConfigExtraExtractRuleOutput values.
// You can construct a concrete instance of `ConfigExtraExtractRuleInput` via:
//
//	ConfigExtraExtractRuleArgs{...}
type ConfigExtraExtractRuleInput interface {
	pulumi.Input

	ToConfigExtraExtractRuleOutput() ConfigExtraExtractRuleOutput
	ToConfigExtraExtractRuleOutputWithContext(context.Context) ConfigExtraExtractRuleOutput
}

type ConfigExtraExtractRuleArgs struct {
	// Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
	Backtracking pulumi.IntPtrInput `pulumi:"backtracking"`
	// First-Line matching rule, which is valid only if logType is multilineLog or fullregex_log.
	BeginRegex pulumi.StringPtrInput `pulumi:"beginRegex"`
	// Delimiter for delimited log, which is valid only if logType is delimiter_log.
	Delimiter pulumi.StringPtrInput `pulumi:"delimiter"`
	// Log keys to be filtered and the corresponding regex.
	FilterKeyRegexes ConfigExtraExtractRuleFilterKeyRegexArrayInput `pulumi:"filterKeyRegexes"`
	// Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if logType is delimiter_log. jsonLog logs use the key of JSON itself.
	Keys pulumi.StringArrayInput `pulumi:"keys"`
	// Full log matching rule, which is valid only if logType is fullregex_log.
	LogRegex pulumi.StringPtrInput `pulumi:"logRegex"`
	// Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
	TimeFormat pulumi.StringPtrInput `pulumi:"timeFormat"`
	// Time field key name. timeKey and timeFormat must appear in pair.
	TimeKey pulumi.StringPtrInput `pulumi:"timeKey"`
	// Unmatched log key.
	UnMatchLogKey pulumi.StringPtrInput `pulumi:"unMatchLogKey"`
	// Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
	UnMatchUpLoadSwitch pulumi.BoolPtrInput `pulumi:"unMatchUpLoadSwitch"`
}

func (ConfigExtraExtractRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtraExtractRule)(nil)).Elem()
}

func (i ConfigExtraExtractRuleArgs) ToConfigExtraExtractRuleOutput() ConfigExtraExtractRuleOutput {
	return i.ToConfigExtraExtractRuleOutputWithContext(context.Background())
}

func (i ConfigExtraExtractRuleArgs) ToConfigExtraExtractRuleOutputWithContext(ctx context.Context) ConfigExtraExtractRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraExtractRuleOutput)
}

func (i ConfigExtraExtractRuleArgs) ToConfigExtraExtractRulePtrOutput() ConfigExtraExtractRulePtrOutput {
	return i.ToConfigExtraExtractRulePtrOutputWithContext(context.Background())
}

func (i ConfigExtraExtractRuleArgs) ToConfigExtraExtractRulePtrOutputWithContext(ctx context.Context) ConfigExtraExtractRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraExtractRuleOutput).ToConfigExtraExtractRulePtrOutputWithContext(ctx)
}

// ConfigExtraExtractRulePtrInput is an input type that accepts ConfigExtraExtractRuleArgs, ConfigExtraExtractRulePtr and ConfigExtraExtractRulePtrOutput values.
// You can construct a concrete instance of `ConfigExtraExtractRulePtrInput` via:
//
//	        ConfigExtraExtractRuleArgs{...}
//
//	or:
//
//	        nil
type ConfigExtraExtractRulePtrInput interface {
	pulumi.Input

	ToConfigExtraExtractRulePtrOutput() ConfigExtraExtractRulePtrOutput
	ToConfigExtraExtractRulePtrOutputWithContext(context.Context) ConfigExtraExtractRulePtrOutput
}

type configExtraExtractRulePtrType ConfigExtraExtractRuleArgs

func ConfigExtraExtractRulePtr(v *ConfigExtraExtractRuleArgs) ConfigExtraExtractRulePtrInput {
	return (*configExtraExtractRulePtrType)(v)
}

func (*configExtraExtractRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigExtraExtractRule)(nil)).Elem()
}

func (i *configExtraExtractRulePtrType) ToConfigExtraExtractRulePtrOutput() ConfigExtraExtractRulePtrOutput {
	return i.ToConfigExtraExtractRulePtrOutputWithContext(context.Background())
}

func (i *configExtraExtractRulePtrType) ToConfigExtraExtractRulePtrOutputWithContext(ctx context.Context) ConfigExtraExtractRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraExtractRulePtrOutput)
}

type ConfigExtraExtractRuleOutput struct{ *pulumi.OutputState }

func (ConfigExtraExtractRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtraExtractRule)(nil)).Elem()
}

func (o ConfigExtraExtractRuleOutput) ToConfigExtraExtractRuleOutput() ConfigExtraExtractRuleOutput {
	return o
}

func (o ConfigExtraExtractRuleOutput) ToConfigExtraExtractRuleOutputWithContext(ctx context.Context) ConfigExtraExtractRuleOutput {
	return o
}

func (o ConfigExtraExtractRuleOutput) ToConfigExtraExtractRulePtrOutput() ConfigExtraExtractRulePtrOutput {
	return o.ToConfigExtraExtractRulePtrOutputWithContext(context.Background())
}

func (o ConfigExtraExtractRuleOutput) ToConfigExtraExtractRulePtrOutputWithContext(ctx context.Context) ConfigExtraExtractRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigExtraExtractRule) *ConfigExtraExtractRule {
		return &v
	}).(ConfigExtraExtractRulePtrOutput)
}

// Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
func (o ConfigExtraExtractRuleOutput) Backtracking() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConfigExtraExtractRule) *int { return v.Backtracking }).(pulumi.IntPtrOutput)
}

// First-Line matching rule, which is valid only if logType is multilineLog or fullregex_log.
func (o ConfigExtraExtractRuleOutput) BeginRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraExtractRule) *string { return v.BeginRegex }).(pulumi.StringPtrOutput)
}

// Delimiter for delimited log, which is valid only if logType is delimiter_log.
func (o ConfigExtraExtractRuleOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraExtractRule) *string { return v.Delimiter }).(pulumi.StringPtrOutput)
}

// Log keys to be filtered and the corresponding regex.
func (o ConfigExtraExtractRuleOutput) FilterKeyRegexes() ConfigExtraExtractRuleFilterKeyRegexArrayOutput {
	return o.ApplyT(func(v ConfigExtraExtractRule) []ConfigExtraExtractRuleFilterKeyRegex { return v.FilterKeyRegexes }).(ConfigExtraExtractRuleFilterKeyRegexArrayOutput)
}

// Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if logType is delimiter_log. jsonLog logs use the key of JSON itself.
func (o ConfigExtraExtractRuleOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigExtraExtractRule) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

// Full log matching rule, which is valid only if logType is fullregex_log.
func (o ConfigExtraExtractRuleOutput) LogRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraExtractRule) *string { return v.LogRegex }).(pulumi.StringPtrOutput)
}

// Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
func (o ConfigExtraExtractRuleOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraExtractRule) *string { return v.TimeFormat }).(pulumi.StringPtrOutput)
}

// Time field key name. timeKey and timeFormat must appear in pair.
func (o ConfigExtraExtractRuleOutput) TimeKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraExtractRule) *string { return v.TimeKey }).(pulumi.StringPtrOutput)
}

// Unmatched log key.
func (o ConfigExtraExtractRuleOutput) UnMatchLogKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraExtractRule) *string { return v.UnMatchLogKey }).(pulumi.StringPtrOutput)
}

// Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
func (o ConfigExtraExtractRuleOutput) UnMatchUpLoadSwitch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigExtraExtractRule) *bool { return v.UnMatchUpLoadSwitch }).(pulumi.BoolPtrOutput)
}

type ConfigExtraExtractRulePtrOutput struct{ *pulumi.OutputState }

func (ConfigExtraExtractRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigExtraExtractRule)(nil)).Elem()
}

func (o ConfigExtraExtractRulePtrOutput) ToConfigExtraExtractRulePtrOutput() ConfigExtraExtractRulePtrOutput {
	return o
}

func (o ConfigExtraExtractRulePtrOutput) ToConfigExtraExtractRulePtrOutputWithContext(ctx context.Context) ConfigExtraExtractRulePtrOutput {
	return o
}

func (o ConfigExtraExtractRulePtrOutput) Elem() ConfigExtraExtractRuleOutput {
	return o.ApplyT(func(v *ConfigExtraExtractRule) ConfigExtraExtractRule {
		if v != nil {
			return *v
		}
		var ret ConfigExtraExtractRule
		return ret
	}).(ConfigExtraExtractRuleOutput)
}

// Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
func (o ConfigExtraExtractRulePtrOutput) Backtracking() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigExtraExtractRule) *int {
		if v == nil {
			return nil
		}
		return v.Backtracking
	}).(pulumi.IntPtrOutput)
}

// First-Line matching rule, which is valid only if logType is multilineLog or fullregex_log.
func (o ConfigExtraExtractRulePtrOutput) BeginRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraExtractRule) *string {
		if v == nil {
			return nil
		}
		return v.BeginRegex
	}).(pulumi.StringPtrOutput)
}

// Delimiter for delimited log, which is valid only if logType is delimiter_log.
func (o ConfigExtraExtractRulePtrOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraExtractRule) *string {
		if v == nil {
			return nil
		}
		return v.Delimiter
	}).(pulumi.StringPtrOutput)
}

// Log keys to be filtered and the corresponding regex.
func (o ConfigExtraExtractRulePtrOutput) FilterKeyRegexes() ConfigExtraExtractRuleFilterKeyRegexArrayOutput {
	return o.ApplyT(func(v *ConfigExtraExtractRule) []ConfigExtraExtractRuleFilterKeyRegex {
		if v == nil {
			return nil
		}
		return v.FilterKeyRegexes
	}).(ConfigExtraExtractRuleFilterKeyRegexArrayOutput)
}

// Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if logType is delimiter_log. jsonLog logs use the key of JSON itself.
func (o ConfigExtraExtractRulePtrOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigExtraExtractRule) []string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringArrayOutput)
}

// Full log matching rule, which is valid only if logType is fullregex_log.
func (o ConfigExtraExtractRulePtrOutput) LogRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraExtractRule) *string {
		if v == nil {
			return nil
		}
		return v.LogRegex
	}).(pulumi.StringPtrOutput)
}

// Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
func (o ConfigExtraExtractRulePtrOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraExtractRule) *string {
		if v == nil {
			return nil
		}
		return v.TimeFormat
	}).(pulumi.StringPtrOutput)
}

// Time field key name. timeKey and timeFormat must appear in pair.
func (o ConfigExtraExtractRulePtrOutput) TimeKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraExtractRule) *string {
		if v == nil {
			return nil
		}
		return v.TimeKey
	}).(pulumi.StringPtrOutput)
}

// Unmatched log key.
func (o ConfigExtraExtractRulePtrOutput) UnMatchLogKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraExtractRule) *string {
		if v == nil {
			return nil
		}
		return v.UnMatchLogKey
	}).(pulumi.StringPtrOutput)
}

// Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
func (o ConfigExtraExtractRulePtrOutput) UnMatchUpLoadSwitch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigExtraExtractRule) *bool {
		if v == nil {
			return nil
		}
		return v.UnMatchUpLoadSwitch
	}).(pulumi.BoolPtrOutput)
}

type ConfigExtraExtractRuleFilterKeyRegex struct {
	// Log key to be filtered.
	Key *string `pulumi:"key"`
	// Filter rule regex corresponding to key.
	Regex *string `pulumi:"regex"`
}

// ConfigExtraExtractRuleFilterKeyRegexInput is an input type that accepts ConfigExtraExtractRuleFilterKeyRegexArgs and ConfigExtraExtractRuleFilterKeyRegexOutput values.
// You can construct a concrete instance of `ConfigExtraExtractRuleFilterKeyRegexInput` via:
//
//	ConfigExtraExtractRuleFilterKeyRegexArgs{...}
type ConfigExtraExtractRuleFilterKeyRegexInput interface {
	pulumi.Input

	ToConfigExtraExtractRuleFilterKeyRegexOutput() ConfigExtraExtractRuleFilterKeyRegexOutput
	ToConfigExtraExtractRuleFilterKeyRegexOutputWithContext(context.Context) ConfigExtraExtractRuleFilterKeyRegexOutput
}

type ConfigExtraExtractRuleFilterKeyRegexArgs struct {
	// Log key to be filtered.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Filter rule regex corresponding to key.
	Regex pulumi.StringPtrInput `pulumi:"regex"`
}

func (ConfigExtraExtractRuleFilterKeyRegexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtraExtractRuleFilterKeyRegex)(nil)).Elem()
}

func (i ConfigExtraExtractRuleFilterKeyRegexArgs) ToConfigExtraExtractRuleFilterKeyRegexOutput() ConfigExtraExtractRuleFilterKeyRegexOutput {
	return i.ToConfigExtraExtractRuleFilterKeyRegexOutputWithContext(context.Background())
}

func (i ConfigExtraExtractRuleFilterKeyRegexArgs) ToConfigExtraExtractRuleFilterKeyRegexOutputWithContext(ctx context.Context) ConfigExtraExtractRuleFilterKeyRegexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraExtractRuleFilterKeyRegexOutput)
}

// ConfigExtraExtractRuleFilterKeyRegexArrayInput is an input type that accepts ConfigExtraExtractRuleFilterKeyRegexArray and ConfigExtraExtractRuleFilterKeyRegexArrayOutput values.
// You can construct a concrete instance of `ConfigExtraExtractRuleFilterKeyRegexArrayInput` via:
//
//	ConfigExtraExtractRuleFilterKeyRegexArray{ ConfigExtraExtractRuleFilterKeyRegexArgs{...} }
type ConfigExtraExtractRuleFilterKeyRegexArrayInput interface {
	pulumi.Input

	ToConfigExtraExtractRuleFilterKeyRegexArrayOutput() ConfigExtraExtractRuleFilterKeyRegexArrayOutput
	ToConfigExtraExtractRuleFilterKeyRegexArrayOutputWithContext(context.Context) ConfigExtraExtractRuleFilterKeyRegexArrayOutput
}

type ConfigExtraExtractRuleFilterKeyRegexArray []ConfigExtraExtractRuleFilterKeyRegexInput

func (ConfigExtraExtractRuleFilterKeyRegexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigExtraExtractRuleFilterKeyRegex)(nil)).Elem()
}

func (i ConfigExtraExtractRuleFilterKeyRegexArray) ToConfigExtraExtractRuleFilterKeyRegexArrayOutput() ConfigExtraExtractRuleFilterKeyRegexArrayOutput {
	return i.ToConfigExtraExtractRuleFilterKeyRegexArrayOutputWithContext(context.Background())
}

func (i ConfigExtraExtractRuleFilterKeyRegexArray) ToConfigExtraExtractRuleFilterKeyRegexArrayOutputWithContext(ctx context.Context) ConfigExtraExtractRuleFilterKeyRegexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraExtractRuleFilterKeyRegexArrayOutput)
}

type ConfigExtraExtractRuleFilterKeyRegexOutput struct{ *pulumi.OutputState }

func (ConfigExtraExtractRuleFilterKeyRegexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtraExtractRuleFilterKeyRegex)(nil)).Elem()
}

func (o ConfigExtraExtractRuleFilterKeyRegexOutput) ToConfigExtraExtractRuleFilterKeyRegexOutput() ConfigExtraExtractRuleFilterKeyRegexOutput {
	return o
}

func (o ConfigExtraExtractRuleFilterKeyRegexOutput) ToConfigExtraExtractRuleFilterKeyRegexOutputWithContext(ctx context.Context) ConfigExtraExtractRuleFilterKeyRegexOutput {
	return o
}

// Log key to be filtered.
func (o ConfigExtraExtractRuleFilterKeyRegexOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraExtractRuleFilterKeyRegex) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Filter rule regex corresponding to key.
func (o ConfigExtraExtractRuleFilterKeyRegexOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtraExtractRuleFilterKeyRegex) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

type ConfigExtraExtractRuleFilterKeyRegexArrayOutput struct{ *pulumi.OutputState }

func (ConfigExtraExtractRuleFilterKeyRegexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigExtraExtractRuleFilterKeyRegex)(nil)).Elem()
}

func (o ConfigExtraExtractRuleFilterKeyRegexArrayOutput) ToConfigExtraExtractRuleFilterKeyRegexArrayOutput() ConfigExtraExtractRuleFilterKeyRegexArrayOutput {
	return o
}

func (o ConfigExtraExtractRuleFilterKeyRegexArrayOutput) ToConfigExtraExtractRuleFilterKeyRegexArrayOutputWithContext(ctx context.Context) ConfigExtraExtractRuleFilterKeyRegexArrayOutput {
	return o
}

func (o ConfigExtraExtractRuleFilterKeyRegexArrayOutput) Index(i pulumi.IntInput) ConfigExtraExtractRuleFilterKeyRegexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigExtraExtractRuleFilterKeyRegex {
		return vs[0].([]ConfigExtraExtractRuleFilterKeyRegex)[vs[1].(int)]
	}).(ConfigExtraExtractRuleFilterKeyRegexOutput)
}

type ConfigExtraHostFile struct {
	// Metadata info.
	CustomLabels []string `pulumi:"customLabels"`
	// Log file name.
	FilePattern string `pulumi:"filePattern"`
	// Log file dir.
	LogPath string `pulumi:"logPath"`
}

// ConfigExtraHostFileInput is an input type that accepts ConfigExtraHostFileArgs and ConfigExtraHostFileOutput values.
// You can construct a concrete instance of `ConfigExtraHostFileInput` via:
//
//	ConfigExtraHostFileArgs{...}
type ConfigExtraHostFileInput interface {
	pulumi.Input

	ToConfigExtraHostFileOutput() ConfigExtraHostFileOutput
	ToConfigExtraHostFileOutputWithContext(context.Context) ConfigExtraHostFileOutput
}

type ConfigExtraHostFileArgs struct {
	// Metadata info.
	CustomLabels pulumi.StringArrayInput `pulumi:"customLabels"`
	// Log file name.
	FilePattern pulumi.StringInput `pulumi:"filePattern"`
	// Log file dir.
	LogPath pulumi.StringInput `pulumi:"logPath"`
}

func (ConfigExtraHostFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtraHostFile)(nil)).Elem()
}

func (i ConfigExtraHostFileArgs) ToConfigExtraHostFileOutput() ConfigExtraHostFileOutput {
	return i.ToConfigExtraHostFileOutputWithContext(context.Background())
}

func (i ConfigExtraHostFileArgs) ToConfigExtraHostFileOutputWithContext(ctx context.Context) ConfigExtraHostFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraHostFileOutput)
}

func (i ConfigExtraHostFileArgs) ToConfigExtraHostFilePtrOutput() ConfigExtraHostFilePtrOutput {
	return i.ToConfigExtraHostFilePtrOutputWithContext(context.Background())
}

func (i ConfigExtraHostFileArgs) ToConfigExtraHostFilePtrOutputWithContext(ctx context.Context) ConfigExtraHostFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraHostFileOutput).ToConfigExtraHostFilePtrOutputWithContext(ctx)
}

// ConfigExtraHostFilePtrInput is an input type that accepts ConfigExtraHostFileArgs, ConfigExtraHostFilePtr and ConfigExtraHostFilePtrOutput values.
// You can construct a concrete instance of `ConfigExtraHostFilePtrInput` via:
//
//	        ConfigExtraHostFileArgs{...}
//
//	or:
//
//	        nil
type ConfigExtraHostFilePtrInput interface {
	pulumi.Input

	ToConfigExtraHostFilePtrOutput() ConfigExtraHostFilePtrOutput
	ToConfigExtraHostFilePtrOutputWithContext(context.Context) ConfigExtraHostFilePtrOutput
}

type configExtraHostFilePtrType ConfigExtraHostFileArgs

func ConfigExtraHostFilePtr(v *ConfigExtraHostFileArgs) ConfigExtraHostFilePtrInput {
	return (*configExtraHostFilePtrType)(v)
}

func (*configExtraHostFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigExtraHostFile)(nil)).Elem()
}

func (i *configExtraHostFilePtrType) ToConfigExtraHostFilePtrOutput() ConfigExtraHostFilePtrOutput {
	return i.ToConfigExtraHostFilePtrOutputWithContext(context.Background())
}

func (i *configExtraHostFilePtrType) ToConfigExtraHostFilePtrOutputWithContext(ctx context.Context) ConfigExtraHostFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtraHostFilePtrOutput)
}

type ConfigExtraHostFileOutput struct{ *pulumi.OutputState }

func (ConfigExtraHostFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtraHostFile)(nil)).Elem()
}

func (o ConfigExtraHostFileOutput) ToConfigExtraHostFileOutput() ConfigExtraHostFileOutput {
	return o
}

func (o ConfigExtraHostFileOutput) ToConfigExtraHostFileOutputWithContext(ctx context.Context) ConfigExtraHostFileOutput {
	return o
}

func (o ConfigExtraHostFileOutput) ToConfigExtraHostFilePtrOutput() ConfigExtraHostFilePtrOutput {
	return o.ToConfigExtraHostFilePtrOutputWithContext(context.Background())
}

func (o ConfigExtraHostFileOutput) ToConfigExtraHostFilePtrOutputWithContext(ctx context.Context) ConfigExtraHostFilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigExtraHostFile) *ConfigExtraHostFile {
		return &v
	}).(ConfigExtraHostFilePtrOutput)
}

// Metadata info.
func (o ConfigExtraHostFileOutput) CustomLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigExtraHostFile) []string { return v.CustomLabels }).(pulumi.StringArrayOutput)
}

// Log file name.
func (o ConfigExtraHostFileOutput) FilePattern() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigExtraHostFile) string { return v.FilePattern }).(pulumi.StringOutput)
}

// Log file dir.
func (o ConfigExtraHostFileOutput) LogPath() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigExtraHostFile) string { return v.LogPath }).(pulumi.StringOutput)
}

type ConfigExtraHostFilePtrOutput struct{ *pulumi.OutputState }

func (ConfigExtraHostFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigExtraHostFile)(nil)).Elem()
}

func (o ConfigExtraHostFilePtrOutput) ToConfigExtraHostFilePtrOutput() ConfigExtraHostFilePtrOutput {
	return o
}

func (o ConfigExtraHostFilePtrOutput) ToConfigExtraHostFilePtrOutputWithContext(ctx context.Context) ConfigExtraHostFilePtrOutput {
	return o
}

func (o ConfigExtraHostFilePtrOutput) Elem() ConfigExtraHostFileOutput {
	return o.ApplyT(func(v *ConfigExtraHostFile) ConfigExtraHostFile {
		if v != nil {
			return *v
		}
		var ret ConfigExtraHostFile
		return ret
	}).(ConfigExtraHostFileOutput)
}

// Metadata info.
func (o ConfigExtraHostFilePtrOutput) CustomLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigExtraHostFile) []string {
		if v == nil {
			return nil
		}
		return v.CustomLabels
	}).(pulumi.StringArrayOutput)
}

// Log file name.
func (o ConfigExtraHostFilePtrOutput) FilePattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraHostFile) *string {
		if v == nil {
			return nil
		}
		return &v.FilePattern
	}).(pulumi.StringPtrOutput)
}

// Log file dir.
func (o ConfigExtraHostFilePtrOutput) LogPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtraHostFile) *string {
		if v == nil {
			return nil
		}
		return &v.LogPath
	}).(pulumi.StringPtrOutput)
}

type ConfigExtractRule struct {
	// Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
	Backtracking *int `pulumi:"backtracking"`
	// First-Line matching rule, which is valid only if logType is multilineLog or fullregex_log.
	BeginRegex *string `pulumi:"beginRegex"`
	// Delimiter for delimited log, which is valid only if logType is delimiter_log.
	Delimiter *string `pulumi:"delimiter"`
	// Log keys to be filtered and the corresponding regex.
	FilterKeyRegexes []ConfigExtractRuleFilterKeyRegex `pulumi:"filterKeyRegexes"`
	// Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if logType is delimiter_log. jsonLog logs use the key of JSON itself.
	Keys []string `pulumi:"keys"`
	// Full log matching rule, which is valid only if logType is fullregex_log.
	LogRegex *string `pulumi:"logRegex"`
	// Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
	TimeFormat *string `pulumi:"timeFormat"`
	// Time field key name. timeKey and timeFormat must appear in pair.
	TimeKey *string `pulumi:"timeKey"`
	// Unmatched log key.
	UnMatchLogKey *string `pulumi:"unMatchLogKey"`
	// Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
	UnMatchUpLoadSwitch *bool `pulumi:"unMatchUpLoadSwitch"`
}

// ConfigExtractRuleInput is an input type that accepts ConfigExtractRuleArgs and ConfigExtractRuleOutput values.
// You can construct a concrete instance of `ConfigExtractRuleInput` via:
//
//	ConfigExtractRuleArgs{...}
type ConfigExtractRuleInput interface {
	pulumi.Input

	ToConfigExtractRuleOutput() ConfigExtractRuleOutput
	ToConfigExtractRuleOutputWithContext(context.Context) ConfigExtractRuleOutput
}

type ConfigExtractRuleArgs struct {
	// Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
	Backtracking pulumi.IntPtrInput `pulumi:"backtracking"`
	// First-Line matching rule, which is valid only if logType is multilineLog or fullregex_log.
	BeginRegex pulumi.StringPtrInput `pulumi:"beginRegex"`
	// Delimiter for delimited log, which is valid only if logType is delimiter_log.
	Delimiter pulumi.StringPtrInput `pulumi:"delimiter"`
	// Log keys to be filtered and the corresponding regex.
	FilterKeyRegexes ConfigExtractRuleFilterKeyRegexArrayInput `pulumi:"filterKeyRegexes"`
	// Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if logType is delimiter_log. jsonLog logs use the key of JSON itself.
	Keys pulumi.StringArrayInput `pulumi:"keys"`
	// Full log matching rule, which is valid only if logType is fullregex_log.
	LogRegex pulumi.StringPtrInput `pulumi:"logRegex"`
	// Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
	TimeFormat pulumi.StringPtrInput `pulumi:"timeFormat"`
	// Time field key name. timeKey and timeFormat must appear in pair.
	TimeKey pulumi.StringPtrInput `pulumi:"timeKey"`
	// Unmatched log key.
	UnMatchLogKey pulumi.StringPtrInput `pulumi:"unMatchLogKey"`
	// Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
	UnMatchUpLoadSwitch pulumi.BoolPtrInput `pulumi:"unMatchUpLoadSwitch"`
}

func (ConfigExtractRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtractRule)(nil)).Elem()
}

func (i ConfigExtractRuleArgs) ToConfigExtractRuleOutput() ConfigExtractRuleOutput {
	return i.ToConfigExtractRuleOutputWithContext(context.Background())
}

func (i ConfigExtractRuleArgs) ToConfigExtractRuleOutputWithContext(ctx context.Context) ConfigExtractRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtractRuleOutput)
}

func (i ConfigExtractRuleArgs) ToConfigExtractRulePtrOutput() ConfigExtractRulePtrOutput {
	return i.ToConfigExtractRulePtrOutputWithContext(context.Background())
}

func (i ConfigExtractRuleArgs) ToConfigExtractRulePtrOutputWithContext(ctx context.Context) ConfigExtractRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtractRuleOutput).ToConfigExtractRulePtrOutputWithContext(ctx)
}

// ConfigExtractRulePtrInput is an input type that accepts ConfigExtractRuleArgs, ConfigExtractRulePtr and ConfigExtractRulePtrOutput values.
// You can construct a concrete instance of `ConfigExtractRulePtrInput` via:
//
//	        ConfigExtractRuleArgs{...}
//
//	or:
//
//	        nil
type ConfigExtractRulePtrInput interface {
	pulumi.Input

	ToConfigExtractRulePtrOutput() ConfigExtractRulePtrOutput
	ToConfigExtractRulePtrOutputWithContext(context.Context) ConfigExtractRulePtrOutput
}

type configExtractRulePtrType ConfigExtractRuleArgs

func ConfigExtractRulePtr(v *ConfigExtractRuleArgs) ConfigExtractRulePtrInput {
	return (*configExtractRulePtrType)(v)
}

func (*configExtractRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigExtractRule)(nil)).Elem()
}

func (i *configExtractRulePtrType) ToConfigExtractRulePtrOutput() ConfigExtractRulePtrOutput {
	return i.ToConfigExtractRulePtrOutputWithContext(context.Background())
}

func (i *configExtractRulePtrType) ToConfigExtractRulePtrOutputWithContext(ctx context.Context) ConfigExtractRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtractRulePtrOutput)
}

type ConfigExtractRuleOutput struct{ *pulumi.OutputState }

func (ConfigExtractRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtractRule)(nil)).Elem()
}

func (o ConfigExtractRuleOutput) ToConfigExtractRuleOutput() ConfigExtractRuleOutput {
	return o
}

func (o ConfigExtractRuleOutput) ToConfigExtractRuleOutputWithContext(ctx context.Context) ConfigExtractRuleOutput {
	return o
}

func (o ConfigExtractRuleOutput) ToConfigExtractRulePtrOutput() ConfigExtractRulePtrOutput {
	return o.ToConfigExtractRulePtrOutputWithContext(context.Background())
}

func (o ConfigExtractRuleOutput) ToConfigExtractRulePtrOutputWithContext(ctx context.Context) ConfigExtractRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigExtractRule) *ConfigExtractRule {
		return &v
	}).(ConfigExtractRulePtrOutput)
}

// Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
func (o ConfigExtractRuleOutput) Backtracking() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConfigExtractRule) *int { return v.Backtracking }).(pulumi.IntPtrOutput)
}

// First-Line matching rule, which is valid only if logType is multilineLog or fullregex_log.
func (o ConfigExtractRuleOutput) BeginRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtractRule) *string { return v.BeginRegex }).(pulumi.StringPtrOutput)
}

// Delimiter for delimited log, which is valid only if logType is delimiter_log.
func (o ConfigExtractRuleOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtractRule) *string { return v.Delimiter }).(pulumi.StringPtrOutput)
}

// Log keys to be filtered and the corresponding regex.
func (o ConfigExtractRuleOutput) FilterKeyRegexes() ConfigExtractRuleFilterKeyRegexArrayOutput {
	return o.ApplyT(func(v ConfigExtractRule) []ConfigExtractRuleFilterKeyRegex { return v.FilterKeyRegexes }).(ConfigExtractRuleFilterKeyRegexArrayOutput)
}

// Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if logType is delimiter_log. jsonLog logs use the key of JSON itself.
func (o ConfigExtractRuleOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigExtractRule) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

// Full log matching rule, which is valid only if logType is fullregex_log.
func (o ConfigExtractRuleOutput) LogRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtractRule) *string { return v.LogRegex }).(pulumi.StringPtrOutput)
}

// Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
func (o ConfigExtractRuleOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtractRule) *string { return v.TimeFormat }).(pulumi.StringPtrOutput)
}

// Time field key name. timeKey and timeFormat must appear in pair.
func (o ConfigExtractRuleOutput) TimeKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtractRule) *string { return v.TimeKey }).(pulumi.StringPtrOutput)
}

// Unmatched log key.
func (o ConfigExtractRuleOutput) UnMatchLogKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtractRule) *string { return v.UnMatchLogKey }).(pulumi.StringPtrOutput)
}

// Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
func (o ConfigExtractRuleOutput) UnMatchUpLoadSwitch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigExtractRule) *bool { return v.UnMatchUpLoadSwitch }).(pulumi.BoolPtrOutput)
}

type ConfigExtractRulePtrOutput struct{ *pulumi.OutputState }

func (ConfigExtractRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigExtractRule)(nil)).Elem()
}

func (o ConfigExtractRulePtrOutput) ToConfigExtractRulePtrOutput() ConfigExtractRulePtrOutput {
	return o
}

func (o ConfigExtractRulePtrOutput) ToConfigExtractRulePtrOutputWithContext(ctx context.Context) ConfigExtractRulePtrOutput {
	return o
}

func (o ConfigExtractRulePtrOutput) Elem() ConfigExtractRuleOutput {
	return o.ApplyT(func(v *ConfigExtractRule) ConfigExtractRule {
		if v != nil {
			return *v
		}
		var ret ConfigExtractRule
		return ret
	}).(ConfigExtractRuleOutput)
}

// Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
func (o ConfigExtractRulePtrOutput) Backtracking() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigExtractRule) *int {
		if v == nil {
			return nil
		}
		return v.Backtracking
	}).(pulumi.IntPtrOutput)
}

// First-Line matching rule, which is valid only if logType is multilineLog or fullregex_log.
func (o ConfigExtractRulePtrOutput) BeginRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtractRule) *string {
		if v == nil {
			return nil
		}
		return v.BeginRegex
	}).(pulumi.StringPtrOutput)
}

// Delimiter for delimited log, which is valid only if logType is delimiter_log.
func (o ConfigExtractRulePtrOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtractRule) *string {
		if v == nil {
			return nil
		}
		return v.Delimiter
	}).(pulumi.StringPtrOutput)
}

// Log keys to be filtered and the corresponding regex.
func (o ConfigExtractRulePtrOutput) FilterKeyRegexes() ConfigExtractRuleFilterKeyRegexArrayOutput {
	return o.ApplyT(func(v *ConfigExtractRule) []ConfigExtractRuleFilterKeyRegex {
		if v == nil {
			return nil
		}
		return v.FilterKeyRegexes
	}).(ConfigExtractRuleFilterKeyRegexArrayOutput)
}

// Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if logType is delimiter_log. jsonLog logs use the key of JSON itself.
func (o ConfigExtractRulePtrOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigExtractRule) []string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringArrayOutput)
}

// Full log matching rule, which is valid only if logType is fullregex_log.
func (o ConfigExtractRulePtrOutput) LogRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtractRule) *string {
		if v == nil {
			return nil
		}
		return v.LogRegex
	}).(pulumi.StringPtrOutput)
}

// Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
func (o ConfigExtractRulePtrOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtractRule) *string {
		if v == nil {
			return nil
		}
		return v.TimeFormat
	}).(pulumi.StringPtrOutput)
}

// Time field key name. timeKey and timeFormat must appear in pair.
func (o ConfigExtractRulePtrOutput) TimeKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtractRule) *string {
		if v == nil {
			return nil
		}
		return v.TimeKey
	}).(pulumi.StringPtrOutput)
}

// Unmatched log key.
func (o ConfigExtractRulePtrOutput) UnMatchLogKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigExtractRule) *string {
		if v == nil {
			return nil
		}
		return v.UnMatchLogKey
	}).(pulumi.StringPtrOutput)
}

// Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
func (o ConfigExtractRulePtrOutput) UnMatchUpLoadSwitch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigExtractRule) *bool {
		if v == nil {
			return nil
		}
		return v.UnMatchUpLoadSwitch
	}).(pulumi.BoolPtrOutput)
}

type ConfigExtractRuleFilterKeyRegex struct {
	// Log key to be filtered.
	Key *string `pulumi:"key"`
	// Filter rule regex corresponding to key.
	Regex *string `pulumi:"regex"`
}

// ConfigExtractRuleFilterKeyRegexInput is an input type that accepts ConfigExtractRuleFilterKeyRegexArgs and ConfigExtractRuleFilterKeyRegexOutput values.
// You can construct a concrete instance of `ConfigExtractRuleFilterKeyRegexInput` via:
//
//	ConfigExtractRuleFilterKeyRegexArgs{...}
type ConfigExtractRuleFilterKeyRegexInput interface {
	pulumi.Input

	ToConfigExtractRuleFilterKeyRegexOutput() ConfigExtractRuleFilterKeyRegexOutput
	ToConfigExtractRuleFilterKeyRegexOutputWithContext(context.Context) ConfigExtractRuleFilterKeyRegexOutput
}

type ConfigExtractRuleFilterKeyRegexArgs struct {
	// Log key to be filtered.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Filter rule regex corresponding to key.
	Regex pulumi.StringPtrInput `pulumi:"regex"`
}

func (ConfigExtractRuleFilterKeyRegexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtractRuleFilterKeyRegex)(nil)).Elem()
}

func (i ConfigExtractRuleFilterKeyRegexArgs) ToConfigExtractRuleFilterKeyRegexOutput() ConfigExtractRuleFilterKeyRegexOutput {
	return i.ToConfigExtractRuleFilterKeyRegexOutputWithContext(context.Background())
}

func (i ConfigExtractRuleFilterKeyRegexArgs) ToConfigExtractRuleFilterKeyRegexOutputWithContext(ctx context.Context) ConfigExtractRuleFilterKeyRegexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtractRuleFilterKeyRegexOutput)
}

// ConfigExtractRuleFilterKeyRegexArrayInput is an input type that accepts ConfigExtractRuleFilterKeyRegexArray and ConfigExtractRuleFilterKeyRegexArrayOutput values.
// You can construct a concrete instance of `ConfigExtractRuleFilterKeyRegexArrayInput` via:
//
//	ConfigExtractRuleFilterKeyRegexArray{ ConfigExtractRuleFilterKeyRegexArgs{...} }
type ConfigExtractRuleFilterKeyRegexArrayInput interface {
	pulumi.Input

	ToConfigExtractRuleFilterKeyRegexArrayOutput() ConfigExtractRuleFilterKeyRegexArrayOutput
	ToConfigExtractRuleFilterKeyRegexArrayOutputWithContext(context.Context) ConfigExtractRuleFilterKeyRegexArrayOutput
}

type ConfigExtractRuleFilterKeyRegexArray []ConfigExtractRuleFilterKeyRegexInput

func (ConfigExtractRuleFilterKeyRegexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigExtractRuleFilterKeyRegex)(nil)).Elem()
}

func (i ConfigExtractRuleFilterKeyRegexArray) ToConfigExtractRuleFilterKeyRegexArrayOutput() ConfigExtractRuleFilterKeyRegexArrayOutput {
	return i.ToConfigExtractRuleFilterKeyRegexArrayOutputWithContext(context.Background())
}

func (i ConfigExtractRuleFilterKeyRegexArray) ToConfigExtractRuleFilterKeyRegexArrayOutputWithContext(ctx context.Context) ConfigExtractRuleFilterKeyRegexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigExtractRuleFilterKeyRegexArrayOutput)
}

type ConfigExtractRuleFilterKeyRegexOutput struct{ *pulumi.OutputState }

func (ConfigExtractRuleFilterKeyRegexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigExtractRuleFilterKeyRegex)(nil)).Elem()
}

func (o ConfigExtractRuleFilterKeyRegexOutput) ToConfigExtractRuleFilterKeyRegexOutput() ConfigExtractRuleFilterKeyRegexOutput {
	return o
}

func (o ConfigExtractRuleFilterKeyRegexOutput) ToConfigExtractRuleFilterKeyRegexOutputWithContext(ctx context.Context) ConfigExtractRuleFilterKeyRegexOutput {
	return o
}

// Log key to be filtered.
func (o ConfigExtractRuleFilterKeyRegexOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtractRuleFilterKeyRegex) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Filter rule regex corresponding to key.
func (o ConfigExtractRuleFilterKeyRegexOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigExtractRuleFilterKeyRegex) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

type ConfigExtractRuleFilterKeyRegexArrayOutput struct{ *pulumi.OutputState }

func (ConfigExtractRuleFilterKeyRegexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigExtractRuleFilterKeyRegex)(nil)).Elem()
}

func (o ConfigExtractRuleFilterKeyRegexArrayOutput) ToConfigExtractRuleFilterKeyRegexArrayOutput() ConfigExtractRuleFilterKeyRegexArrayOutput {
	return o
}

func (o ConfigExtractRuleFilterKeyRegexArrayOutput) ToConfigExtractRuleFilterKeyRegexArrayOutputWithContext(ctx context.Context) ConfigExtractRuleFilterKeyRegexArrayOutput {
	return o
}

func (o ConfigExtractRuleFilterKeyRegexArrayOutput) Index(i pulumi.IntInput) ConfigExtractRuleFilterKeyRegexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigExtractRuleFilterKeyRegex {
		return vs[0].([]ConfigExtractRuleFilterKeyRegex)[vs[1].(int)]
	}).(ConfigExtractRuleFilterKeyRegexOutput)
}

type CosShipperCompress struct {
	// Compression format. Valid values: gzip, lzop, none (no compression).
	Format string `pulumi:"format"`
}

// CosShipperCompressInput is an input type that accepts CosShipperCompressArgs and CosShipperCompressOutput values.
// You can construct a concrete instance of `CosShipperCompressInput` via:
//
//	CosShipperCompressArgs{...}
type CosShipperCompressInput interface {
	pulumi.Input

	ToCosShipperCompressOutput() CosShipperCompressOutput
	ToCosShipperCompressOutputWithContext(context.Context) CosShipperCompressOutput
}

type CosShipperCompressArgs struct {
	// Compression format. Valid values: gzip, lzop, none (no compression).
	Format pulumi.StringInput `pulumi:"format"`
}

func (CosShipperCompressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosShipperCompress)(nil)).Elem()
}

func (i CosShipperCompressArgs) ToCosShipperCompressOutput() CosShipperCompressOutput {
	return i.ToCosShipperCompressOutputWithContext(context.Background())
}

func (i CosShipperCompressArgs) ToCosShipperCompressOutputWithContext(ctx context.Context) CosShipperCompressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosShipperCompressOutput)
}

func (i CosShipperCompressArgs) ToCosShipperCompressPtrOutput() CosShipperCompressPtrOutput {
	return i.ToCosShipperCompressPtrOutputWithContext(context.Background())
}

func (i CosShipperCompressArgs) ToCosShipperCompressPtrOutputWithContext(ctx context.Context) CosShipperCompressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosShipperCompressOutput).ToCosShipperCompressPtrOutputWithContext(ctx)
}

// CosShipperCompressPtrInput is an input type that accepts CosShipperCompressArgs, CosShipperCompressPtr and CosShipperCompressPtrOutput values.
// You can construct a concrete instance of `CosShipperCompressPtrInput` via:
//
//	        CosShipperCompressArgs{...}
//
//	or:
//
//	        nil
type CosShipperCompressPtrInput interface {
	pulumi.Input

	ToCosShipperCompressPtrOutput() CosShipperCompressPtrOutput
	ToCosShipperCompressPtrOutputWithContext(context.Context) CosShipperCompressPtrOutput
}

type cosShipperCompressPtrType CosShipperCompressArgs

func CosShipperCompressPtr(v *CosShipperCompressArgs) CosShipperCompressPtrInput {
	return (*cosShipperCompressPtrType)(v)
}

func (*cosShipperCompressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CosShipperCompress)(nil)).Elem()
}

func (i *cosShipperCompressPtrType) ToCosShipperCompressPtrOutput() CosShipperCompressPtrOutput {
	return i.ToCosShipperCompressPtrOutputWithContext(context.Background())
}

func (i *cosShipperCompressPtrType) ToCosShipperCompressPtrOutputWithContext(ctx context.Context) CosShipperCompressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosShipperCompressPtrOutput)
}

type CosShipperCompressOutput struct{ *pulumi.OutputState }

func (CosShipperCompressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosShipperCompress)(nil)).Elem()
}

func (o CosShipperCompressOutput) ToCosShipperCompressOutput() CosShipperCompressOutput {
	return o
}

func (o CosShipperCompressOutput) ToCosShipperCompressOutputWithContext(ctx context.Context) CosShipperCompressOutput {
	return o
}

func (o CosShipperCompressOutput) ToCosShipperCompressPtrOutput() CosShipperCompressPtrOutput {
	return o.ToCosShipperCompressPtrOutputWithContext(context.Background())
}

func (o CosShipperCompressOutput) ToCosShipperCompressPtrOutputWithContext(ctx context.Context) CosShipperCompressPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CosShipperCompress) *CosShipperCompress {
		return &v
	}).(CosShipperCompressPtrOutput)
}

// Compression format. Valid values: gzip, lzop, none (no compression).
func (o CosShipperCompressOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v CosShipperCompress) string { return v.Format }).(pulumi.StringOutput)
}

type CosShipperCompressPtrOutput struct{ *pulumi.OutputState }

func (CosShipperCompressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CosShipperCompress)(nil)).Elem()
}

func (o CosShipperCompressPtrOutput) ToCosShipperCompressPtrOutput() CosShipperCompressPtrOutput {
	return o
}

func (o CosShipperCompressPtrOutput) ToCosShipperCompressPtrOutputWithContext(ctx context.Context) CosShipperCompressPtrOutput {
	return o
}

func (o CosShipperCompressPtrOutput) Elem() CosShipperCompressOutput {
	return o.ApplyT(func(v *CosShipperCompress) CosShipperCompress {
		if v != nil {
			return *v
		}
		var ret CosShipperCompress
		return ret
	}).(CosShipperCompressOutput)
}

// Compression format. Valid values: gzip, lzop, none (no compression).
func (o CosShipperCompressPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CosShipperCompress) *string {
		if v == nil {
			return nil
		}
		return &v.Format
	}).(pulumi.StringPtrOutput)
}

type CosShipperContent struct {
	// CSV format content description.Note: this field may return null, indicating that no valid values can be obtained.
	Csv *CosShipperContentCsv `pulumi:"csv"`
	// Content format. Valid values: json, csv.
	Format string `pulumi:"format"`
	// JSON format content description.Note: this field may return null, indicating that no valid values can be obtained.
	Json *CosShipperContentJson `pulumi:"json"`
}

// CosShipperContentInput is an input type that accepts CosShipperContentArgs and CosShipperContentOutput values.
// You can construct a concrete instance of `CosShipperContentInput` via:
//
//	CosShipperContentArgs{...}
type CosShipperContentInput interface {
	pulumi.Input

	ToCosShipperContentOutput() CosShipperContentOutput
	ToCosShipperContentOutputWithContext(context.Context) CosShipperContentOutput
}

type CosShipperContentArgs struct {
	// CSV format content description.Note: this field may return null, indicating that no valid values can be obtained.
	Csv CosShipperContentCsvPtrInput `pulumi:"csv"`
	// Content format. Valid values: json, csv.
	Format pulumi.StringInput `pulumi:"format"`
	// JSON format content description.Note: this field may return null, indicating that no valid values can be obtained.
	Json CosShipperContentJsonPtrInput `pulumi:"json"`
}

func (CosShipperContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosShipperContent)(nil)).Elem()
}

func (i CosShipperContentArgs) ToCosShipperContentOutput() CosShipperContentOutput {
	return i.ToCosShipperContentOutputWithContext(context.Background())
}

func (i CosShipperContentArgs) ToCosShipperContentOutputWithContext(ctx context.Context) CosShipperContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosShipperContentOutput)
}

func (i CosShipperContentArgs) ToCosShipperContentPtrOutput() CosShipperContentPtrOutput {
	return i.ToCosShipperContentPtrOutputWithContext(context.Background())
}

func (i CosShipperContentArgs) ToCosShipperContentPtrOutputWithContext(ctx context.Context) CosShipperContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosShipperContentOutput).ToCosShipperContentPtrOutputWithContext(ctx)
}

// CosShipperContentPtrInput is an input type that accepts CosShipperContentArgs, CosShipperContentPtr and CosShipperContentPtrOutput values.
// You can construct a concrete instance of `CosShipperContentPtrInput` via:
//
//	        CosShipperContentArgs{...}
//
//	or:
//
//	        nil
type CosShipperContentPtrInput interface {
	pulumi.Input

	ToCosShipperContentPtrOutput() CosShipperContentPtrOutput
	ToCosShipperContentPtrOutputWithContext(context.Context) CosShipperContentPtrOutput
}

type cosShipperContentPtrType CosShipperContentArgs

func CosShipperContentPtr(v *CosShipperContentArgs) CosShipperContentPtrInput {
	return (*cosShipperContentPtrType)(v)
}

func (*cosShipperContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CosShipperContent)(nil)).Elem()
}

func (i *cosShipperContentPtrType) ToCosShipperContentPtrOutput() CosShipperContentPtrOutput {
	return i.ToCosShipperContentPtrOutputWithContext(context.Background())
}

func (i *cosShipperContentPtrType) ToCosShipperContentPtrOutputWithContext(ctx context.Context) CosShipperContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosShipperContentPtrOutput)
}

type CosShipperContentOutput struct{ *pulumi.OutputState }

func (CosShipperContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosShipperContent)(nil)).Elem()
}

func (o CosShipperContentOutput) ToCosShipperContentOutput() CosShipperContentOutput {
	return o
}

func (o CosShipperContentOutput) ToCosShipperContentOutputWithContext(ctx context.Context) CosShipperContentOutput {
	return o
}

func (o CosShipperContentOutput) ToCosShipperContentPtrOutput() CosShipperContentPtrOutput {
	return o.ToCosShipperContentPtrOutputWithContext(context.Background())
}

func (o CosShipperContentOutput) ToCosShipperContentPtrOutputWithContext(ctx context.Context) CosShipperContentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CosShipperContent) *CosShipperContent {
		return &v
	}).(CosShipperContentPtrOutput)
}

// CSV format content description.Note: this field may return null, indicating that no valid values can be obtained.
func (o CosShipperContentOutput) Csv() CosShipperContentCsvPtrOutput {
	return o.ApplyT(func(v CosShipperContent) *CosShipperContentCsv { return v.Csv }).(CosShipperContentCsvPtrOutput)
}

// Content format. Valid values: json, csv.
func (o CosShipperContentOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v CosShipperContent) string { return v.Format }).(pulumi.StringOutput)
}

// JSON format content description.Note: this field may return null, indicating that no valid values can be obtained.
func (o CosShipperContentOutput) Json() CosShipperContentJsonPtrOutput {
	return o.ApplyT(func(v CosShipperContent) *CosShipperContentJson { return v.Json }).(CosShipperContentJsonPtrOutput)
}

type CosShipperContentPtrOutput struct{ *pulumi.OutputState }

func (CosShipperContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CosShipperContent)(nil)).Elem()
}

func (o CosShipperContentPtrOutput) ToCosShipperContentPtrOutput() CosShipperContentPtrOutput {
	return o
}

func (o CosShipperContentPtrOutput) ToCosShipperContentPtrOutputWithContext(ctx context.Context) CosShipperContentPtrOutput {
	return o
}

func (o CosShipperContentPtrOutput) Elem() CosShipperContentOutput {
	return o.ApplyT(func(v *CosShipperContent) CosShipperContent {
		if v != nil {
			return *v
		}
		var ret CosShipperContent
		return ret
	}).(CosShipperContentOutput)
}

// CSV format content description.Note: this field may return null, indicating that no valid values can be obtained.
func (o CosShipperContentPtrOutput) Csv() CosShipperContentCsvPtrOutput {
	return o.ApplyT(func(v *CosShipperContent) *CosShipperContentCsv {
		if v == nil {
			return nil
		}
		return v.Csv
	}).(CosShipperContentCsvPtrOutput)
}

// Content format. Valid values: json, csv.
func (o CosShipperContentPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CosShipperContent) *string {
		if v == nil {
			return nil
		}
		return &v.Format
	}).(pulumi.StringPtrOutput)
}

// JSON format content description.Note: this field may return null, indicating that no valid values can be obtained.
func (o CosShipperContentPtrOutput) Json() CosShipperContentJsonPtrOutput {
	return o.ApplyT(func(v *CosShipperContent) *CosShipperContentJson {
		if v == nil {
			return nil
		}
		return v.Json
	}).(CosShipperContentJsonPtrOutput)
}

type CosShipperContentCsv struct {
	// Field delimiter.
	Delimiter string `pulumi:"delimiter"`
	// Field delimiter.
	EscapeChar string `pulumi:"escapeChar"`
	// Names of keys.Note: this field may return null, indicating that no valid values can be obtained.
	Keys []string `pulumi:"keys"`
	// Content used to populate non-existing fields.
	NonExistingField string `pulumi:"nonExistingField"`
	// Whether to print key on the first row of the CSV file.
	PrintKey bool `pulumi:"printKey"`
}

// CosShipperContentCsvInput is an input type that accepts CosShipperContentCsvArgs and CosShipperContentCsvOutput values.
// You can construct a concrete instance of `CosShipperContentCsvInput` via:
//
//	CosShipperContentCsvArgs{...}
type CosShipperContentCsvInput interface {
	pulumi.Input

	ToCosShipperContentCsvOutput() CosShipperContentCsvOutput
	ToCosShipperContentCsvOutputWithContext(context.Context) CosShipperContentCsvOutput
}

type CosShipperContentCsvArgs struct {
	// Field delimiter.
	Delimiter pulumi.StringInput `pulumi:"delimiter"`
	// Field delimiter.
	EscapeChar pulumi.StringInput `pulumi:"escapeChar"`
	// Names of keys.Note: this field may return null, indicating that no valid values can be obtained.
	Keys pulumi.StringArrayInput `pulumi:"keys"`
	// Content used to populate non-existing fields.
	NonExistingField pulumi.StringInput `pulumi:"nonExistingField"`
	// Whether to print key on the first row of the CSV file.
	PrintKey pulumi.BoolInput `pulumi:"printKey"`
}

func (CosShipperContentCsvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosShipperContentCsv)(nil)).Elem()
}

func (i CosShipperContentCsvArgs) ToCosShipperContentCsvOutput() CosShipperContentCsvOutput {
	return i.ToCosShipperContentCsvOutputWithContext(context.Background())
}

func (i CosShipperContentCsvArgs) ToCosShipperContentCsvOutputWithContext(ctx context.Context) CosShipperContentCsvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosShipperContentCsvOutput)
}

func (i CosShipperContentCsvArgs) ToCosShipperContentCsvPtrOutput() CosShipperContentCsvPtrOutput {
	return i.ToCosShipperContentCsvPtrOutputWithContext(context.Background())
}

func (i CosShipperContentCsvArgs) ToCosShipperContentCsvPtrOutputWithContext(ctx context.Context) CosShipperContentCsvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosShipperContentCsvOutput).ToCosShipperContentCsvPtrOutputWithContext(ctx)
}

// CosShipperContentCsvPtrInput is an input type that accepts CosShipperContentCsvArgs, CosShipperContentCsvPtr and CosShipperContentCsvPtrOutput values.
// You can construct a concrete instance of `CosShipperContentCsvPtrInput` via:
//
//	        CosShipperContentCsvArgs{...}
//
//	or:
//
//	        nil
type CosShipperContentCsvPtrInput interface {
	pulumi.Input

	ToCosShipperContentCsvPtrOutput() CosShipperContentCsvPtrOutput
	ToCosShipperContentCsvPtrOutputWithContext(context.Context) CosShipperContentCsvPtrOutput
}

type cosShipperContentCsvPtrType CosShipperContentCsvArgs

func CosShipperContentCsvPtr(v *CosShipperContentCsvArgs) CosShipperContentCsvPtrInput {
	return (*cosShipperContentCsvPtrType)(v)
}

func (*cosShipperContentCsvPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CosShipperContentCsv)(nil)).Elem()
}

func (i *cosShipperContentCsvPtrType) ToCosShipperContentCsvPtrOutput() CosShipperContentCsvPtrOutput {
	return i.ToCosShipperContentCsvPtrOutputWithContext(context.Background())
}

func (i *cosShipperContentCsvPtrType) ToCosShipperContentCsvPtrOutputWithContext(ctx context.Context) CosShipperContentCsvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosShipperContentCsvPtrOutput)
}

type CosShipperContentCsvOutput struct{ *pulumi.OutputState }

func (CosShipperContentCsvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosShipperContentCsv)(nil)).Elem()
}

func (o CosShipperContentCsvOutput) ToCosShipperContentCsvOutput() CosShipperContentCsvOutput {
	return o
}

func (o CosShipperContentCsvOutput) ToCosShipperContentCsvOutputWithContext(ctx context.Context) CosShipperContentCsvOutput {
	return o
}

func (o CosShipperContentCsvOutput) ToCosShipperContentCsvPtrOutput() CosShipperContentCsvPtrOutput {
	return o.ToCosShipperContentCsvPtrOutputWithContext(context.Background())
}

func (o CosShipperContentCsvOutput) ToCosShipperContentCsvPtrOutputWithContext(ctx context.Context) CosShipperContentCsvPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CosShipperContentCsv) *CosShipperContentCsv {
		return &v
	}).(CosShipperContentCsvPtrOutput)
}

// Field delimiter.
func (o CosShipperContentCsvOutput) Delimiter() pulumi.StringOutput {
	return o.ApplyT(func(v CosShipperContentCsv) string { return v.Delimiter }).(pulumi.StringOutput)
}

// Field delimiter.
func (o CosShipperContentCsvOutput) EscapeChar() pulumi.StringOutput {
	return o.ApplyT(func(v CosShipperContentCsv) string { return v.EscapeChar }).(pulumi.StringOutput)
}

// Names of keys.Note: this field may return null, indicating that no valid values can be obtained.
func (o CosShipperContentCsvOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CosShipperContentCsv) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

// Content used to populate non-existing fields.
func (o CosShipperContentCsvOutput) NonExistingField() pulumi.StringOutput {
	return o.ApplyT(func(v CosShipperContentCsv) string { return v.NonExistingField }).(pulumi.StringOutput)
}

// Whether to print key on the first row of the CSV file.
func (o CosShipperContentCsvOutput) PrintKey() pulumi.BoolOutput {
	return o.ApplyT(func(v CosShipperContentCsv) bool { return v.PrintKey }).(pulumi.BoolOutput)
}

type CosShipperContentCsvPtrOutput struct{ *pulumi.OutputState }

func (CosShipperContentCsvPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CosShipperContentCsv)(nil)).Elem()
}

func (o CosShipperContentCsvPtrOutput) ToCosShipperContentCsvPtrOutput() CosShipperContentCsvPtrOutput {
	return o
}

func (o CosShipperContentCsvPtrOutput) ToCosShipperContentCsvPtrOutputWithContext(ctx context.Context) CosShipperContentCsvPtrOutput {
	return o
}

func (o CosShipperContentCsvPtrOutput) Elem() CosShipperContentCsvOutput {
	return o.ApplyT(func(v *CosShipperContentCsv) CosShipperContentCsv {
		if v != nil {
			return *v
		}
		var ret CosShipperContentCsv
		return ret
	}).(CosShipperContentCsvOutput)
}

// Field delimiter.
func (o CosShipperContentCsvPtrOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CosShipperContentCsv) *string {
		if v == nil {
			return nil
		}
		return &v.Delimiter
	}).(pulumi.StringPtrOutput)
}

// Field delimiter.
func (o CosShipperContentCsvPtrOutput) EscapeChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CosShipperContentCsv) *string {
		if v == nil {
			return nil
		}
		return &v.EscapeChar
	}).(pulumi.StringPtrOutput)
}

// Names of keys.Note: this field may return null, indicating that no valid values can be obtained.
func (o CosShipperContentCsvPtrOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CosShipperContentCsv) []string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringArrayOutput)
}

// Content used to populate non-existing fields.
func (o CosShipperContentCsvPtrOutput) NonExistingField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CosShipperContentCsv) *string {
		if v == nil {
			return nil
		}
		return &v.NonExistingField
	}).(pulumi.StringPtrOutput)
}

// Whether to print key on the first row of the CSV file.
func (o CosShipperContentCsvPtrOutput) PrintKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CosShipperContentCsv) *bool {
		if v == nil {
			return nil
		}
		return &v.PrintKey
	}).(pulumi.BoolPtrOutput)
}

type CosShipperContentJson struct {
	// Enablement flag.
	EnableTag bool `pulumi:"enableTag"`
	// Metadata information list
	// Note: this field may return null, indicating that no valid values can be obtained..
	MetaFields []string `pulumi:"metaFields"`
}

// CosShipperContentJsonInput is an input type that accepts CosShipperContentJsonArgs and CosShipperContentJsonOutput values.
// You can construct a concrete instance of `CosShipperContentJsonInput` via:
//
//	CosShipperContentJsonArgs{...}
type CosShipperContentJsonInput interface {
	pulumi.Input

	ToCosShipperContentJsonOutput() CosShipperContentJsonOutput
	ToCosShipperContentJsonOutputWithContext(context.Context) CosShipperContentJsonOutput
}

type CosShipperContentJsonArgs struct {
	// Enablement flag.
	EnableTag pulumi.BoolInput `pulumi:"enableTag"`
	// Metadata information list
	// Note: this field may return null, indicating that no valid values can be obtained..
	MetaFields pulumi.StringArrayInput `pulumi:"metaFields"`
}

func (CosShipperContentJsonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosShipperContentJson)(nil)).Elem()
}

func (i CosShipperContentJsonArgs) ToCosShipperContentJsonOutput() CosShipperContentJsonOutput {
	return i.ToCosShipperContentJsonOutputWithContext(context.Background())
}

func (i CosShipperContentJsonArgs) ToCosShipperContentJsonOutputWithContext(ctx context.Context) CosShipperContentJsonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosShipperContentJsonOutput)
}

func (i CosShipperContentJsonArgs) ToCosShipperContentJsonPtrOutput() CosShipperContentJsonPtrOutput {
	return i.ToCosShipperContentJsonPtrOutputWithContext(context.Background())
}

func (i CosShipperContentJsonArgs) ToCosShipperContentJsonPtrOutputWithContext(ctx context.Context) CosShipperContentJsonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosShipperContentJsonOutput).ToCosShipperContentJsonPtrOutputWithContext(ctx)
}

// CosShipperContentJsonPtrInput is an input type that accepts CosShipperContentJsonArgs, CosShipperContentJsonPtr and CosShipperContentJsonPtrOutput values.
// You can construct a concrete instance of `CosShipperContentJsonPtrInput` via:
//
//	        CosShipperContentJsonArgs{...}
//
//	or:
//
//	        nil
type CosShipperContentJsonPtrInput interface {
	pulumi.Input

	ToCosShipperContentJsonPtrOutput() CosShipperContentJsonPtrOutput
	ToCosShipperContentJsonPtrOutputWithContext(context.Context) CosShipperContentJsonPtrOutput
}

type cosShipperContentJsonPtrType CosShipperContentJsonArgs

func CosShipperContentJsonPtr(v *CosShipperContentJsonArgs) CosShipperContentJsonPtrInput {
	return (*cosShipperContentJsonPtrType)(v)
}

func (*cosShipperContentJsonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CosShipperContentJson)(nil)).Elem()
}

func (i *cosShipperContentJsonPtrType) ToCosShipperContentJsonPtrOutput() CosShipperContentJsonPtrOutput {
	return i.ToCosShipperContentJsonPtrOutputWithContext(context.Background())
}

func (i *cosShipperContentJsonPtrType) ToCosShipperContentJsonPtrOutputWithContext(ctx context.Context) CosShipperContentJsonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosShipperContentJsonPtrOutput)
}

type CosShipperContentJsonOutput struct{ *pulumi.OutputState }

func (CosShipperContentJsonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosShipperContentJson)(nil)).Elem()
}

func (o CosShipperContentJsonOutput) ToCosShipperContentJsonOutput() CosShipperContentJsonOutput {
	return o
}

func (o CosShipperContentJsonOutput) ToCosShipperContentJsonOutputWithContext(ctx context.Context) CosShipperContentJsonOutput {
	return o
}

func (o CosShipperContentJsonOutput) ToCosShipperContentJsonPtrOutput() CosShipperContentJsonPtrOutput {
	return o.ToCosShipperContentJsonPtrOutputWithContext(context.Background())
}

func (o CosShipperContentJsonOutput) ToCosShipperContentJsonPtrOutputWithContext(ctx context.Context) CosShipperContentJsonPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CosShipperContentJson) *CosShipperContentJson {
		return &v
	}).(CosShipperContentJsonPtrOutput)
}

// Enablement flag.
func (o CosShipperContentJsonOutput) EnableTag() pulumi.BoolOutput {
	return o.ApplyT(func(v CosShipperContentJson) bool { return v.EnableTag }).(pulumi.BoolOutput)
}

// Metadata information list
// Note: this field may return null, indicating that no valid values can be obtained..
func (o CosShipperContentJsonOutput) MetaFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CosShipperContentJson) []string { return v.MetaFields }).(pulumi.StringArrayOutput)
}

type CosShipperContentJsonPtrOutput struct{ *pulumi.OutputState }

func (CosShipperContentJsonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CosShipperContentJson)(nil)).Elem()
}

func (o CosShipperContentJsonPtrOutput) ToCosShipperContentJsonPtrOutput() CosShipperContentJsonPtrOutput {
	return o
}

func (o CosShipperContentJsonPtrOutput) ToCosShipperContentJsonPtrOutputWithContext(ctx context.Context) CosShipperContentJsonPtrOutput {
	return o
}

func (o CosShipperContentJsonPtrOutput) Elem() CosShipperContentJsonOutput {
	return o.ApplyT(func(v *CosShipperContentJson) CosShipperContentJson {
		if v != nil {
			return *v
		}
		var ret CosShipperContentJson
		return ret
	}).(CosShipperContentJsonOutput)
}

// Enablement flag.
func (o CosShipperContentJsonPtrOutput) EnableTag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CosShipperContentJson) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableTag
	}).(pulumi.BoolPtrOutput)
}

// Metadata information list
// Note: this field may return null, indicating that no valid values can be obtained..
func (o CosShipperContentJsonPtrOutput) MetaFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CosShipperContentJson) []string {
		if v == nil {
			return nil
		}
		return v.MetaFields
	}).(pulumi.StringArrayOutput)
}

type CosShipperFilterRule struct {
	// Filter rule key.
	Key string `pulumi:"key"`
	// Filter rule.
	Regex string `pulumi:"regex"`
	// Filter rule value.
	Value string `pulumi:"value"`
}

// CosShipperFilterRuleInput is an input type that accepts CosShipperFilterRuleArgs and CosShipperFilterRuleOutput values.
// You can construct a concrete instance of `CosShipperFilterRuleInput` via:
//
//	CosShipperFilterRuleArgs{...}
type CosShipperFilterRuleInput interface {
	pulumi.Input

	ToCosShipperFilterRuleOutput() CosShipperFilterRuleOutput
	ToCosShipperFilterRuleOutputWithContext(context.Context) CosShipperFilterRuleOutput
}

type CosShipperFilterRuleArgs struct {
	// Filter rule key.
	Key pulumi.StringInput `pulumi:"key"`
	// Filter rule.
	Regex pulumi.StringInput `pulumi:"regex"`
	// Filter rule value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (CosShipperFilterRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosShipperFilterRule)(nil)).Elem()
}

func (i CosShipperFilterRuleArgs) ToCosShipperFilterRuleOutput() CosShipperFilterRuleOutput {
	return i.ToCosShipperFilterRuleOutputWithContext(context.Background())
}

func (i CosShipperFilterRuleArgs) ToCosShipperFilterRuleOutputWithContext(ctx context.Context) CosShipperFilterRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosShipperFilterRuleOutput)
}

// CosShipperFilterRuleArrayInput is an input type that accepts CosShipperFilterRuleArray and CosShipperFilterRuleArrayOutput values.
// You can construct a concrete instance of `CosShipperFilterRuleArrayInput` via:
//
//	CosShipperFilterRuleArray{ CosShipperFilterRuleArgs{...} }
type CosShipperFilterRuleArrayInput interface {
	pulumi.Input

	ToCosShipperFilterRuleArrayOutput() CosShipperFilterRuleArrayOutput
	ToCosShipperFilterRuleArrayOutputWithContext(context.Context) CosShipperFilterRuleArrayOutput
}

type CosShipperFilterRuleArray []CosShipperFilterRuleInput

func (CosShipperFilterRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CosShipperFilterRule)(nil)).Elem()
}

func (i CosShipperFilterRuleArray) ToCosShipperFilterRuleArrayOutput() CosShipperFilterRuleArrayOutput {
	return i.ToCosShipperFilterRuleArrayOutputWithContext(context.Background())
}

func (i CosShipperFilterRuleArray) ToCosShipperFilterRuleArrayOutputWithContext(ctx context.Context) CosShipperFilterRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosShipperFilterRuleArrayOutput)
}

type CosShipperFilterRuleOutput struct{ *pulumi.OutputState }

func (CosShipperFilterRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosShipperFilterRule)(nil)).Elem()
}

func (o CosShipperFilterRuleOutput) ToCosShipperFilterRuleOutput() CosShipperFilterRuleOutput {
	return o
}

func (o CosShipperFilterRuleOutput) ToCosShipperFilterRuleOutputWithContext(ctx context.Context) CosShipperFilterRuleOutput {
	return o
}

// Filter rule key.
func (o CosShipperFilterRuleOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CosShipperFilterRule) string { return v.Key }).(pulumi.StringOutput)
}

// Filter rule.
func (o CosShipperFilterRuleOutput) Regex() pulumi.StringOutput {
	return o.ApplyT(func(v CosShipperFilterRule) string { return v.Regex }).(pulumi.StringOutput)
}

// Filter rule value.
func (o CosShipperFilterRuleOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CosShipperFilterRule) string { return v.Value }).(pulumi.StringOutput)
}

type CosShipperFilterRuleArrayOutput struct{ *pulumi.OutputState }

func (CosShipperFilterRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CosShipperFilterRule)(nil)).Elem()
}

func (o CosShipperFilterRuleArrayOutput) ToCosShipperFilterRuleArrayOutput() CosShipperFilterRuleArrayOutput {
	return o
}

func (o CosShipperFilterRuleArrayOutput) ToCosShipperFilterRuleArrayOutputWithContext(ctx context.Context) CosShipperFilterRuleArrayOutput {
	return o
}

func (o CosShipperFilterRuleArrayOutput) Index(i pulumi.IntInput) CosShipperFilterRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CosShipperFilterRule {
		return vs[0].([]CosShipperFilterRule)[vs[1].(int)]
	}).(CosShipperFilterRuleOutput)
}

type IndexRule struct {
	// Full-Text index configuration.
	FullText *IndexRuleFullText `pulumi:"fullText"`
	// Key-Value index configuration.
	KeyValue *IndexRuleKeyValue `pulumi:"keyValue"`
	// Metafield index configuration.
	Tag *IndexRuleTag `pulumi:"tag"`
}

// IndexRuleInput is an input type that accepts IndexRuleArgs and IndexRuleOutput values.
// You can construct a concrete instance of `IndexRuleInput` via:
//
//	IndexRuleArgs{...}
type IndexRuleInput interface {
	pulumi.Input

	ToIndexRuleOutput() IndexRuleOutput
	ToIndexRuleOutputWithContext(context.Context) IndexRuleOutput
}

type IndexRuleArgs struct {
	// Full-Text index configuration.
	FullText IndexRuleFullTextPtrInput `pulumi:"fullText"`
	// Key-Value index configuration.
	KeyValue IndexRuleKeyValuePtrInput `pulumi:"keyValue"`
	// Metafield index configuration.
	Tag IndexRuleTagPtrInput `pulumi:"tag"`
}

func (IndexRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexRule)(nil)).Elem()
}

func (i IndexRuleArgs) ToIndexRuleOutput() IndexRuleOutput {
	return i.ToIndexRuleOutputWithContext(context.Background())
}

func (i IndexRuleArgs) ToIndexRuleOutputWithContext(ctx context.Context) IndexRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleOutput)
}

func (i IndexRuleArgs) ToIndexRulePtrOutput() IndexRulePtrOutput {
	return i.ToIndexRulePtrOutputWithContext(context.Background())
}

func (i IndexRuleArgs) ToIndexRulePtrOutputWithContext(ctx context.Context) IndexRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleOutput).ToIndexRulePtrOutputWithContext(ctx)
}

// IndexRulePtrInput is an input type that accepts IndexRuleArgs, IndexRulePtr and IndexRulePtrOutput values.
// You can construct a concrete instance of `IndexRulePtrInput` via:
//
//	        IndexRuleArgs{...}
//
//	or:
//
//	        nil
type IndexRulePtrInput interface {
	pulumi.Input

	ToIndexRulePtrOutput() IndexRulePtrOutput
	ToIndexRulePtrOutputWithContext(context.Context) IndexRulePtrOutput
}

type indexRulePtrType IndexRuleArgs

func IndexRulePtr(v *IndexRuleArgs) IndexRulePtrInput {
	return (*indexRulePtrType)(v)
}

func (*indexRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexRule)(nil)).Elem()
}

func (i *indexRulePtrType) ToIndexRulePtrOutput() IndexRulePtrOutput {
	return i.ToIndexRulePtrOutputWithContext(context.Background())
}

func (i *indexRulePtrType) ToIndexRulePtrOutputWithContext(ctx context.Context) IndexRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRulePtrOutput)
}

type IndexRuleOutput struct{ *pulumi.OutputState }

func (IndexRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexRule)(nil)).Elem()
}

func (o IndexRuleOutput) ToIndexRuleOutput() IndexRuleOutput {
	return o
}

func (o IndexRuleOutput) ToIndexRuleOutputWithContext(ctx context.Context) IndexRuleOutput {
	return o
}

func (o IndexRuleOutput) ToIndexRulePtrOutput() IndexRulePtrOutput {
	return o.ToIndexRulePtrOutputWithContext(context.Background())
}

func (o IndexRuleOutput) ToIndexRulePtrOutputWithContext(ctx context.Context) IndexRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexRule) *IndexRule {
		return &v
	}).(IndexRulePtrOutput)
}

// Full-Text index configuration.
func (o IndexRuleOutput) FullText() IndexRuleFullTextPtrOutput {
	return o.ApplyT(func(v IndexRule) *IndexRuleFullText { return v.FullText }).(IndexRuleFullTextPtrOutput)
}

// Key-Value index configuration.
func (o IndexRuleOutput) KeyValue() IndexRuleKeyValuePtrOutput {
	return o.ApplyT(func(v IndexRule) *IndexRuleKeyValue { return v.KeyValue }).(IndexRuleKeyValuePtrOutput)
}

// Metafield index configuration.
func (o IndexRuleOutput) Tag() IndexRuleTagPtrOutput {
	return o.ApplyT(func(v IndexRule) *IndexRuleTag { return v.Tag }).(IndexRuleTagPtrOutput)
}

type IndexRulePtrOutput struct{ *pulumi.OutputState }

func (IndexRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexRule)(nil)).Elem()
}

func (o IndexRulePtrOutput) ToIndexRulePtrOutput() IndexRulePtrOutput {
	return o
}

func (o IndexRulePtrOutput) ToIndexRulePtrOutputWithContext(ctx context.Context) IndexRulePtrOutput {
	return o
}

func (o IndexRulePtrOutput) Elem() IndexRuleOutput {
	return o.ApplyT(func(v *IndexRule) IndexRule {
		if v != nil {
			return *v
		}
		var ret IndexRule
		return ret
	}).(IndexRuleOutput)
}

// Full-Text index configuration.
func (o IndexRulePtrOutput) FullText() IndexRuleFullTextPtrOutput {
	return o.ApplyT(func(v *IndexRule) *IndexRuleFullText {
		if v == nil {
			return nil
		}
		return v.FullText
	}).(IndexRuleFullTextPtrOutput)
}

// Key-Value index configuration.
func (o IndexRulePtrOutput) KeyValue() IndexRuleKeyValuePtrOutput {
	return o.ApplyT(func(v *IndexRule) *IndexRuleKeyValue {
		if v == nil {
			return nil
		}
		return v.KeyValue
	}).(IndexRuleKeyValuePtrOutput)
}

// Metafield index configuration.
func (o IndexRulePtrOutput) Tag() IndexRuleTagPtrOutput {
	return o.ApplyT(func(v *IndexRule) *IndexRuleTag {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(IndexRuleTagPtrOutput)
}

type IndexRuleFullText struct {
	// Case sensitivity.
	CaseSensitive bool `pulumi:"caseSensitive"`
	// Whether Chinese characters are contained.
	ContainZH bool `pulumi:"containZH"`
	// Full-Text index delimiter. Each character in the string represents a delimiter.
	Tokenizer string `pulumi:"tokenizer"`
}

// IndexRuleFullTextInput is an input type that accepts IndexRuleFullTextArgs and IndexRuleFullTextOutput values.
// You can construct a concrete instance of `IndexRuleFullTextInput` via:
//
//	IndexRuleFullTextArgs{...}
type IndexRuleFullTextInput interface {
	pulumi.Input

	ToIndexRuleFullTextOutput() IndexRuleFullTextOutput
	ToIndexRuleFullTextOutputWithContext(context.Context) IndexRuleFullTextOutput
}

type IndexRuleFullTextArgs struct {
	// Case sensitivity.
	CaseSensitive pulumi.BoolInput `pulumi:"caseSensitive"`
	// Whether Chinese characters are contained.
	ContainZH pulumi.BoolInput `pulumi:"containZH"`
	// Full-Text index delimiter. Each character in the string represents a delimiter.
	Tokenizer pulumi.StringInput `pulumi:"tokenizer"`
}

func (IndexRuleFullTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexRuleFullText)(nil)).Elem()
}

func (i IndexRuleFullTextArgs) ToIndexRuleFullTextOutput() IndexRuleFullTextOutput {
	return i.ToIndexRuleFullTextOutputWithContext(context.Background())
}

func (i IndexRuleFullTextArgs) ToIndexRuleFullTextOutputWithContext(ctx context.Context) IndexRuleFullTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleFullTextOutput)
}

func (i IndexRuleFullTextArgs) ToIndexRuleFullTextPtrOutput() IndexRuleFullTextPtrOutput {
	return i.ToIndexRuleFullTextPtrOutputWithContext(context.Background())
}

func (i IndexRuleFullTextArgs) ToIndexRuleFullTextPtrOutputWithContext(ctx context.Context) IndexRuleFullTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleFullTextOutput).ToIndexRuleFullTextPtrOutputWithContext(ctx)
}

// IndexRuleFullTextPtrInput is an input type that accepts IndexRuleFullTextArgs, IndexRuleFullTextPtr and IndexRuleFullTextPtrOutput values.
// You can construct a concrete instance of `IndexRuleFullTextPtrInput` via:
//
//	        IndexRuleFullTextArgs{...}
//
//	or:
//
//	        nil
type IndexRuleFullTextPtrInput interface {
	pulumi.Input

	ToIndexRuleFullTextPtrOutput() IndexRuleFullTextPtrOutput
	ToIndexRuleFullTextPtrOutputWithContext(context.Context) IndexRuleFullTextPtrOutput
}

type indexRuleFullTextPtrType IndexRuleFullTextArgs

func IndexRuleFullTextPtr(v *IndexRuleFullTextArgs) IndexRuleFullTextPtrInput {
	return (*indexRuleFullTextPtrType)(v)
}

func (*indexRuleFullTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexRuleFullText)(nil)).Elem()
}

func (i *indexRuleFullTextPtrType) ToIndexRuleFullTextPtrOutput() IndexRuleFullTextPtrOutput {
	return i.ToIndexRuleFullTextPtrOutputWithContext(context.Background())
}

func (i *indexRuleFullTextPtrType) ToIndexRuleFullTextPtrOutputWithContext(ctx context.Context) IndexRuleFullTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleFullTextPtrOutput)
}

type IndexRuleFullTextOutput struct{ *pulumi.OutputState }

func (IndexRuleFullTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexRuleFullText)(nil)).Elem()
}

func (o IndexRuleFullTextOutput) ToIndexRuleFullTextOutput() IndexRuleFullTextOutput {
	return o
}

func (o IndexRuleFullTextOutput) ToIndexRuleFullTextOutputWithContext(ctx context.Context) IndexRuleFullTextOutput {
	return o
}

func (o IndexRuleFullTextOutput) ToIndexRuleFullTextPtrOutput() IndexRuleFullTextPtrOutput {
	return o.ToIndexRuleFullTextPtrOutputWithContext(context.Background())
}

func (o IndexRuleFullTextOutput) ToIndexRuleFullTextPtrOutputWithContext(ctx context.Context) IndexRuleFullTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexRuleFullText) *IndexRuleFullText {
		return &v
	}).(IndexRuleFullTextPtrOutput)
}

// Case sensitivity.
func (o IndexRuleFullTextOutput) CaseSensitive() pulumi.BoolOutput {
	return o.ApplyT(func(v IndexRuleFullText) bool { return v.CaseSensitive }).(pulumi.BoolOutput)
}

// Whether Chinese characters are contained.
func (o IndexRuleFullTextOutput) ContainZH() pulumi.BoolOutput {
	return o.ApplyT(func(v IndexRuleFullText) bool { return v.ContainZH }).(pulumi.BoolOutput)
}

// Full-Text index delimiter. Each character in the string represents a delimiter.
func (o IndexRuleFullTextOutput) Tokenizer() pulumi.StringOutput {
	return o.ApplyT(func(v IndexRuleFullText) string { return v.Tokenizer }).(pulumi.StringOutput)
}

type IndexRuleFullTextPtrOutput struct{ *pulumi.OutputState }

func (IndexRuleFullTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexRuleFullText)(nil)).Elem()
}

func (o IndexRuleFullTextPtrOutput) ToIndexRuleFullTextPtrOutput() IndexRuleFullTextPtrOutput {
	return o
}

func (o IndexRuleFullTextPtrOutput) ToIndexRuleFullTextPtrOutputWithContext(ctx context.Context) IndexRuleFullTextPtrOutput {
	return o
}

func (o IndexRuleFullTextPtrOutput) Elem() IndexRuleFullTextOutput {
	return o.ApplyT(func(v *IndexRuleFullText) IndexRuleFullText {
		if v != nil {
			return *v
		}
		var ret IndexRuleFullText
		return ret
	}).(IndexRuleFullTextOutput)
}

// Case sensitivity.
func (o IndexRuleFullTextPtrOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IndexRuleFullText) *bool {
		if v == nil {
			return nil
		}
		return &v.CaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// Whether Chinese characters are contained.
func (o IndexRuleFullTextPtrOutput) ContainZH() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IndexRuleFullText) *bool {
		if v == nil {
			return nil
		}
		return &v.ContainZH
	}).(pulumi.BoolPtrOutput)
}

// Full-Text index delimiter. Each character in the string represents a delimiter.
func (o IndexRuleFullTextPtrOutput) Tokenizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IndexRuleFullText) *string {
		if v == nil {
			return nil
		}
		return &v.Tokenizer
	}).(pulumi.StringPtrOutput)
}

type IndexRuleKeyValue struct {
	// Case sensitivity.
	CaseSensitive bool `pulumi:"caseSensitive"`
	// Key-Value pair information of the index to be created. Up to 100 key-value pairs can be configured.
	KeyValues []IndexRuleKeyValueKeyValue `pulumi:"keyValues"`
}

// IndexRuleKeyValueInput is an input type that accepts IndexRuleKeyValueArgs and IndexRuleKeyValueOutput values.
// You can construct a concrete instance of `IndexRuleKeyValueInput` via:
//
//	IndexRuleKeyValueArgs{...}
type IndexRuleKeyValueInput interface {
	pulumi.Input

	ToIndexRuleKeyValueOutput() IndexRuleKeyValueOutput
	ToIndexRuleKeyValueOutputWithContext(context.Context) IndexRuleKeyValueOutput
}

type IndexRuleKeyValueArgs struct {
	// Case sensitivity.
	CaseSensitive pulumi.BoolInput `pulumi:"caseSensitive"`
	// Key-Value pair information of the index to be created. Up to 100 key-value pairs can be configured.
	KeyValues IndexRuleKeyValueKeyValueArrayInput `pulumi:"keyValues"`
}

func (IndexRuleKeyValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexRuleKeyValue)(nil)).Elem()
}

func (i IndexRuleKeyValueArgs) ToIndexRuleKeyValueOutput() IndexRuleKeyValueOutput {
	return i.ToIndexRuleKeyValueOutputWithContext(context.Background())
}

func (i IndexRuleKeyValueArgs) ToIndexRuleKeyValueOutputWithContext(ctx context.Context) IndexRuleKeyValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleKeyValueOutput)
}

func (i IndexRuleKeyValueArgs) ToIndexRuleKeyValuePtrOutput() IndexRuleKeyValuePtrOutput {
	return i.ToIndexRuleKeyValuePtrOutputWithContext(context.Background())
}

func (i IndexRuleKeyValueArgs) ToIndexRuleKeyValuePtrOutputWithContext(ctx context.Context) IndexRuleKeyValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleKeyValueOutput).ToIndexRuleKeyValuePtrOutputWithContext(ctx)
}

// IndexRuleKeyValuePtrInput is an input type that accepts IndexRuleKeyValueArgs, IndexRuleKeyValuePtr and IndexRuleKeyValuePtrOutput values.
// You can construct a concrete instance of `IndexRuleKeyValuePtrInput` via:
//
//	        IndexRuleKeyValueArgs{...}
//
//	or:
//
//	        nil
type IndexRuleKeyValuePtrInput interface {
	pulumi.Input

	ToIndexRuleKeyValuePtrOutput() IndexRuleKeyValuePtrOutput
	ToIndexRuleKeyValuePtrOutputWithContext(context.Context) IndexRuleKeyValuePtrOutput
}

type indexRuleKeyValuePtrType IndexRuleKeyValueArgs

func IndexRuleKeyValuePtr(v *IndexRuleKeyValueArgs) IndexRuleKeyValuePtrInput {
	return (*indexRuleKeyValuePtrType)(v)
}

func (*indexRuleKeyValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexRuleKeyValue)(nil)).Elem()
}

func (i *indexRuleKeyValuePtrType) ToIndexRuleKeyValuePtrOutput() IndexRuleKeyValuePtrOutput {
	return i.ToIndexRuleKeyValuePtrOutputWithContext(context.Background())
}

func (i *indexRuleKeyValuePtrType) ToIndexRuleKeyValuePtrOutputWithContext(ctx context.Context) IndexRuleKeyValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleKeyValuePtrOutput)
}

type IndexRuleKeyValueOutput struct{ *pulumi.OutputState }

func (IndexRuleKeyValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexRuleKeyValue)(nil)).Elem()
}

func (o IndexRuleKeyValueOutput) ToIndexRuleKeyValueOutput() IndexRuleKeyValueOutput {
	return o
}

func (o IndexRuleKeyValueOutput) ToIndexRuleKeyValueOutputWithContext(ctx context.Context) IndexRuleKeyValueOutput {
	return o
}

func (o IndexRuleKeyValueOutput) ToIndexRuleKeyValuePtrOutput() IndexRuleKeyValuePtrOutput {
	return o.ToIndexRuleKeyValuePtrOutputWithContext(context.Background())
}

func (o IndexRuleKeyValueOutput) ToIndexRuleKeyValuePtrOutputWithContext(ctx context.Context) IndexRuleKeyValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexRuleKeyValue) *IndexRuleKeyValue {
		return &v
	}).(IndexRuleKeyValuePtrOutput)
}

// Case sensitivity.
func (o IndexRuleKeyValueOutput) CaseSensitive() pulumi.BoolOutput {
	return o.ApplyT(func(v IndexRuleKeyValue) bool { return v.CaseSensitive }).(pulumi.BoolOutput)
}

// Key-Value pair information of the index to be created. Up to 100 key-value pairs can be configured.
func (o IndexRuleKeyValueOutput) KeyValues() IndexRuleKeyValueKeyValueArrayOutput {
	return o.ApplyT(func(v IndexRuleKeyValue) []IndexRuleKeyValueKeyValue { return v.KeyValues }).(IndexRuleKeyValueKeyValueArrayOutput)
}

type IndexRuleKeyValuePtrOutput struct{ *pulumi.OutputState }

func (IndexRuleKeyValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexRuleKeyValue)(nil)).Elem()
}

func (o IndexRuleKeyValuePtrOutput) ToIndexRuleKeyValuePtrOutput() IndexRuleKeyValuePtrOutput {
	return o
}

func (o IndexRuleKeyValuePtrOutput) ToIndexRuleKeyValuePtrOutputWithContext(ctx context.Context) IndexRuleKeyValuePtrOutput {
	return o
}

func (o IndexRuleKeyValuePtrOutput) Elem() IndexRuleKeyValueOutput {
	return o.ApplyT(func(v *IndexRuleKeyValue) IndexRuleKeyValue {
		if v != nil {
			return *v
		}
		var ret IndexRuleKeyValue
		return ret
	}).(IndexRuleKeyValueOutput)
}

// Case sensitivity.
func (o IndexRuleKeyValuePtrOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IndexRuleKeyValue) *bool {
		if v == nil {
			return nil
		}
		return &v.CaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// Key-Value pair information of the index to be created. Up to 100 key-value pairs can be configured.
func (o IndexRuleKeyValuePtrOutput) KeyValues() IndexRuleKeyValueKeyValueArrayOutput {
	return o.ApplyT(func(v *IndexRuleKeyValue) []IndexRuleKeyValueKeyValue {
		if v == nil {
			return nil
		}
		return v.KeyValues
	}).(IndexRuleKeyValueKeyValueArrayOutput)
}

type IndexRuleKeyValueKeyValue struct {
	// When a key value or metafield index needs to be configured for a field, the metafield Key does not need to be prefixed with __TAG__. and is consistent with the one when logs are uploaded. __TAG__. will be prefixed automatically for display in the console..
	Key string `pulumi:"key"`
	// Field index description information.
	Value *IndexRuleKeyValueKeyValueValue `pulumi:"value"`
}

// IndexRuleKeyValueKeyValueInput is an input type that accepts IndexRuleKeyValueKeyValueArgs and IndexRuleKeyValueKeyValueOutput values.
// You can construct a concrete instance of `IndexRuleKeyValueKeyValueInput` via:
//
//	IndexRuleKeyValueKeyValueArgs{...}
type IndexRuleKeyValueKeyValueInput interface {
	pulumi.Input

	ToIndexRuleKeyValueKeyValueOutput() IndexRuleKeyValueKeyValueOutput
	ToIndexRuleKeyValueKeyValueOutputWithContext(context.Context) IndexRuleKeyValueKeyValueOutput
}

type IndexRuleKeyValueKeyValueArgs struct {
	// When a key value or metafield index needs to be configured for a field, the metafield Key does not need to be prefixed with __TAG__. and is consistent with the one when logs are uploaded. __TAG__. will be prefixed automatically for display in the console..
	Key pulumi.StringInput `pulumi:"key"`
	// Field index description information.
	Value IndexRuleKeyValueKeyValueValuePtrInput `pulumi:"value"`
}

func (IndexRuleKeyValueKeyValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexRuleKeyValueKeyValue)(nil)).Elem()
}

func (i IndexRuleKeyValueKeyValueArgs) ToIndexRuleKeyValueKeyValueOutput() IndexRuleKeyValueKeyValueOutput {
	return i.ToIndexRuleKeyValueKeyValueOutputWithContext(context.Background())
}

func (i IndexRuleKeyValueKeyValueArgs) ToIndexRuleKeyValueKeyValueOutputWithContext(ctx context.Context) IndexRuleKeyValueKeyValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleKeyValueKeyValueOutput)
}

// IndexRuleKeyValueKeyValueArrayInput is an input type that accepts IndexRuleKeyValueKeyValueArray and IndexRuleKeyValueKeyValueArrayOutput values.
// You can construct a concrete instance of `IndexRuleKeyValueKeyValueArrayInput` via:
//
//	IndexRuleKeyValueKeyValueArray{ IndexRuleKeyValueKeyValueArgs{...} }
type IndexRuleKeyValueKeyValueArrayInput interface {
	pulumi.Input

	ToIndexRuleKeyValueKeyValueArrayOutput() IndexRuleKeyValueKeyValueArrayOutput
	ToIndexRuleKeyValueKeyValueArrayOutputWithContext(context.Context) IndexRuleKeyValueKeyValueArrayOutput
}

type IndexRuleKeyValueKeyValueArray []IndexRuleKeyValueKeyValueInput

func (IndexRuleKeyValueKeyValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexRuleKeyValueKeyValue)(nil)).Elem()
}

func (i IndexRuleKeyValueKeyValueArray) ToIndexRuleKeyValueKeyValueArrayOutput() IndexRuleKeyValueKeyValueArrayOutput {
	return i.ToIndexRuleKeyValueKeyValueArrayOutputWithContext(context.Background())
}

func (i IndexRuleKeyValueKeyValueArray) ToIndexRuleKeyValueKeyValueArrayOutputWithContext(ctx context.Context) IndexRuleKeyValueKeyValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleKeyValueKeyValueArrayOutput)
}

type IndexRuleKeyValueKeyValueOutput struct{ *pulumi.OutputState }

func (IndexRuleKeyValueKeyValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexRuleKeyValueKeyValue)(nil)).Elem()
}

func (o IndexRuleKeyValueKeyValueOutput) ToIndexRuleKeyValueKeyValueOutput() IndexRuleKeyValueKeyValueOutput {
	return o
}

func (o IndexRuleKeyValueKeyValueOutput) ToIndexRuleKeyValueKeyValueOutputWithContext(ctx context.Context) IndexRuleKeyValueKeyValueOutput {
	return o
}

// When a key value or metafield index needs to be configured for a field, the metafield Key does not need to be prefixed with __TAG__. and is consistent with the one when logs are uploaded. __TAG__. will be prefixed automatically for display in the console..
func (o IndexRuleKeyValueKeyValueOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v IndexRuleKeyValueKeyValue) string { return v.Key }).(pulumi.StringOutput)
}

// Field index description information.
func (o IndexRuleKeyValueKeyValueOutput) Value() IndexRuleKeyValueKeyValueValuePtrOutput {
	return o.ApplyT(func(v IndexRuleKeyValueKeyValue) *IndexRuleKeyValueKeyValueValue { return v.Value }).(IndexRuleKeyValueKeyValueValuePtrOutput)
}

type IndexRuleKeyValueKeyValueArrayOutput struct{ *pulumi.OutputState }

func (IndexRuleKeyValueKeyValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexRuleKeyValueKeyValue)(nil)).Elem()
}

func (o IndexRuleKeyValueKeyValueArrayOutput) ToIndexRuleKeyValueKeyValueArrayOutput() IndexRuleKeyValueKeyValueArrayOutput {
	return o
}

func (o IndexRuleKeyValueKeyValueArrayOutput) ToIndexRuleKeyValueKeyValueArrayOutputWithContext(ctx context.Context) IndexRuleKeyValueKeyValueArrayOutput {
	return o
}

func (o IndexRuleKeyValueKeyValueArrayOutput) Index(i pulumi.IntInput) IndexRuleKeyValueKeyValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IndexRuleKeyValueKeyValue {
		return vs[0].([]IndexRuleKeyValueKeyValue)[vs[1].(int)]
	}).(IndexRuleKeyValueKeyValueOutput)
}

type IndexRuleKeyValueKeyValueValue struct {
	// Whether Chinese characters are contained.
	ContainZH *bool `pulumi:"containZH"`
	// Whether the analysis feature is enabled for the field.
	SqlFlag *bool `pulumi:"sqlFlag"`
	// Field delimiter, which is meaningful only if the field type is text. Each character in the entered string represents a delimiter.
	Tokenizer *string `pulumi:"tokenizer"`
	// Field type. Valid values: long, text, double.
	Type string `pulumi:"type"`
}

// IndexRuleKeyValueKeyValueValueInput is an input type that accepts IndexRuleKeyValueKeyValueValueArgs and IndexRuleKeyValueKeyValueValueOutput values.
// You can construct a concrete instance of `IndexRuleKeyValueKeyValueValueInput` via:
//
//	IndexRuleKeyValueKeyValueValueArgs{...}
type IndexRuleKeyValueKeyValueValueInput interface {
	pulumi.Input

	ToIndexRuleKeyValueKeyValueValueOutput() IndexRuleKeyValueKeyValueValueOutput
	ToIndexRuleKeyValueKeyValueValueOutputWithContext(context.Context) IndexRuleKeyValueKeyValueValueOutput
}

type IndexRuleKeyValueKeyValueValueArgs struct {
	// Whether Chinese characters are contained.
	ContainZH pulumi.BoolPtrInput `pulumi:"containZH"`
	// Whether the analysis feature is enabled for the field.
	SqlFlag pulumi.BoolPtrInput `pulumi:"sqlFlag"`
	// Field delimiter, which is meaningful only if the field type is text. Each character in the entered string represents a delimiter.
	Tokenizer pulumi.StringPtrInput `pulumi:"tokenizer"`
	// Field type. Valid values: long, text, double.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IndexRuleKeyValueKeyValueValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexRuleKeyValueKeyValueValue)(nil)).Elem()
}

func (i IndexRuleKeyValueKeyValueValueArgs) ToIndexRuleKeyValueKeyValueValueOutput() IndexRuleKeyValueKeyValueValueOutput {
	return i.ToIndexRuleKeyValueKeyValueValueOutputWithContext(context.Background())
}

func (i IndexRuleKeyValueKeyValueValueArgs) ToIndexRuleKeyValueKeyValueValueOutputWithContext(ctx context.Context) IndexRuleKeyValueKeyValueValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleKeyValueKeyValueValueOutput)
}

func (i IndexRuleKeyValueKeyValueValueArgs) ToIndexRuleKeyValueKeyValueValuePtrOutput() IndexRuleKeyValueKeyValueValuePtrOutput {
	return i.ToIndexRuleKeyValueKeyValueValuePtrOutputWithContext(context.Background())
}

func (i IndexRuleKeyValueKeyValueValueArgs) ToIndexRuleKeyValueKeyValueValuePtrOutputWithContext(ctx context.Context) IndexRuleKeyValueKeyValueValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleKeyValueKeyValueValueOutput).ToIndexRuleKeyValueKeyValueValuePtrOutputWithContext(ctx)
}

// IndexRuleKeyValueKeyValueValuePtrInput is an input type that accepts IndexRuleKeyValueKeyValueValueArgs, IndexRuleKeyValueKeyValueValuePtr and IndexRuleKeyValueKeyValueValuePtrOutput values.
// You can construct a concrete instance of `IndexRuleKeyValueKeyValueValuePtrInput` via:
//
//	        IndexRuleKeyValueKeyValueValueArgs{...}
//
//	or:
//
//	        nil
type IndexRuleKeyValueKeyValueValuePtrInput interface {
	pulumi.Input

	ToIndexRuleKeyValueKeyValueValuePtrOutput() IndexRuleKeyValueKeyValueValuePtrOutput
	ToIndexRuleKeyValueKeyValueValuePtrOutputWithContext(context.Context) IndexRuleKeyValueKeyValueValuePtrOutput
}

type indexRuleKeyValueKeyValueValuePtrType IndexRuleKeyValueKeyValueValueArgs

func IndexRuleKeyValueKeyValueValuePtr(v *IndexRuleKeyValueKeyValueValueArgs) IndexRuleKeyValueKeyValueValuePtrInput {
	return (*indexRuleKeyValueKeyValueValuePtrType)(v)
}

func (*indexRuleKeyValueKeyValueValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexRuleKeyValueKeyValueValue)(nil)).Elem()
}

func (i *indexRuleKeyValueKeyValueValuePtrType) ToIndexRuleKeyValueKeyValueValuePtrOutput() IndexRuleKeyValueKeyValueValuePtrOutput {
	return i.ToIndexRuleKeyValueKeyValueValuePtrOutputWithContext(context.Background())
}

func (i *indexRuleKeyValueKeyValueValuePtrType) ToIndexRuleKeyValueKeyValueValuePtrOutputWithContext(ctx context.Context) IndexRuleKeyValueKeyValueValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleKeyValueKeyValueValuePtrOutput)
}

type IndexRuleKeyValueKeyValueValueOutput struct{ *pulumi.OutputState }

func (IndexRuleKeyValueKeyValueValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexRuleKeyValueKeyValueValue)(nil)).Elem()
}

func (o IndexRuleKeyValueKeyValueValueOutput) ToIndexRuleKeyValueKeyValueValueOutput() IndexRuleKeyValueKeyValueValueOutput {
	return o
}

func (o IndexRuleKeyValueKeyValueValueOutput) ToIndexRuleKeyValueKeyValueValueOutputWithContext(ctx context.Context) IndexRuleKeyValueKeyValueValueOutput {
	return o
}

func (o IndexRuleKeyValueKeyValueValueOutput) ToIndexRuleKeyValueKeyValueValuePtrOutput() IndexRuleKeyValueKeyValueValuePtrOutput {
	return o.ToIndexRuleKeyValueKeyValueValuePtrOutputWithContext(context.Background())
}

func (o IndexRuleKeyValueKeyValueValueOutput) ToIndexRuleKeyValueKeyValueValuePtrOutputWithContext(ctx context.Context) IndexRuleKeyValueKeyValueValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexRuleKeyValueKeyValueValue) *IndexRuleKeyValueKeyValueValue {
		return &v
	}).(IndexRuleKeyValueKeyValueValuePtrOutput)
}

// Whether Chinese characters are contained.
func (o IndexRuleKeyValueKeyValueValueOutput) ContainZH() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IndexRuleKeyValueKeyValueValue) *bool { return v.ContainZH }).(pulumi.BoolPtrOutput)
}

// Whether the analysis feature is enabled for the field.
func (o IndexRuleKeyValueKeyValueValueOutput) SqlFlag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IndexRuleKeyValueKeyValueValue) *bool { return v.SqlFlag }).(pulumi.BoolPtrOutput)
}

// Field delimiter, which is meaningful only if the field type is text. Each character in the entered string represents a delimiter.
func (o IndexRuleKeyValueKeyValueValueOutput) Tokenizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexRuleKeyValueKeyValueValue) *string { return v.Tokenizer }).(pulumi.StringPtrOutput)
}

// Field type. Valid values: long, text, double.
func (o IndexRuleKeyValueKeyValueValueOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IndexRuleKeyValueKeyValueValue) string { return v.Type }).(pulumi.StringOutput)
}

type IndexRuleKeyValueKeyValueValuePtrOutput struct{ *pulumi.OutputState }

func (IndexRuleKeyValueKeyValueValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexRuleKeyValueKeyValueValue)(nil)).Elem()
}

func (o IndexRuleKeyValueKeyValueValuePtrOutput) ToIndexRuleKeyValueKeyValueValuePtrOutput() IndexRuleKeyValueKeyValueValuePtrOutput {
	return o
}

func (o IndexRuleKeyValueKeyValueValuePtrOutput) ToIndexRuleKeyValueKeyValueValuePtrOutputWithContext(ctx context.Context) IndexRuleKeyValueKeyValueValuePtrOutput {
	return o
}

func (o IndexRuleKeyValueKeyValueValuePtrOutput) Elem() IndexRuleKeyValueKeyValueValueOutput {
	return o.ApplyT(func(v *IndexRuleKeyValueKeyValueValue) IndexRuleKeyValueKeyValueValue {
		if v != nil {
			return *v
		}
		var ret IndexRuleKeyValueKeyValueValue
		return ret
	}).(IndexRuleKeyValueKeyValueValueOutput)
}

// Whether Chinese characters are contained.
func (o IndexRuleKeyValueKeyValueValuePtrOutput) ContainZH() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IndexRuleKeyValueKeyValueValue) *bool {
		if v == nil {
			return nil
		}
		return v.ContainZH
	}).(pulumi.BoolPtrOutput)
}

// Whether the analysis feature is enabled for the field.
func (o IndexRuleKeyValueKeyValueValuePtrOutput) SqlFlag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IndexRuleKeyValueKeyValueValue) *bool {
		if v == nil {
			return nil
		}
		return v.SqlFlag
	}).(pulumi.BoolPtrOutput)
}

// Field delimiter, which is meaningful only if the field type is text. Each character in the entered string represents a delimiter.
func (o IndexRuleKeyValueKeyValueValuePtrOutput) Tokenizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IndexRuleKeyValueKeyValueValue) *string {
		if v == nil {
			return nil
		}
		return v.Tokenizer
	}).(pulumi.StringPtrOutput)
}

// Field type. Valid values: long, text, double.
func (o IndexRuleKeyValueKeyValueValuePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IndexRuleKeyValueKeyValueValue) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type IndexRuleTag struct {
	// Case sensitivity.
	CaseSensitive bool `pulumi:"caseSensitive"`
	// Key-Value pair information of the index to be created. Up to 100 key-value pairs can be configured.
	KeyValues []IndexRuleTagKeyValue `pulumi:"keyValues"`
}

// IndexRuleTagInput is an input type that accepts IndexRuleTagArgs and IndexRuleTagOutput values.
// You can construct a concrete instance of `IndexRuleTagInput` via:
//
//	IndexRuleTagArgs{...}
type IndexRuleTagInput interface {
	pulumi.Input

	ToIndexRuleTagOutput() IndexRuleTagOutput
	ToIndexRuleTagOutputWithContext(context.Context) IndexRuleTagOutput
}

type IndexRuleTagArgs struct {
	// Case sensitivity.
	CaseSensitive pulumi.BoolInput `pulumi:"caseSensitive"`
	// Key-Value pair information of the index to be created. Up to 100 key-value pairs can be configured.
	KeyValues IndexRuleTagKeyValueArrayInput `pulumi:"keyValues"`
}

func (IndexRuleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexRuleTag)(nil)).Elem()
}

func (i IndexRuleTagArgs) ToIndexRuleTagOutput() IndexRuleTagOutput {
	return i.ToIndexRuleTagOutputWithContext(context.Background())
}

func (i IndexRuleTagArgs) ToIndexRuleTagOutputWithContext(ctx context.Context) IndexRuleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleTagOutput)
}

func (i IndexRuleTagArgs) ToIndexRuleTagPtrOutput() IndexRuleTagPtrOutput {
	return i.ToIndexRuleTagPtrOutputWithContext(context.Background())
}

func (i IndexRuleTagArgs) ToIndexRuleTagPtrOutputWithContext(ctx context.Context) IndexRuleTagPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleTagOutput).ToIndexRuleTagPtrOutputWithContext(ctx)
}

// IndexRuleTagPtrInput is an input type that accepts IndexRuleTagArgs, IndexRuleTagPtr and IndexRuleTagPtrOutput values.
// You can construct a concrete instance of `IndexRuleTagPtrInput` via:
//
//	        IndexRuleTagArgs{...}
//
//	or:
//
//	        nil
type IndexRuleTagPtrInput interface {
	pulumi.Input

	ToIndexRuleTagPtrOutput() IndexRuleTagPtrOutput
	ToIndexRuleTagPtrOutputWithContext(context.Context) IndexRuleTagPtrOutput
}

type indexRuleTagPtrType IndexRuleTagArgs

func IndexRuleTagPtr(v *IndexRuleTagArgs) IndexRuleTagPtrInput {
	return (*indexRuleTagPtrType)(v)
}

func (*indexRuleTagPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexRuleTag)(nil)).Elem()
}

func (i *indexRuleTagPtrType) ToIndexRuleTagPtrOutput() IndexRuleTagPtrOutput {
	return i.ToIndexRuleTagPtrOutputWithContext(context.Background())
}

func (i *indexRuleTagPtrType) ToIndexRuleTagPtrOutputWithContext(ctx context.Context) IndexRuleTagPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleTagPtrOutput)
}

type IndexRuleTagOutput struct{ *pulumi.OutputState }

func (IndexRuleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexRuleTag)(nil)).Elem()
}

func (o IndexRuleTagOutput) ToIndexRuleTagOutput() IndexRuleTagOutput {
	return o
}

func (o IndexRuleTagOutput) ToIndexRuleTagOutputWithContext(ctx context.Context) IndexRuleTagOutput {
	return o
}

func (o IndexRuleTagOutput) ToIndexRuleTagPtrOutput() IndexRuleTagPtrOutput {
	return o.ToIndexRuleTagPtrOutputWithContext(context.Background())
}

func (o IndexRuleTagOutput) ToIndexRuleTagPtrOutputWithContext(ctx context.Context) IndexRuleTagPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexRuleTag) *IndexRuleTag {
		return &v
	}).(IndexRuleTagPtrOutput)
}

// Case sensitivity.
func (o IndexRuleTagOutput) CaseSensitive() pulumi.BoolOutput {
	return o.ApplyT(func(v IndexRuleTag) bool { return v.CaseSensitive }).(pulumi.BoolOutput)
}

// Key-Value pair information of the index to be created. Up to 100 key-value pairs can be configured.
func (o IndexRuleTagOutput) KeyValues() IndexRuleTagKeyValueArrayOutput {
	return o.ApplyT(func(v IndexRuleTag) []IndexRuleTagKeyValue { return v.KeyValues }).(IndexRuleTagKeyValueArrayOutput)
}

type IndexRuleTagPtrOutput struct{ *pulumi.OutputState }

func (IndexRuleTagPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexRuleTag)(nil)).Elem()
}

func (o IndexRuleTagPtrOutput) ToIndexRuleTagPtrOutput() IndexRuleTagPtrOutput {
	return o
}

func (o IndexRuleTagPtrOutput) ToIndexRuleTagPtrOutputWithContext(ctx context.Context) IndexRuleTagPtrOutput {
	return o
}

func (o IndexRuleTagPtrOutput) Elem() IndexRuleTagOutput {
	return o.ApplyT(func(v *IndexRuleTag) IndexRuleTag {
		if v != nil {
			return *v
		}
		var ret IndexRuleTag
		return ret
	}).(IndexRuleTagOutput)
}

// Case sensitivity.
func (o IndexRuleTagPtrOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IndexRuleTag) *bool {
		if v == nil {
			return nil
		}
		return &v.CaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// Key-Value pair information of the index to be created. Up to 100 key-value pairs can be configured.
func (o IndexRuleTagPtrOutput) KeyValues() IndexRuleTagKeyValueArrayOutput {
	return o.ApplyT(func(v *IndexRuleTag) []IndexRuleTagKeyValue {
		if v == nil {
			return nil
		}
		return v.KeyValues
	}).(IndexRuleTagKeyValueArrayOutput)
}

type IndexRuleTagKeyValue struct {
	// When a key value or metafield index needs to be configured for a field, the metafield Key does not need to be prefixed with __TAG__. and is consistent with the one when logs are uploaded. __TAG__. will be prefixed automatically for display in the console..
	Key string `pulumi:"key"`
	// Field index description information.
	Value *IndexRuleTagKeyValueValue `pulumi:"value"`
}

// IndexRuleTagKeyValueInput is an input type that accepts IndexRuleTagKeyValueArgs and IndexRuleTagKeyValueOutput values.
// You can construct a concrete instance of `IndexRuleTagKeyValueInput` via:
//
//	IndexRuleTagKeyValueArgs{...}
type IndexRuleTagKeyValueInput interface {
	pulumi.Input

	ToIndexRuleTagKeyValueOutput() IndexRuleTagKeyValueOutput
	ToIndexRuleTagKeyValueOutputWithContext(context.Context) IndexRuleTagKeyValueOutput
}

type IndexRuleTagKeyValueArgs struct {
	// When a key value or metafield index needs to be configured for a field, the metafield Key does not need to be prefixed with __TAG__. and is consistent with the one when logs are uploaded. __TAG__. will be prefixed automatically for display in the console..
	Key pulumi.StringInput `pulumi:"key"`
	// Field index description information.
	Value IndexRuleTagKeyValueValuePtrInput `pulumi:"value"`
}

func (IndexRuleTagKeyValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexRuleTagKeyValue)(nil)).Elem()
}

func (i IndexRuleTagKeyValueArgs) ToIndexRuleTagKeyValueOutput() IndexRuleTagKeyValueOutput {
	return i.ToIndexRuleTagKeyValueOutputWithContext(context.Background())
}

func (i IndexRuleTagKeyValueArgs) ToIndexRuleTagKeyValueOutputWithContext(ctx context.Context) IndexRuleTagKeyValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleTagKeyValueOutput)
}

// IndexRuleTagKeyValueArrayInput is an input type that accepts IndexRuleTagKeyValueArray and IndexRuleTagKeyValueArrayOutput values.
// You can construct a concrete instance of `IndexRuleTagKeyValueArrayInput` via:
//
//	IndexRuleTagKeyValueArray{ IndexRuleTagKeyValueArgs{...} }
type IndexRuleTagKeyValueArrayInput interface {
	pulumi.Input

	ToIndexRuleTagKeyValueArrayOutput() IndexRuleTagKeyValueArrayOutput
	ToIndexRuleTagKeyValueArrayOutputWithContext(context.Context) IndexRuleTagKeyValueArrayOutput
}

type IndexRuleTagKeyValueArray []IndexRuleTagKeyValueInput

func (IndexRuleTagKeyValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexRuleTagKeyValue)(nil)).Elem()
}

func (i IndexRuleTagKeyValueArray) ToIndexRuleTagKeyValueArrayOutput() IndexRuleTagKeyValueArrayOutput {
	return i.ToIndexRuleTagKeyValueArrayOutputWithContext(context.Background())
}

func (i IndexRuleTagKeyValueArray) ToIndexRuleTagKeyValueArrayOutputWithContext(ctx context.Context) IndexRuleTagKeyValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleTagKeyValueArrayOutput)
}

type IndexRuleTagKeyValueOutput struct{ *pulumi.OutputState }

func (IndexRuleTagKeyValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexRuleTagKeyValue)(nil)).Elem()
}

func (o IndexRuleTagKeyValueOutput) ToIndexRuleTagKeyValueOutput() IndexRuleTagKeyValueOutput {
	return o
}

func (o IndexRuleTagKeyValueOutput) ToIndexRuleTagKeyValueOutputWithContext(ctx context.Context) IndexRuleTagKeyValueOutput {
	return o
}

// When a key value or metafield index needs to be configured for a field, the metafield Key does not need to be prefixed with __TAG__. and is consistent with the one when logs are uploaded. __TAG__. will be prefixed automatically for display in the console..
func (o IndexRuleTagKeyValueOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v IndexRuleTagKeyValue) string { return v.Key }).(pulumi.StringOutput)
}

// Field index description information.
func (o IndexRuleTagKeyValueOutput) Value() IndexRuleTagKeyValueValuePtrOutput {
	return o.ApplyT(func(v IndexRuleTagKeyValue) *IndexRuleTagKeyValueValue { return v.Value }).(IndexRuleTagKeyValueValuePtrOutput)
}

type IndexRuleTagKeyValueArrayOutput struct{ *pulumi.OutputState }

func (IndexRuleTagKeyValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexRuleTagKeyValue)(nil)).Elem()
}

func (o IndexRuleTagKeyValueArrayOutput) ToIndexRuleTagKeyValueArrayOutput() IndexRuleTagKeyValueArrayOutput {
	return o
}

func (o IndexRuleTagKeyValueArrayOutput) ToIndexRuleTagKeyValueArrayOutputWithContext(ctx context.Context) IndexRuleTagKeyValueArrayOutput {
	return o
}

func (o IndexRuleTagKeyValueArrayOutput) Index(i pulumi.IntInput) IndexRuleTagKeyValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IndexRuleTagKeyValue {
		return vs[0].([]IndexRuleTagKeyValue)[vs[1].(int)]
	}).(IndexRuleTagKeyValueOutput)
}

type IndexRuleTagKeyValueValue struct {
	// Whether Chinese characters are contained.
	ContainZH *bool `pulumi:"containZH"`
	// Whether the analysis feature is enabled for the field.
	SqlFlag *bool `pulumi:"sqlFlag"`
	// Field delimiter, which is meaningful only if the field type is text. Each character in the entered string represents a delimiter.
	Tokenizer *string `pulumi:"tokenizer"`
	// Field type. Valid values: long, text, double.
	Type string `pulumi:"type"`
}

// IndexRuleTagKeyValueValueInput is an input type that accepts IndexRuleTagKeyValueValueArgs and IndexRuleTagKeyValueValueOutput values.
// You can construct a concrete instance of `IndexRuleTagKeyValueValueInput` via:
//
//	IndexRuleTagKeyValueValueArgs{...}
type IndexRuleTagKeyValueValueInput interface {
	pulumi.Input

	ToIndexRuleTagKeyValueValueOutput() IndexRuleTagKeyValueValueOutput
	ToIndexRuleTagKeyValueValueOutputWithContext(context.Context) IndexRuleTagKeyValueValueOutput
}

type IndexRuleTagKeyValueValueArgs struct {
	// Whether Chinese characters are contained.
	ContainZH pulumi.BoolPtrInput `pulumi:"containZH"`
	// Whether the analysis feature is enabled for the field.
	SqlFlag pulumi.BoolPtrInput `pulumi:"sqlFlag"`
	// Field delimiter, which is meaningful only if the field type is text. Each character in the entered string represents a delimiter.
	Tokenizer pulumi.StringPtrInput `pulumi:"tokenizer"`
	// Field type. Valid values: long, text, double.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IndexRuleTagKeyValueValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexRuleTagKeyValueValue)(nil)).Elem()
}

func (i IndexRuleTagKeyValueValueArgs) ToIndexRuleTagKeyValueValueOutput() IndexRuleTagKeyValueValueOutput {
	return i.ToIndexRuleTagKeyValueValueOutputWithContext(context.Background())
}

func (i IndexRuleTagKeyValueValueArgs) ToIndexRuleTagKeyValueValueOutputWithContext(ctx context.Context) IndexRuleTagKeyValueValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleTagKeyValueValueOutput)
}

func (i IndexRuleTagKeyValueValueArgs) ToIndexRuleTagKeyValueValuePtrOutput() IndexRuleTagKeyValueValuePtrOutput {
	return i.ToIndexRuleTagKeyValueValuePtrOutputWithContext(context.Background())
}

func (i IndexRuleTagKeyValueValueArgs) ToIndexRuleTagKeyValueValuePtrOutputWithContext(ctx context.Context) IndexRuleTagKeyValueValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleTagKeyValueValueOutput).ToIndexRuleTagKeyValueValuePtrOutputWithContext(ctx)
}

// IndexRuleTagKeyValueValuePtrInput is an input type that accepts IndexRuleTagKeyValueValueArgs, IndexRuleTagKeyValueValuePtr and IndexRuleTagKeyValueValuePtrOutput values.
// You can construct a concrete instance of `IndexRuleTagKeyValueValuePtrInput` via:
//
//	        IndexRuleTagKeyValueValueArgs{...}
//
//	or:
//
//	        nil
type IndexRuleTagKeyValueValuePtrInput interface {
	pulumi.Input

	ToIndexRuleTagKeyValueValuePtrOutput() IndexRuleTagKeyValueValuePtrOutput
	ToIndexRuleTagKeyValueValuePtrOutputWithContext(context.Context) IndexRuleTagKeyValueValuePtrOutput
}

type indexRuleTagKeyValueValuePtrType IndexRuleTagKeyValueValueArgs

func IndexRuleTagKeyValueValuePtr(v *IndexRuleTagKeyValueValueArgs) IndexRuleTagKeyValueValuePtrInput {
	return (*indexRuleTagKeyValueValuePtrType)(v)
}

func (*indexRuleTagKeyValueValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexRuleTagKeyValueValue)(nil)).Elem()
}

func (i *indexRuleTagKeyValueValuePtrType) ToIndexRuleTagKeyValueValuePtrOutput() IndexRuleTagKeyValueValuePtrOutput {
	return i.ToIndexRuleTagKeyValueValuePtrOutputWithContext(context.Background())
}

func (i *indexRuleTagKeyValueValuePtrType) ToIndexRuleTagKeyValueValuePtrOutputWithContext(ctx context.Context) IndexRuleTagKeyValueValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexRuleTagKeyValueValuePtrOutput)
}

type IndexRuleTagKeyValueValueOutput struct{ *pulumi.OutputState }

func (IndexRuleTagKeyValueValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexRuleTagKeyValueValue)(nil)).Elem()
}

func (o IndexRuleTagKeyValueValueOutput) ToIndexRuleTagKeyValueValueOutput() IndexRuleTagKeyValueValueOutput {
	return o
}

func (o IndexRuleTagKeyValueValueOutput) ToIndexRuleTagKeyValueValueOutputWithContext(ctx context.Context) IndexRuleTagKeyValueValueOutput {
	return o
}

func (o IndexRuleTagKeyValueValueOutput) ToIndexRuleTagKeyValueValuePtrOutput() IndexRuleTagKeyValueValuePtrOutput {
	return o.ToIndexRuleTagKeyValueValuePtrOutputWithContext(context.Background())
}

func (o IndexRuleTagKeyValueValueOutput) ToIndexRuleTagKeyValueValuePtrOutputWithContext(ctx context.Context) IndexRuleTagKeyValueValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexRuleTagKeyValueValue) *IndexRuleTagKeyValueValue {
		return &v
	}).(IndexRuleTagKeyValueValuePtrOutput)
}

// Whether Chinese characters are contained.
func (o IndexRuleTagKeyValueValueOutput) ContainZH() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IndexRuleTagKeyValueValue) *bool { return v.ContainZH }).(pulumi.BoolPtrOutput)
}

// Whether the analysis feature is enabled for the field.
func (o IndexRuleTagKeyValueValueOutput) SqlFlag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IndexRuleTagKeyValueValue) *bool { return v.SqlFlag }).(pulumi.BoolPtrOutput)
}

// Field delimiter, which is meaningful only if the field type is text. Each character in the entered string represents a delimiter.
func (o IndexRuleTagKeyValueValueOutput) Tokenizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexRuleTagKeyValueValue) *string { return v.Tokenizer }).(pulumi.StringPtrOutput)
}

// Field type. Valid values: long, text, double.
func (o IndexRuleTagKeyValueValueOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IndexRuleTagKeyValueValue) string { return v.Type }).(pulumi.StringOutput)
}

type IndexRuleTagKeyValueValuePtrOutput struct{ *pulumi.OutputState }

func (IndexRuleTagKeyValueValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexRuleTagKeyValueValue)(nil)).Elem()
}

func (o IndexRuleTagKeyValueValuePtrOutput) ToIndexRuleTagKeyValueValuePtrOutput() IndexRuleTagKeyValueValuePtrOutput {
	return o
}

func (o IndexRuleTagKeyValueValuePtrOutput) ToIndexRuleTagKeyValueValuePtrOutputWithContext(ctx context.Context) IndexRuleTagKeyValueValuePtrOutput {
	return o
}

func (o IndexRuleTagKeyValueValuePtrOutput) Elem() IndexRuleTagKeyValueValueOutput {
	return o.ApplyT(func(v *IndexRuleTagKeyValueValue) IndexRuleTagKeyValueValue {
		if v != nil {
			return *v
		}
		var ret IndexRuleTagKeyValueValue
		return ret
	}).(IndexRuleTagKeyValueValueOutput)
}

// Whether Chinese characters are contained.
func (o IndexRuleTagKeyValueValuePtrOutput) ContainZH() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IndexRuleTagKeyValueValue) *bool {
		if v == nil {
			return nil
		}
		return v.ContainZH
	}).(pulumi.BoolPtrOutput)
}

// Whether the analysis feature is enabled for the field.
func (o IndexRuleTagKeyValueValuePtrOutput) SqlFlag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IndexRuleTagKeyValueValue) *bool {
		if v == nil {
			return nil
		}
		return v.SqlFlag
	}).(pulumi.BoolPtrOutput)
}

// Field delimiter, which is meaningful only if the field type is text. Each character in the entered string represents a delimiter.
func (o IndexRuleTagKeyValueValuePtrOutput) Tokenizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IndexRuleTagKeyValueValue) *string {
		if v == nil {
			return nil
		}
		return v.Tokenizer
	}).(pulumi.StringPtrOutput)
}

// Field type. Valid values: long, text, double.
func (o IndexRuleTagKeyValueValuePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IndexRuleTagKeyValueValue) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type MachineGroupMachineGroupType struct {
	// Machine group type. Valid values: ip: the IP addresses of collection machines are stored in Values of the machine group; label: the tags of the machines are stored in Values of the machine group.
	Type string `pulumi:"type"`
	// Machine description list.
	Values []string `pulumi:"values"`
}

// MachineGroupMachineGroupTypeInput is an input type that accepts MachineGroupMachineGroupTypeArgs and MachineGroupMachineGroupTypeOutput values.
// You can construct a concrete instance of `MachineGroupMachineGroupTypeInput` via:
//
//	MachineGroupMachineGroupTypeArgs{...}
type MachineGroupMachineGroupTypeInput interface {
	pulumi.Input

	ToMachineGroupMachineGroupTypeOutput() MachineGroupMachineGroupTypeOutput
	ToMachineGroupMachineGroupTypeOutputWithContext(context.Context) MachineGroupMachineGroupTypeOutput
}

type MachineGroupMachineGroupTypeArgs struct {
	// Machine group type. Valid values: ip: the IP addresses of collection machines are stored in Values of the machine group; label: the tags of the machines are stored in Values of the machine group.
	Type pulumi.StringInput `pulumi:"type"`
	// Machine description list.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MachineGroupMachineGroupTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineGroupMachineGroupType)(nil)).Elem()
}

func (i MachineGroupMachineGroupTypeArgs) ToMachineGroupMachineGroupTypeOutput() MachineGroupMachineGroupTypeOutput {
	return i.ToMachineGroupMachineGroupTypeOutputWithContext(context.Background())
}

func (i MachineGroupMachineGroupTypeArgs) ToMachineGroupMachineGroupTypeOutputWithContext(ctx context.Context) MachineGroupMachineGroupTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineGroupMachineGroupTypeOutput)
}

func (i MachineGroupMachineGroupTypeArgs) ToMachineGroupMachineGroupTypePtrOutput() MachineGroupMachineGroupTypePtrOutput {
	return i.ToMachineGroupMachineGroupTypePtrOutputWithContext(context.Background())
}

func (i MachineGroupMachineGroupTypeArgs) ToMachineGroupMachineGroupTypePtrOutputWithContext(ctx context.Context) MachineGroupMachineGroupTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineGroupMachineGroupTypeOutput).ToMachineGroupMachineGroupTypePtrOutputWithContext(ctx)
}

// MachineGroupMachineGroupTypePtrInput is an input type that accepts MachineGroupMachineGroupTypeArgs, MachineGroupMachineGroupTypePtr and MachineGroupMachineGroupTypePtrOutput values.
// You can construct a concrete instance of `MachineGroupMachineGroupTypePtrInput` via:
//
//	        MachineGroupMachineGroupTypeArgs{...}
//
//	or:
//
//	        nil
type MachineGroupMachineGroupTypePtrInput interface {
	pulumi.Input

	ToMachineGroupMachineGroupTypePtrOutput() MachineGroupMachineGroupTypePtrOutput
	ToMachineGroupMachineGroupTypePtrOutputWithContext(context.Context) MachineGroupMachineGroupTypePtrOutput
}

type machineGroupMachineGroupTypePtrType MachineGroupMachineGroupTypeArgs

func MachineGroupMachineGroupTypePtr(v *MachineGroupMachineGroupTypeArgs) MachineGroupMachineGroupTypePtrInput {
	return (*machineGroupMachineGroupTypePtrType)(v)
}

func (*machineGroupMachineGroupTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineGroupMachineGroupType)(nil)).Elem()
}

func (i *machineGroupMachineGroupTypePtrType) ToMachineGroupMachineGroupTypePtrOutput() MachineGroupMachineGroupTypePtrOutput {
	return i.ToMachineGroupMachineGroupTypePtrOutputWithContext(context.Background())
}

func (i *machineGroupMachineGroupTypePtrType) ToMachineGroupMachineGroupTypePtrOutputWithContext(ctx context.Context) MachineGroupMachineGroupTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineGroupMachineGroupTypePtrOutput)
}

type MachineGroupMachineGroupTypeOutput struct{ *pulumi.OutputState }

func (MachineGroupMachineGroupTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineGroupMachineGroupType)(nil)).Elem()
}

func (o MachineGroupMachineGroupTypeOutput) ToMachineGroupMachineGroupTypeOutput() MachineGroupMachineGroupTypeOutput {
	return o
}

func (o MachineGroupMachineGroupTypeOutput) ToMachineGroupMachineGroupTypeOutputWithContext(ctx context.Context) MachineGroupMachineGroupTypeOutput {
	return o
}

func (o MachineGroupMachineGroupTypeOutput) ToMachineGroupMachineGroupTypePtrOutput() MachineGroupMachineGroupTypePtrOutput {
	return o.ToMachineGroupMachineGroupTypePtrOutputWithContext(context.Background())
}

func (o MachineGroupMachineGroupTypeOutput) ToMachineGroupMachineGroupTypePtrOutputWithContext(ctx context.Context) MachineGroupMachineGroupTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineGroupMachineGroupType) *MachineGroupMachineGroupType {
		return &v
	}).(MachineGroupMachineGroupTypePtrOutput)
}

// Machine group type. Valid values: ip: the IP addresses of collection machines are stored in Values of the machine group; label: the tags of the machines are stored in Values of the machine group.
func (o MachineGroupMachineGroupTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MachineGroupMachineGroupType) string { return v.Type }).(pulumi.StringOutput)
}

// Machine description list.
func (o MachineGroupMachineGroupTypeOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MachineGroupMachineGroupType) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MachineGroupMachineGroupTypePtrOutput struct{ *pulumi.OutputState }

func (MachineGroupMachineGroupTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineGroupMachineGroupType)(nil)).Elem()
}

func (o MachineGroupMachineGroupTypePtrOutput) ToMachineGroupMachineGroupTypePtrOutput() MachineGroupMachineGroupTypePtrOutput {
	return o
}

func (o MachineGroupMachineGroupTypePtrOutput) ToMachineGroupMachineGroupTypePtrOutputWithContext(ctx context.Context) MachineGroupMachineGroupTypePtrOutput {
	return o
}

func (o MachineGroupMachineGroupTypePtrOutput) Elem() MachineGroupMachineGroupTypeOutput {
	return o.ApplyT(func(v *MachineGroupMachineGroupType) MachineGroupMachineGroupType {
		if v != nil {
			return *v
		}
		var ret MachineGroupMachineGroupType
		return ret
	}).(MachineGroupMachineGroupTypeOutput)
}

// Machine group type. Valid values: ip: the IP addresses of collection machines are stored in Values of the machine group; label: the tags of the machines are stored in Values of the machine group.
func (o MachineGroupMachineGroupTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineGroupMachineGroupType) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Machine description list.
func (o MachineGroupMachineGroupTypePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MachineGroupMachineGroupType) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExcludePathInput)(nil)).Elem(), ConfigExcludePathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExcludePathArrayInput)(nil)).Elem(), ConfigExcludePathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtraContainerFileInput)(nil)).Elem(), ConfigExtraContainerFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtraContainerFilePtrInput)(nil)).Elem(), ConfigExtraContainerFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtraContainerFileWorkloadInput)(nil)).Elem(), ConfigExtraContainerFileWorkloadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtraContainerFileWorkloadPtrInput)(nil)).Elem(), ConfigExtraContainerFileWorkloadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtraContainerStdoutInput)(nil)).Elem(), ConfigExtraContainerStdoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtraContainerStdoutPtrInput)(nil)).Elem(), ConfigExtraContainerStdoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtraContainerStdoutWorkloadInput)(nil)).Elem(), ConfigExtraContainerStdoutWorkloadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtraContainerStdoutWorkloadArrayInput)(nil)).Elem(), ConfigExtraContainerStdoutWorkloadArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtraExcludePathInput)(nil)).Elem(), ConfigExtraExcludePathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtraExcludePathArrayInput)(nil)).Elem(), ConfigExtraExcludePathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtraExtractRuleInput)(nil)).Elem(), ConfigExtraExtractRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtraExtractRulePtrInput)(nil)).Elem(), ConfigExtraExtractRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtraExtractRuleFilterKeyRegexInput)(nil)).Elem(), ConfigExtraExtractRuleFilterKeyRegexArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtraExtractRuleFilterKeyRegexArrayInput)(nil)).Elem(), ConfigExtraExtractRuleFilterKeyRegexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtraHostFileInput)(nil)).Elem(), ConfigExtraHostFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtraHostFilePtrInput)(nil)).Elem(), ConfigExtraHostFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtractRuleInput)(nil)).Elem(), ConfigExtractRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtractRulePtrInput)(nil)).Elem(), ConfigExtractRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtractRuleFilterKeyRegexInput)(nil)).Elem(), ConfigExtractRuleFilterKeyRegexArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigExtractRuleFilterKeyRegexArrayInput)(nil)).Elem(), ConfigExtractRuleFilterKeyRegexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CosShipperCompressInput)(nil)).Elem(), CosShipperCompressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CosShipperCompressPtrInput)(nil)).Elem(), CosShipperCompressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CosShipperContentInput)(nil)).Elem(), CosShipperContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CosShipperContentPtrInput)(nil)).Elem(), CosShipperContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CosShipperContentCsvInput)(nil)).Elem(), CosShipperContentCsvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CosShipperContentCsvPtrInput)(nil)).Elem(), CosShipperContentCsvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CosShipperContentJsonInput)(nil)).Elem(), CosShipperContentJsonArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CosShipperContentJsonPtrInput)(nil)).Elem(), CosShipperContentJsonArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CosShipperFilterRuleInput)(nil)).Elem(), CosShipperFilterRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CosShipperFilterRuleArrayInput)(nil)).Elem(), CosShipperFilterRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexRuleInput)(nil)).Elem(), IndexRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexRulePtrInput)(nil)).Elem(), IndexRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexRuleFullTextInput)(nil)).Elem(), IndexRuleFullTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexRuleFullTextPtrInput)(nil)).Elem(), IndexRuleFullTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexRuleKeyValueInput)(nil)).Elem(), IndexRuleKeyValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexRuleKeyValuePtrInput)(nil)).Elem(), IndexRuleKeyValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexRuleKeyValueKeyValueInput)(nil)).Elem(), IndexRuleKeyValueKeyValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexRuleKeyValueKeyValueArrayInput)(nil)).Elem(), IndexRuleKeyValueKeyValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexRuleKeyValueKeyValueValueInput)(nil)).Elem(), IndexRuleKeyValueKeyValueValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexRuleKeyValueKeyValueValuePtrInput)(nil)).Elem(), IndexRuleKeyValueKeyValueValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexRuleTagInput)(nil)).Elem(), IndexRuleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexRuleTagPtrInput)(nil)).Elem(), IndexRuleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexRuleTagKeyValueInput)(nil)).Elem(), IndexRuleTagKeyValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexRuleTagKeyValueArrayInput)(nil)).Elem(), IndexRuleTagKeyValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexRuleTagKeyValueValueInput)(nil)).Elem(), IndexRuleTagKeyValueValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexRuleTagKeyValueValuePtrInput)(nil)).Elem(), IndexRuleTagKeyValueValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineGroupMachineGroupTypeInput)(nil)).Elem(), MachineGroupMachineGroupTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineGroupMachineGroupTypePtrInput)(nil)).Elem(), MachineGroupMachineGroupTypeArgs{})
	pulumi.RegisterOutputType(ConfigExcludePathOutput{})
	pulumi.RegisterOutputType(ConfigExcludePathArrayOutput{})
	pulumi.RegisterOutputType(ConfigExtraContainerFileOutput{})
	pulumi.RegisterOutputType(ConfigExtraContainerFilePtrOutput{})
	pulumi.RegisterOutputType(ConfigExtraContainerFileWorkloadOutput{})
	pulumi.RegisterOutputType(ConfigExtraContainerFileWorkloadPtrOutput{})
	pulumi.RegisterOutputType(ConfigExtraContainerStdoutOutput{})
	pulumi.RegisterOutputType(ConfigExtraContainerStdoutPtrOutput{})
	pulumi.RegisterOutputType(ConfigExtraContainerStdoutWorkloadOutput{})
	pulumi.RegisterOutputType(ConfigExtraContainerStdoutWorkloadArrayOutput{})
	pulumi.RegisterOutputType(ConfigExtraExcludePathOutput{})
	pulumi.RegisterOutputType(ConfigExtraExcludePathArrayOutput{})
	pulumi.RegisterOutputType(ConfigExtraExtractRuleOutput{})
	pulumi.RegisterOutputType(ConfigExtraExtractRulePtrOutput{})
	pulumi.RegisterOutputType(ConfigExtraExtractRuleFilterKeyRegexOutput{})
	pulumi.RegisterOutputType(ConfigExtraExtractRuleFilterKeyRegexArrayOutput{})
	pulumi.RegisterOutputType(ConfigExtraHostFileOutput{})
	pulumi.RegisterOutputType(ConfigExtraHostFilePtrOutput{})
	pulumi.RegisterOutputType(ConfigExtractRuleOutput{})
	pulumi.RegisterOutputType(ConfigExtractRulePtrOutput{})
	pulumi.RegisterOutputType(ConfigExtractRuleFilterKeyRegexOutput{})
	pulumi.RegisterOutputType(ConfigExtractRuleFilterKeyRegexArrayOutput{})
	pulumi.RegisterOutputType(CosShipperCompressOutput{})
	pulumi.RegisterOutputType(CosShipperCompressPtrOutput{})
	pulumi.RegisterOutputType(CosShipperContentOutput{})
	pulumi.RegisterOutputType(CosShipperContentPtrOutput{})
	pulumi.RegisterOutputType(CosShipperContentCsvOutput{})
	pulumi.RegisterOutputType(CosShipperContentCsvPtrOutput{})
	pulumi.RegisterOutputType(CosShipperContentJsonOutput{})
	pulumi.RegisterOutputType(CosShipperContentJsonPtrOutput{})
	pulumi.RegisterOutputType(CosShipperFilterRuleOutput{})
	pulumi.RegisterOutputType(CosShipperFilterRuleArrayOutput{})
	pulumi.RegisterOutputType(IndexRuleOutput{})
	pulumi.RegisterOutputType(IndexRulePtrOutput{})
	pulumi.RegisterOutputType(IndexRuleFullTextOutput{})
	pulumi.RegisterOutputType(IndexRuleFullTextPtrOutput{})
	pulumi.RegisterOutputType(IndexRuleKeyValueOutput{})
	pulumi.RegisterOutputType(IndexRuleKeyValuePtrOutput{})
	pulumi.RegisterOutputType(IndexRuleKeyValueKeyValueOutput{})
	pulumi.RegisterOutputType(IndexRuleKeyValueKeyValueArrayOutput{})
	pulumi.RegisterOutputType(IndexRuleKeyValueKeyValueValueOutput{})
	pulumi.RegisterOutputType(IndexRuleKeyValueKeyValueValuePtrOutput{})
	pulumi.RegisterOutputType(IndexRuleTagOutput{})
	pulumi.RegisterOutputType(IndexRuleTagPtrOutput{})
	pulumi.RegisterOutputType(IndexRuleTagKeyValueOutput{})
	pulumi.RegisterOutputType(IndexRuleTagKeyValueArrayOutput{})
	pulumi.RegisterOutputType(IndexRuleTagKeyValueValueOutput{})
	pulumi.RegisterOutputType(IndexRuleTagKeyValueValuePtrOutput{})
	pulumi.RegisterOutputType(MachineGroupMachineGroupTypeOutput{})
	pulumi.RegisterOutputType(MachineGroupMachineGroupTypePtrOutput{})
}
