// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventTargetTargetDescription struct {
	// Ckafka parameters.
	CkafkaTargetParams *EventTargetTargetDescriptionCkafkaTargetParams `pulumi:"ckafkaTargetParams"`
	// ElasticSearch parameters.
	EsTargetParams *EventTargetTargetDescriptionEsTargetParams `pulumi:"esTargetParams"`
	// QCS resource six-stage format, more references [resource six-stage format](https://cloud.tencent.com/document/product/598/10606).
	ResourceDescription string `pulumi:"resourceDescription"`
	// cloud function parameters.
	ScfParams *EventTargetTargetDescriptionScfParams `pulumi:"scfParams"`
}

// EventTargetTargetDescriptionInput is an input type that accepts EventTargetTargetDescriptionArgs and EventTargetTargetDescriptionOutput values.
// You can construct a concrete instance of `EventTargetTargetDescriptionInput` via:
//
//          EventTargetTargetDescriptionArgs{...}
type EventTargetTargetDescriptionInput interface {
	pulumi.Input

	ToEventTargetTargetDescriptionOutput() EventTargetTargetDescriptionOutput
	ToEventTargetTargetDescriptionOutputWithContext(context.Context) EventTargetTargetDescriptionOutput
}

type EventTargetTargetDescriptionArgs struct {
	// Ckafka parameters.
	CkafkaTargetParams EventTargetTargetDescriptionCkafkaTargetParamsPtrInput `pulumi:"ckafkaTargetParams"`
	// ElasticSearch parameters.
	EsTargetParams EventTargetTargetDescriptionEsTargetParamsPtrInput `pulumi:"esTargetParams"`
	// QCS resource six-stage format, more references [resource six-stage format](https://cloud.tencent.com/document/product/598/10606).
	ResourceDescription pulumi.StringInput `pulumi:"resourceDescription"`
	// cloud function parameters.
	ScfParams EventTargetTargetDescriptionScfParamsPtrInput `pulumi:"scfParams"`
}

func (EventTargetTargetDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetTargetDescription)(nil)).Elem()
}

func (i EventTargetTargetDescriptionArgs) ToEventTargetTargetDescriptionOutput() EventTargetTargetDescriptionOutput {
	return i.ToEventTargetTargetDescriptionOutputWithContext(context.Background())
}

func (i EventTargetTargetDescriptionArgs) ToEventTargetTargetDescriptionOutputWithContext(ctx context.Context) EventTargetTargetDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetTargetDescriptionOutput)
}

func (i EventTargetTargetDescriptionArgs) ToEventTargetTargetDescriptionPtrOutput() EventTargetTargetDescriptionPtrOutput {
	return i.ToEventTargetTargetDescriptionPtrOutputWithContext(context.Background())
}

func (i EventTargetTargetDescriptionArgs) ToEventTargetTargetDescriptionPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetTargetDescriptionOutput).ToEventTargetTargetDescriptionPtrOutputWithContext(ctx)
}

// EventTargetTargetDescriptionPtrInput is an input type that accepts EventTargetTargetDescriptionArgs, EventTargetTargetDescriptionPtr and EventTargetTargetDescriptionPtrOutput values.
// You can construct a concrete instance of `EventTargetTargetDescriptionPtrInput` via:
//
//          EventTargetTargetDescriptionArgs{...}
//
//  or:
//
//          nil
type EventTargetTargetDescriptionPtrInput interface {
	pulumi.Input

	ToEventTargetTargetDescriptionPtrOutput() EventTargetTargetDescriptionPtrOutput
	ToEventTargetTargetDescriptionPtrOutputWithContext(context.Context) EventTargetTargetDescriptionPtrOutput
}

type eventTargetTargetDescriptionPtrType EventTargetTargetDescriptionArgs

func EventTargetTargetDescriptionPtr(v *EventTargetTargetDescriptionArgs) EventTargetTargetDescriptionPtrInput {
	return (*eventTargetTargetDescriptionPtrType)(v)
}

func (*eventTargetTargetDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetTargetDescription)(nil)).Elem()
}

func (i *eventTargetTargetDescriptionPtrType) ToEventTargetTargetDescriptionPtrOutput() EventTargetTargetDescriptionPtrOutput {
	return i.ToEventTargetTargetDescriptionPtrOutputWithContext(context.Background())
}

func (i *eventTargetTargetDescriptionPtrType) ToEventTargetTargetDescriptionPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetTargetDescriptionPtrOutput)
}

type EventTargetTargetDescriptionOutput struct{ *pulumi.OutputState }

func (EventTargetTargetDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetTargetDescription)(nil)).Elem()
}

func (o EventTargetTargetDescriptionOutput) ToEventTargetTargetDescriptionOutput() EventTargetTargetDescriptionOutput {
	return o
}

func (o EventTargetTargetDescriptionOutput) ToEventTargetTargetDescriptionOutputWithContext(ctx context.Context) EventTargetTargetDescriptionOutput {
	return o
}

func (o EventTargetTargetDescriptionOutput) ToEventTargetTargetDescriptionPtrOutput() EventTargetTargetDescriptionPtrOutput {
	return o.ToEventTargetTargetDescriptionPtrOutputWithContext(context.Background())
}

func (o EventTargetTargetDescriptionOutput) ToEventTargetTargetDescriptionPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventTargetTargetDescription) *EventTargetTargetDescription {
		return &v
	}).(EventTargetTargetDescriptionPtrOutput)
}

// Ckafka parameters.
func (o EventTargetTargetDescriptionOutput) CkafkaTargetParams() EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput {
	return o.ApplyT(func(v EventTargetTargetDescription) *EventTargetTargetDescriptionCkafkaTargetParams {
		return v.CkafkaTargetParams
	}).(EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput)
}

// ElasticSearch parameters.
func (o EventTargetTargetDescriptionOutput) EsTargetParams() EventTargetTargetDescriptionEsTargetParamsPtrOutput {
	return o.ApplyT(func(v EventTargetTargetDescription) *EventTargetTargetDescriptionEsTargetParams {
		return v.EsTargetParams
	}).(EventTargetTargetDescriptionEsTargetParamsPtrOutput)
}

// QCS resource six-stage format, more references [resource six-stage format](https://cloud.tencent.com/document/product/598/10606).
func (o EventTargetTargetDescriptionOutput) ResourceDescription() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetTargetDescription) string { return v.ResourceDescription }).(pulumi.StringOutput)
}

// cloud function parameters.
func (o EventTargetTargetDescriptionOutput) ScfParams() EventTargetTargetDescriptionScfParamsPtrOutput {
	return o.ApplyT(func(v EventTargetTargetDescription) *EventTargetTargetDescriptionScfParams { return v.ScfParams }).(EventTargetTargetDescriptionScfParamsPtrOutput)
}

type EventTargetTargetDescriptionPtrOutput struct{ *pulumi.OutputState }

func (EventTargetTargetDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetTargetDescription)(nil)).Elem()
}

func (o EventTargetTargetDescriptionPtrOutput) ToEventTargetTargetDescriptionPtrOutput() EventTargetTargetDescriptionPtrOutput {
	return o
}

func (o EventTargetTargetDescriptionPtrOutput) ToEventTargetTargetDescriptionPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionPtrOutput {
	return o
}

func (o EventTargetTargetDescriptionPtrOutput) Elem() EventTargetTargetDescriptionOutput {
	return o.ApplyT(func(v *EventTargetTargetDescription) EventTargetTargetDescription {
		if v != nil {
			return *v
		}
		var ret EventTargetTargetDescription
		return ret
	}).(EventTargetTargetDescriptionOutput)
}

// Ckafka parameters.
func (o EventTargetTargetDescriptionPtrOutput) CkafkaTargetParams() EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescription) *EventTargetTargetDescriptionCkafkaTargetParams {
		if v == nil {
			return nil
		}
		return v.CkafkaTargetParams
	}).(EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput)
}

// ElasticSearch parameters.
func (o EventTargetTargetDescriptionPtrOutput) EsTargetParams() EventTargetTargetDescriptionEsTargetParamsPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescription) *EventTargetTargetDescriptionEsTargetParams {
		if v == nil {
			return nil
		}
		return v.EsTargetParams
	}).(EventTargetTargetDescriptionEsTargetParamsPtrOutput)
}

// QCS resource six-stage format, more references [resource six-stage format](https://cloud.tencent.com/document/product/598/10606).
func (o EventTargetTargetDescriptionPtrOutput) ResourceDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescription) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceDescription
	}).(pulumi.StringPtrOutput)
}

// cloud function parameters.
func (o EventTargetTargetDescriptionPtrOutput) ScfParams() EventTargetTargetDescriptionScfParamsPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescription) *EventTargetTargetDescriptionScfParams {
		if v == nil {
			return nil
		}
		return v.ScfParams
	}).(EventTargetTargetDescriptionScfParamsPtrOutput)
}

type EventTargetTargetDescriptionCkafkaTargetParams struct {
	// retry strategy.
	RetryPolicy EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy `pulumi:"retryPolicy"`
	// The ckafka topic to deliver to.
	TopicName string `pulumi:"topicName"`
}

// EventTargetTargetDescriptionCkafkaTargetParamsInput is an input type that accepts EventTargetTargetDescriptionCkafkaTargetParamsArgs and EventTargetTargetDescriptionCkafkaTargetParamsOutput values.
// You can construct a concrete instance of `EventTargetTargetDescriptionCkafkaTargetParamsInput` via:
//
//          EventTargetTargetDescriptionCkafkaTargetParamsArgs{...}
type EventTargetTargetDescriptionCkafkaTargetParamsInput interface {
	pulumi.Input

	ToEventTargetTargetDescriptionCkafkaTargetParamsOutput() EventTargetTargetDescriptionCkafkaTargetParamsOutput
	ToEventTargetTargetDescriptionCkafkaTargetParamsOutputWithContext(context.Context) EventTargetTargetDescriptionCkafkaTargetParamsOutput
}

type EventTargetTargetDescriptionCkafkaTargetParamsArgs struct {
	// retry strategy.
	RetryPolicy EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyInput `pulumi:"retryPolicy"`
	// The ckafka topic to deliver to.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (EventTargetTargetDescriptionCkafkaTargetParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetTargetDescriptionCkafkaTargetParams)(nil)).Elem()
}

func (i EventTargetTargetDescriptionCkafkaTargetParamsArgs) ToEventTargetTargetDescriptionCkafkaTargetParamsOutput() EventTargetTargetDescriptionCkafkaTargetParamsOutput {
	return i.ToEventTargetTargetDescriptionCkafkaTargetParamsOutputWithContext(context.Background())
}

func (i EventTargetTargetDescriptionCkafkaTargetParamsArgs) ToEventTargetTargetDescriptionCkafkaTargetParamsOutputWithContext(ctx context.Context) EventTargetTargetDescriptionCkafkaTargetParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetTargetDescriptionCkafkaTargetParamsOutput)
}

func (i EventTargetTargetDescriptionCkafkaTargetParamsArgs) ToEventTargetTargetDescriptionCkafkaTargetParamsPtrOutput() EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput {
	return i.ToEventTargetTargetDescriptionCkafkaTargetParamsPtrOutputWithContext(context.Background())
}

func (i EventTargetTargetDescriptionCkafkaTargetParamsArgs) ToEventTargetTargetDescriptionCkafkaTargetParamsPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetTargetDescriptionCkafkaTargetParamsOutput).ToEventTargetTargetDescriptionCkafkaTargetParamsPtrOutputWithContext(ctx)
}

// EventTargetTargetDescriptionCkafkaTargetParamsPtrInput is an input type that accepts EventTargetTargetDescriptionCkafkaTargetParamsArgs, EventTargetTargetDescriptionCkafkaTargetParamsPtr and EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput values.
// You can construct a concrete instance of `EventTargetTargetDescriptionCkafkaTargetParamsPtrInput` via:
//
//          EventTargetTargetDescriptionCkafkaTargetParamsArgs{...}
//
//  or:
//
//          nil
type EventTargetTargetDescriptionCkafkaTargetParamsPtrInput interface {
	pulumi.Input

	ToEventTargetTargetDescriptionCkafkaTargetParamsPtrOutput() EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput
	ToEventTargetTargetDescriptionCkafkaTargetParamsPtrOutputWithContext(context.Context) EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput
}

type eventTargetTargetDescriptionCkafkaTargetParamsPtrType EventTargetTargetDescriptionCkafkaTargetParamsArgs

func EventTargetTargetDescriptionCkafkaTargetParamsPtr(v *EventTargetTargetDescriptionCkafkaTargetParamsArgs) EventTargetTargetDescriptionCkafkaTargetParamsPtrInput {
	return (*eventTargetTargetDescriptionCkafkaTargetParamsPtrType)(v)
}

func (*eventTargetTargetDescriptionCkafkaTargetParamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetTargetDescriptionCkafkaTargetParams)(nil)).Elem()
}

func (i *eventTargetTargetDescriptionCkafkaTargetParamsPtrType) ToEventTargetTargetDescriptionCkafkaTargetParamsPtrOutput() EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput {
	return i.ToEventTargetTargetDescriptionCkafkaTargetParamsPtrOutputWithContext(context.Background())
}

func (i *eventTargetTargetDescriptionCkafkaTargetParamsPtrType) ToEventTargetTargetDescriptionCkafkaTargetParamsPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput)
}

type EventTargetTargetDescriptionCkafkaTargetParamsOutput struct{ *pulumi.OutputState }

func (EventTargetTargetDescriptionCkafkaTargetParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetTargetDescriptionCkafkaTargetParams)(nil)).Elem()
}

func (o EventTargetTargetDescriptionCkafkaTargetParamsOutput) ToEventTargetTargetDescriptionCkafkaTargetParamsOutput() EventTargetTargetDescriptionCkafkaTargetParamsOutput {
	return o
}

func (o EventTargetTargetDescriptionCkafkaTargetParamsOutput) ToEventTargetTargetDescriptionCkafkaTargetParamsOutputWithContext(ctx context.Context) EventTargetTargetDescriptionCkafkaTargetParamsOutput {
	return o
}

func (o EventTargetTargetDescriptionCkafkaTargetParamsOutput) ToEventTargetTargetDescriptionCkafkaTargetParamsPtrOutput() EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput {
	return o.ToEventTargetTargetDescriptionCkafkaTargetParamsPtrOutputWithContext(context.Background())
}

func (o EventTargetTargetDescriptionCkafkaTargetParamsOutput) ToEventTargetTargetDescriptionCkafkaTargetParamsPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventTargetTargetDescriptionCkafkaTargetParams) *EventTargetTargetDescriptionCkafkaTargetParams {
		return &v
	}).(EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput)
}

// retry strategy.
func (o EventTargetTargetDescriptionCkafkaTargetParamsOutput) RetryPolicy() EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput {
	return o.ApplyT(func(v EventTargetTargetDescriptionCkafkaTargetParams) EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy {
		return v.RetryPolicy
	}).(EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput)
}

// The ckafka topic to deliver to.
func (o EventTargetTargetDescriptionCkafkaTargetParamsOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetTargetDescriptionCkafkaTargetParams) string { return v.TopicName }).(pulumi.StringOutput)
}

type EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput struct{ *pulumi.OutputState }

func (EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetTargetDescriptionCkafkaTargetParams)(nil)).Elem()
}

func (o EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput) ToEventTargetTargetDescriptionCkafkaTargetParamsPtrOutput() EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput {
	return o
}

func (o EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput) ToEventTargetTargetDescriptionCkafkaTargetParamsPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput {
	return o
}

func (o EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput) Elem() EventTargetTargetDescriptionCkafkaTargetParamsOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionCkafkaTargetParams) EventTargetTargetDescriptionCkafkaTargetParams {
		if v != nil {
			return *v
		}
		var ret EventTargetTargetDescriptionCkafkaTargetParams
		return ret
	}).(EventTargetTargetDescriptionCkafkaTargetParamsOutput)
}

// retry strategy.
func (o EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput) RetryPolicy() EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionCkafkaTargetParams) *EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy {
		if v == nil {
			return nil
		}
		return &v.RetryPolicy
	}).(EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput)
}

// The ckafka topic to deliver to.
func (o EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionCkafkaTargetParams) *string {
		if v == nil {
			return nil
		}
		return &v.TopicName
	}).(pulumi.StringPtrOutput)
}

type EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy struct {
	// Maximum number of retries.
	MaxRetryAttempts int `pulumi:"maxRetryAttempts"`
	// Retry Interval Unit: Seconds.
	RetryInterval int `pulumi:"retryInterval"`
}

// EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyInput is an input type that accepts EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs and EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput values.
// You can construct a concrete instance of `EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyInput` via:
//
//          EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs{...}
type EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyInput interface {
	pulumi.Input

	ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput() EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput
	ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutputWithContext(context.Context) EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput
}

type EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs struct {
	// Maximum number of retries.
	MaxRetryAttempts pulumi.IntInput `pulumi:"maxRetryAttempts"`
	// Retry Interval Unit: Seconds.
	RetryInterval pulumi.IntInput `pulumi:"retryInterval"`
}

func (EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy)(nil)).Elem()
}

func (i EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs) ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput() EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput {
	return i.ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutputWithContext(context.Background())
}

func (i EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs) ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutputWithContext(ctx context.Context) EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput)
}

func (i EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs) ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput() EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput {
	return i.ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutputWithContext(context.Background())
}

func (i EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs) ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput).ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutputWithContext(ctx)
}

// EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrInput is an input type that accepts EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs, EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtr and EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput values.
// You can construct a concrete instance of `EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrInput` via:
//
//          EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs{...}
//
//  or:
//
//          nil
type EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrInput interface {
	pulumi.Input

	ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput() EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput
	ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutputWithContext(context.Context) EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput
}

type eventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrType EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs

func EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtr(v *EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs) EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrInput {
	return (*eventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrType)(v)
}

func (*eventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy)(nil)).Elem()
}

func (i *eventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrType) ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput() EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput {
	return i.ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *eventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrType) ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput)
}

type EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput struct{ *pulumi.OutputState }

func (EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy)(nil)).Elem()
}

func (o EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput) ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput() EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput {
	return o
}

func (o EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput) ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutputWithContext(ctx context.Context) EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput {
	return o
}

func (o EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput) ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput() EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput {
	return o.ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutputWithContext(context.Background())
}

func (o EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput) ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy) *EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy {
		return &v
	}).(EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput)
}

// Maximum number of retries.
func (o EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput) MaxRetryAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy) int { return v.MaxRetryAttempts }).(pulumi.IntOutput)
}

// Retry Interval Unit: Seconds.
func (o EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput) RetryInterval() pulumi.IntOutput {
	return o.ApplyT(func(v EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy) int { return v.RetryInterval }).(pulumi.IntOutput)
}

type EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy)(nil)).Elem()
}

func (o EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput) ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput() EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput {
	return o
}

func (o EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput) ToEventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput {
	return o
}

func (o EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput) Elem() EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy) EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy {
		if v != nil {
			return *v
		}
		var ret EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy
		return ret
	}).(EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput)
}

// Maximum number of retries.
func (o EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput) MaxRetryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MaxRetryAttempts
	}).(pulumi.IntPtrOutput)
}

// Retry Interval Unit: Seconds.
func (o EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput) RetryInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.RetryInterval
	}).(pulumi.IntPtrOutput)
}

type EventTargetTargetDescriptionEsTargetParams struct {
	// index prefix.
	IndexPrefix string `pulumi:"indexPrefix"`
	// DTS index configuration.
	IndexSuffixMode string `pulumi:"indexSuffixMode"`
	// es template type.
	IndexTemplateType *string `pulumi:"indexTemplateType"`
	// network connection type.
	NetMode string `pulumi:"netMode"`
	// DTS event configuration.
	OutputMode string `pulumi:"outputMode"`
	// es log rotation granularity.
	RotationInterval string `pulumi:"rotationInterval"`
}

// EventTargetTargetDescriptionEsTargetParamsInput is an input type that accepts EventTargetTargetDescriptionEsTargetParamsArgs and EventTargetTargetDescriptionEsTargetParamsOutput values.
// You can construct a concrete instance of `EventTargetTargetDescriptionEsTargetParamsInput` via:
//
//          EventTargetTargetDescriptionEsTargetParamsArgs{...}
type EventTargetTargetDescriptionEsTargetParamsInput interface {
	pulumi.Input

	ToEventTargetTargetDescriptionEsTargetParamsOutput() EventTargetTargetDescriptionEsTargetParamsOutput
	ToEventTargetTargetDescriptionEsTargetParamsOutputWithContext(context.Context) EventTargetTargetDescriptionEsTargetParamsOutput
}

type EventTargetTargetDescriptionEsTargetParamsArgs struct {
	// index prefix.
	IndexPrefix pulumi.StringInput `pulumi:"indexPrefix"`
	// DTS index configuration.
	IndexSuffixMode pulumi.StringInput `pulumi:"indexSuffixMode"`
	// es template type.
	IndexTemplateType pulumi.StringPtrInput `pulumi:"indexTemplateType"`
	// network connection type.
	NetMode pulumi.StringInput `pulumi:"netMode"`
	// DTS event configuration.
	OutputMode pulumi.StringInput `pulumi:"outputMode"`
	// es log rotation granularity.
	RotationInterval pulumi.StringInput `pulumi:"rotationInterval"`
}

func (EventTargetTargetDescriptionEsTargetParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetTargetDescriptionEsTargetParams)(nil)).Elem()
}

func (i EventTargetTargetDescriptionEsTargetParamsArgs) ToEventTargetTargetDescriptionEsTargetParamsOutput() EventTargetTargetDescriptionEsTargetParamsOutput {
	return i.ToEventTargetTargetDescriptionEsTargetParamsOutputWithContext(context.Background())
}

func (i EventTargetTargetDescriptionEsTargetParamsArgs) ToEventTargetTargetDescriptionEsTargetParamsOutputWithContext(ctx context.Context) EventTargetTargetDescriptionEsTargetParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetTargetDescriptionEsTargetParamsOutput)
}

func (i EventTargetTargetDescriptionEsTargetParamsArgs) ToEventTargetTargetDescriptionEsTargetParamsPtrOutput() EventTargetTargetDescriptionEsTargetParamsPtrOutput {
	return i.ToEventTargetTargetDescriptionEsTargetParamsPtrOutputWithContext(context.Background())
}

func (i EventTargetTargetDescriptionEsTargetParamsArgs) ToEventTargetTargetDescriptionEsTargetParamsPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionEsTargetParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetTargetDescriptionEsTargetParamsOutput).ToEventTargetTargetDescriptionEsTargetParamsPtrOutputWithContext(ctx)
}

// EventTargetTargetDescriptionEsTargetParamsPtrInput is an input type that accepts EventTargetTargetDescriptionEsTargetParamsArgs, EventTargetTargetDescriptionEsTargetParamsPtr and EventTargetTargetDescriptionEsTargetParamsPtrOutput values.
// You can construct a concrete instance of `EventTargetTargetDescriptionEsTargetParamsPtrInput` via:
//
//          EventTargetTargetDescriptionEsTargetParamsArgs{...}
//
//  or:
//
//          nil
type EventTargetTargetDescriptionEsTargetParamsPtrInput interface {
	pulumi.Input

	ToEventTargetTargetDescriptionEsTargetParamsPtrOutput() EventTargetTargetDescriptionEsTargetParamsPtrOutput
	ToEventTargetTargetDescriptionEsTargetParamsPtrOutputWithContext(context.Context) EventTargetTargetDescriptionEsTargetParamsPtrOutput
}

type eventTargetTargetDescriptionEsTargetParamsPtrType EventTargetTargetDescriptionEsTargetParamsArgs

func EventTargetTargetDescriptionEsTargetParamsPtr(v *EventTargetTargetDescriptionEsTargetParamsArgs) EventTargetTargetDescriptionEsTargetParamsPtrInput {
	return (*eventTargetTargetDescriptionEsTargetParamsPtrType)(v)
}

func (*eventTargetTargetDescriptionEsTargetParamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetTargetDescriptionEsTargetParams)(nil)).Elem()
}

func (i *eventTargetTargetDescriptionEsTargetParamsPtrType) ToEventTargetTargetDescriptionEsTargetParamsPtrOutput() EventTargetTargetDescriptionEsTargetParamsPtrOutput {
	return i.ToEventTargetTargetDescriptionEsTargetParamsPtrOutputWithContext(context.Background())
}

func (i *eventTargetTargetDescriptionEsTargetParamsPtrType) ToEventTargetTargetDescriptionEsTargetParamsPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionEsTargetParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetTargetDescriptionEsTargetParamsPtrOutput)
}

type EventTargetTargetDescriptionEsTargetParamsOutput struct{ *pulumi.OutputState }

func (EventTargetTargetDescriptionEsTargetParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetTargetDescriptionEsTargetParams)(nil)).Elem()
}

func (o EventTargetTargetDescriptionEsTargetParamsOutput) ToEventTargetTargetDescriptionEsTargetParamsOutput() EventTargetTargetDescriptionEsTargetParamsOutput {
	return o
}

func (o EventTargetTargetDescriptionEsTargetParamsOutput) ToEventTargetTargetDescriptionEsTargetParamsOutputWithContext(ctx context.Context) EventTargetTargetDescriptionEsTargetParamsOutput {
	return o
}

func (o EventTargetTargetDescriptionEsTargetParamsOutput) ToEventTargetTargetDescriptionEsTargetParamsPtrOutput() EventTargetTargetDescriptionEsTargetParamsPtrOutput {
	return o.ToEventTargetTargetDescriptionEsTargetParamsPtrOutputWithContext(context.Background())
}

func (o EventTargetTargetDescriptionEsTargetParamsOutput) ToEventTargetTargetDescriptionEsTargetParamsPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionEsTargetParamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventTargetTargetDescriptionEsTargetParams) *EventTargetTargetDescriptionEsTargetParams {
		return &v
	}).(EventTargetTargetDescriptionEsTargetParamsPtrOutput)
}

// index prefix.
func (o EventTargetTargetDescriptionEsTargetParamsOutput) IndexPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetTargetDescriptionEsTargetParams) string { return v.IndexPrefix }).(pulumi.StringOutput)
}

// DTS index configuration.
func (o EventTargetTargetDescriptionEsTargetParamsOutput) IndexSuffixMode() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetTargetDescriptionEsTargetParams) string { return v.IndexSuffixMode }).(pulumi.StringOutput)
}

// es template type.
func (o EventTargetTargetDescriptionEsTargetParamsOutput) IndexTemplateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTargetTargetDescriptionEsTargetParams) *string { return v.IndexTemplateType }).(pulumi.StringPtrOutput)
}

// network connection type.
func (o EventTargetTargetDescriptionEsTargetParamsOutput) NetMode() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetTargetDescriptionEsTargetParams) string { return v.NetMode }).(pulumi.StringOutput)
}

// DTS event configuration.
func (o EventTargetTargetDescriptionEsTargetParamsOutput) OutputMode() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetTargetDescriptionEsTargetParams) string { return v.OutputMode }).(pulumi.StringOutput)
}

// es log rotation granularity.
func (o EventTargetTargetDescriptionEsTargetParamsOutput) RotationInterval() pulumi.StringOutput {
	return o.ApplyT(func(v EventTargetTargetDescriptionEsTargetParams) string { return v.RotationInterval }).(pulumi.StringOutput)
}

type EventTargetTargetDescriptionEsTargetParamsPtrOutput struct{ *pulumi.OutputState }

func (EventTargetTargetDescriptionEsTargetParamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetTargetDescriptionEsTargetParams)(nil)).Elem()
}

func (o EventTargetTargetDescriptionEsTargetParamsPtrOutput) ToEventTargetTargetDescriptionEsTargetParamsPtrOutput() EventTargetTargetDescriptionEsTargetParamsPtrOutput {
	return o
}

func (o EventTargetTargetDescriptionEsTargetParamsPtrOutput) ToEventTargetTargetDescriptionEsTargetParamsPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionEsTargetParamsPtrOutput {
	return o
}

func (o EventTargetTargetDescriptionEsTargetParamsPtrOutput) Elem() EventTargetTargetDescriptionEsTargetParamsOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionEsTargetParams) EventTargetTargetDescriptionEsTargetParams {
		if v != nil {
			return *v
		}
		var ret EventTargetTargetDescriptionEsTargetParams
		return ret
	}).(EventTargetTargetDescriptionEsTargetParamsOutput)
}

// index prefix.
func (o EventTargetTargetDescriptionEsTargetParamsPtrOutput) IndexPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionEsTargetParams) *string {
		if v == nil {
			return nil
		}
		return &v.IndexPrefix
	}).(pulumi.StringPtrOutput)
}

// DTS index configuration.
func (o EventTargetTargetDescriptionEsTargetParamsPtrOutput) IndexSuffixMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionEsTargetParams) *string {
		if v == nil {
			return nil
		}
		return &v.IndexSuffixMode
	}).(pulumi.StringPtrOutput)
}

// es template type.
func (o EventTargetTargetDescriptionEsTargetParamsPtrOutput) IndexTemplateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionEsTargetParams) *string {
		if v == nil {
			return nil
		}
		return v.IndexTemplateType
	}).(pulumi.StringPtrOutput)
}

// network connection type.
func (o EventTargetTargetDescriptionEsTargetParamsPtrOutput) NetMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionEsTargetParams) *string {
		if v == nil {
			return nil
		}
		return &v.NetMode
	}).(pulumi.StringPtrOutput)
}

// DTS event configuration.
func (o EventTargetTargetDescriptionEsTargetParamsPtrOutput) OutputMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionEsTargetParams) *string {
		if v == nil {
			return nil
		}
		return &v.OutputMode
	}).(pulumi.StringPtrOutput)
}

// es log rotation granularity.
func (o EventTargetTargetDescriptionEsTargetParamsPtrOutput) RotationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionEsTargetParams) *string {
		if v == nil {
			return nil
		}
		return &v.RotationInterval
	}).(pulumi.StringPtrOutput)
}

type EventTargetTargetDescriptionScfParams struct {
	// Maximum number of events for batch delivery.
	BatchEventCount *int `pulumi:"batchEventCount"`
	// Maximum waiting time for bulk delivery.
	BatchTimeout *int `pulumi:"batchTimeout"`
	// Enable batch delivery.
	EnableBatchDelivery *bool `pulumi:"enableBatchDelivery"`
}

// EventTargetTargetDescriptionScfParamsInput is an input type that accepts EventTargetTargetDescriptionScfParamsArgs and EventTargetTargetDescriptionScfParamsOutput values.
// You can construct a concrete instance of `EventTargetTargetDescriptionScfParamsInput` via:
//
//          EventTargetTargetDescriptionScfParamsArgs{...}
type EventTargetTargetDescriptionScfParamsInput interface {
	pulumi.Input

	ToEventTargetTargetDescriptionScfParamsOutput() EventTargetTargetDescriptionScfParamsOutput
	ToEventTargetTargetDescriptionScfParamsOutputWithContext(context.Context) EventTargetTargetDescriptionScfParamsOutput
}

type EventTargetTargetDescriptionScfParamsArgs struct {
	// Maximum number of events for batch delivery.
	BatchEventCount pulumi.IntPtrInput `pulumi:"batchEventCount"`
	// Maximum waiting time for bulk delivery.
	BatchTimeout pulumi.IntPtrInput `pulumi:"batchTimeout"`
	// Enable batch delivery.
	EnableBatchDelivery pulumi.BoolPtrInput `pulumi:"enableBatchDelivery"`
}

func (EventTargetTargetDescriptionScfParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetTargetDescriptionScfParams)(nil)).Elem()
}

func (i EventTargetTargetDescriptionScfParamsArgs) ToEventTargetTargetDescriptionScfParamsOutput() EventTargetTargetDescriptionScfParamsOutput {
	return i.ToEventTargetTargetDescriptionScfParamsOutputWithContext(context.Background())
}

func (i EventTargetTargetDescriptionScfParamsArgs) ToEventTargetTargetDescriptionScfParamsOutputWithContext(ctx context.Context) EventTargetTargetDescriptionScfParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetTargetDescriptionScfParamsOutput)
}

func (i EventTargetTargetDescriptionScfParamsArgs) ToEventTargetTargetDescriptionScfParamsPtrOutput() EventTargetTargetDescriptionScfParamsPtrOutput {
	return i.ToEventTargetTargetDescriptionScfParamsPtrOutputWithContext(context.Background())
}

func (i EventTargetTargetDescriptionScfParamsArgs) ToEventTargetTargetDescriptionScfParamsPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionScfParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetTargetDescriptionScfParamsOutput).ToEventTargetTargetDescriptionScfParamsPtrOutputWithContext(ctx)
}

// EventTargetTargetDescriptionScfParamsPtrInput is an input type that accepts EventTargetTargetDescriptionScfParamsArgs, EventTargetTargetDescriptionScfParamsPtr and EventTargetTargetDescriptionScfParamsPtrOutput values.
// You can construct a concrete instance of `EventTargetTargetDescriptionScfParamsPtrInput` via:
//
//          EventTargetTargetDescriptionScfParamsArgs{...}
//
//  or:
//
//          nil
type EventTargetTargetDescriptionScfParamsPtrInput interface {
	pulumi.Input

	ToEventTargetTargetDescriptionScfParamsPtrOutput() EventTargetTargetDescriptionScfParamsPtrOutput
	ToEventTargetTargetDescriptionScfParamsPtrOutputWithContext(context.Context) EventTargetTargetDescriptionScfParamsPtrOutput
}

type eventTargetTargetDescriptionScfParamsPtrType EventTargetTargetDescriptionScfParamsArgs

func EventTargetTargetDescriptionScfParamsPtr(v *EventTargetTargetDescriptionScfParamsArgs) EventTargetTargetDescriptionScfParamsPtrInput {
	return (*eventTargetTargetDescriptionScfParamsPtrType)(v)
}

func (*eventTargetTargetDescriptionScfParamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetTargetDescriptionScfParams)(nil)).Elem()
}

func (i *eventTargetTargetDescriptionScfParamsPtrType) ToEventTargetTargetDescriptionScfParamsPtrOutput() EventTargetTargetDescriptionScfParamsPtrOutput {
	return i.ToEventTargetTargetDescriptionScfParamsPtrOutputWithContext(context.Background())
}

func (i *eventTargetTargetDescriptionScfParamsPtrType) ToEventTargetTargetDescriptionScfParamsPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionScfParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTargetTargetDescriptionScfParamsPtrOutput)
}

type EventTargetTargetDescriptionScfParamsOutput struct{ *pulumi.OutputState }

func (EventTargetTargetDescriptionScfParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTargetTargetDescriptionScfParams)(nil)).Elem()
}

func (o EventTargetTargetDescriptionScfParamsOutput) ToEventTargetTargetDescriptionScfParamsOutput() EventTargetTargetDescriptionScfParamsOutput {
	return o
}

func (o EventTargetTargetDescriptionScfParamsOutput) ToEventTargetTargetDescriptionScfParamsOutputWithContext(ctx context.Context) EventTargetTargetDescriptionScfParamsOutput {
	return o
}

func (o EventTargetTargetDescriptionScfParamsOutput) ToEventTargetTargetDescriptionScfParamsPtrOutput() EventTargetTargetDescriptionScfParamsPtrOutput {
	return o.ToEventTargetTargetDescriptionScfParamsPtrOutputWithContext(context.Background())
}

func (o EventTargetTargetDescriptionScfParamsOutput) ToEventTargetTargetDescriptionScfParamsPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionScfParamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventTargetTargetDescriptionScfParams) *EventTargetTargetDescriptionScfParams {
		return &v
	}).(EventTargetTargetDescriptionScfParamsPtrOutput)
}

// Maximum number of events for batch delivery.
func (o EventTargetTargetDescriptionScfParamsOutput) BatchEventCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetTargetDescriptionScfParams) *int { return v.BatchEventCount }).(pulumi.IntPtrOutput)
}

// Maximum waiting time for bulk delivery.
func (o EventTargetTargetDescriptionScfParamsOutput) BatchTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventTargetTargetDescriptionScfParams) *int { return v.BatchTimeout }).(pulumi.IntPtrOutput)
}

// Enable batch delivery.
func (o EventTargetTargetDescriptionScfParamsOutput) EnableBatchDelivery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventTargetTargetDescriptionScfParams) *bool { return v.EnableBatchDelivery }).(pulumi.BoolPtrOutput)
}

type EventTargetTargetDescriptionScfParamsPtrOutput struct{ *pulumi.OutputState }

func (EventTargetTargetDescriptionScfParamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTargetTargetDescriptionScfParams)(nil)).Elem()
}

func (o EventTargetTargetDescriptionScfParamsPtrOutput) ToEventTargetTargetDescriptionScfParamsPtrOutput() EventTargetTargetDescriptionScfParamsPtrOutput {
	return o
}

func (o EventTargetTargetDescriptionScfParamsPtrOutput) ToEventTargetTargetDescriptionScfParamsPtrOutputWithContext(ctx context.Context) EventTargetTargetDescriptionScfParamsPtrOutput {
	return o
}

func (o EventTargetTargetDescriptionScfParamsPtrOutput) Elem() EventTargetTargetDescriptionScfParamsOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionScfParams) EventTargetTargetDescriptionScfParams {
		if v != nil {
			return *v
		}
		var ret EventTargetTargetDescriptionScfParams
		return ret
	}).(EventTargetTargetDescriptionScfParamsOutput)
}

// Maximum number of events for batch delivery.
func (o EventTargetTargetDescriptionScfParamsPtrOutput) BatchEventCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionScfParams) *int {
		if v == nil {
			return nil
		}
		return v.BatchEventCount
	}).(pulumi.IntPtrOutput)
}

// Maximum waiting time for bulk delivery.
func (o EventTargetTargetDescriptionScfParamsPtrOutput) BatchTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionScfParams) *int {
		if v == nil {
			return nil
		}
		return v.BatchTimeout
	}).(pulumi.IntPtrOutput)
}

// Enable batch delivery.
func (o EventTargetTargetDescriptionScfParamsPtrOutput) EnableBatchDelivery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventTargetTargetDescriptionScfParams) *bool {
		if v == nil {
			return nil
		}
		return v.EnableBatchDelivery
	}).(pulumi.BoolPtrOutput)
}

type EventTransformTransformation struct {
	// Describe how to filter data.
	EtlFilter *EventTransformTransformationEtlFilter `pulumi:"etlFilter"`
	// Describe how to extract data.
	Extraction *EventTransformTransformationExtraction `pulumi:"extraction"`
	// Describe how to convert data.
	Transform *EventTransformTransformationTransform `pulumi:"transform"`
}

// EventTransformTransformationInput is an input type that accepts EventTransformTransformationArgs and EventTransformTransformationOutput values.
// You can construct a concrete instance of `EventTransformTransformationInput` via:
//
//          EventTransformTransformationArgs{...}
type EventTransformTransformationInput interface {
	pulumi.Input

	ToEventTransformTransformationOutput() EventTransformTransformationOutput
	ToEventTransformTransformationOutputWithContext(context.Context) EventTransformTransformationOutput
}

type EventTransformTransformationArgs struct {
	// Describe how to filter data.
	EtlFilter EventTransformTransformationEtlFilterPtrInput `pulumi:"etlFilter"`
	// Describe how to extract data.
	Extraction EventTransformTransformationExtractionPtrInput `pulumi:"extraction"`
	// Describe how to convert data.
	Transform EventTransformTransformationTransformPtrInput `pulumi:"transform"`
}

func (EventTransformTransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTransformTransformation)(nil)).Elem()
}

func (i EventTransformTransformationArgs) ToEventTransformTransformationOutput() EventTransformTransformationOutput {
	return i.ToEventTransformTransformationOutputWithContext(context.Background())
}

func (i EventTransformTransformationArgs) ToEventTransformTransformationOutputWithContext(ctx context.Context) EventTransformTransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTransformTransformationOutput)
}

// EventTransformTransformationArrayInput is an input type that accepts EventTransformTransformationArray and EventTransformTransformationArrayOutput values.
// You can construct a concrete instance of `EventTransformTransformationArrayInput` via:
//
//          EventTransformTransformationArray{ EventTransformTransformationArgs{...} }
type EventTransformTransformationArrayInput interface {
	pulumi.Input

	ToEventTransformTransformationArrayOutput() EventTransformTransformationArrayOutput
	ToEventTransformTransformationArrayOutputWithContext(context.Context) EventTransformTransformationArrayOutput
}

type EventTransformTransformationArray []EventTransformTransformationInput

func (EventTransformTransformationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTransformTransformation)(nil)).Elem()
}

func (i EventTransformTransformationArray) ToEventTransformTransformationArrayOutput() EventTransformTransformationArrayOutput {
	return i.ToEventTransformTransformationArrayOutputWithContext(context.Background())
}

func (i EventTransformTransformationArray) ToEventTransformTransformationArrayOutputWithContext(ctx context.Context) EventTransformTransformationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTransformTransformationArrayOutput)
}

type EventTransformTransformationOutput struct{ *pulumi.OutputState }

func (EventTransformTransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTransformTransformation)(nil)).Elem()
}

func (o EventTransformTransformationOutput) ToEventTransformTransformationOutput() EventTransformTransformationOutput {
	return o
}

func (o EventTransformTransformationOutput) ToEventTransformTransformationOutputWithContext(ctx context.Context) EventTransformTransformationOutput {
	return o
}

// Describe how to filter data.
func (o EventTransformTransformationOutput) EtlFilter() EventTransformTransformationEtlFilterPtrOutput {
	return o.ApplyT(func(v EventTransformTransformation) *EventTransformTransformationEtlFilter { return v.EtlFilter }).(EventTransformTransformationEtlFilterPtrOutput)
}

// Describe how to extract data.
func (o EventTransformTransformationOutput) Extraction() EventTransformTransformationExtractionPtrOutput {
	return o.ApplyT(func(v EventTransformTransformation) *EventTransformTransformationExtraction { return v.Extraction }).(EventTransformTransformationExtractionPtrOutput)
}

// Describe how to convert data.
func (o EventTransformTransformationOutput) Transform() EventTransformTransformationTransformPtrOutput {
	return o.ApplyT(func(v EventTransformTransformation) *EventTransformTransformationTransform { return v.Transform }).(EventTransformTransformationTransformPtrOutput)
}

type EventTransformTransformationArrayOutput struct{ *pulumi.OutputState }

func (EventTransformTransformationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTransformTransformation)(nil)).Elem()
}

func (o EventTransformTransformationArrayOutput) ToEventTransformTransformationArrayOutput() EventTransformTransformationArrayOutput {
	return o
}

func (o EventTransformTransformationArrayOutput) ToEventTransformTransformationArrayOutputWithContext(ctx context.Context) EventTransformTransformationArrayOutput {
	return o
}

func (o EventTransformTransformationArrayOutput) Index(i pulumi.IntInput) EventTransformTransformationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventTransformTransformation {
		return vs[0].([]EventTransformTransformation)[vs[1].(int)]
	}).(EventTransformTransformationOutput)
}

type EventTransformTransformationEtlFilter struct {
	// Grammatical Rules are consistent.
	Filter string `pulumi:"filter"`
}

// EventTransformTransformationEtlFilterInput is an input type that accepts EventTransformTransformationEtlFilterArgs and EventTransformTransformationEtlFilterOutput values.
// You can construct a concrete instance of `EventTransformTransformationEtlFilterInput` via:
//
//          EventTransformTransformationEtlFilterArgs{...}
type EventTransformTransformationEtlFilterInput interface {
	pulumi.Input

	ToEventTransformTransformationEtlFilterOutput() EventTransformTransformationEtlFilterOutput
	ToEventTransformTransformationEtlFilterOutputWithContext(context.Context) EventTransformTransformationEtlFilterOutput
}

type EventTransformTransformationEtlFilterArgs struct {
	// Grammatical Rules are consistent.
	Filter pulumi.StringInput `pulumi:"filter"`
}

func (EventTransformTransformationEtlFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTransformTransformationEtlFilter)(nil)).Elem()
}

func (i EventTransformTransformationEtlFilterArgs) ToEventTransformTransformationEtlFilterOutput() EventTransformTransformationEtlFilterOutput {
	return i.ToEventTransformTransformationEtlFilterOutputWithContext(context.Background())
}

func (i EventTransformTransformationEtlFilterArgs) ToEventTransformTransformationEtlFilterOutputWithContext(ctx context.Context) EventTransformTransformationEtlFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTransformTransformationEtlFilterOutput)
}

func (i EventTransformTransformationEtlFilterArgs) ToEventTransformTransformationEtlFilterPtrOutput() EventTransformTransformationEtlFilterPtrOutput {
	return i.ToEventTransformTransformationEtlFilterPtrOutputWithContext(context.Background())
}

func (i EventTransformTransformationEtlFilterArgs) ToEventTransformTransformationEtlFilterPtrOutputWithContext(ctx context.Context) EventTransformTransformationEtlFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTransformTransformationEtlFilterOutput).ToEventTransformTransformationEtlFilterPtrOutputWithContext(ctx)
}

// EventTransformTransformationEtlFilterPtrInput is an input type that accepts EventTransformTransformationEtlFilterArgs, EventTransformTransformationEtlFilterPtr and EventTransformTransformationEtlFilterPtrOutput values.
// You can construct a concrete instance of `EventTransformTransformationEtlFilterPtrInput` via:
//
//          EventTransformTransformationEtlFilterArgs{...}
//
//  or:
//
//          nil
type EventTransformTransformationEtlFilterPtrInput interface {
	pulumi.Input

	ToEventTransformTransformationEtlFilterPtrOutput() EventTransformTransformationEtlFilterPtrOutput
	ToEventTransformTransformationEtlFilterPtrOutputWithContext(context.Context) EventTransformTransformationEtlFilterPtrOutput
}

type eventTransformTransformationEtlFilterPtrType EventTransformTransformationEtlFilterArgs

func EventTransformTransformationEtlFilterPtr(v *EventTransformTransformationEtlFilterArgs) EventTransformTransformationEtlFilterPtrInput {
	return (*eventTransformTransformationEtlFilterPtrType)(v)
}

func (*eventTransformTransformationEtlFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTransformTransformationEtlFilter)(nil)).Elem()
}

func (i *eventTransformTransformationEtlFilterPtrType) ToEventTransformTransformationEtlFilterPtrOutput() EventTransformTransformationEtlFilterPtrOutput {
	return i.ToEventTransformTransformationEtlFilterPtrOutputWithContext(context.Background())
}

func (i *eventTransformTransformationEtlFilterPtrType) ToEventTransformTransformationEtlFilterPtrOutputWithContext(ctx context.Context) EventTransformTransformationEtlFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTransformTransformationEtlFilterPtrOutput)
}

type EventTransformTransformationEtlFilterOutput struct{ *pulumi.OutputState }

func (EventTransformTransformationEtlFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTransformTransformationEtlFilter)(nil)).Elem()
}

func (o EventTransformTransformationEtlFilterOutput) ToEventTransformTransformationEtlFilterOutput() EventTransformTransformationEtlFilterOutput {
	return o
}

func (o EventTransformTransformationEtlFilterOutput) ToEventTransformTransformationEtlFilterOutputWithContext(ctx context.Context) EventTransformTransformationEtlFilterOutput {
	return o
}

func (o EventTransformTransformationEtlFilterOutput) ToEventTransformTransformationEtlFilterPtrOutput() EventTransformTransformationEtlFilterPtrOutput {
	return o.ToEventTransformTransformationEtlFilterPtrOutputWithContext(context.Background())
}

func (o EventTransformTransformationEtlFilterOutput) ToEventTransformTransformationEtlFilterPtrOutputWithContext(ctx context.Context) EventTransformTransformationEtlFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventTransformTransformationEtlFilter) *EventTransformTransformationEtlFilter {
		return &v
	}).(EventTransformTransformationEtlFilterPtrOutput)
}

// Grammatical Rules are consistent.
func (o EventTransformTransformationEtlFilterOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v EventTransformTransformationEtlFilter) string { return v.Filter }).(pulumi.StringOutput)
}

type EventTransformTransformationEtlFilterPtrOutput struct{ *pulumi.OutputState }

func (EventTransformTransformationEtlFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTransformTransformationEtlFilter)(nil)).Elem()
}

func (o EventTransformTransformationEtlFilterPtrOutput) ToEventTransformTransformationEtlFilterPtrOutput() EventTransformTransformationEtlFilterPtrOutput {
	return o
}

func (o EventTransformTransformationEtlFilterPtrOutput) ToEventTransformTransformationEtlFilterPtrOutputWithContext(ctx context.Context) EventTransformTransformationEtlFilterPtrOutput {
	return o
}

func (o EventTransformTransformationEtlFilterPtrOutput) Elem() EventTransformTransformationEtlFilterOutput {
	return o.ApplyT(func(v *EventTransformTransformationEtlFilter) EventTransformTransformationEtlFilter {
		if v != nil {
			return *v
		}
		var ret EventTransformTransformationEtlFilter
		return ret
	}).(EventTransformTransformationEtlFilterOutput)
}

// Grammatical Rules are consistent.
func (o EventTransformTransformationEtlFilterPtrOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTransformTransformationEtlFilter) *string {
		if v == nil {
			return nil
		}
		return &v.Filter
	}).(pulumi.StringPtrOutput)
}

type EventTransformTransformationExtraction struct {
	// JsonPath, if not specified, the default value $.
	ExtractionInputPath string `pulumi:"extractionInputPath"`
	// Value: `TEXT`, `JSON`.
	Format string `pulumi:"format"`
	// Only Text needs to be passed.
	TextParams *EventTransformTransformationExtractionTextParams `pulumi:"textParams"`
}

// EventTransformTransformationExtractionInput is an input type that accepts EventTransformTransformationExtractionArgs and EventTransformTransformationExtractionOutput values.
// You can construct a concrete instance of `EventTransformTransformationExtractionInput` via:
//
//          EventTransformTransformationExtractionArgs{...}
type EventTransformTransformationExtractionInput interface {
	pulumi.Input

	ToEventTransformTransformationExtractionOutput() EventTransformTransformationExtractionOutput
	ToEventTransformTransformationExtractionOutputWithContext(context.Context) EventTransformTransformationExtractionOutput
}

type EventTransformTransformationExtractionArgs struct {
	// JsonPath, if not specified, the default value $.
	ExtractionInputPath pulumi.StringInput `pulumi:"extractionInputPath"`
	// Value: `TEXT`, `JSON`.
	Format pulumi.StringInput `pulumi:"format"`
	// Only Text needs to be passed.
	TextParams EventTransformTransformationExtractionTextParamsPtrInput `pulumi:"textParams"`
}

func (EventTransformTransformationExtractionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTransformTransformationExtraction)(nil)).Elem()
}

func (i EventTransformTransformationExtractionArgs) ToEventTransformTransformationExtractionOutput() EventTransformTransformationExtractionOutput {
	return i.ToEventTransformTransformationExtractionOutputWithContext(context.Background())
}

func (i EventTransformTransformationExtractionArgs) ToEventTransformTransformationExtractionOutputWithContext(ctx context.Context) EventTransformTransformationExtractionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTransformTransformationExtractionOutput)
}

func (i EventTransformTransformationExtractionArgs) ToEventTransformTransformationExtractionPtrOutput() EventTransformTransformationExtractionPtrOutput {
	return i.ToEventTransformTransformationExtractionPtrOutputWithContext(context.Background())
}

func (i EventTransformTransformationExtractionArgs) ToEventTransformTransformationExtractionPtrOutputWithContext(ctx context.Context) EventTransformTransformationExtractionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTransformTransformationExtractionOutput).ToEventTransformTransformationExtractionPtrOutputWithContext(ctx)
}

// EventTransformTransformationExtractionPtrInput is an input type that accepts EventTransformTransformationExtractionArgs, EventTransformTransformationExtractionPtr and EventTransformTransformationExtractionPtrOutput values.
// You can construct a concrete instance of `EventTransformTransformationExtractionPtrInput` via:
//
//          EventTransformTransformationExtractionArgs{...}
//
//  or:
//
//          nil
type EventTransformTransformationExtractionPtrInput interface {
	pulumi.Input

	ToEventTransformTransformationExtractionPtrOutput() EventTransformTransformationExtractionPtrOutput
	ToEventTransformTransformationExtractionPtrOutputWithContext(context.Context) EventTransformTransformationExtractionPtrOutput
}

type eventTransformTransformationExtractionPtrType EventTransformTransformationExtractionArgs

func EventTransformTransformationExtractionPtr(v *EventTransformTransformationExtractionArgs) EventTransformTransformationExtractionPtrInput {
	return (*eventTransformTransformationExtractionPtrType)(v)
}

func (*eventTransformTransformationExtractionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTransformTransformationExtraction)(nil)).Elem()
}

func (i *eventTransformTransformationExtractionPtrType) ToEventTransformTransformationExtractionPtrOutput() EventTransformTransformationExtractionPtrOutput {
	return i.ToEventTransformTransformationExtractionPtrOutputWithContext(context.Background())
}

func (i *eventTransformTransformationExtractionPtrType) ToEventTransformTransformationExtractionPtrOutputWithContext(ctx context.Context) EventTransformTransformationExtractionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTransformTransformationExtractionPtrOutput)
}

type EventTransformTransformationExtractionOutput struct{ *pulumi.OutputState }

func (EventTransformTransformationExtractionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTransformTransformationExtraction)(nil)).Elem()
}

func (o EventTransformTransformationExtractionOutput) ToEventTransformTransformationExtractionOutput() EventTransformTransformationExtractionOutput {
	return o
}

func (o EventTransformTransformationExtractionOutput) ToEventTransformTransformationExtractionOutputWithContext(ctx context.Context) EventTransformTransformationExtractionOutput {
	return o
}

func (o EventTransformTransformationExtractionOutput) ToEventTransformTransformationExtractionPtrOutput() EventTransformTransformationExtractionPtrOutput {
	return o.ToEventTransformTransformationExtractionPtrOutputWithContext(context.Background())
}

func (o EventTransformTransformationExtractionOutput) ToEventTransformTransformationExtractionPtrOutputWithContext(ctx context.Context) EventTransformTransformationExtractionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventTransformTransformationExtraction) *EventTransformTransformationExtraction {
		return &v
	}).(EventTransformTransformationExtractionPtrOutput)
}

// JsonPath, if not specified, the default value $.
func (o EventTransformTransformationExtractionOutput) ExtractionInputPath() pulumi.StringOutput {
	return o.ApplyT(func(v EventTransformTransformationExtraction) string { return v.ExtractionInputPath }).(pulumi.StringOutput)
}

// Value: `TEXT`, `JSON`.
func (o EventTransformTransformationExtractionOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v EventTransformTransformationExtraction) string { return v.Format }).(pulumi.StringOutput)
}

// Only Text needs to be passed.
func (o EventTransformTransformationExtractionOutput) TextParams() EventTransformTransformationExtractionTextParamsPtrOutput {
	return o.ApplyT(func(v EventTransformTransformationExtraction) *EventTransformTransformationExtractionTextParams {
		return v.TextParams
	}).(EventTransformTransformationExtractionTextParamsPtrOutput)
}

type EventTransformTransformationExtractionPtrOutput struct{ *pulumi.OutputState }

func (EventTransformTransformationExtractionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTransformTransformationExtraction)(nil)).Elem()
}

func (o EventTransformTransformationExtractionPtrOutput) ToEventTransformTransformationExtractionPtrOutput() EventTransformTransformationExtractionPtrOutput {
	return o
}

func (o EventTransformTransformationExtractionPtrOutput) ToEventTransformTransformationExtractionPtrOutputWithContext(ctx context.Context) EventTransformTransformationExtractionPtrOutput {
	return o
}

func (o EventTransformTransformationExtractionPtrOutput) Elem() EventTransformTransformationExtractionOutput {
	return o.ApplyT(func(v *EventTransformTransformationExtraction) EventTransformTransformationExtraction {
		if v != nil {
			return *v
		}
		var ret EventTransformTransformationExtraction
		return ret
	}).(EventTransformTransformationExtractionOutput)
}

// JsonPath, if not specified, the default value $.
func (o EventTransformTransformationExtractionPtrOutput) ExtractionInputPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTransformTransformationExtraction) *string {
		if v == nil {
			return nil
		}
		return &v.ExtractionInputPath
	}).(pulumi.StringPtrOutput)
}

// Value: `TEXT`, `JSON`.
func (o EventTransformTransformationExtractionPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTransformTransformationExtraction) *string {
		if v == nil {
			return nil
		}
		return &v.Format
	}).(pulumi.StringPtrOutput)
}

// Only Text needs to be passed.
func (o EventTransformTransformationExtractionPtrOutput) TextParams() EventTransformTransformationExtractionTextParamsPtrOutput {
	return o.ApplyT(func(v *EventTransformTransformationExtraction) *EventTransformTransformationExtractionTextParams {
		if v == nil {
			return nil
		}
		return v.TextParams
	}).(EventTransformTransformationExtractionTextParamsPtrOutput)
}

type EventTransformTransformationExtractionTextParams struct {
	// Fill in the regular expression: length 128.
	Regex *string `pulumi:"regex"`
	// `Comma`, `|`, `tab`, `space`, `newline`, `%`, `#`, the limit length is 1.
	Separator *string `pulumi:"separator"`
}

// EventTransformTransformationExtractionTextParamsInput is an input type that accepts EventTransformTransformationExtractionTextParamsArgs and EventTransformTransformationExtractionTextParamsOutput values.
// You can construct a concrete instance of `EventTransformTransformationExtractionTextParamsInput` via:
//
//          EventTransformTransformationExtractionTextParamsArgs{...}
type EventTransformTransformationExtractionTextParamsInput interface {
	pulumi.Input

	ToEventTransformTransformationExtractionTextParamsOutput() EventTransformTransformationExtractionTextParamsOutput
	ToEventTransformTransformationExtractionTextParamsOutputWithContext(context.Context) EventTransformTransformationExtractionTextParamsOutput
}

type EventTransformTransformationExtractionTextParamsArgs struct {
	// Fill in the regular expression: length 128.
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// `Comma`, `|`, `tab`, `space`, `newline`, `%`, `#`, the limit length is 1.
	Separator pulumi.StringPtrInput `pulumi:"separator"`
}

func (EventTransformTransformationExtractionTextParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTransformTransformationExtractionTextParams)(nil)).Elem()
}

func (i EventTransformTransformationExtractionTextParamsArgs) ToEventTransformTransformationExtractionTextParamsOutput() EventTransformTransformationExtractionTextParamsOutput {
	return i.ToEventTransformTransformationExtractionTextParamsOutputWithContext(context.Background())
}

func (i EventTransformTransformationExtractionTextParamsArgs) ToEventTransformTransformationExtractionTextParamsOutputWithContext(ctx context.Context) EventTransformTransformationExtractionTextParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTransformTransformationExtractionTextParamsOutput)
}

func (i EventTransformTransformationExtractionTextParamsArgs) ToEventTransformTransformationExtractionTextParamsPtrOutput() EventTransformTransformationExtractionTextParamsPtrOutput {
	return i.ToEventTransformTransformationExtractionTextParamsPtrOutputWithContext(context.Background())
}

func (i EventTransformTransformationExtractionTextParamsArgs) ToEventTransformTransformationExtractionTextParamsPtrOutputWithContext(ctx context.Context) EventTransformTransformationExtractionTextParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTransformTransformationExtractionTextParamsOutput).ToEventTransformTransformationExtractionTextParamsPtrOutputWithContext(ctx)
}

// EventTransformTransformationExtractionTextParamsPtrInput is an input type that accepts EventTransformTransformationExtractionTextParamsArgs, EventTransformTransformationExtractionTextParamsPtr and EventTransformTransformationExtractionTextParamsPtrOutput values.
// You can construct a concrete instance of `EventTransformTransformationExtractionTextParamsPtrInput` via:
//
//          EventTransformTransformationExtractionTextParamsArgs{...}
//
//  or:
//
//          nil
type EventTransformTransformationExtractionTextParamsPtrInput interface {
	pulumi.Input

	ToEventTransformTransformationExtractionTextParamsPtrOutput() EventTransformTransformationExtractionTextParamsPtrOutput
	ToEventTransformTransformationExtractionTextParamsPtrOutputWithContext(context.Context) EventTransformTransformationExtractionTextParamsPtrOutput
}

type eventTransformTransformationExtractionTextParamsPtrType EventTransformTransformationExtractionTextParamsArgs

func EventTransformTransformationExtractionTextParamsPtr(v *EventTransformTransformationExtractionTextParamsArgs) EventTransformTransformationExtractionTextParamsPtrInput {
	return (*eventTransformTransformationExtractionTextParamsPtrType)(v)
}

func (*eventTransformTransformationExtractionTextParamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTransformTransformationExtractionTextParams)(nil)).Elem()
}

func (i *eventTransformTransformationExtractionTextParamsPtrType) ToEventTransformTransformationExtractionTextParamsPtrOutput() EventTransformTransformationExtractionTextParamsPtrOutput {
	return i.ToEventTransformTransformationExtractionTextParamsPtrOutputWithContext(context.Background())
}

func (i *eventTransformTransformationExtractionTextParamsPtrType) ToEventTransformTransformationExtractionTextParamsPtrOutputWithContext(ctx context.Context) EventTransformTransformationExtractionTextParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTransformTransformationExtractionTextParamsPtrOutput)
}

type EventTransformTransformationExtractionTextParamsOutput struct{ *pulumi.OutputState }

func (EventTransformTransformationExtractionTextParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTransformTransformationExtractionTextParams)(nil)).Elem()
}

func (o EventTransformTransformationExtractionTextParamsOutput) ToEventTransformTransformationExtractionTextParamsOutput() EventTransformTransformationExtractionTextParamsOutput {
	return o
}

func (o EventTransformTransformationExtractionTextParamsOutput) ToEventTransformTransformationExtractionTextParamsOutputWithContext(ctx context.Context) EventTransformTransformationExtractionTextParamsOutput {
	return o
}

func (o EventTransformTransformationExtractionTextParamsOutput) ToEventTransformTransformationExtractionTextParamsPtrOutput() EventTransformTransformationExtractionTextParamsPtrOutput {
	return o.ToEventTransformTransformationExtractionTextParamsPtrOutputWithContext(context.Background())
}

func (o EventTransformTransformationExtractionTextParamsOutput) ToEventTransformTransformationExtractionTextParamsPtrOutputWithContext(ctx context.Context) EventTransformTransformationExtractionTextParamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventTransformTransformationExtractionTextParams) *EventTransformTransformationExtractionTextParams {
		return &v
	}).(EventTransformTransformationExtractionTextParamsPtrOutput)
}

// Fill in the regular expression: length 128.
func (o EventTransformTransformationExtractionTextParamsOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTransformTransformationExtractionTextParams) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// `Comma`, `|`, `tab`, `space`, `newline`, `%`, `#`, the limit length is 1.
func (o EventTransformTransformationExtractionTextParamsOutput) Separator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventTransformTransformationExtractionTextParams) *string { return v.Separator }).(pulumi.StringPtrOutput)
}

type EventTransformTransformationExtractionTextParamsPtrOutput struct{ *pulumi.OutputState }

func (EventTransformTransformationExtractionTextParamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTransformTransformationExtractionTextParams)(nil)).Elem()
}

func (o EventTransformTransformationExtractionTextParamsPtrOutput) ToEventTransformTransformationExtractionTextParamsPtrOutput() EventTransformTransformationExtractionTextParamsPtrOutput {
	return o
}

func (o EventTransformTransformationExtractionTextParamsPtrOutput) ToEventTransformTransformationExtractionTextParamsPtrOutputWithContext(ctx context.Context) EventTransformTransformationExtractionTextParamsPtrOutput {
	return o
}

func (o EventTransformTransformationExtractionTextParamsPtrOutput) Elem() EventTransformTransformationExtractionTextParamsOutput {
	return o.ApplyT(func(v *EventTransformTransformationExtractionTextParams) EventTransformTransformationExtractionTextParams {
		if v != nil {
			return *v
		}
		var ret EventTransformTransformationExtractionTextParams
		return ret
	}).(EventTransformTransformationExtractionTextParamsOutput)
}

// Fill in the regular expression: length 128.
func (o EventTransformTransformationExtractionTextParamsPtrOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTransformTransformationExtractionTextParams) *string {
		if v == nil {
			return nil
		}
		return v.Regex
	}).(pulumi.StringPtrOutput)
}

// `Comma`, `|`, `tab`, `space`, `newline`, `%`, `#`, the limit length is 1.
func (o EventTransformTransformationExtractionTextParamsPtrOutput) Separator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTransformTransformationExtractionTextParams) *string {
		if v == nil {
			return nil
		}
		return v.Separator
	}).(pulumi.StringPtrOutput)
}

type EventTransformTransformationTransform struct {
	// Describe how the data is transformed.
	OutputStructs []EventTransformTransformationTransformOutputStruct `pulumi:"outputStructs"`
}

// EventTransformTransformationTransformInput is an input type that accepts EventTransformTransformationTransformArgs and EventTransformTransformationTransformOutput values.
// You can construct a concrete instance of `EventTransformTransformationTransformInput` via:
//
//          EventTransformTransformationTransformArgs{...}
type EventTransformTransformationTransformInput interface {
	pulumi.Input

	ToEventTransformTransformationTransformOutput() EventTransformTransformationTransformOutput
	ToEventTransformTransformationTransformOutputWithContext(context.Context) EventTransformTransformationTransformOutput
}

type EventTransformTransformationTransformArgs struct {
	// Describe how the data is transformed.
	OutputStructs EventTransformTransformationTransformOutputStructArrayInput `pulumi:"outputStructs"`
}

func (EventTransformTransformationTransformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTransformTransformationTransform)(nil)).Elem()
}

func (i EventTransformTransformationTransformArgs) ToEventTransformTransformationTransformOutput() EventTransformTransformationTransformOutput {
	return i.ToEventTransformTransformationTransformOutputWithContext(context.Background())
}

func (i EventTransformTransformationTransformArgs) ToEventTransformTransformationTransformOutputWithContext(ctx context.Context) EventTransformTransformationTransformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTransformTransformationTransformOutput)
}

func (i EventTransformTransformationTransformArgs) ToEventTransformTransformationTransformPtrOutput() EventTransformTransformationTransformPtrOutput {
	return i.ToEventTransformTransformationTransformPtrOutputWithContext(context.Background())
}

func (i EventTransformTransformationTransformArgs) ToEventTransformTransformationTransformPtrOutputWithContext(ctx context.Context) EventTransformTransformationTransformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTransformTransformationTransformOutput).ToEventTransformTransformationTransformPtrOutputWithContext(ctx)
}

// EventTransformTransformationTransformPtrInput is an input type that accepts EventTransformTransformationTransformArgs, EventTransformTransformationTransformPtr and EventTransformTransformationTransformPtrOutput values.
// You can construct a concrete instance of `EventTransformTransformationTransformPtrInput` via:
//
//          EventTransformTransformationTransformArgs{...}
//
//  or:
//
//          nil
type EventTransformTransformationTransformPtrInput interface {
	pulumi.Input

	ToEventTransformTransformationTransformPtrOutput() EventTransformTransformationTransformPtrOutput
	ToEventTransformTransformationTransformPtrOutputWithContext(context.Context) EventTransformTransformationTransformPtrOutput
}

type eventTransformTransformationTransformPtrType EventTransformTransformationTransformArgs

func EventTransformTransformationTransformPtr(v *EventTransformTransformationTransformArgs) EventTransformTransformationTransformPtrInput {
	return (*eventTransformTransformationTransformPtrType)(v)
}

func (*eventTransformTransformationTransformPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTransformTransformationTransform)(nil)).Elem()
}

func (i *eventTransformTransformationTransformPtrType) ToEventTransformTransformationTransformPtrOutput() EventTransformTransformationTransformPtrOutput {
	return i.ToEventTransformTransformationTransformPtrOutputWithContext(context.Background())
}

func (i *eventTransformTransformationTransformPtrType) ToEventTransformTransformationTransformPtrOutputWithContext(ctx context.Context) EventTransformTransformationTransformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTransformTransformationTransformPtrOutput)
}

type EventTransformTransformationTransformOutput struct{ *pulumi.OutputState }

func (EventTransformTransformationTransformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTransformTransformationTransform)(nil)).Elem()
}

func (o EventTransformTransformationTransformOutput) ToEventTransformTransformationTransformOutput() EventTransformTransformationTransformOutput {
	return o
}

func (o EventTransformTransformationTransformOutput) ToEventTransformTransformationTransformOutputWithContext(ctx context.Context) EventTransformTransformationTransformOutput {
	return o
}

func (o EventTransformTransformationTransformOutput) ToEventTransformTransformationTransformPtrOutput() EventTransformTransformationTransformPtrOutput {
	return o.ToEventTransformTransformationTransformPtrOutputWithContext(context.Background())
}

func (o EventTransformTransformationTransformOutput) ToEventTransformTransformationTransformPtrOutputWithContext(ctx context.Context) EventTransformTransformationTransformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventTransformTransformationTransform) *EventTransformTransformationTransform {
		return &v
	}).(EventTransformTransformationTransformPtrOutput)
}

// Describe how the data is transformed.
func (o EventTransformTransformationTransformOutput) OutputStructs() EventTransformTransformationTransformOutputStructArrayOutput {
	return o.ApplyT(func(v EventTransformTransformationTransform) []EventTransformTransformationTransformOutputStruct {
		return v.OutputStructs
	}).(EventTransformTransformationTransformOutputStructArrayOutput)
}

type EventTransformTransformationTransformPtrOutput struct{ *pulumi.OutputState }

func (EventTransformTransformationTransformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTransformTransformationTransform)(nil)).Elem()
}

func (o EventTransformTransformationTransformPtrOutput) ToEventTransformTransformationTransformPtrOutput() EventTransformTransformationTransformPtrOutput {
	return o
}

func (o EventTransformTransformationTransformPtrOutput) ToEventTransformTransformationTransformPtrOutputWithContext(ctx context.Context) EventTransformTransformationTransformPtrOutput {
	return o
}

func (o EventTransformTransformationTransformPtrOutput) Elem() EventTransformTransformationTransformOutput {
	return o.ApplyT(func(v *EventTransformTransformationTransform) EventTransformTransformationTransform {
		if v != nil {
			return *v
		}
		var ret EventTransformTransformationTransform
		return ret
	}).(EventTransformTransformationTransformOutput)
}

// Describe how the data is transformed.
func (o EventTransformTransformationTransformPtrOutput) OutputStructs() EventTransformTransformationTransformOutputStructArrayOutput {
	return o.ApplyT(func(v *EventTransformTransformationTransform) []EventTransformTransformationTransformOutputStruct {
		if v == nil {
			return nil
		}
		return v.OutputStructs
	}).(EventTransformTransformationTransformOutputStructArrayOutput)
}

type EventTransformTransformationTransformOutputStruct struct {
	// Corresponding to the key in the output json.
	Key string `pulumi:"key"`
	// You can fill in the json-path and also support constants or built-in keyword date types.
	Value string `pulumi:"value"`
	// The data type of value, optional values: `STRING`, `NUMBER`, `BOOLEAN`, `NULL`, `SYS_VARIABLE`, `JSONPATH`.
	ValueType string `pulumi:"valueType"`
}

// EventTransformTransformationTransformOutputStructInput is an input type that accepts EventTransformTransformationTransformOutputStructArgs and EventTransformTransformationTransformOutputStructOutput values.
// You can construct a concrete instance of `EventTransformTransformationTransformOutputStructInput` via:
//
//          EventTransformTransformationTransformOutputStructArgs{...}
type EventTransformTransformationTransformOutputStructInput interface {
	pulumi.Input

	ToEventTransformTransformationTransformOutputStructOutput() EventTransformTransformationTransformOutputStructOutput
	ToEventTransformTransformationTransformOutputStructOutputWithContext(context.Context) EventTransformTransformationTransformOutputStructOutput
}

type EventTransformTransformationTransformOutputStructArgs struct {
	// Corresponding to the key in the output json.
	Key pulumi.StringInput `pulumi:"key"`
	// You can fill in the json-path and also support constants or built-in keyword date types.
	Value pulumi.StringInput `pulumi:"value"`
	// The data type of value, optional values: `STRING`, `NUMBER`, `BOOLEAN`, `NULL`, `SYS_VARIABLE`, `JSONPATH`.
	ValueType pulumi.StringInput `pulumi:"valueType"`
}

func (EventTransformTransformationTransformOutputStructArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTransformTransformationTransformOutputStruct)(nil)).Elem()
}

func (i EventTransformTransformationTransformOutputStructArgs) ToEventTransformTransformationTransformOutputStructOutput() EventTransformTransformationTransformOutputStructOutput {
	return i.ToEventTransformTransformationTransformOutputStructOutputWithContext(context.Background())
}

func (i EventTransformTransformationTransformOutputStructArgs) ToEventTransformTransformationTransformOutputStructOutputWithContext(ctx context.Context) EventTransformTransformationTransformOutputStructOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTransformTransformationTransformOutputStructOutput)
}

// EventTransformTransformationTransformOutputStructArrayInput is an input type that accepts EventTransformTransformationTransformOutputStructArray and EventTransformTransformationTransformOutputStructArrayOutput values.
// You can construct a concrete instance of `EventTransformTransformationTransformOutputStructArrayInput` via:
//
//          EventTransformTransformationTransformOutputStructArray{ EventTransformTransformationTransformOutputStructArgs{...} }
type EventTransformTransformationTransformOutputStructArrayInput interface {
	pulumi.Input

	ToEventTransformTransformationTransformOutputStructArrayOutput() EventTransformTransformationTransformOutputStructArrayOutput
	ToEventTransformTransformationTransformOutputStructArrayOutputWithContext(context.Context) EventTransformTransformationTransformOutputStructArrayOutput
}

type EventTransformTransformationTransformOutputStructArray []EventTransformTransformationTransformOutputStructInput

func (EventTransformTransformationTransformOutputStructArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTransformTransformationTransformOutputStruct)(nil)).Elem()
}

func (i EventTransformTransformationTransformOutputStructArray) ToEventTransformTransformationTransformOutputStructArrayOutput() EventTransformTransformationTransformOutputStructArrayOutput {
	return i.ToEventTransformTransformationTransformOutputStructArrayOutputWithContext(context.Background())
}

func (i EventTransformTransformationTransformOutputStructArray) ToEventTransformTransformationTransformOutputStructArrayOutputWithContext(ctx context.Context) EventTransformTransformationTransformOutputStructArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTransformTransformationTransformOutputStructArrayOutput)
}

type EventTransformTransformationTransformOutputStructOutput struct{ *pulumi.OutputState }

func (EventTransformTransformationTransformOutputStructOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventTransformTransformationTransformOutputStruct)(nil)).Elem()
}

func (o EventTransformTransformationTransformOutputStructOutput) ToEventTransformTransformationTransformOutputStructOutput() EventTransformTransformationTransformOutputStructOutput {
	return o
}

func (o EventTransformTransformationTransformOutputStructOutput) ToEventTransformTransformationTransformOutputStructOutputWithContext(ctx context.Context) EventTransformTransformationTransformOutputStructOutput {
	return o
}

// Corresponding to the key in the output json.
func (o EventTransformTransformationTransformOutputStructOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventTransformTransformationTransformOutputStruct) string { return v.Key }).(pulumi.StringOutput)
}

// You can fill in the json-path and also support constants or built-in keyword date types.
func (o EventTransformTransformationTransformOutputStructOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventTransformTransformationTransformOutputStruct) string { return v.Value }).(pulumi.StringOutput)
}

// The data type of value, optional values: `STRING`, `NUMBER`, `BOOLEAN`, `NULL`, `SYS_VARIABLE`, `JSONPATH`.
func (o EventTransformTransformationTransformOutputStructOutput) ValueType() pulumi.StringOutput {
	return o.ApplyT(func(v EventTransformTransformationTransformOutputStruct) string { return v.ValueType }).(pulumi.StringOutput)
}

type EventTransformTransformationTransformOutputStructArrayOutput struct{ *pulumi.OutputState }

func (EventTransformTransformationTransformOutputStructArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventTransformTransformationTransformOutputStruct)(nil)).Elem()
}

func (o EventTransformTransformationTransformOutputStructArrayOutput) ToEventTransformTransformationTransformOutputStructArrayOutput() EventTransformTransformationTransformOutputStructArrayOutput {
	return o
}

func (o EventTransformTransformationTransformOutputStructArrayOutput) ToEventTransformTransformationTransformOutputStructArrayOutputWithContext(ctx context.Context) EventTransformTransformationTransformOutputStructArrayOutput {
	return o
}

func (o EventTransformTransformationTransformOutputStructArrayOutput) Index(i pulumi.IntInput) EventTransformTransformationTransformOutputStructOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventTransformTransformationTransformOutputStruct {
		return vs[0].([]EventTransformTransformationTransformOutputStruct)[vs[1].(int)]
	}).(EventTransformTransformationTransformOutputStructOutput)
}

type PutEventsEventList struct {
	// Event data, the content is controlled by the system that created the event, the current datacontenttype only supports application/json;charset=utf-8, so this field is a json string.
	Data string `pulumi:"data"`
	// Event source information, new product reporting must comply with EB specifications.
	Source string `pulumi:"source"`
	// Detailed description of the event source, customizable, optional. The cloud service defaults to the standard qcs resource representation syntax: qcs::dts:ap-guangzhou:appid/uin:xxx.
	Subject string `pulumi:"subject"`
	// The timestamp in milliseconds when the event occurred,time.Now().UnixNano()/1e6.
	Time *int `pulumi:"time"`
	// Event type, customizable, optional. The cloud service writes COS:Created:PostObject by default, use: to separate the type field.
	Type string `pulumi:"type"`
}

// PutEventsEventListInput is an input type that accepts PutEventsEventListArgs and PutEventsEventListOutput values.
// You can construct a concrete instance of `PutEventsEventListInput` via:
//
//          PutEventsEventListArgs{...}
type PutEventsEventListInput interface {
	pulumi.Input

	ToPutEventsEventListOutput() PutEventsEventListOutput
	ToPutEventsEventListOutputWithContext(context.Context) PutEventsEventListOutput
}

type PutEventsEventListArgs struct {
	// Event data, the content is controlled by the system that created the event, the current datacontenttype only supports application/json;charset=utf-8, so this field is a json string.
	Data pulumi.StringInput `pulumi:"data"`
	// Event source information, new product reporting must comply with EB specifications.
	Source pulumi.StringInput `pulumi:"source"`
	// Detailed description of the event source, customizable, optional. The cloud service defaults to the standard qcs resource representation syntax: qcs::dts:ap-guangzhou:appid/uin:xxx.
	Subject pulumi.StringInput `pulumi:"subject"`
	// The timestamp in milliseconds when the event occurred,time.Now().UnixNano()/1e6.
	Time pulumi.IntPtrInput `pulumi:"time"`
	// Event type, customizable, optional. The cloud service writes COS:Created:PostObject by default, use: to separate the type field.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PutEventsEventListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PutEventsEventList)(nil)).Elem()
}

func (i PutEventsEventListArgs) ToPutEventsEventListOutput() PutEventsEventListOutput {
	return i.ToPutEventsEventListOutputWithContext(context.Background())
}

func (i PutEventsEventListArgs) ToPutEventsEventListOutputWithContext(ctx context.Context) PutEventsEventListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PutEventsEventListOutput)
}

// PutEventsEventListArrayInput is an input type that accepts PutEventsEventListArray and PutEventsEventListArrayOutput values.
// You can construct a concrete instance of `PutEventsEventListArrayInput` via:
//
//          PutEventsEventListArray{ PutEventsEventListArgs{...} }
type PutEventsEventListArrayInput interface {
	pulumi.Input

	ToPutEventsEventListArrayOutput() PutEventsEventListArrayOutput
	ToPutEventsEventListArrayOutputWithContext(context.Context) PutEventsEventListArrayOutput
}

type PutEventsEventListArray []PutEventsEventListInput

func (PutEventsEventListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PutEventsEventList)(nil)).Elem()
}

func (i PutEventsEventListArray) ToPutEventsEventListArrayOutput() PutEventsEventListArrayOutput {
	return i.ToPutEventsEventListArrayOutputWithContext(context.Background())
}

func (i PutEventsEventListArray) ToPutEventsEventListArrayOutputWithContext(ctx context.Context) PutEventsEventListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PutEventsEventListArrayOutput)
}

type PutEventsEventListOutput struct{ *pulumi.OutputState }

func (PutEventsEventListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PutEventsEventList)(nil)).Elem()
}

func (o PutEventsEventListOutput) ToPutEventsEventListOutput() PutEventsEventListOutput {
	return o
}

func (o PutEventsEventListOutput) ToPutEventsEventListOutputWithContext(ctx context.Context) PutEventsEventListOutput {
	return o
}

// Event data, the content is controlled by the system that created the event, the current datacontenttype only supports application/json;charset=utf-8, so this field is a json string.
func (o PutEventsEventListOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v PutEventsEventList) string { return v.Data }).(pulumi.StringOutput)
}

// Event source information, new product reporting must comply with EB specifications.
func (o PutEventsEventListOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v PutEventsEventList) string { return v.Source }).(pulumi.StringOutput)
}

// Detailed description of the event source, customizable, optional. The cloud service defaults to the standard qcs resource representation syntax: qcs::dts:ap-guangzhou:appid/uin:xxx.
func (o PutEventsEventListOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v PutEventsEventList) string { return v.Subject }).(pulumi.StringOutput)
}

// The timestamp in milliseconds when the event occurred,time.Now().UnixNano()/1e6.
func (o PutEventsEventListOutput) Time() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PutEventsEventList) *int { return v.Time }).(pulumi.IntPtrOutput)
}

// Event type, customizable, optional. The cloud service writes COS:Created:PostObject by default, use: to separate the type field.
func (o PutEventsEventListOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PutEventsEventList) string { return v.Type }).(pulumi.StringOutput)
}

type PutEventsEventListArrayOutput struct{ *pulumi.OutputState }

func (PutEventsEventListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PutEventsEventList)(nil)).Elem()
}

func (o PutEventsEventListArrayOutput) ToPutEventsEventListArrayOutput() PutEventsEventListArrayOutput {
	return o
}

func (o PutEventsEventListArrayOutput) ToPutEventsEventListArrayOutputWithContext(ctx context.Context) PutEventsEventListArrayOutput {
	return o
}

func (o PutEventsEventListArrayOutput) Index(i pulumi.IntInput) PutEventsEventListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PutEventsEventList {
		return vs[0].([]PutEventsEventList)[vs[1].(int)]
	}).(PutEventsEventListOutput)
}

type GetBusEventBus struct {
	// create time.
	AddTime string `pulumi:"addTime"`
	// Connector basic information, note: this field may return null, indicating that no valid value can be obtained.
	ConnectionBriefs []GetBusEventBusConnectionBrief `pulumi:"connectionBriefs"`
	// Event set description, unlimited character type, description within 200 characters.
	Description string `pulumi:"description"`
	// event bus Id.
	EventBusId string `pulumi:"eventBusId"`
	// Event set name, which can only contain letters, numbers, underscores, hyphens, starts with a letter and ends with a number or letter, 2~60 characters.
	EventBusName string `pulumi:"eventBusName"`
	// update time.
	ModTime string `pulumi:"modTime"`
	// Billing mode, note: this field may return null, indicating that no valid value can be obtained.
	PayMode string `pulumi:"payMode"`
	// Target brief information, note: this field may return null, indicating that no valid value can be obtained.
	TargetBriefs []GetBusEventBusTargetBrief `pulumi:"targetBriefs"`
	// event bus type.
	Type string `pulumi:"type"`
}

// GetBusEventBusInput is an input type that accepts GetBusEventBusArgs and GetBusEventBusOutput values.
// You can construct a concrete instance of `GetBusEventBusInput` via:
//
//          GetBusEventBusArgs{...}
type GetBusEventBusInput interface {
	pulumi.Input

	ToGetBusEventBusOutput() GetBusEventBusOutput
	ToGetBusEventBusOutputWithContext(context.Context) GetBusEventBusOutput
}

type GetBusEventBusArgs struct {
	// create time.
	AddTime pulumi.StringInput `pulumi:"addTime"`
	// Connector basic information, note: this field may return null, indicating that no valid value can be obtained.
	ConnectionBriefs GetBusEventBusConnectionBriefArrayInput `pulumi:"connectionBriefs"`
	// Event set description, unlimited character type, description within 200 characters.
	Description pulumi.StringInput `pulumi:"description"`
	// event bus Id.
	EventBusId pulumi.StringInput `pulumi:"eventBusId"`
	// Event set name, which can only contain letters, numbers, underscores, hyphens, starts with a letter and ends with a number or letter, 2~60 characters.
	EventBusName pulumi.StringInput `pulumi:"eventBusName"`
	// update time.
	ModTime pulumi.StringInput `pulumi:"modTime"`
	// Billing mode, note: this field may return null, indicating that no valid value can be obtained.
	PayMode pulumi.StringInput `pulumi:"payMode"`
	// Target brief information, note: this field may return null, indicating that no valid value can be obtained.
	TargetBriefs GetBusEventBusTargetBriefArrayInput `pulumi:"targetBriefs"`
	// event bus type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetBusEventBusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusEventBus)(nil)).Elem()
}

func (i GetBusEventBusArgs) ToGetBusEventBusOutput() GetBusEventBusOutput {
	return i.ToGetBusEventBusOutputWithContext(context.Background())
}

func (i GetBusEventBusArgs) ToGetBusEventBusOutputWithContext(ctx context.Context) GetBusEventBusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusEventBusOutput)
}

// GetBusEventBusArrayInput is an input type that accepts GetBusEventBusArray and GetBusEventBusArrayOutput values.
// You can construct a concrete instance of `GetBusEventBusArrayInput` via:
//
//          GetBusEventBusArray{ GetBusEventBusArgs{...} }
type GetBusEventBusArrayInput interface {
	pulumi.Input

	ToGetBusEventBusArrayOutput() GetBusEventBusArrayOutput
	ToGetBusEventBusArrayOutputWithContext(context.Context) GetBusEventBusArrayOutput
}

type GetBusEventBusArray []GetBusEventBusInput

func (GetBusEventBusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBusEventBus)(nil)).Elem()
}

func (i GetBusEventBusArray) ToGetBusEventBusArrayOutput() GetBusEventBusArrayOutput {
	return i.ToGetBusEventBusArrayOutputWithContext(context.Background())
}

func (i GetBusEventBusArray) ToGetBusEventBusArrayOutputWithContext(ctx context.Context) GetBusEventBusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusEventBusArrayOutput)
}

type GetBusEventBusOutput struct{ *pulumi.OutputState }

func (GetBusEventBusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusEventBus)(nil)).Elem()
}

func (o GetBusEventBusOutput) ToGetBusEventBusOutput() GetBusEventBusOutput {
	return o
}

func (o GetBusEventBusOutput) ToGetBusEventBusOutputWithContext(ctx context.Context) GetBusEventBusOutput {
	return o
}

// create time.
func (o GetBusEventBusOutput) AddTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusEventBus) string { return v.AddTime }).(pulumi.StringOutput)
}

// Connector basic information, note: this field may return null, indicating that no valid value can be obtained.
func (o GetBusEventBusOutput) ConnectionBriefs() GetBusEventBusConnectionBriefArrayOutput {
	return o.ApplyT(func(v GetBusEventBus) []GetBusEventBusConnectionBrief { return v.ConnectionBriefs }).(GetBusEventBusConnectionBriefArrayOutput)
}

// Event set description, unlimited character type, description within 200 characters.
func (o GetBusEventBusOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusEventBus) string { return v.Description }).(pulumi.StringOutput)
}

// event bus Id.
func (o GetBusEventBusOutput) EventBusId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusEventBus) string { return v.EventBusId }).(pulumi.StringOutput)
}

// Event set name, which can only contain letters, numbers, underscores, hyphens, starts with a letter and ends with a number or letter, 2~60 characters.
func (o GetBusEventBusOutput) EventBusName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusEventBus) string { return v.EventBusName }).(pulumi.StringOutput)
}

// update time.
func (o GetBusEventBusOutput) ModTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusEventBus) string { return v.ModTime }).(pulumi.StringOutput)
}

// Billing mode, note: this field may return null, indicating that no valid value can be obtained.
func (o GetBusEventBusOutput) PayMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusEventBus) string { return v.PayMode }).(pulumi.StringOutput)
}

// Target brief information, note: this field may return null, indicating that no valid value can be obtained.
func (o GetBusEventBusOutput) TargetBriefs() GetBusEventBusTargetBriefArrayOutput {
	return o.ApplyT(func(v GetBusEventBus) []GetBusEventBusTargetBrief { return v.TargetBriefs }).(GetBusEventBusTargetBriefArrayOutput)
}

// event bus type.
func (o GetBusEventBusOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusEventBus) string { return v.Type }).(pulumi.StringOutput)
}

type GetBusEventBusArrayOutput struct{ *pulumi.OutputState }

func (GetBusEventBusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBusEventBus)(nil)).Elem()
}

func (o GetBusEventBusArrayOutput) ToGetBusEventBusArrayOutput() GetBusEventBusArrayOutput {
	return o
}

func (o GetBusEventBusArrayOutput) ToGetBusEventBusArrayOutputWithContext(ctx context.Context) GetBusEventBusArrayOutput {
	return o
}

func (o GetBusEventBusArrayOutput) Index(i pulumi.IntInput) GetBusEventBusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBusEventBus {
		return vs[0].([]GetBusEventBus)[vs[1].(int)]
	}).(GetBusEventBusOutput)
}

type GetBusEventBusConnectionBrief struct {
	// Connector status, note: this field may return null, indicating that no valid value can be obtained.
	Status string `pulumi:"status"`
	// event bus type.
	Type string `pulumi:"type"`
}

// GetBusEventBusConnectionBriefInput is an input type that accepts GetBusEventBusConnectionBriefArgs and GetBusEventBusConnectionBriefOutput values.
// You can construct a concrete instance of `GetBusEventBusConnectionBriefInput` via:
//
//          GetBusEventBusConnectionBriefArgs{...}
type GetBusEventBusConnectionBriefInput interface {
	pulumi.Input

	ToGetBusEventBusConnectionBriefOutput() GetBusEventBusConnectionBriefOutput
	ToGetBusEventBusConnectionBriefOutputWithContext(context.Context) GetBusEventBusConnectionBriefOutput
}

type GetBusEventBusConnectionBriefArgs struct {
	// Connector status, note: this field may return null, indicating that no valid value can be obtained.
	Status pulumi.StringInput `pulumi:"status"`
	// event bus type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetBusEventBusConnectionBriefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusEventBusConnectionBrief)(nil)).Elem()
}

func (i GetBusEventBusConnectionBriefArgs) ToGetBusEventBusConnectionBriefOutput() GetBusEventBusConnectionBriefOutput {
	return i.ToGetBusEventBusConnectionBriefOutputWithContext(context.Background())
}

func (i GetBusEventBusConnectionBriefArgs) ToGetBusEventBusConnectionBriefOutputWithContext(ctx context.Context) GetBusEventBusConnectionBriefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusEventBusConnectionBriefOutput)
}

// GetBusEventBusConnectionBriefArrayInput is an input type that accepts GetBusEventBusConnectionBriefArray and GetBusEventBusConnectionBriefArrayOutput values.
// You can construct a concrete instance of `GetBusEventBusConnectionBriefArrayInput` via:
//
//          GetBusEventBusConnectionBriefArray{ GetBusEventBusConnectionBriefArgs{...} }
type GetBusEventBusConnectionBriefArrayInput interface {
	pulumi.Input

	ToGetBusEventBusConnectionBriefArrayOutput() GetBusEventBusConnectionBriefArrayOutput
	ToGetBusEventBusConnectionBriefArrayOutputWithContext(context.Context) GetBusEventBusConnectionBriefArrayOutput
}

type GetBusEventBusConnectionBriefArray []GetBusEventBusConnectionBriefInput

func (GetBusEventBusConnectionBriefArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBusEventBusConnectionBrief)(nil)).Elem()
}

func (i GetBusEventBusConnectionBriefArray) ToGetBusEventBusConnectionBriefArrayOutput() GetBusEventBusConnectionBriefArrayOutput {
	return i.ToGetBusEventBusConnectionBriefArrayOutputWithContext(context.Background())
}

func (i GetBusEventBusConnectionBriefArray) ToGetBusEventBusConnectionBriefArrayOutputWithContext(ctx context.Context) GetBusEventBusConnectionBriefArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusEventBusConnectionBriefArrayOutput)
}

type GetBusEventBusConnectionBriefOutput struct{ *pulumi.OutputState }

func (GetBusEventBusConnectionBriefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusEventBusConnectionBrief)(nil)).Elem()
}

func (o GetBusEventBusConnectionBriefOutput) ToGetBusEventBusConnectionBriefOutput() GetBusEventBusConnectionBriefOutput {
	return o
}

func (o GetBusEventBusConnectionBriefOutput) ToGetBusEventBusConnectionBriefOutputWithContext(ctx context.Context) GetBusEventBusConnectionBriefOutput {
	return o
}

// Connector status, note: this field may return null, indicating that no valid value can be obtained.
func (o GetBusEventBusConnectionBriefOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusEventBusConnectionBrief) string { return v.Status }).(pulumi.StringOutput)
}

// event bus type.
func (o GetBusEventBusConnectionBriefOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusEventBusConnectionBrief) string { return v.Type }).(pulumi.StringOutput)
}

type GetBusEventBusConnectionBriefArrayOutput struct{ *pulumi.OutputState }

func (GetBusEventBusConnectionBriefArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBusEventBusConnectionBrief)(nil)).Elem()
}

func (o GetBusEventBusConnectionBriefArrayOutput) ToGetBusEventBusConnectionBriefArrayOutput() GetBusEventBusConnectionBriefArrayOutput {
	return o
}

func (o GetBusEventBusConnectionBriefArrayOutput) ToGetBusEventBusConnectionBriefArrayOutputWithContext(ctx context.Context) GetBusEventBusConnectionBriefArrayOutput {
	return o
}

func (o GetBusEventBusConnectionBriefArrayOutput) Index(i pulumi.IntInput) GetBusEventBusConnectionBriefOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBusEventBusConnectionBrief {
		return vs[0].([]GetBusEventBusConnectionBrief)[vs[1].(int)]
	}).(GetBusEventBusConnectionBriefOutput)
}

type GetBusEventBusTargetBrief struct {
	// Target ID.
	TargetId string `pulumi:"targetId"`
	// event bus type.
	Type string `pulumi:"type"`
}

// GetBusEventBusTargetBriefInput is an input type that accepts GetBusEventBusTargetBriefArgs and GetBusEventBusTargetBriefOutput values.
// You can construct a concrete instance of `GetBusEventBusTargetBriefInput` via:
//
//          GetBusEventBusTargetBriefArgs{...}
type GetBusEventBusTargetBriefInput interface {
	pulumi.Input

	ToGetBusEventBusTargetBriefOutput() GetBusEventBusTargetBriefOutput
	ToGetBusEventBusTargetBriefOutputWithContext(context.Context) GetBusEventBusTargetBriefOutput
}

type GetBusEventBusTargetBriefArgs struct {
	// Target ID.
	TargetId pulumi.StringInput `pulumi:"targetId"`
	// event bus type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetBusEventBusTargetBriefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusEventBusTargetBrief)(nil)).Elem()
}

func (i GetBusEventBusTargetBriefArgs) ToGetBusEventBusTargetBriefOutput() GetBusEventBusTargetBriefOutput {
	return i.ToGetBusEventBusTargetBriefOutputWithContext(context.Background())
}

func (i GetBusEventBusTargetBriefArgs) ToGetBusEventBusTargetBriefOutputWithContext(ctx context.Context) GetBusEventBusTargetBriefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusEventBusTargetBriefOutput)
}

// GetBusEventBusTargetBriefArrayInput is an input type that accepts GetBusEventBusTargetBriefArray and GetBusEventBusTargetBriefArrayOutput values.
// You can construct a concrete instance of `GetBusEventBusTargetBriefArrayInput` via:
//
//          GetBusEventBusTargetBriefArray{ GetBusEventBusTargetBriefArgs{...} }
type GetBusEventBusTargetBriefArrayInput interface {
	pulumi.Input

	ToGetBusEventBusTargetBriefArrayOutput() GetBusEventBusTargetBriefArrayOutput
	ToGetBusEventBusTargetBriefArrayOutputWithContext(context.Context) GetBusEventBusTargetBriefArrayOutput
}

type GetBusEventBusTargetBriefArray []GetBusEventBusTargetBriefInput

func (GetBusEventBusTargetBriefArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBusEventBusTargetBrief)(nil)).Elem()
}

func (i GetBusEventBusTargetBriefArray) ToGetBusEventBusTargetBriefArrayOutput() GetBusEventBusTargetBriefArrayOutput {
	return i.ToGetBusEventBusTargetBriefArrayOutputWithContext(context.Background())
}

func (i GetBusEventBusTargetBriefArray) ToGetBusEventBusTargetBriefArrayOutputWithContext(ctx context.Context) GetBusEventBusTargetBriefArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusEventBusTargetBriefArrayOutput)
}

type GetBusEventBusTargetBriefOutput struct{ *pulumi.OutputState }

func (GetBusEventBusTargetBriefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusEventBusTargetBrief)(nil)).Elem()
}

func (o GetBusEventBusTargetBriefOutput) ToGetBusEventBusTargetBriefOutput() GetBusEventBusTargetBriefOutput {
	return o
}

func (o GetBusEventBusTargetBriefOutput) ToGetBusEventBusTargetBriefOutputWithContext(ctx context.Context) GetBusEventBusTargetBriefOutput {
	return o
}

// Target ID.
func (o GetBusEventBusTargetBriefOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusEventBusTargetBrief) string { return v.TargetId }).(pulumi.StringOutput)
}

// event bus type.
func (o GetBusEventBusTargetBriefOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusEventBusTargetBrief) string { return v.Type }).(pulumi.StringOutput)
}

type GetBusEventBusTargetBriefArrayOutput struct{ *pulumi.OutputState }

func (GetBusEventBusTargetBriefArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBusEventBusTargetBrief)(nil)).Elem()
}

func (o GetBusEventBusTargetBriefArrayOutput) ToGetBusEventBusTargetBriefArrayOutput() GetBusEventBusTargetBriefArrayOutput {
	return o
}

func (o GetBusEventBusTargetBriefArrayOutput) ToGetBusEventBusTargetBriefArrayOutputWithContext(ctx context.Context) GetBusEventBusTargetBriefArrayOutput {
	return o
}

func (o GetBusEventBusTargetBriefArrayOutput) Index(i pulumi.IntInput) GetBusEventBusTargetBriefOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBusEventBusTargetBrief {
		return vs[0].([]GetBusEventBusTargetBrief)[vs[1].(int)]
	}).(GetBusEventBusTargetBriefOutput)
}

type GetBusFilter struct {
	// The name of the filter key.
	Name string `pulumi:"name"`
	// One or more filter values.
	Values []string `pulumi:"values"`
}

// GetBusFilterInput is an input type that accepts GetBusFilterArgs and GetBusFilterOutput values.
// You can construct a concrete instance of `GetBusFilterInput` via:
//
//          GetBusFilterArgs{...}
type GetBusFilterInput interface {
	pulumi.Input

	ToGetBusFilterOutput() GetBusFilterOutput
	ToGetBusFilterOutputWithContext(context.Context) GetBusFilterOutput
}

type GetBusFilterArgs struct {
	// The name of the filter key.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetBusFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusFilter)(nil)).Elem()
}

func (i GetBusFilterArgs) ToGetBusFilterOutput() GetBusFilterOutput {
	return i.ToGetBusFilterOutputWithContext(context.Background())
}

func (i GetBusFilterArgs) ToGetBusFilterOutputWithContext(ctx context.Context) GetBusFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusFilterOutput)
}

// GetBusFilterArrayInput is an input type that accepts GetBusFilterArray and GetBusFilterArrayOutput values.
// You can construct a concrete instance of `GetBusFilterArrayInput` via:
//
//          GetBusFilterArray{ GetBusFilterArgs{...} }
type GetBusFilterArrayInput interface {
	pulumi.Input

	ToGetBusFilterArrayOutput() GetBusFilterArrayOutput
	ToGetBusFilterArrayOutputWithContext(context.Context) GetBusFilterArrayOutput
}

type GetBusFilterArray []GetBusFilterInput

func (GetBusFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBusFilter)(nil)).Elem()
}

func (i GetBusFilterArray) ToGetBusFilterArrayOutput() GetBusFilterArrayOutput {
	return i.ToGetBusFilterArrayOutputWithContext(context.Background())
}

func (i GetBusFilterArray) ToGetBusFilterArrayOutputWithContext(ctx context.Context) GetBusFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBusFilterArrayOutput)
}

type GetBusFilterOutput struct{ *pulumi.OutputState }

func (GetBusFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBusFilter)(nil)).Elem()
}

func (o GetBusFilterOutput) ToGetBusFilterOutput() GetBusFilterOutput {
	return o
}

func (o GetBusFilterOutput) ToGetBusFilterOutputWithContext(ctx context.Context) GetBusFilterOutput {
	return o
}

// The name of the filter key.
func (o GetBusFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBusFilter) string { return v.Name }).(pulumi.StringOutput)
}

// One or more filter values.
func (o GetBusFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBusFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetBusFilterArrayOutput struct{ *pulumi.OutputState }

func (GetBusFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBusFilter)(nil)).Elem()
}

func (o GetBusFilterArrayOutput) ToGetBusFilterArrayOutput() GetBusFilterArrayOutput {
	return o
}

func (o GetBusFilterArrayOutput) ToGetBusFilterArrayOutputWithContext(ctx context.Context) GetBusFilterArrayOutput {
	return o
}

func (o GetBusFilterArrayOutput) Index(i pulumi.IntInput) GetBusFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBusFilter {
		return vs[0].([]GetBusFilter)[vs[1].(int)]
	}).(GetBusFilterOutput)
}

type GetSearchFilter struct {
	Filters  []GetSearchFilterFilter `pulumi:"filters"`
	Key      *string                 `pulumi:"key"`
	Operator *string                 `pulumi:"operator"`
	Type     *string                 `pulumi:"type"`
	Value    *string                 `pulumi:"value"`
}

// GetSearchFilterInput is an input type that accepts GetSearchFilterArgs and GetSearchFilterOutput values.
// You can construct a concrete instance of `GetSearchFilterInput` via:
//
//          GetSearchFilterArgs{...}
type GetSearchFilterInput interface {
	pulumi.Input

	ToGetSearchFilterOutput() GetSearchFilterOutput
	ToGetSearchFilterOutputWithContext(context.Context) GetSearchFilterOutput
}

type GetSearchFilterArgs struct {
	Filters  GetSearchFilterFilterArrayInput `pulumi:"filters"`
	Key      pulumi.StringPtrInput           `pulumi:"key"`
	Operator pulumi.StringPtrInput           `pulumi:"operator"`
	Type     pulumi.StringPtrInput           `pulumi:"type"`
	Value    pulumi.StringPtrInput           `pulumi:"value"`
}

func (GetSearchFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSearchFilter)(nil)).Elem()
}

func (i GetSearchFilterArgs) ToGetSearchFilterOutput() GetSearchFilterOutput {
	return i.ToGetSearchFilterOutputWithContext(context.Background())
}

func (i GetSearchFilterArgs) ToGetSearchFilterOutputWithContext(ctx context.Context) GetSearchFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSearchFilterOutput)
}

// GetSearchFilterArrayInput is an input type that accepts GetSearchFilterArray and GetSearchFilterArrayOutput values.
// You can construct a concrete instance of `GetSearchFilterArrayInput` via:
//
//          GetSearchFilterArray{ GetSearchFilterArgs{...} }
type GetSearchFilterArrayInput interface {
	pulumi.Input

	ToGetSearchFilterArrayOutput() GetSearchFilterArrayOutput
	ToGetSearchFilterArrayOutputWithContext(context.Context) GetSearchFilterArrayOutput
}

type GetSearchFilterArray []GetSearchFilterInput

func (GetSearchFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSearchFilter)(nil)).Elem()
}

func (i GetSearchFilterArray) ToGetSearchFilterArrayOutput() GetSearchFilterArrayOutput {
	return i.ToGetSearchFilterArrayOutputWithContext(context.Background())
}

func (i GetSearchFilterArray) ToGetSearchFilterArrayOutputWithContext(ctx context.Context) GetSearchFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSearchFilterArrayOutput)
}

type GetSearchFilterOutput struct{ *pulumi.OutputState }

func (GetSearchFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSearchFilter)(nil)).Elem()
}

func (o GetSearchFilterOutput) ToGetSearchFilterOutput() GetSearchFilterOutput {
	return o
}

func (o GetSearchFilterOutput) ToGetSearchFilterOutputWithContext(ctx context.Context) GetSearchFilterOutput {
	return o
}

func (o GetSearchFilterOutput) Filters() GetSearchFilterFilterArrayOutput {
	return o.ApplyT(func(v GetSearchFilter) []GetSearchFilterFilter { return v.Filters }).(GetSearchFilterFilterArrayOutput)
}

func (o GetSearchFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSearchFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o GetSearchFilterOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSearchFilter) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

func (o GetSearchFilterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSearchFilter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o GetSearchFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSearchFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GetSearchFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSearchFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSearchFilter)(nil)).Elem()
}

func (o GetSearchFilterArrayOutput) ToGetSearchFilterArrayOutput() GetSearchFilterArrayOutput {
	return o
}

func (o GetSearchFilterArrayOutput) ToGetSearchFilterArrayOutputWithContext(ctx context.Context) GetSearchFilterArrayOutput {
	return o
}

func (o GetSearchFilterArrayOutput) Index(i pulumi.IntInput) GetSearchFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSearchFilter {
		return vs[0].([]GetSearchFilter)[vs[1].(int)]
	}).(GetSearchFilterOutput)
}

type GetSearchFilterFilter struct {
	Key      string `pulumi:"key"`
	Operator string `pulumi:"operator"`
	Value    string `pulumi:"value"`
}

// GetSearchFilterFilterInput is an input type that accepts GetSearchFilterFilterArgs and GetSearchFilterFilterOutput values.
// You can construct a concrete instance of `GetSearchFilterFilterInput` via:
//
//          GetSearchFilterFilterArgs{...}
type GetSearchFilterFilterInput interface {
	pulumi.Input

	ToGetSearchFilterFilterOutput() GetSearchFilterFilterOutput
	ToGetSearchFilterFilterOutputWithContext(context.Context) GetSearchFilterFilterOutput
}

type GetSearchFilterFilterArgs struct {
	Key      pulumi.StringInput `pulumi:"key"`
	Operator pulumi.StringInput `pulumi:"operator"`
	Value    pulumi.StringInput `pulumi:"value"`
}

func (GetSearchFilterFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSearchFilterFilter)(nil)).Elem()
}

func (i GetSearchFilterFilterArgs) ToGetSearchFilterFilterOutput() GetSearchFilterFilterOutput {
	return i.ToGetSearchFilterFilterOutputWithContext(context.Background())
}

func (i GetSearchFilterFilterArgs) ToGetSearchFilterFilterOutputWithContext(ctx context.Context) GetSearchFilterFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSearchFilterFilterOutput)
}

// GetSearchFilterFilterArrayInput is an input type that accepts GetSearchFilterFilterArray and GetSearchFilterFilterArrayOutput values.
// You can construct a concrete instance of `GetSearchFilterFilterArrayInput` via:
//
//          GetSearchFilterFilterArray{ GetSearchFilterFilterArgs{...} }
type GetSearchFilterFilterArrayInput interface {
	pulumi.Input

	ToGetSearchFilterFilterArrayOutput() GetSearchFilterFilterArrayOutput
	ToGetSearchFilterFilterArrayOutputWithContext(context.Context) GetSearchFilterFilterArrayOutput
}

type GetSearchFilterFilterArray []GetSearchFilterFilterInput

func (GetSearchFilterFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSearchFilterFilter)(nil)).Elem()
}

func (i GetSearchFilterFilterArray) ToGetSearchFilterFilterArrayOutput() GetSearchFilterFilterArrayOutput {
	return i.ToGetSearchFilterFilterArrayOutputWithContext(context.Background())
}

func (i GetSearchFilterFilterArray) ToGetSearchFilterFilterArrayOutputWithContext(ctx context.Context) GetSearchFilterFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSearchFilterFilterArrayOutput)
}

type GetSearchFilterFilterOutput struct{ *pulumi.OutputState }

func (GetSearchFilterFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSearchFilterFilter)(nil)).Elem()
}

func (o GetSearchFilterFilterOutput) ToGetSearchFilterFilterOutput() GetSearchFilterFilterOutput {
	return o
}

func (o GetSearchFilterFilterOutput) ToGetSearchFilterFilterOutputWithContext(ctx context.Context) GetSearchFilterFilterOutput {
	return o
}

func (o GetSearchFilterFilterOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchFilterFilter) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetSearchFilterFilterOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchFilterFilter) string { return v.Operator }).(pulumi.StringOutput)
}

func (o GetSearchFilterFilterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchFilterFilter) string { return v.Value }).(pulumi.StringOutput)
}

type GetSearchFilterFilterArrayOutput struct{ *pulumi.OutputState }

func (GetSearchFilterFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSearchFilterFilter)(nil)).Elem()
}

func (o GetSearchFilterFilterArrayOutput) ToGetSearchFilterFilterArrayOutput() GetSearchFilterFilterArrayOutput {
	return o
}

func (o GetSearchFilterFilterArrayOutput) ToGetSearchFilterFilterArrayOutputWithContext(ctx context.Context) GetSearchFilterFilterArrayOutput {
	return o
}

func (o GetSearchFilterFilterArrayOutput) Index(i pulumi.IntInput) GetSearchFilterFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSearchFilterFilter {
		return vs[0].([]GetSearchFilterFilter)[vs[1].(int)]
	}).(GetSearchFilterFilterOutput)
}

type GetSearchResult struct {
	Message   string `pulumi:"message"`
	Region    string `pulumi:"region"`
	RuleIds   string `pulumi:"ruleIds"`
	Source    string `pulumi:"source"`
	Status    string `pulumi:"status"`
	Subject   string `pulumi:"subject"`
	Timestamp string `pulumi:"timestamp"`
	Type      string `pulumi:"type"`
}

// GetSearchResultInput is an input type that accepts GetSearchResultArgs and GetSearchResultOutput values.
// You can construct a concrete instance of `GetSearchResultInput` via:
//
//          GetSearchResultArgs{...}
type GetSearchResultInput interface {
	pulumi.Input

	ToGetSearchResultOutput() GetSearchResultOutput
	ToGetSearchResultOutputWithContext(context.Context) GetSearchResultOutput
}

type GetSearchResultArgs struct {
	Message   pulumi.StringInput `pulumi:"message"`
	Region    pulumi.StringInput `pulumi:"region"`
	RuleIds   pulumi.StringInput `pulumi:"ruleIds"`
	Source    pulumi.StringInput `pulumi:"source"`
	Status    pulumi.StringInput `pulumi:"status"`
	Subject   pulumi.StringInput `pulumi:"subject"`
	Timestamp pulumi.StringInput `pulumi:"timestamp"`
	Type      pulumi.StringInput `pulumi:"type"`
}

func (GetSearchResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSearchResult)(nil)).Elem()
}

func (i GetSearchResultArgs) ToGetSearchResultOutput() GetSearchResultOutput {
	return i.ToGetSearchResultOutputWithContext(context.Background())
}

func (i GetSearchResultArgs) ToGetSearchResultOutputWithContext(ctx context.Context) GetSearchResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSearchResultOutput)
}

// GetSearchResultArrayInput is an input type that accepts GetSearchResultArray and GetSearchResultArrayOutput values.
// You can construct a concrete instance of `GetSearchResultArrayInput` via:
//
//          GetSearchResultArray{ GetSearchResultArgs{...} }
type GetSearchResultArrayInput interface {
	pulumi.Input

	ToGetSearchResultArrayOutput() GetSearchResultArrayOutput
	ToGetSearchResultArrayOutputWithContext(context.Context) GetSearchResultArrayOutput
}

type GetSearchResultArray []GetSearchResultInput

func (GetSearchResultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSearchResult)(nil)).Elem()
}

func (i GetSearchResultArray) ToGetSearchResultArrayOutput() GetSearchResultArrayOutput {
	return i.ToGetSearchResultArrayOutputWithContext(context.Background())
}

func (i GetSearchResultArray) ToGetSearchResultArrayOutputWithContext(ctx context.Context) GetSearchResultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSearchResultArrayOutput)
}

type GetSearchResultOutput struct{ *pulumi.OutputState }

func (GetSearchResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSearchResult)(nil)).Elem()
}

func (o GetSearchResultOutput) ToGetSearchResultOutput() GetSearchResultOutput {
	return o
}

func (o GetSearchResultOutput) ToGetSearchResultOutputWithContext(ctx context.Context) GetSearchResultOutput {
	return o
}

func (o GetSearchResultOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchResult) string { return v.Message }).(pulumi.StringOutput)
}

func (o GetSearchResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetSearchResultOutput) RuleIds() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchResult) string { return v.RuleIds }).(pulumi.StringOutput)
}

func (o GetSearchResultOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchResult) string { return v.Source }).(pulumi.StringOutput)
}

func (o GetSearchResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetSearchResultOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchResult) string { return v.Subject }).(pulumi.StringOutput)
}

func (o GetSearchResultOutput) Timestamp() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchResult) string { return v.Timestamp }).(pulumi.StringOutput)
}

func (o GetSearchResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetSearchResult) string { return v.Type }).(pulumi.StringOutput)
}

type GetSearchResultArrayOutput struct{ *pulumi.OutputState }

func (GetSearchResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSearchResult)(nil)).Elem()
}

func (o GetSearchResultArrayOutput) ToGetSearchResultArrayOutput() GetSearchResultArrayOutput {
	return o
}

func (o GetSearchResultArrayOutput) ToGetSearchResultArrayOutputWithContext(ctx context.Context) GetSearchResultArrayOutput {
	return o
}

func (o GetSearchResultArrayOutput) Index(i pulumi.IntInput) GetSearchResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSearchResult {
		return vs[0].([]GetSearchResult)[vs[1].(int)]
	}).(GetSearchResultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventTargetTargetDescriptionInput)(nil)).Elem(), EventTargetTargetDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTargetTargetDescriptionPtrInput)(nil)).Elem(), EventTargetTargetDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTargetTargetDescriptionCkafkaTargetParamsInput)(nil)).Elem(), EventTargetTargetDescriptionCkafkaTargetParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTargetTargetDescriptionCkafkaTargetParamsPtrInput)(nil)).Elem(), EventTargetTargetDescriptionCkafkaTargetParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyInput)(nil)).Elem(), EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrInput)(nil)).Elem(), EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTargetTargetDescriptionEsTargetParamsInput)(nil)).Elem(), EventTargetTargetDescriptionEsTargetParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTargetTargetDescriptionEsTargetParamsPtrInput)(nil)).Elem(), EventTargetTargetDescriptionEsTargetParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTargetTargetDescriptionScfParamsInput)(nil)).Elem(), EventTargetTargetDescriptionScfParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTargetTargetDescriptionScfParamsPtrInput)(nil)).Elem(), EventTargetTargetDescriptionScfParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTransformTransformationInput)(nil)).Elem(), EventTransformTransformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTransformTransformationArrayInput)(nil)).Elem(), EventTransformTransformationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTransformTransformationEtlFilterInput)(nil)).Elem(), EventTransformTransformationEtlFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTransformTransformationEtlFilterPtrInput)(nil)).Elem(), EventTransformTransformationEtlFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTransformTransformationExtractionInput)(nil)).Elem(), EventTransformTransformationExtractionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTransformTransformationExtractionPtrInput)(nil)).Elem(), EventTransformTransformationExtractionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTransformTransformationExtractionTextParamsInput)(nil)).Elem(), EventTransformTransformationExtractionTextParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTransformTransformationExtractionTextParamsPtrInput)(nil)).Elem(), EventTransformTransformationExtractionTextParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTransformTransformationTransformInput)(nil)).Elem(), EventTransformTransformationTransformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTransformTransformationTransformPtrInput)(nil)).Elem(), EventTransformTransformationTransformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTransformTransformationTransformOutputStructInput)(nil)).Elem(), EventTransformTransformationTransformOutputStructArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTransformTransformationTransformOutputStructArrayInput)(nil)).Elem(), EventTransformTransformationTransformOutputStructArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PutEventsEventListInput)(nil)).Elem(), PutEventsEventListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PutEventsEventListArrayInput)(nil)).Elem(), PutEventsEventListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusEventBusInput)(nil)).Elem(), GetBusEventBusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusEventBusArrayInput)(nil)).Elem(), GetBusEventBusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusEventBusConnectionBriefInput)(nil)).Elem(), GetBusEventBusConnectionBriefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusEventBusConnectionBriefArrayInput)(nil)).Elem(), GetBusEventBusConnectionBriefArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusEventBusTargetBriefInput)(nil)).Elem(), GetBusEventBusTargetBriefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusEventBusTargetBriefArrayInput)(nil)).Elem(), GetBusEventBusTargetBriefArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusFilterInput)(nil)).Elem(), GetBusFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBusFilterArrayInput)(nil)).Elem(), GetBusFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSearchFilterInput)(nil)).Elem(), GetSearchFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSearchFilterArrayInput)(nil)).Elem(), GetSearchFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSearchFilterFilterInput)(nil)).Elem(), GetSearchFilterFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSearchFilterFilterArrayInput)(nil)).Elem(), GetSearchFilterFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSearchResultInput)(nil)).Elem(), GetSearchResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSearchResultArrayInput)(nil)).Elem(), GetSearchResultArray{})
	pulumi.RegisterOutputType(EventTargetTargetDescriptionOutput{})
	pulumi.RegisterOutputType(EventTargetTargetDescriptionPtrOutput{})
	pulumi.RegisterOutputType(EventTargetTargetDescriptionCkafkaTargetParamsOutput{})
	pulumi.RegisterOutputType(EventTargetTargetDescriptionCkafkaTargetParamsPtrOutput{})
	pulumi.RegisterOutputType(EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyOutput{})
	pulumi.RegisterOutputType(EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(EventTargetTargetDescriptionEsTargetParamsOutput{})
	pulumi.RegisterOutputType(EventTargetTargetDescriptionEsTargetParamsPtrOutput{})
	pulumi.RegisterOutputType(EventTargetTargetDescriptionScfParamsOutput{})
	pulumi.RegisterOutputType(EventTargetTargetDescriptionScfParamsPtrOutput{})
	pulumi.RegisterOutputType(EventTransformTransformationOutput{})
	pulumi.RegisterOutputType(EventTransformTransformationArrayOutput{})
	pulumi.RegisterOutputType(EventTransformTransformationEtlFilterOutput{})
	pulumi.RegisterOutputType(EventTransformTransformationEtlFilterPtrOutput{})
	pulumi.RegisterOutputType(EventTransformTransformationExtractionOutput{})
	pulumi.RegisterOutputType(EventTransformTransformationExtractionPtrOutput{})
	pulumi.RegisterOutputType(EventTransformTransformationExtractionTextParamsOutput{})
	pulumi.RegisterOutputType(EventTransformTransformationExtractionTextParamsPtrOutput{})
	pulumi.RegisterOutputType(EventTransformTransformationTransformOutput{})
	pulumi.RegisterOutputType(EventTransformTransformationTransformPtrOutput{})
	pulumi.RegisterOutputType(EventTransformTransformationTransformOutputStructOutput{})
	pulumi.RegisterOutputType(EventTransformTransformationTransformOutputStructArrayOutput{})
	pulumi.RegisterOutputType(PutEventsEventListOutput{})
	pulumi.RegisterOutputType(PutEventsEventListArrayOutput{})
	pulumi.RegisterOutputType(GetBusEventBusOutput{})
	pulumi.RegisterOutputType(GetBusEventBusArrayOutput{})
	pulumi.RegisterOutputType(GetBusEventBusConnectionBriefOutput{})
	pulumi.RegisterOutputType(GetBusEventBusConnectionBriefArrayOutput{})
	pulumi.RegisterOutputType(GetBusEventBusTargetBriefOutput{})
	pulumi.RegisterOutputType(GetBusEventBusTargetBriefArrayOutput{})
	pulumi.RegisterOutputType(GetBusFilterOutput{})
	pulumi.RegisterOutputType(GetBusFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSearchFilterOutput{})
	pulumi.RegisterOutputType(GetSearchFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSearchFilterFilterOutput{})
	pulumi.RegisterOutputType(GetSearchFilterFilterArrayOutput{})
	pulumi.RegisterOutputType(GetSearchResultOutput{})
	pulumi.RegisterOutputType(GetSearchResultArrayOutput{})
}
