// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ACL struct {
	pulumi.CustomResourceState

	// Creation time of ACL.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Egress rules. A rule must match the following format: [action]#[cidr_ip]#[port]#[protocol]. The available value of
	// 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is
	// `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol'
	// is `ICMP` or `ALL`, the 'port' must be `ALL`.
	Egresses pulumi.StringArrayOutput `pulumi:"egresses"`
	// Ingress rules. A rule must match the following format: [action]#[cidr_ip]#[port]#[protocol]. The available value of
	// 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is
	// `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol'
	// is `ICMP` or `ALL`, the 'port' must be `ALL`.
	Ingresses pulumi.StringArrayOutput `pulumi:"ingresses"`
	// Name of the network ACL.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the VPC instance.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewACL registers a new resource with the given unique name, arguments, and options.
func NewACL(ctx *pulumi.Context,
	name string, args *ACLArgs, opts ...pulumi.ResourceOption) (*ACL, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	var resource ACL
	err := ctx.RegisterResource("tencentcloud:Vpc/aCL:ACL", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetACL gets an existing ACL resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetACL(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ACLState, opts ...pulumi.ResourceOption) (*ACL, error) {
	var resource ACL
	err := ctx.ReadResource("tencentcloud:Vpc/aCL:ACL", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ACL resources.
type aclState struct {
	// Creation time of ACL.
	CreateTime *string `pulumi:"createTime"`
	// Egress rules. A rule must match the following format: [action]#[cidr_ip]#[port]#[protocol]. The available value of
	// 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is
	// `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol'
	// is `ICMP` or `ALL`, the 'port' must be `ALL`.
	Egresses []string `pulumi:"egresses"`
	// Ingress rules. A rule must match the following format: [action]#[cidr_ip]#[port]#[protocol]. The available value of
	// 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is
	// `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol'
	// is `ICMP` or `ALL`, the 'port' must be `ALL`.
	Ingresses []string `pulumi:"ingresses"`
	// Name of the network ACL.
	Name *string `pulumi:"name"`
	// ID of the VPC instance.
	VpcId *string `pulumi:"vpcId"`
}

type ACLState struct {
	// Creation time of ACL.
	CreateTime pulumi.StringPtrInput
	// Egress rules. A rule must match the following format: [action]#[cidr_ip]#[port]#[protocol]. The available value of
	// 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is
	// `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol'
	// is `ICMP` or `ALL`, the 'port' must be `ALL`.
	Egresses pulumi.StringArrayInput
	// Ingress rules. A rule must match the following format: [action]#[cidr_ip]#[port]#[protocol]. The available value of
	// 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is
	// `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol'
	// is `ICMP` or `ALL`, the 'port' must be `ALL`.
	Ingresses pulumi.StringArrayInput
	// Name of the network ACL.
	Name pulumi.StringPtrInput
	// ID of the VPC instance.
	VpcId pulumi.StringPtrInput
}

func (ACLState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclState)(nil)).Elem()
}

type aclArgs struct {
	// Egress rules. A rule must match the following format: [action]#[cidr_ip]#[port]#[protocol]. The available value of
	// 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is
	// `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol'
	// is `ICMP` or `ALL`, the 'port' must be `ALL`.
	Egresses []string `pulumi:"egresses"`
	// Ingress rules. A rule must match the following format: [action]#[cidr_ip]#[port]#[protocol]. The available value of
	// 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is
	// `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol'
	// is `ICMP` or `ALL`, the 'port' must be `ALL`.
	Ingresses []string `pulumi:"ingresses"`
	// Name of the network ACL.
	Name *string `pulumi:"name"`
	// ID of the VPC instance.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a ACL resource.
type ACLArgs struct {
	// Egress rules. A rule must match the following format: [action]#[cidr_ip]#[port]#[protocol]. The available value of
	// 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is
	// `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol'
	// is `ICMP` or `ALL`, the 'port' must be `ALL`.
	Egresses pulumi.StringArrayInput
	// Ingress rules. A rule must match the following format: [action]#[cidr_ip]#[port]#[protocol]. The available value of
	// 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is
	// `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol'
	// is `ICMP` or `ALL`, the 'port' must be `ALL`.
	Ingresses pulumi.StringArrayInput
	// Name of the network ACL.
	Name pulumi.StringPtrInput
	// ID of the VPC instance.
	VpcId pulumi.StringInput
}

func (ACLArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclArgs)(nil)).Elem()
}

type ACLInput interface {
	pulumi.Input

	ToACLOutput() ACLOutput
	ToACLOutputWithContext(ctx context.Context) ACLOutput
}

func (*ACL) ElementType() reflect.Type {
	return reflect.TypeOf((**ACL)(nil)).Elem()
}

func (i *ACL) ToACLOutput() ACLOutput {
	return i.ToACLOutputWithContext(context.Background())
}

func (i *ACL) ToACLOutputWithContext(ctx context.Context) ACLOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLOutput)
}

// ACLArrayInput is an input type that accepts ACLArray and ACLArrayOutput values.
// You can construct a concrete instance of `ACLArrayInput` via:
//
//          ACLArray{ ACLArgs{...} }
type ACLArrayInput interface {
	pulumi.Input

	ToACLArrayOutput() ACLArrayOutput
	ToACLArrayOutputWithContext(context.Context) ACLArrayOutput
}

type ACLArray []ACLInput

func (ACLArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ACL)(nil)).Elem()
}

func (i ACLArray) ToACLArrayOutput() ACLArrayOutput {
	return i.ToACLArrayOutputWithContext(context.Background())
}

func (i ACLArray) ToACLArrayOutputWithContext(ctx context.Context) ACLArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLArrayOutput)
}

// ACLMapInput is an input type that accepts ACLMap and ACLMapOutput values.
// You can construct a concrete instance of `ACLMapInput` via:
//
//          ACLMap{ "key": ACLArgs{...} }
type ACLMapInput interface {
	pulumi.Input

	ToACLMapOutput() ACLMapOutput
	ToACLMapOutputWithContext(context.Context) ACLMapOutput
}

type ACLMap map[string]ACLInput

func (ACLMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ACL)(nil)).Elem()
}

func (i ACLMap) ToACLMapOutput() ACLMapOutput {
	return i.ToACLMapOutputWithContext(context.Background())
}

func (i ACLMap) ToACLMapOutputWithContext(ctx context.Context) ACLMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACLMapOutput)
}

type ACLOutput struct{ *pulumi.OutputState }

func (ACLOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACL)(nil)).Elem()
}

func (o ACLOutput) ToACLOutput() ACLOutput {
	return o
}

func (o ACLOutput) ToACLOutputWithContext(ctx context.Context) ACLOutput {
	return o
}

// Creation time of ACL.
func (o ACLOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ACL) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Egress rules. A rule must match the following format: [action]#[cidr_ip]#[port]#[protocol]. The available value of
// 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is
// `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol'
// is `ICMP` or `ALL`, the 'port' must be `ALL`.
func (o ACLOutput) Egresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ACL) pulumi.StringArrayOutput { return v.Egresses }).(pulumi.StringArrayOutput)
}

// Ingress rules. A rule must match the following format: [action]#[cidr_ip]#[port]#[protocol]. The available value of
// 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is
// `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol'
// is `ICMP` or `ALL`, the 'port' must be `ALL`.
func (o ACLOutput) Ingresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ACL) pulumi.StringArrayOutput { return v.Ingresses }).(pulumi.StringArrayOutput)
}

// Name of the network ACL.
func (o ACLOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ACL) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the VPC instance.
func (o ACLOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ACL) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ACLArrayOutput struct{ *pulumi.OutputState }

func (ACLArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ACL)(nil)).Elem()
}

func (o ACLArrayOutput) ToACLArrayOutput() ACLArrayOutput {
	return o
}

func (o ACLArrayOutput) ToACLArrayOutputWithContext(ctx context.Context) ACLArrayOutput {
	return o
}

func (o ACLArrayOutput) Index(i pulumi.IntInput) ACLOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ACL {
		return vs[0].([]*ACL)[vs[1].(int)]
	}).(ACLOutput)
}

type ACLMapOutput struct{ *pulumi.OutputState }

func (ACLMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ACL)(nil)).Elem()
}

func (o ACLMapOutput) ToACLMapOutput() ACLMapOutput {
	return o
}

func (o ACLMapOutput) ToACLMapOutputWithContext(ctx context.Context) ACLMapOutput {
	return o
}

func (o ACLMapOutput) MapIndex(k pulumi.StringInput) ACLOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ACL {
		return vs[0].(map[string]*ACL)[vs[1].(string)]
	}).(ACLOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ACLInput)(nil)).Elem(), &ACL{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACLArrayInput)(nil)).Elem(), ACLArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACLMapInput)(nil)).Elem(), ACLMap{})
	pulumi.RegisterOutputType(ACLOutput{})
	pulumi.RegisterOutputType(ACLArrayOutput{})
	pulumi.RegisterOutputType(ACLMapOutput{})
}
