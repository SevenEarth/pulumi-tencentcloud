// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AclsAclList struct {
	CreateTime string               `pulumi:"createTime"`
	Egresses   []AclsAclListEgress  `pulumi:"egresses"`
	Id         string               `pulumi:"id"`
	Ingresses  []AclsAclListIngress `pulumi:"ingresses"`
	Name       string               `pulumi:"name"`
	Subnets    []AclsAclListSubnet  `pulumi:"subnets"`
	VpcId      string               `pulumi:"vpcId"`
}

// AclsAclListInput is an input type that accepts AclsAclListArgs and AclsAclListOutput values.
// You can construct a concrete instance of `AclsAclListInput` via:
//
//          AclsAclListArgs{...}
type AclsAclListInput interface {
	pulumi.Input

	ToAclsAclListOutput() AclsAclListOutput
	ToAclsAclListOutputWithContext(context.Context) AclsAclListOutput
}

type AclsAclListArgs struct {
	CreateTime pulumi.StringInput           `pulumi:"createTime"`
	Egresses   AclsAclListEgressArrayInput  `pulumi:"egresses"`
	Id         pulumi.StringInput           `pulumi:"id"`
	Ingresses  AclsAclListIngressArrayInput `pulumi:"ingresses"`
	Name       pulumi.StringInput           `pulumi:"name"`
	Subnets    AclsAclListSubnetArrayInput  `pulumi:"subnets"`
	VpcId      pulumi.StringInput           `pulumi:"vpcId"`
}

func (AclsAclListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclsAclList)(nil)).Elem()
}

func (i AclsAclListArgs) ToAclsAclListOutput() AclsAclListOutput {
	return i.ToAclsAclListOutputWithContext(context.Background())
}

func (i AclsAclListArgs) ToAclsAclListOutputWithContext(ctx context.Context) AclsAclListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclsAclListOutput)
}

// AclsAclListArrayInput is an input type that accepts AclsAclListArray and AclsAclListArrayOutput values.
// You can construct a concrete instance of `AclsAclListArrayInput` via:
//
//          AclsAclListArray{ AclsAclListArgs{...} }
type AclsAclListArrayInput interface {
	pulumi.Input

	ToAclsAclListArrayOutput() AclsAclListArrayOutput
	ToAclsAclListArrayOutputWithContext(context.Context) AclsAclListArrayOutput
}

type AclsAclListArray []AclsAclListInput

func (AclsAclListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclsAclList)(nil)).Elem()
}

func (i AclsAclListArray) ToAclsAclListArrayOutput() AclsAclListArrayOutput {
	return i.ToAclsAclListArrayOutputWithContext(context.Background())
}

func (i AclsAclListArray) ToAclsAclListArrayOutputWithContext(ctx context.Context) AclsAclListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclsAclListArrayOutput)
}

type AclsAclListOutput struct{ *pulumi.OutputState }

func (AclsAclListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclsAclList)(nil)).Elem()
}

func (o AclsAclListOutput) ToAclsAclListOutput() AclsAclListOutput {
	return o
}

func (o AclsAclListOutput) ToAclsAclListOutputWithContext(ctx context.Context) AclsAclListOutput {
	return o
}

func (o AclsAclListOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclList) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o AclsAclListOutput) Egresses() AclsAclListEgressArrayOutput {
	return o.ApplyT(func(v AclsAclList) []AclsAclListEgress { return v.Egresses }).(AclsAclListEgressArrayOutput)
}

func (o AclsAclListOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclList) string { return v.Id }).(pulumi.StringOutput)
}

func (o AclsAclListOutput) Ingresses() AclsAclListIngressArrayOutput {
	return o.ApplyT(func(v AclsAclList) []AclsAclListIngress { return v.Ingresses }).(AclsAclListIngressArrayOutput)
}

func (o AclsAclListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclList) string { return v.Name }).(pulumi.StringOutput)
}

func (o AclsAclListOutput) Subnets() AclsAclListSubnetArrayOutput {
	return o.ApplyT(func(v AclsAclList) []AclsAclListSubnet { return v.Subnets }).(AclsAclListSubnetArrayOutput)
}

func (o AclsAclListOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclList) string { return v.VpcId }).(pulumi.StringOutput)
}

type AclsAclListArrayOutput struct{ *pulumi.OutputState }

func (AclsAclListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclsAclList)(nil)).Elem()
}

func (o AclsAclListArrayOutput) ToAclsAclListArrayOutput() AclsAclListArrayOutput {
	return o
}

func (o AclsAclListArrayOutput) ToAclsAclListArrayOutputWithContext(ctx context.Context) AclsAclListArrayOutput {
	return o
}

func (o AclsAclListArrayOutput) Index(i pulumi.IntInput) AclsAclListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclsAclList {
		return vs[0].([]AclsAclList)[vs[1].(int)]
	}).(AclsAclListOutput)
}

type AclsAclListEgress struct {
	CidrBlock   string `pulumi:"cidrBlock"`
	Description string `pulumi:"description"`
	Policy      string `pulumi:"policy"`
	Port        string `pulumi:"port"`
	Protocol    string `pulumi:"protocol"`
}

// AclsAclListEgressInput is an input type that accepts AclsAclListEgressArgs and AclsAclListEgressOutput values.
// You can construct a concrete instance of `AclsAclListEgressInput` via:
//
//          AclsAclListEgressArgs{...}
type AclsAclListEgressInput interface {
	pulumi.Input

	ToAclsAclListEgressOutput() AclsAclListEgressOutput
	ToAclsAclListEgressOutputWithContext(context.Context) AclsAclListEgressOutput
}

type AclsAclListEgressArgs struct {
	CidrBlock   pulumi.StringInput `pulumi:"cidrBlock"`
	Description pulumi.StringInput `pulumi:"description"`
	Policy      pulumi.StringInput `pulumi:"policy"`
	Port        pulumi.StringInput `pulumi:"port"`
	Protocol    pulumi.StringInput `pulumi:"protocol"`
}

func (AclsAclListEgressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclsAclListEgress)(nil)).Elem()
}

func (i AclsAclListEgressArgs) ToAclsAclListEgressOutput() AclsAclListEgressOutput {
	return i.ToAclsAclListEgressOutputWithContext(context.Background())
}

func (i AclsAclListEgressArgs) ToAclsAclListEgressOutputWithContext(ctx context.Context) AclsAclListEgressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclsAclListEgressOutput)
}

// AclsAclListEgressArrayInput is an input type that accepts AclsAclListEgressArray and AclsAclListEgressArrayOutput values.
// You can construct a concrete instance of `AclsAclListEgressArrayInput` via:
//
//          AclsAclListEgressArray{ AclsAclListEgressArgs{...} }
type AclsAclListEgressArrayInput interface {
	pulumi.Input

	ToAclsAclListEgressArrayOutput() AclsAclListEgressArrayOutput
	ToAclsAclListEgressArrayOutputWithContext(context.Context) AclsAclListEgressArrayOutput
}

type AclsAclListEgressArray []AclsAclListEgressInput

func (AclsAclListEgressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclsAclListEgress)(nil)).Elem()
}

func (i AclsAclListEgressArray) ToAclsAclListEgressArrayOutput() AclsAclListEgressArrayOutput {
	return i.ToAclsAclListEgressArrayOutputWithContext(context.Background())
}

func (i AclsAclListEgressArray) ToAclsAclListEgressArrayOutputWithContext(ctx context.Context) AclsAclListEgressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclsAclListEgressArrayOutput)
}

type AclsAclListEgressOutput struct{ *pulumi.OutputState }

func (AclsAclListEgressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclsAclListEgress)(nil)).Elem()
}

func (o AclsAclListEgressOutput) ToAclsAclListEgressOutput() AclsAclListEgressOutput {
	return o
}

func (o AclsAclListEgressOutput) ToAclsAclListEgressOutputWithContext(ctx context.Context) AclsAclListEgressOutput {
	return o
}

func (o AclsAclListEgressOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclListEgress) string { return v.CidrBlock }).(pulumi.StringOutput)
}

func (o AclsAclListEgressOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclListEgress) string { return v.Description }).(pulumi.StringOutput)
}

func (o AclsAclListEgressOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclListEgress) string { return v.Policy }).(pulumi.StringOutput)
}

func (o AclsAclListEgressOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclListEgress) string { return v.Port }).(pulumi.StringOutput)
}

func (o AclsAclListEgressOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclListEgress) string { return v.Protocol }).(pulumi.StringOutput)
}

type AclsAclListEgressArrayOutput struct{ *pulumi.OutputState }

func (AclsAclListEgressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclsAclListEgress)(nil)).Elem()
}

func (o AclsAclListEgressArrayOutput) ToAclsAclListEgressArrayOutput() AclsAclListEgressArrayOutput {
	return o
}

func (o AclsAclListEgressArrayOutput) ToAclsAclListEgressArrayOutputWithContext(ctx context.Context) AclsAclListEgressArrayOutput {
	return o
}

func (o AclsAclListEgressArrayOutput) Index(i pulumi.IntInput) AclsAclListEgressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclsAclListEgress {
		return vs[0].([]AclsAclListEgress)[vs[1].(int)]
	}).(AclsAclListEgressOutput)
}

type AclsAclListIngress struct {
	CidrBlock   string `pulumi:"cidrBlock"`
	Description string `pulumi:"description"`
	Policy      string `pulumi:"policy"`
	Port        string `pulumi:"port"`
	Protocol    string `pulumi:"protocol"`
}

// AclsAclListIngressInput is an input type that accepts AclsAclListIngressArgs and AclsAclListIngressOutput values.
// You can construct a concrete instance of `AclsAclListIngressInput` via:
//
//          AclsAclListIngressArgs{...}
type AclsAclListIngressInput interface {
	pulumi.Input

	ToAclsAclListIngressOutput() AclsAclListIngressOutput
	ToAclsAclListIngressOutputWithContext(context.Context) AclsAclListIngressOutput
}

type AclsAclListIngressArgs struct {
	CidrBlock   pulumi.StringInput `pulumi:"cidrBlock"`
	Description pulumi.StringInput `pulumi:"description"`
	Policy      pulumi.StringInput `pulumi:"policy"`
	Port        pulumi.StringInput `pulumi:"port"`
	Protocol    pulumi.StringInput `pulumi:"protocol"`
}

func (AclsAclListIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclsAclListIngress)(nil)).Elem()
}

func (i AclsAclListIngressArgs) ToAclsAclListIngressOutput() AclsAclListIngressOutput {
	return i.ToAclsAclListIngressOutputWithContext(context.Background())
}

func (i AclsAclListIngressArgs) ToAclsAclListIngressOutputWithContext(ctx context.Context) AclsAclListIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclsAclListIngressOutput)
}

// AclsAclListIngressArrayInput is an input type that accepts AclsAclListIngressArray and AclsAclListIngressArrayOutput values.
// You can construct a concrete instance of `AclsAclListIngressArrayInput` via:
//
//          AclsAclListIngressArray{ AclsAclListIngressArgs{...} }
type AclsAclListIngressArrayInput interface {
	pulumi.Input

	ToAclsAclListIngressArrayOutput() AclsAclListIngressArrayOutput
	ToAclsAclListIngressArrayOutputWithContext(context.Context) AclsAclListIngressArrayOutput
}

type AclsAclListIngressArray []AclsAclListIngressInput

func (AclsAclListIngressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclsAclListIngress)(nil)).Elem()
}

func (i AclsAclListIngressArray) ToAclsAclListIngressArrayOutput() AclsAclListIngressArrayOutput {
	return i.ToAclsAclListIngressArrayOutputWithContext(context.Background())
}

func (i AclsAclListIngressArray) ToAclsAclListIngressArrayOutputWithContext(ctx context.Context) AclsAclListIngressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclsAclListIngressArrayOutput)
}

type AclsAclListIngressOutput struct{ *pulumi.OutputState }

func (AclsAclListIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclsAclListIngress)(nil)).Elem()
}

func (o AclsAclListIngressOutput) ToAclsAclListIngressOutput() AclsAclListIngressOutput {
	return o
}

func (o AclsAclListIngressOutput) ToAclsAclListIngressOutputWithContext(ctx context.Context) AclsAclListIngressOutput {
	return o
}

func (o AclsAclListIngressOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclListIngress) string { return v.CidrBlock }).(pulumi.StringOutput)
}

func (o AclsAclListIngressOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclListIngress) string { return v.Description }).(pulumi.StringOutput)
}

func (o AclsAclListIngressOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclListIngress) string { return v.Policy }).(pulumi.StringOutput)
}

func (o AclsAclListIngressOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclListIngress) string { return v.Port }).(pulumi.StringOutput)
}

func (o AclsAclListIngressOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclListIngress) string { return v.Protocol }).(pulumi.StringOutput)
}

type AclsAclListIngressArrayOutput struct{ *pulumi.OutputState }

func (AclsAclListIngressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclsAclListIngress)(nil)).Elem()
}

func (o AclsAclListIngressArrayOutput) ToAclsAclListIngressArrayOutput() AclsAclListIngressArrayOutput {
	return o
}

func (o AclsAclListIngressArrayOutput) ToAclsAclListIngressArrayOutputWithContext(ctx context.Context) AclsAclListIngressArrayOutput {
	return o
}

func (o AclsAclListIngressArrayOutput) Index(i pulumi.IntInput) AclsAclListIngressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclsAclListIngress {
		return vs[0].([]AclsAclListIngress)[vs[1].(int)]
	}).(AclsAclListIngressOutput)
}

type AclsAclListSubnet struct {
	CidrBlock  string                 `pulumi:"cidrBlock"`
	SubnetId   string                 `pulumi:"subnetId"`
	SubnetName string                 `pulumi:"subnetName"`
	Tags       map[string]interface{} `pulumi:"tags"`
	VpcId      string                 `pulumi:"vpcId"`
}

// AclsAclListSubnetInput is an input type that accepts AclsAclListSubnetArgs and AclsAclListSubnetOutput values.
// You can construct a concrete instance of `AclsAclListSubnetInput` via:
//
//          AclsAclListSubnetArgs{...}
type AclsAclListSubnetInput interface {
	pulumi.Input

	ToAclsAclListSubnetOutput() AclsAclListSubnetOutput
	ToAclsAclListSubnetOutputWithContext(context.Context) AclsAclListSubnetOutput
}

type AclsAclListSubnetArgs struct {
	CidrBlock  pulumi.StringInput `pulumi:"cidrBlock"`
	SubnetId   pulumi.StringInput `pulumi:"subnetId"`
	SubnetName pulumi.StringInput `pulumi:"subnetName"`
	Tags       pulumi.MapInput    `pulumi:"tags"`
	VpcId      pulumi.StringInput `pulumi:"vpcId"`
}

func (AclsAclListSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclsAclListSubnet)(nil)).Elem()
}

func (i AclsAclListSubnetArgs) ToAclsAclListSubnetOutput() AclsAclListSubnetOutput {
	return i.ToAclsAclListSubnetOutputWithContext(context.Background())
}

func (i AclsAclListSubnetArgs) ToAclsAclListSubnetOutputWithContext(ctx context.Context) AclsAclListSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclsAclListSubnetOutput)
}

// AclsAclListSubnetArrayInput is an input type that accepts AclsAclListSubnetArray and AclsAclListSubnetArrayOutput values.
// You can construct a concrete instance of `AclsAclListSubnetArrayInput` via:
//
//          AclsAclListSubnetArray{ AclsAclListSubnetArgs{...} }
type AclsAclListSubnetArrayInput interface {
	pulumi.Input

	ToAclsAclListSubnetArrayOutput() AclsAclListSubnetArrayOutput
	ToAclsAclListSubnetArrayOutputWithContext(context.Context) AclsAclListSubnetArrayOutput
}

type AclsAclListSubnetArray []AclsAclListSubnetInput

func (AclsAclListSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclsAclListSubnet)(nil)).Elem()
}

func (i AclsAclListSubnetArray) ToAclsAclListSubnetArrayOutput() AclsAclListSubnetArrayOutput {
	return i.ToAclsAclListSubnetArrayOutputWithContext(context.Background())
}

func (i AclsAclListSubnetArray) ToAclsAclListSubnetArrayOutputWithContext(ctx context.Context) AclsAclListSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclsAclListSubnetArrayOutput)
}

type AclsAclListSubnetOutput struct{ *pulumi.OutputState }

func (AclsAclListSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclsAclListSubnet)(nil)).Elem()
}

func (o AclsAclListSubnetOutput) ToAclsAclListSubnetOutput() AclsAclListSubnetOutput {
	return o
}

func (o AclsAclListSubnetOutput) ToAclsAclListSubnetOutputWithContext(ctx context.Context) AclsAclListSubnetOutput {
	return o
}

func (o AclsAclListSubnetOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclListSubnet) string { return v.CidrBlock }).(pulumi.StringOutput)
}

func (o AclsAclListSubnetOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclListSubnet) string { return v.SubnetId }).(pulumi.StringOutput)
}

func (o AclsAclListSubnetOutput) SubnetName() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclListSubnet) string { return v.SubnetName }).(pulumi.StringOutput)
}

func (o AclsAclListSubnetOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v AclsAclListSubnet) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

func (o AclsAclListSubnetOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAclListSubnet) string { return v.VpcId }).(pulumi.StringOutput)
}

type AclsAclListSubnetArrayOutput struct{ *pulumi.OutputState }

func (AclsAclListSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclsAclListSubnet)(nil)).Elem()
}

func (o AclsAclListSubnetArrayOutput) ToAclsAclListSubnetArrayOutput() AclsAclListSubnetArrayOutput {
	return o
}

func (o AclsAclListSubnetArrayOutput) ToAclsAclListSubnetArrayOutputWithContext(ctx context.Context) AclsAclListSubnetArrayOutput {
	return o
}

func (o AclsAclListSubnetArrayOutput) Index(i pulumi.IntInput) AclsAclListSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclsAclListSubnet {
		return vs[0].([]AclsAclListSubnet)[vs[1].(int)]
	}).(AclsAclListSubnetOutput)
}

type RouteTablesInstanceList struct {
	CreateTime      string                                  `pulumi:"createTime"`
	IsDefault       bool                                    `pulumi:"isDefault"`
	Name            string                                  `pulumi:"name"`
	RouteEntryInfos []RouteTablesInstanceListRouteEntryInfo `pulumi:"routeEntryInfos"`
	RouteTableId    string                                  `pulumi:"routeTableId"`
	SubnetIds       []string                                `pulumi:"subnetIds"`
	Tags            map[string]interface{}                  `pulumi:"tags"`
	VpcId           string                                  `pulumi:"vpcId"`
}

// RouteTablesInstanceListInput is an input type that accepts RouteTablesInstanceListArgs and RouteTablesInstanceListOutput values.
// You can construct a concrete instance of `RouteTablesInstanceListInput` via:
//
//          RouteTablesInstanceListArgs{...}
type RouteTablesInstanceListInput interface {
	pulumi.Input

	ToRouteTablesInstanceListOutput() RouteTablesInstanceListOutput
	ToRouteTablesInstanceListOutputWithContext(context.Context) RouteTablesInstanceListOutput
}

type RouteTablesInstanceListArgs struct {
	CreateTime      pulumi.StringInput                              `pulumi:"createTime"`
	IsDefault       pulumi.BoolInput                                `pulumi:"isDefault"`
	Name            pulumi.StringInput                              `pulumi:"name"`
	RouteEntryInfos RouteTablesInstanceListRouteEntryInfoArrayInput `pulumi:"routeEntryInfos"`
	RouteTableId    pulumi.StringInput                              `pulumi:"routeTableId"`
	SubnetIds       pulumi.StringArrayInput                         `pulumi:"subnetIds"`
	Tags            pulumi.MapInput                                 `pulumi:"tags"`
	VpcId           pulumi.StringInput                              `pulumi:"vpcId"`
}

func (RouteTablesInstanceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTablesInstanceList)(nil)).Elem()
}

func (i RouteTablesInstanceListArgs) ToRouteTablesInstanceListOutput() RouteTablesInstanceListOutput {
	return i.ToRouteTablesInstanceListOutputWithContext(context.Background())
}

func (i RouteTablesInstanceListArgs) ToRouteTablesInstanceListOutputWithContext(ctx context.Context) RouteTablesInstanceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTablesInstanceListOutput)
}

// RouteTablesInstanceListArrayInput is an input type that accepts RouteTablesInstanceListArray and RouteTablesInstanceListArrayOutput values.
// You can construct a concrete instance of `RouteTablesInstanceListArrayInput` via:
//
//          RouteTablesInstanceListArray{ RouteTablesInstanceListArgs{...} }
type RouteTablesInstanceListArrayInput interface {
	pulumi.Input

	ToRouteTablesInstanceListArrayOutput() RouteTablesInstanceListArrayOutput
	ToRouteTablesInstanceListArrayOutputWithContext(context.Context) RouteTablesInstanceListArrayOutput
}

type RouteTablesInstanceListArray []RouteTablesInstanceListInput

func (RouteTablesInstanceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteTablesInstanceList)(nil)).Elem()
}

func (i RouteTablesInstanceListArray) ToRouteTablesInstanceListArrayOutput() RouteTablesInstanceListArrayOutput {
	return i.ToRouteTablesInstanceListArrayOutputWithContext(context.Background())
}

func (i RouteTablesInstanceListArray) ToRouteTablesInstanceListArrayOutputWithContext(ctx context.Context) RouteTablesInstanceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTablesInstanceListArrayOutput)
}

type RouteTablesInstanceListOutput struct{ *pulumi.OutputState }

func (RouteTablesInstanceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTablesInstanceList)(nil)).Elem()
}

func (o RouteTablesInstanceListOutput) ToRouteTablesInstanceListOutput() RouteTablesInstanceListOutput {
	return o
}

func (o RouteTablesInstanceListOutput) ToRouteTablesInstanceListOutputWithContext(ctx context.Context) RouteTablesInstanceListOutput {
	return o
}

func (o RouteTablesInstanceListOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesInstanceList) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o RouteTablesInstanceListOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v RouteTablesInstanceList) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

func (o RouteTablesInstanceListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesInstanceList) string { return v.Name }).(pulumi.StringOutput)
}

func (o RouteTablesInstanceListOutput) RouteEntryInfos() RouteTablesInstanceListRouteEntryInfoArrayOutput {
	return o.ApplyT(func(v RouteTablesInstanceList) []RouteTablesInstanceListRouteEntryInfo { return v.RouteEntryInfos }).(RouteTablesInstanceListRouteEntryInfoArrayOutput)
}

func (o RouteTablesInstanceListOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesInstanceList) string { return v.RouteTableId }).(pulumi.StringOutput)
}

func (o RouteTablesInstanceListOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteTablesInstanceList) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o RouteTablesInstanceListOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v RouteTablesInstanceList) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

func (o RouteTablesInstanceListOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesInstanceList) string { return v.VpcId }).(pulumi.StringOutput)
}

type RouteTablesInstanceListArrayOutput struct{ *pulumi.OutputState }

func (RouteTablesInstanceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteTablesInstanceList)(nil)).Elem()
}

func (o RouteTablesInstanceListArrayOutput) ToRouteTablesInstanceListArrayOutput() RouteTablesInstanceListArrayOutput {
	return o
}

func (o RouteTablesInstanceListArrayOutput) ToRouteTablesInstanceListArrayOutputWithContext(ctx context.Context) RouteTablesInstanceListArrayOutput {
	return o
}

func (o RouteTablesInstanceListArrayOutput) Index(i pulumi.IntInput) RouteTablesInstanceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteTablesInstanceList {
		return vs[0].([]RouteTablesInstanceList)[vs[1].(int)]
	}).(RouteTablesInstanceListOutput)
}

type RouteTablesInstanceListRouteEntryInfo struct {
	Description          string `pulumi:"description"`
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	NextHub              string `pulumi:"nextHub"`
	NextType             string `pulumi:"nextType"`
	RouteEntryId         string `pulumi:"routeEntryId"`
}

// RouteTablesInstanceListRouteEntryInfoInput is an input type that accepts RouteTablesInstanceListRouteEntryInfoArgs and RouteTablesInstanceListRouteEntryInfoOutput values.
// You can construct a concrete instance of `RouteTablesInstanceListRouteEntryInfoInput` via:
//
//          RouteTablesInstanceListRouteEntryInfoArgs{...}
type RouteTablesInstanceListRouteEntryInfoInput interface {
	pulumi.Input

	ToRouteTablesInstanceListRouteEntryInfoOutput() RouteTablesInstanceListRouteEntryInfoOutput
	ToRouteTablesInstanceListRouteEntryInfoOutputWithContext(context.Context) RouteTablesInstanceListRouteEntryInfoOutput
}

type RouteTablesInstanceListRouteEntryInfoArgs struct {
	Description          pulumi.StringInput `pulumi:"description"`
	DestinationCidrBlock pulumi.StringInput `pulumi:"destinationCidrBlock"`
	NextHub              pulumi.StringInput `pulumi:"nextHub"`
	NextType             pulumi.StringInput `pulumi:"nextType"`
	RouteEntryId         pulumi.StringInput `pulumi:"routeEntryId"`
}

func (RouteTablesInstanceListRouteEntryInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTablesInstanceListRouteEntryInfo)(nil)).Elem()
}

func (i RouteTablesInstanceListRouteEntryInfoArgs) ToRouteTablesInstanceListRouteEntryInfoOutput() RouteTablesInstanceListRouteEntryInfoOutput {
	return i.ToRouteTablesInstanceListRouteEntryInfoOutputWithContext(context.Background())
}

func (i RouteTablesInstanceListRouteEntryInfoArgs) ToRouteTablesInstanceListRouteEntryInfoOutputWithContext(ctx context.Context) RouteTablesInstanceListRouteEntryInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTablesInstanceListRouteEntryInfoOutput)
}

// RouteTablesInstanceListRouteEntryInfoArrayInput is an input type that accepts RouteTablesInstanceListRouteEntryInfoArray and RouteTablesInstanceListRouteEntryInfoArrayOutput values.
// You can construct a concrete instance of `RouteTablesInstanceListRouteEntryInfoArrayInput` via:
//
//          RouteTablesInstanceListRouteEntryInfoArray{ RouteTablesInstanceListRouteEntryInfoArgs{...} }
type RouteTablesInstanceListRouteEntryInfoArrayInput interface {
	pulumi.Input

	ToRouteTablesInstanceListRouteEntryInfoArrayOutput() RouteTablesInstanceListRouteEntryInfoArrayOutput
	ToRouteTablesInstanceListRouteEntryInfoArrayOutputWithContext(context.Context) RouteTablesInstanceListRouteEntryInfoArrayOutput
}

type RouteTablesInstanceListRouteEntryInfoArray []RouteTablesInstanceListRouteEntryInfoInput

func (RouteTablesInstanceListRouteEntryInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteTablesInstanceListRouteEntryInfo)(nil)).Elem()
}

func (i RouteTablesInstanceListRouteEntryInfoArray) ToRouteTablesInstanceListRouteEntryInfoArrayOutput() RouteTablesInstanceListRouteEntryInfoArrayOutput {
	return i.ToRouteTablesInstanceListRouteEntryInfoArrayOutputWithContext(context.Background())
}

func (i RouteTablesInstanceListRouteEntryInfoArray) ToRouteTablesInstanceListRouteEntryInfoArrayOutputWithContext(ctx context.Context) RouteTablesInstanceListRouteEntryInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTablesInstanceListRouteEntryInfoArrayOutput)
}

type RouteTablesInstanceListRouteEntryInfoOutput struct{ *pulumi.OutputState }

func (RouteTablesInstanceListRouteEntryInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTablesInstanceListRouteEntryInfo)(nil)).Elem()
}

func (o RouteTablesInstanceListRouteEntryInfoOutput) ToRouteTablesInstanceListRouteEntryInfoOutput() RouteTablesInstanceListRouteEntryInfoOutput {
	return o
}

func (o RouteTablesInstanceListRouteEntryInfoOutput) ToRouteTablesInstanceListRouteEntryInfoOutputWithContext(ctx context.Context) RouteTablesInstanceListRouteEntryInfoOutput {
	return o
}

func (o RouteTablesInstanceListRouteEntryInfoOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesInstanceListRouteEntryInfo) string { return v.Description }).(pulumi.StringOutput)
}

func (o RouteTablesInstanceListRouteEntryInfoOutput) DestinationCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesInstanceListRouteEntryInfo) string { return v.DestinationCidrBlock }).(pulumi.StringOutput)
}

func (o RouteTablesInstanceListRouteEntryInfoOutput) NextHub() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesInstanceListRouteEntryInfo) string { return v.NextHub }).(pulumi.StringOutput)
}

func (o RouteTablesInstanceListRouteEntryInfoOutput) NextType() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesInstanceListRouteEntryInfo) string { return v.NextType }).(pulumi.StringOutput)
}

func (o RouteTablesInstanceListRouteEntryInfoOutput) RouteEntryId() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesInstanceListRouteEntryInfo) string { return v.RouteEntryId }).(pulumi.StringOutput)
}

type RouteTablesInstanceListRouteEntryInfoArrayOutput struct{ *pulumi.OutputState }

func (RouteTablesInstanceListRouteEntryInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteTablesInstanceListRouteEntryInfo)(nil)).Elem()
}

func (o RouteTablesInstanceListRouteEntryInfoArrayOutput) ToRouteTablesInstanceListRouteEntryInfoArrayOutput() RouteTablesInstanceListRouteEntryInfoArrayOutput {
	return o
}

func (o RouteTablesInstanceListRouteEntryInfoArrayOutput) ToRouteTablesInstanceListRouteEntryInfoArrayOutputWithContext(ctx context.Context) RouteTablesInstanceListRouteEntryInfoArrayOutput {
	return o
}

func (o RouteTablesInstanceListRouteEntryInfoArrayOutput) Index(i pulumi.IntInput) RouteTablesInstanceListRouteEntryInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteTablesInstanceListRouteEntryInfo {
		return vs[0].([]RouteTablesInstanceListRouteEntryInfo)[vs[1].(int)]
	}).(RouteTablesInstanceListRouteEntryInfoOutput)
}

type SubnetsInstanceList struct {
	AvailabilityZone string                 `pulumi:"availabilityZone"`
	AvailableIpCount int                    `pulumi:"availableIpCount"`
	CidrBlock        string                 `pulumi:"cidrBlock"`
	CreateTime       string                 `pulumi:"createTime"`
	IsDefault        bool                   `pulumi:"isDefault"`
	IsMulticast      bool                   `pulumi:"isMulticast"`
	Name             string                 `pulumi:"name"`
	RouteTableId     string                 `pulumi:"routeTableId"`
	SubnetId         string                 `pulumi:"subnetId"`
	Tags             map[string]interface{} `pulumi:"tags"`
	VpcId            string                 `pulumi:"vpcId"`
}

// SubnetsInstanceListInput is an input type that accepts SubnetsInstanceListArgs and SubnetsInstanceListOutput values.
// You can construct a concrete instance of `SubnetsInstanceListInput` via:
//
//          SubnetsInstanceListArgs{...}
type SubnetsInstanceListInput interface {
	pulumi.Input

	ToSubnetsInstanceListOutput() SubnetsInstanceListOutput
	ToSubnetsInstanceListOutputWithContext(context.Context) SubnetsInstanceListOutput
}

type SubnetsInstanceListArgs struct {
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	AvailableIpCount pulumi.IntInput    `pulumi:"availableIpCount"`
	CidrBlock        pulumi.StringInput `pulumi:"cidrBlock"`
	CreateTime       pulumi.StringInput `pulumi:"createTime"`
	IsDefault        pulumi.BoolInput   `pulumi:"isDefault"`
	IsMulticast      pulumi.BoolInput   `pulumi:"isMulticast"`
	Name             pulumi.StringInput `pulumi:"name"`
	RouteTableId     pulumi.StringInput `pulumi:"routeTableId"`
	SubnetId         pulumi.StringInput `pulumi:"subnetId"`
	Tags             pulumi.MapInput    `pulumi:"tags"`
	VpcId            pulumi.StringInput `pulumi:"vpcId"`
}

func (SubnetsInstanceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetsInstanceList)(nil)).Elem()
}

func (i SubnetsInstanceListArgs) ToSubnetsInstanceListOutput() SubnetsInstanceListOutput {
	return i.ToSubnetsInstanceListOutputWithContext(context.Background())
}

func (i SubnetsInstanceListArgs) ToSubnetsInstanceListOutputWithContext(ctx context.Context) SubnetsInstanceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetsInstanceListOutput)
}

// SubnetsInstanceListArrayInput is an input type that accepts SubnetsInstanceListArray and SubnetsInstanceListArrayOutput values.
// You can construct a concrete instance of `SubnetsInstanceListArrayInput` via:
//
//          SubnetsInstanceListArray{ SubnetsInstanceListArgs{...} }
type SubnetsInstanceListArrayInput interface {
	pulumi.Input

	ToSubnetsInstanceListArrayOutput() SubnetsInstanceListArrayOutput
	ToSubnetsInstanceListArrayOutputWithContext(context.Context) SubnetsInstanceListArrayOutput
}

type SubnetsInstanceListArray []SubnetsInstanceListInput

func (SubnetsInstanceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetsInstanceList)(nil)).Elem()
}

func (i SubnetsInstanceListArray) ToSubnetsInstanceListArrayOutput() SubnetsInstanceListArrayOutput {
	return i.ToSubnetsInstanceListArrayOutputWithContext(context.Background())
}

func (i SubnetsInstanceListArray) ToSubnetsInstanceListArrayOutputWithContext(ctx context.Context) SubnetsInstanceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetsInstanceListArrayOutput)
}

type SubnetsInstanceListOutput struct{ *pulumi.OutputState }

func (SubnetsInstanceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetsInstanceList)(nil)).Elem()
}

func (o SubnetsInstanceListOutput) ToSubnetsInstanceListOutput() SubnetsInstanceListOutput {
	return o
}

func (o SubnetsInstanceListOutput) ToSubnetsInstanceListOutputWithContext(ctx context.Context) SubnetsInstanceListOutput {
	return o
}

func (o SubnetsInstanceListOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsInstanceList) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o SubnetsInstanceListOutput) AvailableIpCount() pulumi.IntOutput {
	return o.ApplyT(func(v SubnetsInstanceList) int { return v.AvailableIpCount }).(pulumi.IntOutput)
}

func (o SubnetsInstanceListOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsInstanceList) string { return v.CidrBlock }).(pulumi.StringOutput)
}

func (o SubnetsInstanceListOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsInstanceList) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o SubnetsInstanceListOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v SubnetsInstanceList) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

func (o SubnetsInstanceListOutput) IsMulticast() pulumi.BoolOutput {
	return o.ApplyT(func(v SubnetsInstanceList) bool { return v.IsMulticast }).(pulumi.BoolOutput)
}

func (o SubnetsInstanceListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsInstanceList) string { return v.Name }).(pulumi.StringOutput)
}

func (o SubnetsInstanceListOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsInstanceList) string { return v.RouteTableId }).(pulumi.StringOutput)
}

func (o SubnetsInstanceListOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsInstanceList) string { return v.SubnetId }).(pulumi.StringOutput)
}

func (o SubnetsInstanceListOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v SubnetsInstanceList) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

func (o SubnetsInstanceListOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsInstanceList) string { return v.VpcId }).(pulumi.StringOutput)
}

type SubnetsInstanceListArrayOutput struct{ *pulumi.OutputState }

func (SubnetsInstanceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetsInstanceList)(nil)).Elem()
}

func (o SubnetsInstanceListArrayOutput) ToSubnetsInstanceListArrayOutput() SubnetsInstanceListArrayOutput {
	return o
}

func (o SubnetsInstanceListArrayOutput) ToSubnetsInstanceListArrayOutputWithContext(ctx context.Context) SubnetsInstanceListArrayOutput {
	return o
}

func (o SubnetsInstanceListArrayOutput) Index(i pulumi.IntInput) SubnetsInstanceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubnetsInstanceList {
		return vs[0].([]SubnetsInstanceList)[vs[1].(int)]
	}).(SubnetsInstanceListOutput)
}

type VpcInstancesInstanceList struct {
	CidrBlock   string                 `pulumi:"cidrBlock"`
	CreateTime  string                 `pulumi:"createTime"`
	DnsServers  []string               `pulumi:"dnsServers"`
	IsDefault   bool                   `pulumi:"isDefault"`
	IsMulticast bool                   `pulumi:"isMulticast"`
	Name        string                 `pulumi:"name"`
	SubnetIds   []string               `pulumi:"subnetIds"`
	Tags        map[string]interface{} `pulumi:"tags"`
	VpcId       string                 `pulumi:"vpcId"`
}

// VpcInstancesInstanceListInput is an input type that accepts VpcInstancesInstanceListArgs and VpcInstancesInstanceListOutput values.
// You can construct a concrete instance of `VpcInstancesInstanceListInput` via:
//
//          VpcInstancesInstanceListArgs{...}
type VpcInstancesInstanceListInput interface {
	pulumi.Input

	ToVpcInstancesInstanceListOutput() VpcInstancesInstanceListOutput
	ToVpcInstancesInstanceListOutputWithContext(context.Context) VpcInstancesInstanceListOutput
}

type VpcInstancesInstanceListArgs struct {
	CidrBlock   pulumi.StringInput      `pulumi:"cidrBlock"`
	CreateTime  pulumi.StringInput      `pulumi:"createTime"`
	DnsServers  pulumi.StringArrayInput `pulumi:"dnsServers"`
	IsDefault   pulumi.BoolInput        `pulumi:"isDefault"`
	IsMulticast pulumi.BoolInput        `pulumi:"isMulticast"`
	Name        pulumi.StringInput      `pulumi:"name"`
	SubnetIds   pulumi.StringArrayInput `pulumi:"subnetIds"`
	Tags        pulumi.MapInput         `pulumi:"tags"`
	VpcId       pulumi.StringInput      `pulumi:"vpcId"`
}

func (VpcInstancesInstanceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcInstancesInstanceList)(nil)).Elem()
}

func (i VpcInstancesInstanceListArgs) ToVpcInstancesInstanceListOutput() VpcInstancesInstanceListOutput {
	return i.ToVpcInstancesInstanceListOutputWithContext(context.Background())
}

func (i VpcInstancesInstanceListArgs) ToVpcInstancesInstanceListOutputWithContext(ctx context.Context) VpcInstancesInstanceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcInstancesInstanceListOutput)
}

// VpcInstancesInstanceListArrayInput is an input type that accepts VpcInstancesInstanceListArray and VpcInstancesInstanceListArrayOutput values.
// You can construct a concrete instance of `VpcInstancesInstanceListArrayInput` via:
//
//          VpcInstancesInstanceListArray{ VpcInstancesInstanceListArgs{...} }
type VpcInstancesInstanceListArrayInput interface {
	pulumi.Input

	ToVpcInstancesInstanceListArrayOutput() VpcInstancesInstanceListArrayOutput
	ToVpcInstancesInstanceListArrayOutputWithContext(context.Context) VpcInstancesInstanceListArrayOutput
}

type VpcInstancesInstanceListArray []VpcInstancesInstanceListInput

func (VpcInstancesInstanceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcInstancesInstanceList)(nil)).Elem()
}

func (i VpcInstancesInstanceListArray) ToVpcInstancesInstanceListArrayOutput() VpcInstancesInstanceListArrayOutput {
	return i.ToVpcInstancesInstanceListArrayOutputWithContext(context.Background())
}

func (i VpcInstancesInstanceListArray) ToVpcInstancesInstanceListArrayOutputWithContext(ctx context.Context) VpcInstancesInstanceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcInstancesInstanceListArrayOutput)
}

type VpcInstancesInstanceListOutput struct{ *pulumi.OutputState }

func (VpcInstancesInstanceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcInstancesInstanceList)(nil)).Elem()
}

func (o VpcInstancesInstanceListOutput) ToVpcInstancesInstanceListOutput() VpcInstancesInstanceListOutput {
	return o
}

func (o VpcInstancesInstanceListOutput) ToVpcInstancesInstanceListOutputWithContext(ctx context.Context) VpcInstancesInstanceListOutput {
	return o
}

func (o VpcInstancesInstanceListOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v VpcInstancesInstanceList) string { return v.CidrBlock }).(pulumi.StringOutput)
}

func (o VpcInstancesInstanceListOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v VpcInstancesInstanceList) string { return v.CreateTime }).(pulumi.StringOutput)
}

func (o VpcInstancesInstanceListOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VpcInstancesInstanceList) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

func (o VpcInstancesInstanceListOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v VpcInstancesInstanceList) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

func (o VpcInstancesInstanceListOutput) IsMulticast() pulumi.BoolOutput {
	return o.ApplyT(func(v VpcInstancesInstanceList) bool { return v.IsMulticast }).(pulumi.BoolOutput)
}

func (o VpcInstancesInstanceListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VpcInstancesInstanceList) string { return v.Name }).(pulumi.StringOutput)
}

func (o VpcInstancesInstanceListOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VpcInstancesInstanceList) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o VpcInstancesInstanceListOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v VpcInstancesInstanceList) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

func (o VpcInstancesInstanceListOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v VpcInstancesInstanceList) string { return v.VpcId }).(pulumi.StringOutput)
}

type VpcInstancesInstanceListArrayOutput struct{ *pulumi.OutputState }

func (VpcInstancesInstanceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcInstancesInstanceList)(nil)).Elem()
}

func (o VpcInstancesInstanceListArrayOutput) ToVpcInstancesInstanceListArrayOutput() VpcInstancesInstanceListArrayOutput {
	return o
}

func (o VpcInstancesInstanceListArrayOutput) ToVpcInstancesInstanceListArrayOutputWithContext(ctx context.Context) VpcInstancesInstanceListArrayOutput {
	return o
}

func (o VpcInstancesInstanceListArrayOutput) Index(i pulumi.IntInput) VpcInstancesInstanceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcInstancesInstanceList {
		return vs[0].([]VpcInstancesInstanceList)[vs[1].(int)]
	}).(VpcInstancesInstanceListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclsAclListInput)(nil)).Elem(), AclsAclListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclsAclListArrayInput)(nil)).Elem(), AclsAclListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclsAclListEgressInput)(nil)).Elem(), AclsAclListEgressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclsAclListEgressArrayInput)(nil)).Elem(), AclsAclListEgressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclsAclListIngressInput)(nil)).Elem(), AclsAclListIngressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclsAclListIngressArrayInput)(nil)).Elem(), AclsAclListIngressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclsAclListSubnetInput)(nil)).Elem(), AclsAclListSubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclsAclListSubnetArrayInput)(nil)).Elem(), AclsAclListSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTablesInstanceListInput)(nil)).Elem(), RouteTablesInstanceListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTablesInstanceListArrayInput)(nil)).Elem(), RouteTablesInstanceListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTablesInstanceListRouteEntryInfoInput)(nil)).Elem(), RouteTablesInstanceListRouteEntryInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTablesInstanceListRouteEntryInfoArrayInput)(nil)).Elem(), RouteTablesInstanceListRouteEntryInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetsInstanceListInput)(nil)).Elem(), SubnetsInstanceListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetsInstanceListArrayInput)(nil)).Elem(), SubnetsInstanceListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInstancesInstanceListInput)(nil)).Elem(), VpcInstancesInstanceListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInstancesInstanceListArrayInput)(nil)).Elem(), VpcInstancesInstanceListArray{})
	pulumi.RegisterOutputType(AclsAclListOutput{})
	pulumi.RegisterOutputType(AclsAclListArrayOutput{})
	pulumi.RegisterOutputType(AclsAclListEgressOutput{})
	pulumi.RegisterOutputType(AclsAclListEgressArrayOutput{})
	pulumi.RegisterOutputType(AclsAclListIngressOutput{})
	pulumi.RegisterOutputType(AclsAclListIngressArrayOutput{})
	pulumi.RegisterOutputType(AclsAclListSubnetOutput{})
	pulumi.RegisterOutputType(AclsAclListSubnetArrayOutput{})
	pulumi.RegisterOutputType(RouteTablesInstanceListOutput{})
	pulumi.RegisterOutputType(RouteTablesInstanceListArrayOutput{})
	pulumi.RegisterOutputType(RouteTablesInstanceListRouteEntryInfoOutput{})
	pulumi.RegisterOutputType(RouteTablesInstanceListRouteEntryInfoArrayOutput{})
	pulumi.RegisterOutputType(SubnetsInstanceListOutput{})
	pulumi.RegisterOutputType(SubnetsInstanceListArrayOutput{})
	pulumi.RegisterOutputType(VpcInstancesInstanceListOutput{})
	pulumi.RegisterOutputType(VpcInstancesInstanceListArrayOutput{})
}
