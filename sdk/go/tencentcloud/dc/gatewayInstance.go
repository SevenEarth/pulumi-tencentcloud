// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GatewayInstance struct {
	pulumi.CustomResourceState

	// Type of CCN route. Valid value: `BGP` and `STATIC`. The property is available when the DCG type is CCN gateway and BGP
	// enabled.
	CnnRouteType pulumi.StringOutput `pulumi:"cnnRouteType"`
	// Creation time of resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Indicates whether the BGP is enabled.
	EnableBgp pulumi.BoolOutput `pulumi:"enableBgp"`
	// Type of the gateway. Valid value: `NORMAL` and `NAT`. Default is `NORMAL`. NOTES: CCN only supports `NORMAL` and a VPC
	// can create two DCGs, the one is NAT type and the other is non-NAT type.
	GatewayType pulumi.StringPtrOutput `pulumi:"gatewayType"`
	// Name of the DCG.
	Name pulumi.StringOutput `pulumi:"name"`
	// If the `network_type` value is `VPC`, the available value is VPC ID. But when the `network_type` value is `CCN`, the
	// available value is CCN instance ID.
	NetworkInstanceId pulumi.StringOutput `pulumi:"networkInstanceId"`
	// Type of associated network. Valid value: `VPC` and `CCN`.
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
}

// NewGatewayInstance registers a new resource with the given unique name, arguments, and options.
func NewGatewayInstance(ctx *pulumi.Context,
	name string, args *GatewayInstanceArgs, opts ...pulumi.ResourceOption) (*GatewayInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInstanceId'")
	}
	if args.NetworkType == nil {
		return nil, errors.New("invalid value for required argument 'NetworkType'")
	}
	var resource GatewayInstance
	err := ctx.RegisterResource("tencentcloud:Dc/gatewayInstance:GatewayInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayInstance gets an existing GatewayInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayInstanceState, opts ...pulumi.ResourceOption) (*GatewayInstance, error) {
	var resource GatewayInstance
	err := ctx.ReadResource("tencentcloud:Dc/gatewayInstance:GatewayInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayInstance resources.
type gatewayInstanceState struct {
	// Type of CCN route. Valid value: `BGP` and `STATIC`. The property is available when the DCG type is CCN gateway and BGP
	// enabled.
	CnnRouteType *string `pulumi:"cnnRouteType"`
	// Creation time of resource.
	CreateTime *string `pulumi:"createTime"`
	// Indicates whether the BGP is enabled.
	EnableBgp *bool `pulumi:"enableBgp"`
	// Type of the gateway. Valid value: `NORMAL` and `NAT`. Default is `NORMAL`. NOTES: CCN only supports `NORMAL` and a VPC
	// can create two DCGs, the one is NAT type and the other is non-NAT type.
	GatewayType *string `pulumi:"gatewayType"`
	// Name of the DCG.
	Name *string `pulumi:"name"`
	// If the `network_type` value is `VPC`, the available value is VPC ID. But when the `network_type` value is `CCN`, the
	// available value is CCN instance ID.
	NetworkInstanceId *string `pulumi:"networkInstanceId"`
	// Type of associated network. Valid value: `VPC` and `CCN`.
	NetworkType *string `pulumi:"networkType"`
}

type GatewayInstanceState struct {
	// Type of CCN route. Valid value: `BGP` and `STATIC`. The property is available when the DCG type is CCN gateway and BGP
	// enabled.
	CnnRouteType pulumi.StringPtrInput
	// Creation time of resource.
	CreateTime pulumi.StringPtrInput
	// Indicates whether the BGP is enabled.
	EnableBgp pulumi.BoolPtrInput
	// Type of the gateway. Valid value: `NORMAL` and `NAT`. Default is `NORMAL`. NOTES: CCN only supports `NORMAL` and a VPC
	// can create two DCGs, the one is NAT type and the other is non-NAT type.
	GatewayType pulumi.StringPtrInput
	// Name of the DCG.
	Name pulumi.StringPtrInput
	// If the `network_type` value is `VPC`, the available value is VPC ID. But when the `network_type` value is `CCN`, the
	// available value is CCN instance ID.
	NetworkInstanceId pulumi.StringPtrInput
	// Type of associated network. Valid value: `VPC` and `CCN`.
	NetworkType pulumi.StringPtrInput
}

func (GatewayInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayInstanceState)(nil)).Elem()
}

type gatewayInstanceArgs struct {
	// Type of the gateway. Valid value: `NORMAL` and `NAT`. Default is `NORMAL`. NOTES: CCN only supports `NORMAL` and a VPC
	// can create two DCGs, the one is NAT type and the other is non-NAT type.
	GatewayType *string `pulumi:"gatewayType"`
	// Name of the DCG.
	Name *string `pulumi:"name"`
	// If the `network_type` value is `VPC`, the available value is VPC ID. But when the `network_type` value is `CCN`, the
	// available value is CCN instance ID.
	NetworkInstanceId string `pulumi:"networkInstanceId"`
	// Type of associated network. Valid value: `VPC` and `CCN`.
	NetworkType string `pulumi:"networkType"`
}

// The set of arguments for constructing a GatewayInstance resource.
type GatewayInstanceArgs struct {
	// Type of the gateway. Valid value: `NORMAL` and `NAT`. Default is `NORMAL`. NOTES: CCN only supports `NORMAL` and a VPC
	// can create two DCGs, the one is NAT type and the other is non-NAT type.
	GatewayType pulumi.StringPtrInput
	// Name of the DCG.
	Name pulumi.StringPtrInput
	// If the `network_type` value is `VPC`, the available value is VPC ID. But when the `network_type` value is `CCN`, the
	// available value is CCN instance ID.
	NetworkInstanceId pulumi.StringInput
	// Type of associated network. Valid value: `VPC` and `CCN`.
	NetworkType pulumi.StringInput
}

func (GatewayInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayInstanceArgs)(nil)).Elem()
}

type GatewayInstanceInput interface {
	pulumi.Input

	ToGatewayInstanceOutput() GatewayInstanceOutput
	ToGatewayInstanceOutputWithContext(ctx context.Context) GatewayInstanceOutput
}

func (*GatewayInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayInstance)(nil)).Elem()
}

func (i *GatewayInstance) ToGatewayInstanceOutput() GatewayInstanceOutput {
	return i.ToGatewayInstanceOutputWithContext(context.Background())
}

func (i *GatewayInstance) ToGatewayInstanceOutputWithContext(ctx context.Context) GatewayInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayInstanceOutput)
}

// GatewayInstanceArrayInput is an input type that accepts GatewayInstanceArray and GatewayInstanceArrayOutput values.
// You can construct a concrete instance of `GatewayInstanceArrayInput` via:
//
//          GatewayInstanceArray{ GatewayInstanceArgs{...} }
type GatewayInstanceArrayInput interface {
	pulumi.Input

	ToGatewayInstanceArrayOutput() GatewayInstanceArrayOutput
	ToGatewayInstanceArrayOutputWithContext(context.Context) GatewayInstanceArrayOutput
}

type GatewayInstanceArray []GatewayInstanceInput

func (GatewayInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayInstance)(nil)).Elem()
}

func (i GatewayInstanceArray) ToGatewayInstanceArrayOutput() GatewayInstanceArrayOutput {
	return i.ToGatewayInstanceArrayOutputWithContext(context.Background())
}

func (i GatewayInstanceArray) ToGatewayInstanceArrayOutputWithContext(ctx context.Context) GatewayInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayInstanceArrayOutput)
}

// GatewayInstanceMapInput is an input type that accepts GatewayInstanceMap and GatewayInstanceMapOutput values.
// You can construct a concrete instance of `GatewayInstanceMapInput` via:
//
//          GatewayInstanceMap{ "key": GatewayInstanceArgs{...} }
type GatewayInstanceMapInput interface {
	pulumi.Input

	ToGatewayInstanceMapOutput() GatewayInstanceMapOutput
	ToGatewayInstanceMapOutputWithContext(context.Context) GatewayInstanceMapOutput
}

type GatewayInstanceMap map[string]GatewayInstanceInput

func (GatewayInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayInstance)(nil)).Elem()
}

func (i GatewayInstanceMap) ToGatewayInstanceMapOutput() GatewayInstanceMapOutput {
	return i.ToGatewayInstanceMapOutputWithContext(context.Background())
}

func (i GatewayInstanceMap) ToGatewayInstanceMapOutputWithContext(ctx context.Context) GatewayInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayInstanceMapOutput)
}

type GatewayInstanceOutput struct{ *pulumi.OutputState }

func (GatewayInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayInstance)(nil)).Elem()
}

func (o GatewayInstanceOutput) ToGatewayInstanceOutput() GatewayInstanceOutput {
	return o
}

func (o GatewayInstanceOutput) ToGatewayInstanceOutputWithContext(ctx context.Context) GatewayInstanceOutput {
	return o
}

// Type of CCN route. Valid value: `BGP` and `STATIC`. The property is available when the DCG type is CCN gateway and BGP
// enabled.
func (o GatewayInstanceOutput) CnnRouteType() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayInstance) pulumi.StringOutput { return v.CnnRouteType }).(pulumi.StringOutput)
}

// Creation time of resource.
func (o GatewayInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayInstance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Indicates whether the BGP is enabled.
func (o GatewayInstanceOutput) EnableBgp() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayInstance) pulumi.BoolOutput { return v.EnableBgp }).(pulumi.BoolOutput)
}

// Type of the gateway. Valid value: `NORMAL` and `NAT`. Default is `NORMAL`. NOTES: CCN only supports `NORMAL` and a VPC
// can create two DCGs, the one is NAT type and the other is non-NAT type.
func (o GatewayInstanceOutput) GatewayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayInstance) pulumi.StringPtrOutput { return v.GatewayType }).(pulumi.StringPtrOutput)
}

// Name of the DCG.
func (o GatewayInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// If the `network_type` value is `VPC`, the available value is VPC ID. But when the `network_type` value is `CCN`, the
// available value is CCN instance ID.
func (o GatewayInstanceOutput) NetworkInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayInstance) pulumi.StringOutput { return v.NetworkInstanceId }).(pulumi.StringOutput)
}

// Type of associated network. Valid value: `VPC` and `CCN`.
func (o GatewayInstanceOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayInstance) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

type GatewayInstanceArrayOutput struct{ *pulumi.OutputState }

func (GatewayInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayInstance)(nil)).Elem()
}

func (o GatewayInstanceArrayOutput) ToGatewayInstanceArrayOutput() GatewayInstanceArrayOutput {
	return o
}

func (o GatewayInstanceArrayOutput) ToGatewayInstanceArrayOutputWithContext(ctx context.Context) GatewayInstanceArrayOutput {
	return o
}

func (o GatewayInstanceArrayOutput) Index(i pulumi.IntInput) GatewayInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayInstance {
		return vs[0].([]*GatewayInstance)[vs[1].(int)]
	}).(GatewayInstanceOutput)
}

type GatewayInstanceMapOutput struct{ *pulumi.OutputState }

func (GatewayInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayInstance)(nil)).Elem()
}

func (o GatewayInstanceMapOutput) ToGatewayInstanceMapOutput() GatewayInstanceMapOutput {
	return o
}

func (o GatewayInstanceMapOutput) ToGatewayInstanceMapOutputWithContext(ctx context.Context) GatewayInstanceMapOutput {
	return o
}

func (o GatewayInstanceMapOutput) MapIndex(k pulumi.StringInput) GatewayInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayInstance {
		return vs[0].(map[string]*GatewayInstance)[vs[1].(string)]
	}).(GatewayInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayInstanceInput)(nil)).Elem(), &GatewayInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayInstanceArrayInput)(nil)).Elem(), GatewayInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayInstanceMapInput)(nil)).Elem(), GatewayInstanceMap{})
	pulumi.RegisterOutputType(GatewayInstanceOutput{})
	pulumi.RegisterOutputType(GatewayInstanceArrayOutput{})
	pulumi.RegisterOutputType(GatewayInstanceMapOutput{})
}
