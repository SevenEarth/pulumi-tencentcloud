// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dayu

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CCPolicyV2 struct {
	pulumi.CustomResourceState

	// Bussiness of resource instance. bgpip indicates anti-anti-ip ip; bgp means exclusive package; bgp-multip means shared
	// packet; net indicates anti-anti-ip pro version.
	Business pulumi.StringOutput `pulumi:"business"`
	// Blacklist and whitelist.
	CcBlackWhiteIps CCPolicyV2CcBlackWhiteIpArrayOutput `pulumi:"ccBlackWhiteIps"`
	// Details of the CC region blocking policy list.
	CcGeoIpPolicys CCPolicyV2CcGeoIpPolicyArrayOutput `pulumi:"ccGeoIpPolicys"`
	// CC Precision Protection List.
	CcPrecisionPolicys CCPolicyV2CcPrecisionPolicyArrayOutput `pulumi:"ccPrecisionPolicys"`
	// CC frequency throttling policy.
	CcPrecisionReqLimits CCPolicyV2CcPrecisionReqLimitArrayOutput `pulumi:"ccPrecisionReqLimits"`
	// The ID of the resource instance.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// List of protection threshold configurations.
	Thresholds CCPolicyV2ThresholdArrayOutput `pulumi:"thresholds"`
}

// NewCCPolicyV2 registers a new resource with the given unique name, arguments, and options.
func NewCCPolicyV2(ctx *pulumi.Context,
	name string, args *CCPolicyV2Args, opts ...pulumi.ResourceOption) (*CCPolicyV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Business == nil {
		return nil, errors.New("invalid value for required argument 'Business'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	var resource CCPolicyV2
	err := ctx.RegisterResource("tencentcloud:Dayu/cCPolicyV2:CCPolicyV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCCPolicyV2 gets an existing CCPolicyV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCCPolicyV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CCPolicyV2State, opts ...pulumi.ResourceOption) (*CCPolicyV2, error) {
	var resource CCPolicyV2
	err := ctx.ReadResource("tencentcloud:Dayu/cCPolicyV2:CCPolicyV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CCPolicyV2 resources.
type ccpolicyV2State struct {
	// Bussiness of resource instance. bgpip indicates anti-anti-ip ip; bgp means exclusive package; bgp-multip means shared
	// packet; net indicates anti-anti-ip pro version.
	Business *string `pulumi:"business"`
	// Blacklist and whitelist.
	CcBlackWhiteIps []CCPolicyV2CcBlackWhiteIp `pulumi:"ccBlackWhiteIps"`
	// Details of the CC region blocking policy list.
	CcGeoIpPolicys []CCPolicyV2CcGeoIpPolicy `pulumi:"ccGeoIpPolicys"`
	// CC Precision Protection List.
	CcPrecisionPolicys []CCPolicyV2CcPrecisionPolicy `pulumi:"ccPrecisionPolicys"`
	// CC frequency throttling policy.
	CcPrecisionReqLimits []CCPolicyV2CcPrecisionReqLimit `pulumi:"ccPrecisionReqLimits"`
	// The ID of the resource instance.
	ResourceId *string `pulumi:"resourceId"`
	// List of protection threshold configurations.
	Thresholds []CCPolicyV2Threshold `pulumi:"thresholds"`
}

type CCPolicyV2State struct {
	// Bussiness of resource instance. bgpip indicates anti-anti-ip ip; bgp means exclusive package; bgp-multip means shared
	// packet; net indicates anti-anti-ip pro version.
	Business pulumi.StringPtrInput
	// Blacklist and whitelist.
	CcBlackWhiteIps CCPolicyV2CcBlackWhiteIpArrayInput
	// Details of the CC region blocking policy list.
	CcGeoIpPolicys CCPolicyV2CcGeoIpPolicyArrayInput
	// CC Precision Protection List.
	CcPrecisionPolicys CCPolicyV2CcPrecisionPolicyArrayInput
	// CC frequency throttling policy.
	CcPrecisionReqLimits CCPolicyV2CcPrecisionReqLimitArrayInput
	// The ID of the resource instance.
	ResourceId pulumi.StringPtrInput
	// List of protection threshold configurations.
	Thresholds CCPolicyV2ThresholdArrayInput
}

func (CCPolicyV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*ccpolicyV2State)(nil)).Elem()
}

type ccpolicyV2Args struct {
	// Bussiness of resource instance. bgpip indicates anti-anti-ip ip; bgp means exclusive package; bgp-multip means shared
	// packet; net indicates anti-anti-ip pro version.
	Business string `pulumi:"business"`
	// Blacklist and whitelist.
	CcBlackWhiteIps []CCPolicyV2CcBlackWhiteIp `pulumi:"ccBlackWhiteIps"`
	// Details of the CC region blocking policy list.
	CcGeoIpPolicys []CCPolicyV2CcGeoIpPolicy `pulumi:"ccGeoIpPolicys"`
	// CC Precision Protection List.
	CcPrecisionPolicys []CCPolicyV2CcPrecisionPolicy `pulumi:"ccPrecisionPolicys"`
	// CC frequency throttling policy.
	CcPrecisionReqLimits []CCPolicyV2CcPrecisionReqLimit `pulumi:"ccPrecisionReqLimits"`
	// The ID of the resource instance.
	ResourceId string `pulumi:"resourceId"`
	// List of protection threshold configurations.
	Thresholds []CCPolicyV2Threshold `pulumi:"thresholds"`
}

// The set of arguments for constructing a CCPolicyV2 resource.
type CCPolicyV2Args struct {
	// Bussiness of resource instance. bgpip indicates anti-anti-ip ip; bgp means exclusive package; bgp-multip means shared
	// packet; net indicates anti-anti-ip pro version.
	Business pulumi.StringInput
	// Blacklist and whitelist.
	CcBlackWhiteIps CCPolicyV2CcBlackWhiteIpArrayInput
	// Details of the CC region blocking policy list.
	CcGeoIpPolicys CCPolicyV2CcGeoIpPolicyArrayInput
	// CC Precision Protection List.
	CcPrecisionPolicys CCPolicyV2CcPrecisionPolicyArrayInput
	// CC frequency throttling policy.
	CcPrecisionReqLimits CCPolicyV2CcPrecisionReqLimitArrayInput
	// The ID of the resource instance.
	ResourceId pulumi.StringInput
	// List of protection threshold configurations.
	Thresholds CCPolicyV2ThresholdArrayInput
}

func (CCPolicyV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ccpolicyV2Args)(nil)).Elem()
}

type CCPolicyV2Input interface {
	pulumi.Input

	ToCCPolicyV2Output() CCPolicyV2Output
	ToCCPolicyV2OutputWithContext(ctx context.Context) CCPolicyV2Output
}

func (*CCPolicyV2) ElementType() reflect.Type {
	return reflect.TypeOf((**CCPolicyV2)(nil)).Elem()
}

func (i *CCPolicyV2) ToCCPolicyV2Output() CCPolicyV2Output {
	return i.ToCCPolicyV2OutputWithContext(context.Background())
}

func (i *CCPolicyV2) ToCCPolicyV2OutputWithContext(ctx context.Context) CCPolicyV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(CCPolicyV2Output)
}

// CCPolicyV2ArrayInput is an input type that accepts CCPolicyV2Array and CCPolicyV2ArrayOutput values.
// You can construct a concrete instance of `CCPolicyV2ArrayInput` via:
//
//          CCPolicyV2Array{ CCPolicyV2Args{...} }
type CCPolicyV2ArrayInput interface {
	pulumi.Input

	ToCCPolicyV2ArrayOutput() CCPolicyV2ArrayOutput
	ToCCPolicyV2ArrayOutputWithContext(context.Context) CCPolicyV2ArrayOutput
}

type CCPolicyV2Array []CCPolicyV2Input

func (CCPolicyV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CCPolicyV2)(nil)).Elem()
}

func (i CCPolicyV2Array) ToCCPolicyV2ArrayOutput() CCPolicyV2ArrayOutput {
	return i.ToCCPolicyV2ArrayOutputWithContext(context.Background())
}

func (i CCPolicyV2Array) ToCCPolicyV2ArrayOutputWithContext(ctx context.Context) CCPolicyV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CCPolicyV2ArrayOutput)
}

// CCPolicyV2MapInput is an input type that accepts CCPolicyV2Map and CCPolicyV2MapOutput values.
// You can construct a concrete instance of `CCPolicyV2MapInput` via:
//
//          CCPolicyV2Map{ "key": CCPolicyV2Args{...} }
type CCPolicyV2MapInput interface {
	pulumi.Input

	ToCCPolicyV2MapOutput() CCPolicyV2MapOutput
	ToCCPolicyV2MapOutputWithContext(context.Context) CCPolicyV2MapOutput
}

type CCPolicyV2Map map[string]CCPolicyV2Input

func (CCPolicyV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CCPolicyV2)(nil)).Elem()
}

func (i CCPolicyV2Map) ToCCPolicyV2MapOutput() CCPolicyV2MapOutput {
	return i.ToCCPolicyV2MapOutputWithContext(context.Background())
}

func (i CCPolicyV2Map) ToCCPolicyV2MapOutputWithContext(ctx context.Context) CCPolicyV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CCPolicyV2MapOutput)
}

type CCPolicyV2Output struct{ *pulumi.OutputState }

func (CCPolicyV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**CCPolicyV2)(nil)).Elem()
}

func (o CCPolicyV2Output) ToCCPolicyV2Output() CCPolicyV2Output {
	return o
}

func (o CCPolicyV2Output) ToCCPolicyV2OutputWithContext(ctx context.Context) CCPolicyV2Output {
	return o
}

// Bussiness of resource instance. bgpip indicates anti-anti-ip ip; bgp means exclusive package; bgp-multip means shared
// packet; net indicates anti-anti-ip pro version.
func (o CCPolicyV2Output) Business() pulumi.StringOutput {
	return o.ApplyT(func(v *CCPolicyV2) pulumi.StringOutput { return v.Business }).(pulumi.StringOutput)
}

// Blacklist and whitelist.
func (o CCPolicyV2Output) CcBlackWhiteIps() CCPolicyV2CcBlackWhiteIpArrayOutput {
	return o.ApplyT(func(v *CCPolicyV2) CCPolicyV2CcBlackWhiteIpArrayOutput { return v.CcBlackWhiteIps }).(CCPolicyV2CcBlackWhiteIpArrayOutput)
}

// Details of the CC region blocking policy list.
func (o CCPolicyV2Output) CcGeoIpPolicys() CCPolicyV2CcGeoIpPolicyArrayOutput {
	return o.ApplyT(func(v *CCPolicyV2) CCPolicyV2CcGeoIpPolicyArrayOutput { return v.CcGeoIpPolicys }).(CCPolicyV2CcGeoIpPolicyArrayOutput)
}

// CC Precision Protection List.
func (o CCPolicyV2Output) CcPrecisionPolicys() CCPolicyV2CcPrecisionPolicyArrayOutput {
	return o.ApplyT(func(v *CCPolicyV2) CCPolicyV2CcPrecisionPolicyArrayOutput { return v.CcPrecisionPolicys }).(CCPolicyV2CcPrecisionPolicyArrayOutput)
}

// CC frequency throttling policy.
func (o CCPolicyV2Output) CcPrecisionReqLimits() CCPolicyV2CcPrecisionReqLimitArrayOutput {
	return o.ApplyT(func(v *CCPolicyV2) CCPolicyV2CcPrecisionReqLimitArrayOutput { return v.CcPrecisionReqLimits }).(CCPolicyV2CcPrecisionReqLimitArrayOutput)
}

// The ID of the resource instance.
func (o CCPolicyV2Output) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *CCPolicyV2) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// List of protection threshold configurations.
func (o CCPolicyV2Output) Thresholds() CCPolicyV2ThresholdArrayOutput {
	return o.ApplyT(func(v *CCPolicyV2) CCPolicyV2ThresholdArrayOutput { return v.Thresholds }).(CCPolicyV2ThresholdArrayOutput)
}

type CCPolicyV2ArrayOutput struct{ *pulumi.OutputState }

func (CCPolicyV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CCPolicyV2)(nil)).Elem()
}

func (o CCPolicyV2ArrayOutput) ToCCPolicyV2ArrayOutput() CCPolicyV2ArrayOutput {
	return o
}

func (o CCPolicyV2ArrayOutput) ToCCPolicyV2ArrayOutputWithContext(ctx context.Context) CCPolicyV2ArrayOutput {
	return o
}

func (o CCPolicyV2ArrayOutput) Index(i pulumi.IntInput) CCPolicyV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CCPolicyV2 {
		return vs[0].([]*CCPolicyV2)[vs[1].(int)]
	}).(CCPolicyV2Output)
}

type CCPolicyV2MapOutput struct{ *pulumi.OutputState }

func (CCPolicyV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CCPolicyV2)(nil)).Elem()
}

func (o CCPolicyV2MapOutput) ToCCPolicyV2MapOutput() CCPolicyV2MapOutput {
	return o
}

func (o CCPolicyV2MapOutput) ToCCPolicyV2MapOutputWithContext(ctx context.Context) CCPolicyV2MapOutput {
	return o
}

func (o CCPolicyV2MapOutput) MapIndex(k pulumi.StringInput) CCPolicyV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CCPolicyV2 {
		return vs[0].(map[string]*CCPolicyV2)[vs[1].(string)]
	}).(CCPolicyV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CCPolicyV2Input)(nil)).Elem(), &CCPolicyV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*CCPolicyV2ArrayInput)(nil)).Elem(), CCPolicyV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*CCPolicyV2MapInput)(nil)).Elem(), CCPolicyV2Map{})
	pulumi.RegisterOutputType(CCPolicyV2Output{})
	pulumi.RegisterOutputType(CCPolicyV2ArrayOutput{})
	pulumi.RegisterOutputType(CCPolicyV2MapOutput{})
}
