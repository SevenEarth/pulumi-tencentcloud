// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dayu

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CCHttpPolicy struct {
	pulumi.CustomResourceState

	// Action mode, only valid when `smode` is `matching`. Valid values are `alg` and `drop`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Create time of the CC self-define http policy.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Max frequency per minute, only valid when `smode` is `speedlimit`, the valid value ranges from 1 to 10000.
	Frequency pulumi.IntOutput `pulumi:"frequency"`
	// Ip of the CC self-define http policy, only valid when `resource_type` is `bgp-multip`. The num of list items can only be
	// set one.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Name of the CC self-define http policy. Length should between 1 and 20.
	Name pulumi.StringOutput `pulumi:"name"`
	// Id of the CC self-define http policy.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// ID of the resource that the CC self-define http policy works for.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// Type of the resource that the CC self-define http policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and
	// `net`.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// Rule list of the CC self-define http policy, only valid when `smode` is `matching`.
	RuleLists CCHttpPolicyRuleListArrayOutput `pulumi:"ruleLists"`
	// Match mode, and valid values are `matching`, `speedlimit`. Note: the speed limit type CC self-define policy can only set
	// one.
	Smode pulumi.StringPtrOutput `pulumi:"smode"`
	// Indicate the CC self-define http policy takes effect or not.
	Switch pulumi.BoolPtrOutput `pulumi:"switch"`
}

// NewCCHttpPolicy registers a new resource with the given unique name, arguments, and options.
func NewCCHttpPolicy(ctx *pulumi.Context,
	name string, args *CCHttpPolicyArgs, opts ...pulumi.ResourceOption) (*CCHttpPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	var resource CCHttpPolicy
	err := ctx.RegisterResource("tencentcloud:Dayu/cCHttpPolicy:CCHttpPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCCHttpPolicy gets an existing CCHttpPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCCHttpPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CCHttpPolicyState, opts ...pulumi.ResourceOption) (*CCHttpPolicy, error) {
	var resource CCHttpPolicy
	err := ctx.ReadResource("tencentcloud:Dayu/cCHttpPolicy:CCHttpPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CCHttpPolicy resources.
type cchttpPolicyState struct {
	// Action mode, only valid when `smode` is `matching`. Valid values are `alg` and `drop`.
	Action *string `pulumi:"action"`
	// Create time of the CC self-define http policy.
	CreateTime *string `pulumi:"createTime"`
	// Max frequency per minute, only valid when `smode` is `speedlimit`, the valid value ranges from 1 to 10000.
	Frequency *int `pulumi:"frequency"`
	// Ip of the CC self-define http policy, only valid when `resource_type` is `bgp-multip`. The num of list items can only be
	// set one.
	Ip *string `pulumi:"ip"`
	// Name of the CC self-define http policy. Length should between 1 and 20.
	Name *string `pulumi:"name"`
	// Id of the CC self-define http policy.
	PolicyId *string `pulumi:"policyId"`
	// ID of the resource that the CC self-define http policy works for.
	ResourceId *string `pulumi:"resourceId"`
	// Type of the resource that the CC self-define http policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and
	// `net`.
	ResourceType *string `pulumi:"resourceType"`
	// Rule list of the CC self-define http policy, only valid when `smode` is `matching`.
	RuleLists []CCHttpPolicyRuleList `pulumi:"ruleLists"`
	// Match mode, and valid values are `matching`, `speedlimit`. Note: the speed limit type CC self-define policy can only set
	// one.
	Smode *string `pulumi:"smode"`
	// Indicate the CC self-define http policy takes effect or not.
	Switch *bool `pulumi:"switch"`
}

type CCHttpPolicyState struct {
	// Action mode, only valid when `smode` is `matching`. Valid values are `alg` and `drop`.
	Action pulumi.StringPtrInput
	// Create time of the CC self-define http policy.
	CreateTime pulumi.StringPtrInput
	// Max frequency per minute, only valid when `smode` is `speedlimit`, the valid value ranges from 1 to 10000.
	Frequency pulumi.IntPtrInput
	// Ip of the CC self-define http policy, only valid when `resource_type` is `bgp-multip`. The num of list items can only be
	// set one.
	Ip pulumi.StringPtrInput
	// Name of the CC self-define http policy. Length should between 1 and 20.
	Name pulumi.StringPtrInput
	// Id of the CC self-define http policy.
	PolicyId pulumi.StringPtrInput
	// ID of the resource that the CC self-define http policy works for.
	ResourceId pulumi.StringPtrInput
	// Type of the resource that the CC self-define http policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and
	// `net`.
	ResourceType pulumi.StringPtrInput
	// Rule list of the CC self-define http policy, only valid when `smode` is `matching`.
	RuleLists CCHttpPolicyRuleListArrayInput
	// Match mode, and valid values are `matching`, `speedlimit`. Note: the speed limit type CC self-define policy can only set
	// one.
	Smode pulumi.StringPtrInput
	// Indicate the CC self-define http policy takes effect or not.
	Switch pulumi.BoolPtrInput
}

func (CCHttpPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*cchttpPolicyState)(nil)).Elem()
}

type cchttpPolicyArgs struct {
	// Action mode, only valid when `smode` is `matching`. Valid values are `alg` and `drop`.
	Action *string `pulumi:"action"`
	// Max frequency per minute, only valid when `smode` is `speedlimit`, the valid value ranges from 1 to 10000.
	Frequency *int `pulumi:"frequency"`
	// Ip of the CC self-define http policy, only valid when `resource_type` is `bgp-multip`. The num of list items can only be
	// set one.
	Ip *string `pulumi:"ip"`
	// Name of the CC self-define http policy. Length should between 1 and 20.
	Name *string `pulumi:"name"`
	// ID of the resource that the CC self-define http policy works for.
	ResourceId string `pulumi:"resourceId"`
	// Type of the resource that the CC self-define http policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and
	// `net`.
	ResourceType string `pulumi:"resourceType"`
	// Rule list of the CC self-define http policy, only valid when `smode` is `matching`.
	RuleLists []CCHttpPolicyRuleList `pulumi:"ruleLists"`
	// Match mode, and valid values are `matching`, `speedlimit`. Note: the speed limit type CC self-define policy can only set
	// one.
	Smode *string `pulumi:"smode"`
	// Indicate the CC self-define http policy takes effect or not.
	Switch *bool `pulumi:"switch"`
}

// The set of arguments for constructing a CCHttpPolicy resource.
type CCHttpPolicyArgs struct {
	// Action mode, only valid when `smode` is `matching`. Valid values are `alg` and `drop`.
	Action pulumi.StringPtrInput
	// Max frequency per minute, only valid when `smode` is `speedlimit`, the valid value ranges from 1 to 10000.
	Frequency pulumi.IntPtrInput
	// Ip of the CC self-define http policy, only valid when `resource_type` is `bgp-multip`. The num of list items can only be
	// set one.
	Ip pulumi.StringPtrInput
	// Name of the CC self-define http policy. Length should between 1 and 20.
	Name pulumi.StringPtrInput
	// ID of the resource that the CC self-define http policy works for.
	ResourceId pulumi.StringInput
	// Type of the resource that the CC self-define http policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and
	// `net`.
	ResourceType pulumi.StringInput
	// Rule list of the CC self-define http policy, only valid when `smode` is `matching`.
	RuleLists CCHttpPolicyRuleListArrayInput
	// Match mode, and valid values are `matching`, `speedlimit`. Note: the speed limit type CC self-define policy can only set
	// one.
	Smode pulumi.StringPtrInput
	// Indicate the CC self-define http policy takes effect or not.
	Switch pulumi.BoolPtrInput
}

func (CCHttpPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cchttpPolicyArgs)(nil)).Elem()
}

type CCHttpPolicyInput interface {
	pulumi.Input

	ToCCHttpPolicyOutput() CCHttpPolicyOutput
	ToCCHttpPolicyOutputWithContext(ctx context.Context) CCHttpPolicyOutput
}

func (*CCHttpPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**CCHttpPolicy)(nil)).Elem()
}

func (i *CCHttpPolicy) ToCCHttpPolicyOutput() CCHttpPolicyOutput {
	return i.ToCCHttpPolicyOutputWithContext(context.Background())
}

func (i *CCHttpPolicy) ToCCHttpPolicyOutputWithContext(ctx context.Context) CCHttpPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CCHttpPolicyOutput)
}

// CCHttpPolicyArrayInput is an input type that accepts CCHttpPolicyArray and CCHttpPolicyArrayOutput values.
// You can construct a concrete instance of `CCHttpPolicyArrayInput` via:
//
//          CCHttpPolicyArray{ CCHttpPolicyArgs{...} }
type CCHttpPolicyArrayInput interface {
	pulumi.Input

	ToCCHttpPolicyArrayOutput() CCHttpPolicyArrayOutput
	ToCCHttpPolicyArrayOutputWithContext(context.Context) CCHttpPolicyArrayOutput
}

type CCHttpPolicyArray []CCHttpPolicyInput

func (CCHttpPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CCHttpPolicy)(nil)).Elem()
}

func (i CCHttpPolicyArray) ToCCHttpPolicyArrayOutput() CCHttpPolicyArrayOutput {
	return i.ToCCHttpPolicyArrayOutputWithContext(context.Background())
}

func (i CCHttpPolicyArray) ToCCHttpPolicyArrayOutputWithContext(ctx context.Context) CCHttpPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CCHttpPolicyArrayOutput)
}

// CCHttpPolicyMapInput is an input type that accepts CCHttpPolicyMap and CCHttpPolicyMapOutput values.
// You can construct a concrete instance of `CCHttpPolicyMapInput` via:
//
//          CCHttpPolicyMap{ "key": CCHttpPolicyArgs{...} }
type CCHttpPolicyMapInput interface {
	pulumi.Input

	ToCCHttpPolicyMapOutput() CCHttpPolicyMapOutput
	ToCCHttpPolicyMapOutputWithContext(context.Context) CCHttpPolicyMapOutput
}

type CCHttpPolicyMap map[string]CCHttpPolicyInput

func (CCHttpPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CCHttpPolicy)(nil)).Elem()
}

func (i CCHttpPolicyMap) ToCCHttpPolicyMapOutput() CCHttpPolicyMapOutput {
	return i.ToCCHttpPolicyMapOutputWithContext(context.Background())
}

func (i CCHttpPolicyMap) ToCCHttpPolicyMapOutputWithContext(ctx context.Context) CCHttpPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CCHttpPolicyMapOutput)
}

type CCHttpPolicyOutput struct{ *pulumi.OutputState }

func (CCHttpPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CCHttpPolicy)(nil)).Elem()
}

func (o CCHttpPolicyOutput) ToCCHttpPolicyOutput() CCHttpPolicyOutput {
	return o
}

func (o CCHttpPolicyOutput) ToCCHttpPolicyOutputWithContext(ctx context.Context) CCHttpPolicyOutput {
	return o
}

// Action mode, only valid when `smode` is `matching`. Valid values are `alg` and `drop`.
func (o CCHttpPolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *CCHttpPolicy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Create time of the CC self-define http policy.
func (o CCHttpPolicyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CCHttpPolicy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Max frequency per minute, only valid when `smode` is `speedlimit`, the valid value ranges from 1 to 10000.
func (o CCHttpPolicyOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v *CCHttpPolicy) pulumi.IntOutput { return v.Frequency }).(pulumi.IntOutput)
}

// Ip of the CC self-define http policy, only valid when `resource_type` is `bgp-multip`. The num of list items can only be
// set one.
func (o CCHttpPolicyOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *CCHttpPolicy) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Name of the CC self-define http policy. Length should between 1 and 20.
func (o CCHttpPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CCHttpPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Id of the CC self-define http policy.
func (o CCHttpPolicyOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *CCHttpPolicy) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

// ID of the resource that the CC self-define http policy works for.
func (o CCHttpPolicyOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *CCHttpPolicy) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// Type of the resource that the CC self-define http policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and
// `net`.
func (o CCHttpPolicyOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *CCHttpPolicy) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// Rule list of the CC self-define http policy, only valid when `smode` is `matching`.
func (o CCHttpPolicyOutput) RuleLists() CCHttpPolicyRuleListArrayOutput {
	return o.ApplyT(func(v *CCHttpPolicy) CCHttpPolicyRuleListArrayOutput { return v.RuleLists }).(CCHttpPolicyRuleListArrayOutput)
}

// Match mode, and valid values are `matching`, `speedlimit`. Note: the speed limit type CC self-define policy can only set
// one.
func (o CCHttpPolicyOutput) Smode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CCHttpPolicy) pulumi.StringPtrOutput { return v.Smode }).(pulumi.StringPtrOutput)
}

// Indicate the CC self-define http policy takes effect or not.
func (o CCHttpPolicyOutput) Switch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CCHttpPolicy) pulumi.BoolPtrOutput { return v.Switch }).(pulumi.BoolPtrOutput)
}

type CCHttpPolicyArrayOutput struct{ *pulumi.OutputState }

func (CCHttpPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CCHttpPolicy)(nil)).Elem()
}

func (o CCHttpPolicyArrayOutput) ToCCHttpPolicyArrayOutput() CCHttpPolicyArrayOutput {
	return o
}

func (o CCHttpPolicyArrayOutput) ToCCHttpPolicyArrayOutputWithContext(ctx context.Context) CCHttpPolicyArrayOutput {
	return o
}

func (o CCHttpPolicyArrayOutput) Index(i pulumi.IntInput) CCHttpPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CCHttpPolicy {
		return vs[0].([]*CCHttpPolicy)[vs[1].(int)]
	}).(CCHttpPolicyOutput)
}

type CCHttpPolicyMapOutput struct{ *pulumi.OutputState }

func (CCHttpPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CCHttpPolicy)(nil)).Elem()
}

func (o CCHttpPolicyMapOutput) ToCCHttpPolicyMapOutput() CCHttpPolicyMapOutput {
	return o
}

func (o CCHttpPolicyMapOutput) ToCCHttpPolicyMapOutputWithContext(ctx context.Context) CCHttpPolicyMapOutput {
	return o
}

func (o CCHttpPolicyMapOutput) MapIndex(k pulumi.StringInput) CCHttpPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CCHttpPolicy {
		return vs[0].(map[string]*CCHttpPolicy)[vs[1].(string)]
	}).(CCHttpPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CCHttpPolicyInput)(nil)).Elem(), &CCHttpPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*CCHttpPolicyArrayInput)(nil)).Elem(), CCHttpPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CCHttpPolicyMapInput)(nil)).Elem(), CCHttpPolicyMap{})
	pulumi.RegisterOutputType(CCHttpPolicyOutput{})
	pulumi.RegisterOutputType(CCHttpPolicyArrayOutput{})
	pulumi.RegisterOutputType(CCHttpPolicyMapOutput{})
}
