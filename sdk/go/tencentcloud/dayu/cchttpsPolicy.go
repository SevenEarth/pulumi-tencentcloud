// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dayu

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CCHttpsPolicy struct {
	pulumi.CustomResourceState

	// Action mode. Valid values are `alg` and `drop`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Create time of the CC self-define https policy.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Domain that the CC self-define https policy works for, only valid when `protocol` is `https`.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Ip of the CC self-define https policy.
	IpLists pulumi.StringArrayOutput `pulumi:"ipLists"`
	// Name of the CC self-define https policy. Length should between 1 and 20.
	Name pulumi.StringOutput `pulumi:"name"`
	// Id of the CC self-define https policy.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// ID of the resource that the CC self-define https policy works for.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// Type of the resource that the CC self-define https policy works for, valid value is `bgpip`.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// Rule id of the domain that the CC self-define https policy works for, only valid when `protocol` is `https`.
	RuleId pulumi.StringOutput `pulumi:"ruleId"`
	// Rule list of the CC self-define https policy.
	RuleLists CCHttpsPolicyRuleListArrayOutput `pulumi:"ruleLists"`
	// Indicate the CC self-define https policy takes effect or not.
	Switch pulumi.BoolPtrOutput `pulumi:"switch"`
}

// NewCCHttpsPolicy registers a new resource with the given unique name, arguments, and options.
func NewCCHttpsPolicy(ctx *pulumi.Context,
	name string, args *CCHttpsPolicyArgs, opts ...pulumi.ResourceOption) (*CCHttpsPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	if args.RuleId == nil {
		return nil, errors.New("invalid value for required argument 'RuleId'")
	}
	if args.RuleLists == nil {
		return nil, errors.New("invalid value for required argument 'RuleLists'")
	}
	var resource CCHttpsPolicy
	err := ctx.RegisterResource("tencentcloud:Dayu/cCHttpsPolicy:CCHttpsPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCCHttpsPolicy gets an existing CCHttpsPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCCHttpsPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CCHttpsPolicyState, opts ...pulumi.ResourceOption) (*CCHttpsPolicy, error) {
	var resource CCHttpsPolicy
	err := ctx.ReadResource("tencentcloud:Dayu/cCHttpsPolicy:CCHttpsPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CCHttpsPolicy resources.
type cchttpsPolicyState struct {
	// Action mode. Valid values are `alg` and `drop`.
	Action *string `pulumi:"action"`
	// Create time of the CC self-define https policy.
	CreateTime *string `pulumi:"createTime"`
	// Domain that the CC self-define https policy works for, only valid when `protocol` is `https`.
	Domain *string `pulumi:"domain"`
	// Ip of the CC self-define https policy.
	IpLists []string `pulumi:"ipLists"`
	// Name of the CC self-define https policy. Length should between 1 and 20.
	Name *string `pulumi:"name"`
	// Id of the CC self-define https policy.
	PolicyId *string `pulumi:"policyId"`
	// ID of the resource that the CC self-define https policy works for.
	ResourceId *string `pulumi:"resourceId"`
	// Type of the resource that the CC self-define https policy works for, valid value is `bgpip`.
	ResourceType *string `pulumi:"resourceType"`
	// Rule id of the domain that the CC self-define https policy works for, only valid when `protocol` is `https`.
	RuleId *string `pulumi:"ruleId"`
	// Rule list of the CC self-define https policy.
	RuleLists []CCHttpsPolicyRuleList `pulumi:"ruleLists"`
	// Indicate the CC self-define https policy takes effect or not.
	Switch *bool `pulumi:"switch"`
}

type CCHttpsPolicyState struct {
	// Action mode. Valid values are `alg` and `drop`.
	Action pulumi.StringPtrInput
	// Create time of the CC self-define https policy.
	CreateTime pulumi.StringPtrInput
	// Domain that the CC self-define https policy works for, only valid when `protocol` is `https`.
	Domain pulumi.StringPtrInput
	// Ip of the CC self-define https policy.
	IpLists pulumi.StringArrayInput
	// Name of the CC self-define https policy. Length should between 1 and 20.
	Name pulumi.StringPtrInput
	// Id of the CC self-define https policy.
	PolicyId pulumi.StringPtrInput
	// ID of the resource that the CC self-define https policy works for.
	ResourceId pulumi.StringPtrInput
	// Type of the resource that the CC self-define https policy works for, valid value is `bgpip`.
	ResourceType pulumi.StringPtrInput
	// Rule id of the domain that the CC self-define https policy works for, only valid when `protocol` is `https`.
	RuleId pulumi.StringPtrInput
	// Rule list of the CC self-define https policy.
	RuleLists CCHttpsPolicyRuleListArrayInput
	// Indicate the CC self-define https policy takes effect or not.
	Switch pulumi.BoolPtrInput
}

func (CCHttpsPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*cchttpsPolicyState)(nil)).Elem()
}

type cchttpsPolicyArgs struct {
	// Action mode. Valid values are `alg` and `drop`.
	Action *string `pulumi:"action"`
	// Domain that the CC self-define https policy works for, only valid when `protocol` is `https`.
	Domain string `pulumi:"domain"`
	// Name of the CC self-define https policy. Length should between 1 and 20.
	Name *string `pulumi:"name"`
	// ID of the resource that the CC self-define https policy works for.
	ResourceId string `pulumi:"resourceId"`
	// Type of the resource that the CC self-define https policy works for, valid value is `bgpip`.
	ResourceType string `pulumi:"resourceType"`
	// Rule id of the domain that the CC self-define https policy works for, only valid when `protocol` is `https`.
	RuleId string `pulumi:"ruleId"`
	// Rule list of the CC self-define https policy.
	RuleLists []CCHttpsPolicyRuleList `pulumi:"ruleLists"`
	// Indicate the CC self-define https policy takes effect or not.
	Switch *bool `pulumi:"switch"`
}

// The set of arguments for constructing a CCHttpsPolicy resource.
type CCHttpsPolicyArgs struct {
	// Action mode. Valid values are `alg` and `drop`.
	Action pulumi.StringPtrInput
	// Domain that the CC self-define https policy works for, only valid when `protocol` is `https`.
	Domain pulumi.StringInput
	// Name of the CC self-define https policy. Length should between 1 and 20.
	Name pulumi.StringPtrInput
	// ID of the resource that the CC self-define https policy works for.
	ResourceId pulumi.StringInput
	// Type of the resource that the CC self-define https policy works for, valid value is `bgpip`.
	ResourceType pulumi.StringInput
	// Rule id of the domain that the CC self-define https policy works for, only valid when `protocol` is `https`.
	RuleId pulumi.StringInput
	// Rule list of the CC self-define https policy.
	RuleLists CCHttpsPolicyRuleListArrayInput
	// Indicate the CC self-define https policy takes effect or not.
	Switch pulumi.BoolPtrInput
}

func (CCHttpsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cchttpsPolicyArgs)(nil)).Elem()
}

type CCHttpsPolicyInput interface {
	pulumi.Input

	ToCCHttpsPolicyOutput() CCHttpsPolicyOutput
	ToCCHttpsPolicyOutputWithContext(ctx context.Context) CCHttpsPolicyOutput
}

func (*CCHttpsPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**CCHttpsPolicy)(nil)).Elem()
}

func (i *CCHttpsPolicy) ToCCHttpsPolicyOutput() CCHttpsPolicyOutput {
	return i.ToCCHttpsPolicyOutputWithContext(context.Background())
}

func (i *CCHttpsPolicy) ToCCHttpsPolicyOutputWithContext(ctx context.Context) CCHttpsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CCHttpsPolicyOutput)
}

// CCHttpsPolicyArrayInput is an input type that accepts CCHttpsPolicyArray and CCHttpsPolicyArrayOutput values.
// You can construct a concrete instance of `CCHttpsPolicyArrayInput` via:
//
//          CCHttpsPolicyArray{ CCHttpsPolicyArgs{...} }
type CCHttpsPolicyArrayInput interface {
	pulumi.Input

	ToCCHttpsPolicyArrayOutput() CCHttpsPolicyArrayOutput
	ToCCHttpsPolicyArrayOutputWithContext(context.Context) CCHttpsPolicyArrayOutput
}

type CCHttpsPolicyArray []CCHttpsPolicyInput

func (CCHttpsPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CCHttpsPolicy)(nil)).Elem()
}

func (i CCHttpsPolicyArray) ToCCHttpsPolicyArrayOutput() CCHttpsPolicyArrayOutput {
	return i.ToCCHttpsPolicyArrayOutputWithContext(context.Background())
}

func (i CCHttpsPolicyArray) ToCCHttpsPolicyArrayOutputWithContext(ctx context.Context) CCHttpsPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CCHttpsPolicyArrayOutput)
}

// CCHttpsPolicyMapInput is an input type that accepts CCHttpsPolicyMap and CCHttpsPolicyMapOutput values.
// You can construct a concrete instance of `CCHttpsPolicyMapInput` via:
//
//          CCHttpsPolicyMap{ "key": CCHttpsPolicyArgs{...} }
type CCHttpsPolicyMapInput interface {
	pulumi.Input

	ToCCHttpsPolicyMapOutput() CCHttpsPolicyMapOutput
	ToCCHttpsPolicyMapOutputWithContext(context.Context) CCHttpsPolicyMapOutput
}

type CCHttpsPolicyMap map[string]CCHttpsPolicyInput

func (CCHttpsPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CCHttpsPolicy)(nil)).Elem()
}

func (i CCHttpsPolicyMap) ToCCHttpsPolicyMapOutput() CCHttpsPolicyMapOutput {
	return i.ToCCHttpsPolicyMapOutputWithContext(context.Background())
}

func (i CCHttpsPolicyMap) ToCCHttpsPolicyMapOutputWithContext(ctx context.Context) CCHttpsPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CCHttpsPolicyMapOutput)
}

type CCHttpsPolicyOutput struct{ *pulumi.OutputState }

func (CCHttpsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CCHttpsPolicy)(nil)).Elem()
}

func (o CCHttpsPolicyOutput) ToCCHttpsPolicyOutput() CCHttpsPolicyOutput {
	return o
}

func (o CCHttpsPolicyOutput) ToCCHttpsPolicyOutputWithContext(ctx context.Context) CCHttpsPolicyOutput {
	return o
}

// Action mode. Valid values are `alg` and `drop`.
func (o CCHttpsPolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *CCHttpsPolicy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Create time of the CC self-define https policy.
func (o CCHttpsPolicyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CCHttpsPolicy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Domain that the CC self-define https policy works for, only valid when `protocol` is `https`.
func (o CCHttpsPolicyOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *CCHttpsPolicy) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Ip of the CC self-define https policy.
func (o CCHttpsPolicyOutput) IpLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CCHttpsPolicy) pulumi.StringArrayOutput { return v.IpLists }).(pulumi.StringArrayOutput)
}

// Name of the CC self-define https policy. Length should between 1 and 20.
func (o CCHttpsPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CCHttpsPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Id of the CC self-define https policy.
func (o CCHttpsPolicyOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *CCHttpsPolicy) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

// ID of the resource that the CC self-define https policy works for.
func (o CCHttpsPolicyOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *CCHttpsPolicy) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// Type of the resource that the CC self-define https policy works for, valid value is `bgpip`.
func (o CCHttpsPolicyOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *CCHttpsPolicy) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// Rule id of the domain that the CC self-define https policy works for, only valid when `protocol` is `https`.
func (o CCHttpsPolicyOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *CCHttpsPolicy) pulumi.StringOutput { return v.RuleId }).(pulumi.StringOutput)
}

// Rule list of the CC self-define https policy.
func (o CCHttpsPolicyOutput) RuleLists() CCHttpsPolicyRuleListArrayOutput {
	return o.ApplyT(func(v *CCHttpsPolicy) CCHttpsPolicyRuleListArrayOutput { return v.RuleLists }).(CCHttpsPolicyRuleListArrayOutput)
}

// Indicate the CC self-define https policy takes effect or not.
func (o CCHttpsPolicyOutput) Switch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CCHttpsPolicy) pulumi.BoolPtrOutput { return v.Switch }).(pulumi.BoolPtrOutput)
}

type CCHttpsPolicyArrayOutput struct{ *pulumi.OutputState }

func (CCHttpsPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CCHttpsPolicy)(nil)).Elem()
}

func (o CCHttpsPolicyArrayOutput) ToCCHttpsPolicyArrayOutput() CCHttpsPolicyArrayOutput {
	return o
}

func (o CCHttpsPolicyArrayOutput) ToCCHttpsPolicyArrayOutputWithContext(ctx context.Context) CCHttpsPolicyArrayOutput {
	return o
}

func (o CCHttpsPolicyArrayOutput) Index(i pulumi.IntInput) CCHttpsPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CCHttpsPolicy {
		return vs[0].([]*CCHttpsPolicy)[vs[1].(int)]
	}).(CCHttpsPolicyOutput)
}

type CCHttpsPolicyMapOutput struct{ *pulumi.OutputState }

func (CCHttpsPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CCHttpsPolicy)(nil)).Elem()
}

func (o CCHttpsPolicyMapOutput) ToCCHttpsPolicyMapOutput() CCHttpsPolicyMapOutput {
	return o
}

func (o CCHttpsPolicyMapOutput) ToCCHttpsPolicyMapOutputWithContext(ctx context.Context) CCHttpsPolicyMapOutput {
	return o
}

func (o CCHttpsPolicyMapOutput) MapIndex(k pulumi.StringInput) CCHttpsPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CCHttpsPolicy {
		return vs[0].(map[string]*CCHttpsPolicy)[vs[1].(string)]
	}).(CCHttpsPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CCHttpsPolicyInput)(nil)).Elem(), &CCHttpsPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*CCHttpsPolicyArrayInput)(nil)).Elem(), CCHttpsPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CCHttpsPolicyMapInput)(nil)).Elem(), CCHttpsPolicyMap{})
	pulumi.RegisterOutputType(CCHttpsPolicyOutput{})
	pulumi.RegisterOutputType(CCHttpsPolicyArrayOutput{})
	pulumi.RegisterOutputType(CCHttpsPolicyMapOutput{})
}
