// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dayu

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func CCHttpPolicies(ctx *pulumi.Context, args *CCHttpPoliciesArgs, opts ...pulumi.InvokeOption) (*CCHttpPoliciesResult, error) {
	var rv CCHttpPoliciesResult
	err := ctx.Invoke("tencentcloud:Dayu/cCHttpPolicies:CCHttpPolicies", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking CCHttpPolicies.
type CCHttpPoliciesArgs struct {
	Name             *string `pulumi:"name"`
	PolicyId         *string `pulumi:"policyId"`
	ResourceId       string  `pulumi:"resourceId"`
	ResourceType     string  `pulumi:"resourceType"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by CCHttpPolicies.
type CCHttpPoliciesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id               string               `pulumi:"id"`
	Lists            []CCHttpPoliciesList `pulumi:"lists"`
	Name             *string              `pulumi:"name"`
	PolicyId         *string              `pulumi:"policyId"`
	ResourceId       string               `pulumi:"resourceId"`
	ResourceType     string               `pulumi:"resourceType"`
	ResultOutputFile *string              `pulumi:"resultOutputFile"`
}

func CCHttpPoliciesOutput(ctx *pulumi.Context, args CCHttpPoliciesOutputArgs, opts ...pulumi.InvokeOption) CCHttpPoliciesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (CCHttpPoliciesResult, error) {
			args := v.(CCHttpPoliciesArgs)
			r, err := CCHttpPolicies(ctx, &args, opts...)
			var s CCHttpPoliciesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(CCHttpPoliciesResultOutput)
}

// A collection of arguments for invoking CCHttpPolicies.
type CCHttpPoliciesOutputArgs struct {
	Name             pulumi.StringPtrInput `pulumi:"name"`
	PolicyId         pulumi.StringPtrInput `pulumi:"policyId"`
	ResourceId       pulumi.StringInput    `pulumi:"resourceId"`
	ResourceType     pulumi.StringInput    `pulumi:"resourceType"`
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (CCHttpPoliciesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CCHttpPoliciesArgs)(nil)).Elem()
}

// A collection of values returned by CCHttpPolicies.
type CCHttpPoliciesResultOutput struct{ *pulumi.OutputState }

func (CCHttpPoliciesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CCHttpPoliciesResult)(nil)).Elem()
}

func (o CCHttpPoliciesResultOutput) ToCCHttpPoliciesResultOutput() CCHttpPoliciesResultOutput {
	return o
}

func (o CCHttpPoliciesResultOutput) ToCCHttpPoliciesResultOutputWithContext(ctx context.Context) CCHttpPoliciesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o CCHttpPoliciesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CCHttpPoliciesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o CCHttpPoliciesResultOutput) Lists() CCHttpPoliciesListArrayOutput {
	return o.ApplyT(func(v CCHttpPoliciesResult) []CCHttpPoliciesList { return v.Lists }).(CCHttpPoliciesListArrayOutput)
}

func (o CCHttpPoliciesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CCHttpPoliciesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o CCHttpPoliciesResultOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CCHttpPoliciesResult) *string { return v.PolicyId }).(pulumi.StringPtrOutput)
}

func (o CCHttpPoliciesResultOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v CCHttpPoliciesResult) string { return v.ResourceId }).(pulumi.StringOutput)
}

func (o CCHttpPoliciesResultOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v CCHttpPoliciesResult) string { return v.ResourceType }).(pulumi.StringOutput)
}

func (o CCHttpPoliciesResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CCHttpPoliciesResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CCHttpPoliciesResultOutput{})
}
