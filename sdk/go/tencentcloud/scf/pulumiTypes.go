// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scf

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FunctionCfsConfig struct {
	// File system instance ID.
	CfsId     string  `pulumi:"cfsId"`
	IpAddress *string `pulumi:"ipAddress"`
	// Local mount directory.
	LocalMountDir string `pulumi:"localMountDir"`
	// File system mount instance ID.
	MountInsId    string  `pulumi:"mountInsId"`
	MountSubnetId *string `pulumi:"mountSubnetId"`
	MountVpcId    *string `pulumi:"mountVpcId"`
	// Remote mount directory.
	RemoteMountDir string `pulumi:"remoteMountDir"`
	// ID of user group.
	UserGroupId string `pulumi:"userGroupId"`
	// ID of user.
	UserId string `pulumi:"userId"`
}

// FunctionCfsConfigInput is an input type that accepts FunctionCfsConfigArgs and FunctionCfsConfigOutput values.
// You can construct a concrete instance of `FunctionCfsConfigInput` via:
//
//	FunctionCfsConfigArgs{...}
type FunctionCfsConfigInput interface {
	pulumi.Input

	ToFunctionCfsConfigOutput() FunctionCfsConfigOutput
	ToFunctionCfsConfigOutputWithContext(context.Context) FunctionCfsConfigOutput
}

type FunctionCfsConfigArgs struct {
	// File system instance ID.
	CfsId     pulumi.StringInput    `pulumi:"cfsId"`
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// Local mount directory.
	LocalMountDir pulumi.StringInput `pulumi:"localMountDir"`
	// File system mount instance ID.
	MountInsId    pulumi.StringInput    `pulumi:"mountInsId"`
	MountSubnetId pulumi.StringPtrInput `pulumi:"mountSubnetId"`
	MountVpcId    pulumi.StringPtrInput `pulumi:"mountVpcId"`
	// Remote mount directory.
	RemoteMountDir pulumi.StringInput `pulumi:"remoteMountDir"`
	// ID of user group.
	UserGroupId pulumi.StringInput `pulumi:"userGroupId"`
	// ID of user.
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (FunctionCfsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionCfsConfig)(nil)).Elem()
}

func (i FunctionCfsConfigArgs) ToFunctionCfsConfigOutput() FunctionCfsConfigOutput {
	return i.ToFunctionCfsConfigOutputWithContext(context.Background())
}

func (i FunctionCfsConfigArgs) ToFunctionCfsConfigOutputWithContext(ctx context.Context) FunctionCfsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionCfsConfigOutput)
}

// FunctionCfsConfigArrayInput is an input type that accepts FunctionCfsConfigArray and FunctionCfsConfigArrayOutput values.
// You can construct a concrete instance of `FunctionCfsConfigArrayInput` via:
//
//	FunctionCfsConfigArray{ FunctionCfsConfigArgs{...} }
type FunctionCfsConfigArrayInput interface {
	pulumi.Input

	ToFunctionCfsConfigArrayOutput() FunctionCfsConfigArrayOutput
	ToFunctionCfsConfigArrayOutputWithContext(context.Context) FunctionCfsConfigArrayOutput
}

type FunctionCfsConfigArray []FunctionCfsConfigInput

func (FunctionCfsConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionCfsConfig)(nil)).Elem()
}

func (i FunctionCfsConfigArray) ToFunctionCfsConfigArrayOutput() FunctionCfsConfigArrayOutput {
	return i.ToFunctionCfsConfigArrayOutputWithContext(context.Background())
}

func (i FunctionCfsConfigArray) ToFunctionCfsConfigArrayOutputWithContext(ctx context.Context) FunctionCfsConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionCfsConfigArrayOutput)
}

type FunctionCfsConfigOutput struct{ *pulumi.OutputState }

func (FunctionCfsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionCfsConfig)(nil)).Elem()
}

func (o FunctionCfsConfigOutput) ToFunctionCfsConfigOutput() FunctionCfsConfigOutput {
	return o
}

func (o FunctionCfsConfigOutput) ToFunctionCfsConfigOutputWithContext(ctx context.Context) FunctionCfsConfigOutput {
	return o
}

// File system instance ID.
func (o FunctionCfsConfigOutput) CfsId() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionCfsConfig) string { return v.CfsId }).(pulumi.StringOutput)
}

func (o FunctionCfsConfigOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionCfsConfig) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Local mount directory.
func (o FunctionCfsConfigOutput) LocalMountDir() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionCfsConfig) string { return v.LocalMountDir }).(pulumi.StringOutput)
}

// File system mount instance ID.
func (o FunctionCfsConfigOutput) MountInsId() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionCfsConfig) string { return v.MountInsId }).(pulumi.StringOutput)
}

func (o FunctionCfsConfigOutput) MountSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionCfsConfig) *string { return v.MountSubnetId }).(pulumi.StringPtrOutput)
}

func (o FunctionCfsConfigOutput) MountVpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionCfsConfig) *string { return v.MountVpcId }).(pulumi.StringPtrOutput)
}

// Remote mount directory.
func (o FunctionCfsConfigOutput) RemoteMountDir() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionCfsConfig) string { return v.RemoteMountDir }).(pulumi.StringOutput)
}

// ID of user group.
func (o FunctionCfsConfigOutput) UserGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionCfsConfig) string { return v.UserGroupId }).(pulumi.StringOutput)
}

// ID of user.
func (o FunctionCfsConfigOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionCfsConfig) string { return v.UserId }).(pulumi.StringOutput)
}

type FunctionCfsConfigArrayOutput struct{ *pulumi.OutputState }

func (FunctionCfsConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionCfsConfig)(nil)).Elem()
}

func (o FunctionCfsConfigArrayOutput) ToFunctionCfsConfigArrayOutput() FunctionCfsConfigArrayOutput {
	return o
}

func (o FunctionCfsConfigArrayOutput) ToFunctionCfsConfigArrayOutputWithContext(ctx context.Context) FunctionCfsConfigArrayOutput {
	return o
}

func (o FunctionCfsConfigArrayOutput) Index(i pulumi.IntInput) FunctionCfsConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionCfsConfig {
		return vs[0].([]FunctionCfsConfig)[vs[1].(int)]
	}).(FunctionCfsConfigOutput)
}

type FunctionImageConfig struct {
	// the parameters of command.
	Args *string `pulumi:"args"`
	// The command of entrypoint.
	Command *string `pulumi:"command"`
	// The entrypoint of app.
	EntryPoint *string `pulumi:"entryPoint"`
	// The image type. personal or enterprise.
	ImageType string `pulumi:"imageType"`
	// The uri of image.
	ImageUri string `pulumi:"imageUri"`
	// The registry id of TCR. When image type is enterprise, it must be set.
	RegistryId *string `pulumi:"registryId"`
}

// FunctionImageConfigInput is an input type that accepts FunctionImageConfigArgs and FunctionImageConfigOutput values.
// You can construct a concrete instance of `FunctionImageConfigInput` via:
//
//	FunctionImageConfigArgs{...}
type FunctionImageConfigInput interface {
	pulumi.Input

	ToFunctionImageConfigOutput() FunctionImageConfigOutput
	ToFunctionImageConfigOutputWithContext(context.Context) FunctionImageConfigOutput
}

type FunctionImageConfigArgs struct {
	// the parameters of command.
	Args pulumi.StringPtrInput `pulumi:"args"`
	// The command of entrypoint.
	Command pulumi.StringPtrInput `pulumi:"command"`
	// The entrypoint of app.
	EntryPoint pulumi.StringPtrInput `pulumi:"entryPoint"`
	// The image type. personal or enterprise.
	ImageType pulumi.StringInput `pulumi:"imageType"`
	// The uri of image.
	ImageUri pulumi.StringInput `pulumi:"imageUri"`
	// The registry id of TCR. When image type is enterprise, it must be set.
	RegistryId pulumi.StringPtrInput `pulumi:"registryId"`
}

func (FunctionImageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionImageConfig)(nil)).Elem()
}

func (i FunctionImageConfigArgs) ToFunctionImageConfigOutput() FunctionImageConfigOutput {
	return i.ToFunctionImageConfigOutputWithContext(context.Background())
}

func (i FunctionImageConfigArgs) ToFunctionImageConfigOutputWithContext(ctx context.Context) FunctionImageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionImageConfigOutput)
}

// FunctionImageConfigArrayInput is an input type that accepts FunctionImageConfigArray and FunctionImageConfigArrayOutput values.
// You can construct a concrete instance of `FunctionImageConfigArrayInput` via:
//
//	FunctionImageConfigArray{ FunctionImageConfigArgs{...} }
type FunctionImageConfigArrayInput interface {
	pulumi.Input

	ToFunctionImageConfigArrayOutput() FunctionImageConfigArrayOutput
	ToFunctionImageConfigArrayOutputWithContext(context.Context) FunctionImageConfigArrayOutput
}

type FunctionImageConfigArray []FunctionImageConfigInput

func (FunctionImageConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionImageConfig)(nil)).Elem()
}

func (i FunctionImageConfigArray) ToFunctionImageConfigArrayOutput() FunctionImageConfigArrayOutput {
	return i.ToFunctionImageConfigArrayOutputWithContext(context.Background())
}

func (i FunctionImageConfigArray) ToFunctionImageConfigArrayOutputWithContext(ctx context.Context) FunctionImageConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionImageConfigArrayOutput)
}

type FunctionImageConfigOutput struct{ *pulumi.OutputState }

func (FunctionImageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionImageConfig)(nil)).Elem()
}

func (o FunctionImageConfigOutput) ToFunctionImageConfigOutput() FunctionImageConfigOutput {
	return o
}

func (o FunctionImageConfigOutput) ToFunctionImageConfigOutputWithContext(ctx context.Context) FunctionImageConfigOutput {
	return o
}

// the parameters of command.
func (o FunctionImageConfigOutput) Args() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionImageConfig) *string { return v.Args }).(pulumi.StringPtrOutput)
}

// The command of entrypoint.
func (o FunctionImageConfigOutput) Command() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionImageConfig) *string { return v.Command }).(pulumi.StringPtrOutput)
}

// The entrypoint of app.
func (o FunctionImageConfigOutput) EntryPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionImageConfig) *string { return v.EntryPoint }).(pulumi.StringPtrOutput)
}

// The image type. personal or enterprise.
func (o FunctionImageConfigOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionImageConfig) string { return v.ImageType }).(pulumi.StringOutput)
}

// The uri of image.
func (o FunctionImageConfigOutput) ImageUri() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionImageConfig) string { return v.ImageUri }).(pulumi.StringOutput)
}

// The registry id of TCR. When image type is enterprise, it must be set.
func (o FunctionImageConfigOutput) RegistryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionImageConfig) *string { return v.RegistryId }).(pulumi.StringPtrOutput)
}

type FunctionImageConfigArrayOutput struct{ *pulumi.OutputState }

func (FunctionImageConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionImageConfig)(nil)).Elem()
}

func (o FunctionImageConfigArrayOutput) ToFunctionImageConfigArrayOutput() FunctionImageConfigArrayOutput {
	return o
}

func (o FunctionImageConfigArrayOutput) ToFunctionImageConfigArrayOutputWithContext(ctx context.Context) FunctionImageConfigArrayOutput {
	return o
}

func (o FunctionImageConfigArrayOutput) Index(i pulumi.IntInput) FunctionImageConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionImageConfig {
		return vs[0].([]FunctionImageConfig)[vs[1].(int)]
	}).(FunctionImageConfigOutput)
}

type FunctionLayer struct {
	// The name of Layer.
	LayerName string `pulumi:"layerName"`
	// The version of layer.
	LayerVersion int `pulumi:"layerVersion"`
}

// FunctionLayerInput is an input type that accepts FunctionLayerArgs and FunctionLayerOutput values.
// You can construct a concrete instance of `FunctionLayerInput` via:
//
//	FunctionLayerArgs{...}
type FunctionLayerInput interface {
	pulumi.Input

	ToFunctionLayerOutput() FunctionLayerOutput
	ToFunctionLayerOutputWithContext(context.Context) FunctionLayerOutput
}

type FunctionLayerArgs struct {
	// The name of Layer.
	LayerName pulumi.StringInput `pulumi:"layerName"`
	// The version of layer.
	LayerVersion pulumi.IntInput `pulumi:"layerVersion"`
}

func (FunctionLayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionLayer)(nil)).Elem()
}

func (i FunctionLayerArgs) ToFunctionLayerOutput() FunctionLayerOutput {
	return i.ToFunctionLayerOutputWithContext(context.Background())
}

func (i FunctionLayerArgs) ToFunctionLayerOutputWithContext(ctx context.Context) FunctionLayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionLayerOutput)
}

// FunctionLayerArrayInput is an input type that accepts FunctionLayerArray and FunctionLayerArrayOutput values.
// You can construct a concrete instance of `FunctionLayerArrayInput` via:
//
//	FunctionLayerArray{ FunctionLayerArgs{...} }
type FunctionLayerArrayInput interface {
	pulumi.Input

	ToFunctionLayerArrayOutput() FunctionLayerArrayOutput
	ToFunctionLayerArrayOutputWithContext(context.Context) FunctionLayerArrayOutput
}

type FunctionLayerArray []FunctionLayerInput

func (FunctionLayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionLayer)(nil)).Elem()
}

func (i FunctionLayerArray) ToFunctionLayerArrayOutput() FunctionLayerArrayOutput {
	return i.ToFunctionLayerArrayOutputWithContext(context.Background())
}

func (i FunctionLayerArray) ToFunctionLayerArrayOutputWithContext(ctx context.Context) FunctionLayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionLayerArrayOutput)
}

type FunctionLayerOutput struct{ *pulumi.OutputState }

func (FunctionLayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionLayer)(nil)).Elem()
}

func (o FunctionLayerOutput) ToFunctionLayerOutput() FunctionLayerOutput {
	return o
}

func (o FunctionLayerOutput) ToFunctionLayerOutputWithContext(ctx context.Context) FunctionLayerOutput {
	return o
}

// The name of Layer.
func (o FunctionLayerOutput) LayerName() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionLayer) string { return v.LayerName }).(pulumi.StringOutput)
}

// The version of layer.
func (o FunctionLayerOutput) LayerVersion() pulumi.IntOutput {
	return o.ApplyT(func(v FunctionLayer) int { return v.LayerVersion }).(pulumi.IntOutput)
}

type FunctionLayerArrayOutput struct{ *pulumi.OutputState }

func (FunctionLayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionLayer)(nil)).Elem()
}

func (o FunctionLayerArrayOutput) ToFunctionLayerArrayOutput() FunctionLayerArrayOutput {
	return o
}

func (o FunctionLayerArrayOutput) ToFunctionLayerArrayOutputWithContext(ctx context.Context) FunctionLayerArrayOutput {
	return o
}

func (o FunctionLayerArrayOutput) Index(i pulumi.IntInput) FunctionLayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionLayer {
		return vs[0].([]FunctionLayer)[vs[1].(int)]
	}).(FunctionLayerOutput)
}

type FunctionTrigger struct {
	// Region of cos bucket. if `type` is `cos`, `cosRegion` is required.
	CosRegion *string `pulumi:"cosRegion"`
	// Name of the SCF function trigger, if `type` is `ckafka`, the format of name must be `<ckafkaInstanceId>-<topicId>`; if `type` is `cos`, the name is cos bucket id, other In any case, it can be combined arbitrarily. It can only contain English letters, numbers, connectors and underscores. The maximum length is 100.
	Name string `pulumi:"name"`
	// TriggerDesc of the SCF function trigger, parameter format of `timer` is linux cron expression; parameter of `cos` type is json string `{"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}`, where `bucketUrl` is cos bucket (optional), `event` is the cos event trigger, `Prefix` is the corresponding file prefix filter condition, `Suffix` is the suffix filter condition, if not need filter condition can not pass; `cmq` type does not pass this parameter; `ckafka` type parameter format is json string `{"maxMsgNum":"1","offset":"latest"}`; `apigw` type parameter format is json string `{"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}`.
	TriggerDesc string `pulumi:"triggerDesc"`
	// Type of the SCF function trigger, support `cos`, `cmq`, `timer`, `ckafka`, `apigw`.
	Type string `pulumi:"type"`
}

// FunctionTriggerInput is an input type that accepts FunctionTriggerArgs and FunctionTriggerOutput values.
// You can construct a concrete instance of `FunctionTriggerInput` via:
//
//	FunctionTriggerArgs{...}
type FunctionTriggerInput interface {
	pulumi.Input

	ToFunctionTriggerOutput() FunctionTriggerOutput
	ToFunctionTriggerOutputWithContext(context.Context) FunctionTriggerOutput
}

type FunctionTriggerArgs struct {
	// Region of cos bucket. if `type` is `cos`, `cosRegion` is required.
	CosRegion pulumi.StringPtrInput `pulumi:"cosRegion"`
	// Name of the SCF function trigger, if `type` is `ckafka`, the format of name must be `<ckafkaInstanceId>-<topicId>`; if `type` is `cos`, the name is cos bucket id, other In any case, it can be combined arbitrarily. It can only contain English letters, numbers, connectors and underscores. The maximum length is 100.
	Name pulumi.StringInput `pulumi:"name"`
	// TriggerDesc of the SCF function trigger, parameter format of `timer` is linux cron expression; parameter of `cos` type is json string `{"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}`, where `bucketUrl` is cos bucket (optional), `event` is the cos event trigger, `Prefix` is the corresponding file prefix filter condition, `Suffix` is the suffix filter condition, if not need filter condition can not pass; `cmq` type does not pass this parameter; `ckafka` type parameter format is json string `{"maxMsgNum":"1","offset":"latest"}`; `apigw` type parameter format is json string `{"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}`.
	TriggerDesc pulumi.StringInput `pulumi:"triggerDesc"`
	// Type of the SCF function trigger, support `cos`, `cmq`, `timer`, `ckafka`, `apigw`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTrigger)(nil)).Elem()
}

func (i FunctionTriggerArgs) ToFunctionTriggerOutput() FunctionTriggerOutput {
	return i.ToFunctionTriggerOutputWithContext(context.Background())
}

func (i FunctionTriggerArgs) ToFunctionTriggerOutputWithContext(ctx context.Context) FunctionTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTriggerOutput)
}

// FunctionTriggerArrayInput is an input type that accepts FunctionTriggerArray and FunctionTriggerArrayOutput values.
// You can construct a concrete instance of `FunctionTriggerArrayInput` via:
//
//	FunctionTriggerArray{ FunctionTriggerArgs{...} }
type FunctionTriggerArrayInput interface {
	pulumi.Input

	ToFunctionTriggerArrayOutput() FunctionTriggerArrayOutput
	ToFunctionTriggerArrayOutputWithContext(context.Context) FunctionTriggerArrayOutput
}

type FunctionTriggerArray []FunctionTriggerInput

func (FunctionTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionTrigger)(nil)).Elem()
}

func (i FunctionTriggerArray) ToFunctionTriggerArrayOutput() FunctionTriggerArrayOutput {
	return i.ToFunctionTriggerArrayOutputWithContext(context.Background())
}

func (i FunctionTriggerArray) ToFunctionTriggerArrayOutputWithContext(ctx context.Context) FunctionTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTriggerArrayOutput)
}

type FunctionTriggerOutput struct{ *pulumi.OutputState }

func (FunctionTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTrigger)(nil)).Elem()
}

func (o FunctionTriggerOutput) ToFunctionTriggerOutput() FunctionTriggerOutput {
	return o
}

func (o FunctionTriggerOutput) ToFunctionTriggerOutputWithContext(ctx context.Context) FunctionTriggerOutput {
	return o
}

// Region of cos bucket. if `type` is `cos`, `cosRegion` is required.
func (o FunctionTriggerOutput) CosRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTrigger) *string { return v.CosRegion }).(pulumi.StringPtrOutput)
}

// Name of the SCF function trigger, if `type` is `ckafka`, the format of name must be `<ckafkaInstanceId>-<topicId>`; if `type` is `cos`, the name is cos bucket id, other In any case, it can be combined arbitrarily. It can only contain English letters, numbers, connectors and underscores. The maximum length is 100.
func (o FunctionTriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionTrigger) string { return v.Name }).(pulumi.StringOutput)
}

// TriggerDesc of the SCF function trigger, parameter format of `timer` is linux cron expression; parameter of `cos` type is json string `{"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}`, where `bucketUrl` is cos bucket (optional), `event` is the cos event trigger, `Prefix` is the corresponding file prefix filter condition, `Suffix` is the suffix filter condition, if not need filter condition can not pass; `cmq` type does not pass this parameter; `ckafka` type parameter format is json string `{"maxMsgNum":"1","offset":"latest"}`; `apigw` type parameter format is json string `{"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}`.
func (o FunctionTriggerOutput) TriggerDesc() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionTrigger) string { return v.TriggerDesc }).(pulumi.StringOutput)
}

// Type of the SCF function trigger, support `cos`, `cmq`, `timer`, `ckafka`, `apigw`.
func (o FunctionTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionTrigger) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionTriggerArrayOutput struct{ *pulumi.OutputState }

func (FunctionTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionTrigger)(nil)).Elem()
}

func (o FunctionTriggerArrayOutput) ToFunctionTriggerArrayOutput() FunctionTriggerArrayOutput {
	return o
}

func (o FunctionTriggerArrayOutput) ToFunctionTriggerArrayOutputWithContext(ctx context.Context) FunctionTriggerArrayOutput {
	return o
}

func (o FunctionTriggerArrayOutput) Index(i pulumi.IntInput) FunctionTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionTrigger {
		return vs[0].([]FunctionTrigger)[vs[1].(int)]
	}).(FunctionTriggerOutput)
}

type FunctionTriggerInfo struct {
	// Create time of SCF function trigger.
	CreateTime *string `pulumi:"createTime"`
	// User-defined parameters of SCF function trigger.
	CustomArgument *string `pulumi:"customArgument"`
	// Whether SCF function trigger is enable.
	Enable *bool `pulumi:"enable"`
	// Modify time of SCF function trigger.
	ModifyTime *string `pulumi:"modifyTime"`
	// Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
	Name *string `pulumi:"name"`
	// TriggerDesc of the SCF function trigger, parameter format of `timer` is linux cron expression; parameter of `cos` type is json string `{"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}`, where `bucketUrl` is cos bucket (optional), `event` is the cos event trigger, `Prefix` is the corresponding file prefix filter condition, `Suffix` is the suffix filter condition, if not need filter condition can not pass; `cmq` type does not pass this parameter; `ckafka` type parameter format is json string `{"maxMsgNum":"1","offset":"latest"}`; `apigw` type parameter format is json string `{"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}`.
	TriggerDesc *string `pulumi:"triggerDesc"`
	// Type of the SCF function trigger, support `cos`, `cmq`, `timer`, `ckafka`, `apigw`.
	Type *string `pulumi:"type"`
}

// FunctionTriggerInfoInput is an input type that accepts FunctionTriggerInfoArgs and FunctionTriggerInfoOutput values.
// You can construct a concrete instance of `FunctionTriggerInfoInput` via:
//
//	FunctionTriggerInfoArgs{...}
type FunctionTriggerInfoInput interface {
	pulumi.Input

	ToFunctionTriggerInfoOutput() FunctionTriggerInfoOutput
	ToFunctionTriggerInfoOutputWithContext(context.Context) FunctionTriggerInfoOutput
}

type FunctionTriggerInfoArgs struct {
	// Create time of SCF function trigger.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// User-defined parameters of SCF function trigger.
	CustomArgument pulumi.StringPtrInput `pulumi:"customArgument"`
	// Whether SCF function trigger is enable.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// Modify time of SCF function trigger.
	ModifyTime pulumi.StringPtrInput `pulumi:"modifyTime"`
	// Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// TriggerDesc of the SCF function trigger, parameter format of `timer` is linux cron expression; parameter of `cos` type is json string `{"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}`, where `bucketUrl` is cos bucket (optional), `event` is the cos event trigger, `Prefix` is the corresponding file prefix filter condition, `Suffix` is the suffix filter condition, if not need filter condition can not pass; `cmq` type does not pass this parameter; `ckafka` type parameter format is json string `{"maxMsgNum":"1","offset":"latest"}`; `apigw` type parameter format is json string `{"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}`.
	TriggerDesc pulumi.StringPtrInput `pulumi:"triggerDesc"`
	// Type of the SCF function trigger, support `cos`, `cmq`, `timer`, `ckafka`, `apigw`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (FunctionTriggerInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTriggerInfo)(nil)).Elem()
}

func (i FunctionTriggerInfoArgs) ToFunctionTriggerInfoOutput() FunctionTriggerInfoOutput {
	return i.ToFunctionTriggerInfoOutputWithContext(context.Background())
}

func (i FunctionTriggerInfoArgs) ToFunctionTriggerInfoOutputWithContext(ctx context.Context) FunctionTriggerInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTriggerInfoOutput)
}

// FunctionTriggerInfoArrayInput is an input type that accepts FunctionTriggerInfoArray and FunctionTriggerInfoArrayOutput values.
// You can construct a concrete instance of `FunctionTriggerInfoArrayInput` via:
//
//	FunctionTriggerInfoArray{ FunctionTriggerInfoArgs{...} }
type FunctionTriggerInfoArrayInput interface {
	pulumi.Input

	ToFunctionTriggerInfoArrayOutput() FunctionTriggerInfoArrayOutput
	ToFunctionTriggerInfoArrayOutputWithContext(context.Context) FunctionTriggerInfoArrayOutput
}

type FunctionTriggerInfoArray []FunctionTriggerInfoInput

func (FunctionTriggerInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionTriggerInfo)(nil)).Elem()
}

func (i FunctionTriggerInfoArray) ToFunctionTriggerInfoArrayOutput() FunctionTriggerInfoArrayOutput {
	return i.ToFunctionTriggerInfoArrayOutputWithContext(context.Background())
}

func (i FunctionTriggerInfoArray) ToFunctionTriggerInfoArrayOutputWithContext(ctx context.Context) FunctionTriggerInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTriggerInfoArrayOutput)
}

type FunctionTriggerInfoOutput struct{ *pulumi.OutputState }

func (FunctionTriggerInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionTriggerInfo)(nil)).Elem()
}

func (o FunctionTriggerInfoOutput) ToFunctionTriggerInfoOutput() FunctionTriggerInfoOutput {
	return o
}

func (o FunctionTriggerInfoOutput) ToFunctionTriggerInfoOutputWithContext(ctx context.Context) FunctionTriggerInfoOutput {
	return o
}

// Create time of SCF function trigger.
func (o FunctionTriggerInfoOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTriggerInfo) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// User-defined parameters of SCF function trigger.
func (o FunctionTriggerInfoOutput) CustomArgument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTriggerInfo) *string { return v.CustomArgument }).(pulumi.StringPtrOutput)
}

// Whether SCF function trigger is enable.
func (o FunctionTriggerInfoOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FunctionTriggerInfo) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Modify time of SCF function trigger.
func (o FunctionTriggerInfoOutput) ModifyTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTriggerInfo) *string { return v.ModifyTime }).(pulumi.StringPtrOutput)
}

// Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
func (o FunctionTriggerInfoOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTriggerInfo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// TriggerDesc of the SCF function trigger, parameter format of `timer` is linux cron expression; parameter of `cos` type is json string `{"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}`, where `bucketUrl` is cos bucket (optional), `event` is the cos event trigger, `Prefix` is the corresponding file prefix filter condition, `Suffix` is the suffix filter condition, if not need filter condition can not pass; `cmq` type does not pass this parameter; `ckafka` type parameter format is json string `{"maxMsgNum":"1","offset":"latest"}`; `apigw` type parameter format is json string `{"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}`.
func (o FunctionTriggerInfoOutput) TriggerDesc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTriggerInfo) *string { return v.TriggerDesc }).(pulumi.StringPtrOutput)
}

// Type of the SCF function trigger, support `cos`, `cmq`, `timer`, `ckafka`, `apigw`.
func (o FunctionTriggerInfoOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionTriggerInfo) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FunctionTriggerInfoArrayOutput struct{ *pulumi.OutputState }

func (FunctionTriggerInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionTriggerInfo)(nil)).Elem()
}

func (o FunctionTriggerInfoArrayOutput) ToFunctionTriggerInfoArrayOutput() FunctionTriggerInfoArrayOutput {
	return o
}

func (o FunctionTriggerInfoArrayOutput) ToFunctionTriggerInfoArrayOutputWithContext(ctx context.Context) FunctionTriggerInfoArrayOutput {
	return o
}

func (o FunctionTriggerInfoArrayOutput) Index(i pulumi.IntInput) FunctionTriggerInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionTriggerInfo {
		return vs[0].([]FunctionTriggerInfo)[vs[1].(int)]
	}).(FunctionTriggerInfoOutput)
}

type LayerContent struct {
	// Cos bucket name of the SCF layer, such as `cos-1234567890`, conflict with `zipFile`.
	CosBucketName *string `pulumi:"cosBucketName"`
	// Cos bucket region of the SCF layer, conflict with `zipFile`.
	CosBucketRegion *string `pulumi:"cosBucketRegion"`
	// Cos object name of the SCF layer, should have suffix `.zip` or `.jar`, conflict with `zipFile`.
	CosObjectName *string `pulumi:"cosObjectName"`
	// Zip file of the SCF layer, conflict with `cosBucketName`, `cosObjectName`, `cosBucketRegion`.
	ZipFile *string `pulumi:"zipFile"`
}

// LayerContentInput is an input type that accepts LayerContentArgs and LayerContentOutput values.
// You can construct a concrete instance of `LayerContentInput` via:
//
//	LayerContentArgs{...}
type LayerContentInput interface {
	pulumi.Input

	ToLayerContentOutput() LayerContentOutput
	ToLayerContentOutputWithContext(context.Context) LayerContentOutput
}

type LayerContentArgs struct {
	// Cos bucket name of the SCF layer, such as `cos-1234567890`, conflict with `zipFile`.
	CosBucketName pulumi.StringPtrInput `pulumi:"cosBucketName"`
	// Cos bucket region of the SCF layer, conflict with `zipFile`.
	CosBucketRegion pulumi.StringPtrInput `pulumi:"cosBucketRegion"`
	// Cos object name of the SCF layer, should have suffix `.zip` or `.jar`, conflict with `zipFile`.
	CosObjectName pulumi.StringPtrInput `pulumi:"cosObjectName"`
	// Zip file of the SCF layer, conflict with `cosBucketName`, `cosObjectName`, `cosBucketRegion`.
	ZipFile pulumi.StringPtrInput `pulumi:"zipFile"`
}

func (LayerContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LayerContent)(nil)).Elem()
}

func (i LayerContentArgs) ToLayerContentOutput() LayerContentOutput {
	return i.ToLayerContentOutputWithContext(context.Background())
}

func (i LayerContentArgs) ToLayerContentOutputWithContext(ctx context.Context) LayerContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerContentOutput)
}

func (i LayerContentArgs) ToLayerContentPtrOutput() LayerContentPtrOutput {
	return i.ToLayerContentPtrOutputWithContext(context.Background())
}

func (i LayerContentArgs) ToLayerContentPtrOutputWithContext(ctx context.Context) LayerContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerContentOutput).ToLayerContentPtrOutputWithContext(ctx)
}

// LayerContentPtrInput is an input type that accepts LayerContentArgs, LayerContentPtr and LayerContentPtrOutput values.
// You can construct a concrete instance of `LayerContentPtrInput` via:
//
//	        LayerContentArgs{...}
//
//	or:
//
//	        nil
type LayerContentPtrInput interface {
	pulumi.Input

	ToLayerContentPtrOutput() LayerContentPtrOutput
	ToLayerContentPtrOutputWithContext(context.Context) LayerContentPtrOutput
}

type layerContentPtrType LayerContentArgs

func LayerContentPtr(v *LayerContentArgs) LayerContentPtrInput {
	return (*layerContentPtrType)(v)
}

func (*layerContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LayerContent)(nil)).Elem()
}

func (i *layerContentPtrType) ToLayerContentPtrOutput() LayerContentPtrOutput {
	return i.ToLayerContentPtrOutputWithContext(context.Background())
}

func (i *layerContentPtrType) ToLayerContentPtrOutputWithContext(ctx context.Context) LayerContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerContentPtrOutput)
}

type LayerContentOutput struct{ *pulumi.OutputState }

func (LayerContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LayerContent)(nil)).Elem()
}

func (o LayerContentOutput) ToLayerContentOutput() LayerContentOutput {
	return o
}

func (o LayerContentOutput) ToLayerContentOutputWithContext(ctx context.Context) LayerContentOutput {
	return o
}

func (o LayerContentOutput) ToLayerContentPtrOutput() LayerContentPtrOutput {
	return o.ToLayerContentPtrOutputWithContext(context.Background())
}

func (o LayerContentOutput) ToLayerContentPtrOutputWithContext(ctx context.Context) LayerContentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LayerContent) *LayerContent {
		return &v
	}).(LayerContentPtrOutput)
}

// Cos bucket name of the SCF layer, such as `cos-1234567890`, conflict with `zipFile`.
func (o LayerContentOutput) CosBucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayerContent) *string { return v.CosBucketName }).(pulumi.StringPtrOutput)
}

// Cos bucket region of the SCF layer, conflict with `zipFile`.
func (o LayerContentOutput) CosBucketRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayerContent) *string { return v.CosBucketRegion }).(pulumi.StringPtrOutput)
}

// Cos object name of the SCF layer, should have suffix `.zip` or `.jar`, conflict with `zipFile`.
func (o LayerContentOutput) CosObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayerContent) *string { return v.CosObjectName }).(pulumi.StringPtrOutput)
}

// Zip file of the SCF layer, conflict with `cosBucketName`, `cosObjectName`, `cosBucketRegion`.
func (o LayerContentOutput) ZipFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LayerContent) *string { return v.ZipFile }).(pulumi.StringPtrOutput)
}

type LayerContentPtrOutput struct{ *pulumi.OutputState }

func (LayerContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LayerContent)(nil)).Elem()
}

func (o LayerContentPtrOutput) ToLayerContentPtrOutput() LayerContentPtrOutput {
	return o
}

func (o LayerContentPtrOutput) ToLayerContentPtrOutputWithContext(ctx context.Context) LayerContentPtrOutput {
	return o
}

func (o LayerContentPtrOutput) Elem() LayerContentOutput {
	return o.ApplyT(func(v *LayerContent) LayerContent {
		if v != nil {
			return *v
		}
		var ret LayerContent
		return ret
	}).(LayerContentOutput)
}

// Cos bucket name of the SCF layer, such as `cos-1234567890`, conflict with `zipFile`.
func (o LayerContentPtrOutput) CosBucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayerContent) *string {
		if v == nil {
			return nil
		}
		return v.CosBucketName
	}).(pulumi.StringPtrOutput)
}

// Cos bucket region of the SCF layer, conflict with `zipFile`.
func (o LayerContentPtrOutput) CosBucketRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayerContent) *string {
		if v == nil {
			return nil
		}
		return v.CosBucketRegion
	}).(pulumi.StringPtrOutput)
}

// Cos object name of the SCF layer, should have suffix `.zip` or `.jar`, conflict with `zipFile`.
func (o LayerContentPtrOutput) CosObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayerContent) *string {
		if v == nil {
			return nil
		}
		return v.CosObjectName
	}).(pulumi.StringPtrOutput)
}

// Zip file of the SCF layer, conflict with `cosBucketName`, `cosObjectName`, `cosBucketRegion`.
func (o LayerContentPtrOutput) ZipFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LayerContent) *string {
		if v == nil {
			return nil
		}
		return v.ZipFile
	}).(pulumi.StringPtrOutput)
}

type GetFunctionsFunction struct {
	// CLS logset ID of the SCF function.
	ClsLogsetId string `pulumi:"clsLogsetId"`
	// CLS topic ID of the SCF function.
	ClsTopicId string `pulumi:"clsTopicId"`
	// Code error of the SCF function.
	CodeError string `pulumi:"codeError"`
	// Code result of the SCF function.
	CodeResult string `pulumi:"codeResult"`
	// Code size of the SCF function.
	CodeSize int `pulumi:"codeSize"`
	// Create time of the SCF function trigger.
	CreateTime string `pulumi:"createTime"`
	// Description of the SCF function to be queried.
	Description string `pulumi:"description"`
	// Whether EIP is a fixed IP.
	EipFixed bool `pulumi:"eipFixed"`
	// EIP list of the SCF function.
	Eips []string `pulumi:"eips"`
	// Whether the EIP enabled.
	EnableEipConfig bool `pulumi:"enableEipConfig"`
	// Whether the public net enabled.
	EnablePublicNet bool `pulumi:"enablePublicNet"`
	// Environment variable of the SCF function.
	Environment map[string]interface{} `pulumi:"environment"`
	// Errno of the SCF function.
	ErrNo int `pulumi:"errNo"`
	// Handler of the SCF function.
	Handler string `pulumi:"handler"`
	// Host of the SCF function.
	Host string `pulumi:"host"`
	// Whether to automatically install dependencies.
	InstallDependency bool `pulumi:"installDependency"`
	// Whether to enable L5.
	L5Enable bool `pulumi:"l5Enable"`
	// Memory size of the SCF function runtime, unit is M.
	MemSize int `pulumi:"memSize"`
	// Modify time of the SCF function trigger.
	ModifyTime string `pulumi:"modifyTime"`
	// Name of the SCF function to be queried.
	Name string `pulumi:"name"`
	// Namespace of the SCF function to be queried.
	Namespace string `pulumi:"namespace"`
	// CAM role of the SCF function.
	Role string `pulumi:"role"`
	// Runtime of the SCF function.
	Runtime string `pulumi:"runtime"`
	// Status of the SCF function.
	Status string `pulumi:"status"`
	// Status description of the SCF function.
	StatusDesc string `pulumi:"statusDesc"`
	// Subnet ID of the SCF function.
	SubnetId string `pulumi:"subnetId"`
	// Tags of the SCF function to be queried, can use up to 10 tags.
	Tags map[string]interface{} `pulumi:"tags"`
	// Timeout of the SCF function maximum execution time, unit is second.
	Timeout int `pulumi:"timeout"`
	// Trigger details list the SCF function. Each element contains the following attributes:
	TriggerInfos []GetFunctionsFunctionTriggerInfo `pulumi:"triggerInfos"`
	// Vip of the SCF function.
	Vip string `pulumi:"vip"`
	// VPC ID of the SCF function.
	VpcId string `pulumi:"vpcId"`
}

// GetFunctionsFunctionInput is an input type that accepts GetFunctionsFunctionArgs and GetFunctionsFunctionOutput values.
// You can construct a concrete instance of `GetFunctionsFunctionInput` via:
//
//	GetFunctionsFunctionArgs{...}
type GetFunctionsFunctionInput interface {
	pulumi.Input

	ToGetFunctionsFunctionOutput() GetFunctionsFunctionOutput
	ToGetFunctionsFunctionOutputWithContext(context.Context) GetFunctionsFunctionOutput
}

type GetFunctionsFunctionArgs struct {
	// CLS logset ID of the SCF function.
	ClsLogsetId pulumi.StringInput `pulumi:"clsLogsetId"`
	// CLS topic ID of the SCF function.
	ClsTopicId pulumi.StringInput `pulumi:"clsTopicId"`
	// Code error of the SCF function.
	CodeError pulumi.StringInput `pulumi:"codeError"`
	// Code result of the SCF function.
	CodeResult pulumi.StringInput `pulumi:"codeResult"`
	// Code size of the SCF function.
	CodeSize pulumi.IntInput `pulumi:"codeSize"`
	// Create time of the SCF function trigger.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Description of the SCF function to be queried.
	Description pulumi.StringInput `pulumi:"description"`
	// Whether EIP is a fixed IP.
	EipFixed pulumi.BoolInput `pulumi:"eipFixed"`
	// EIP list of the SCF function.
	Eips pulumi.StringArrayInput `pulumi:"eips"`
	// Whether the EIP enabled.
	EnableEipConfig pulumi.BoolInput `pulumi:"enableEipConfig"`
	// Whether the public net enabled.
	EnablePublicNet pulumi.BoolInput `pulumi:"enablePublicNet"`
	// Environment variable of the SCF function.
	Environment pulumi.MapInput `pulumi:"environment"`
	// Errno of the SCF function.
	ErrNo pulumi.IntInput `pulumi:"errNo"`
	// Handler of the SCF function.
	Handler pulumi.StringInput `pulumi:"handler"`
	// Host of the SCF function.
	Host pulumi.StringInput `pulumi:"host"`
	// Whether to automatically install dependencies.
	InstallDependency pulumi.BoolInput `pulumi:"installDependency"`
	// Whether to enable L5.
	L5Enable pulumi.BoolInput `pulumi:"l5Enable"`
	// Memory size of the SCF function runtime, unit is M.
	MemSize pulumi.IntInput `pulumi:"memSize"`
	// Modify time of the SCF function trigger.
	ModifyTime pulumi.StringInput `pulumi:"modifyTime"`
	// Name of the SCF function to be queried.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace of the SCF function to be queried.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// CAM role of the SCF function.
	Role pulumi.StringInput `pulumi:"role"`
	// Runtime of the SCF function.
	Runtime pulumi.StringInput `pulumi:"runtime"`
	// Status of the SCF function.
	Status pulumi.StringInput `pulumi:"status"`
	// Status description of the SCF function.
	StatusDesc pulumi.StringInput `pulumi:"statusDesc"`
	// Subnet ID of the SCF function.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Tags of the SCF function to be queried, can use up to 10 tags.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Timeout of the SCF function maximum execution time, unit is second.
	Timeout pulumi.IntInput `pulumi:"timeout"`
	// Trigger details list the SCF function. Each element contains the following attributes:
	TriggerInfos GetFunctionsFunctionTriggerInfoArrayInput `pulumi:"triggerInfos"`
	// Vip of the SCF function.
	Vip pulumi.StringInput `pulumi:"vip"`
	// VPC ID of the SCF function.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetFunctionsFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionsFunction)(nil)).Elem()
}

func (i GetFunctionsFunctionArgs) ToGetFunctionsFunctionOutput() GetFunctionsFunctionOutput {
	return i.ToGetFunctionsFunctionOutputWithContext(context.Background())
}

func (i GetFunctionsFunctionArgs) ToGetFunctionsFunctionOutputWithContext(ctx context.Context) GetFunctionsFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFunctionsFunctionOutput)
}

// GetFunctionsFunctionArrayInput is an input type that accepts GetFunctionsFunctionArray and GetFunctionsFunctionArrayOutput values.
// You can construct a concrete instance of `GetFunctionsFunctionArrayInput` via:
//
//	GetFunctionsFunctionArray{ GetFunctionsFunctionArgs{...} }
type GetFunctionsFunctionArrayInput interface {
	pulumi.Input

	ToGetFunctionsFunctionArrayOutput() GetFunctionsFunctionArrayOutput
	ToGetFunctionsFunctionArrayOutputWithContext(context.Context) GetFunctionsFunctionArrayOutput
}

type GetFunctionsFunctionArray []GetFunctionsFunctionInput

func (GetFunctionsFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFunctionsFunction)(nil)).Elem()
}

func (i GetFunctionsFunctionArray) ToGetFunctionsFunctionArrayOutput() GetFunctionsFunctionArrayOutput {
	return i.ToGetFunctionsFunctionArrayOutputWithContext(context.Background())
}

func (i GetFunctionsFunctionArray) ToGetFunctionsFunctionArrayOutputWithContext(ctx context.Context) GetFunctionsFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFunctionsFunctionArrayOutput)
}

type GetFunctionsFunctionOutput struct{ *pulumi.OutputState }

func (GetFunctionsFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionsFunction)(nil)).Elem()
}

func (o GetFunctionsFunctionOutput) ToGetFunctionsFunctionOutput() GetFunctionsFunctionOutput {
	return o
}

func (o GetFunctionsFunctionOutput) ToGetFunctionsFunctionOutputWithContext(ctx context.Context) GetFunctionsFunctionOutput {
	return o
}

// CLS logset ID of the SCF function.
func (o GetFunctionsFunctionOutput) ClsLogsetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.ClsLogsetId }).(pulumi.StringOutput)
}

// CLS topic ID of the SCF function.
func (o GetFunctionsFunctionOutput) ClsTopicId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.ClsTopicId }).(pulumi.StringOutput)
}

// Code error of the SCF function.
func (o GetFunctionsFunctionOutput) CodeError() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.CodeError }).(pulumi.StringOutput)
}

// Code result of the SCF function.
func (o GetFunctionsFunctionOutput) CodeResult() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.CodeResult }).(pulumi.StringOutput)
}

// Code size of the SCF function.
func (o GetFunctionsFunctionOutput) CodeSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetFunctionsFunction) int { return v.CodeSize }).(pulumi.IntOutput)
}

// Create time of the SCF function trigger.
func (o GetFunctionsFunctionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the SCF function to be queried.
func (o GetFunctionsFunctionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Description }).(pulumi.StringOutput)
}

// Whether EIP is a fixed IP.
func (o GetFunctionsFunctionOutput) EipFixed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetFunctionsFunction) bool { return v.EipFixed }).(pulumi.BoolOutput)
}

// EIP list of the SCF function.
func (o GetFunctionsFunctionOutput) Eips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFunctionsFunction) []string { return v.Eips }).(pulumi.StringArrayOutput)
}

// Whether the EIP enabled.
func (o GetFunctionsFunctionOutput) EnableEipConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v GetFunctionsFunction) bool { return v.EnableEipConfig }).(pulumi.BoolOutput)
}

// Whether the public net enabled.
func (o GetFunctionsFunctionOutput) EnablePublicNet() pulumi.BoolOutput {
	return o.ApplyT(func(v GetFunctionsFunction) bool { return v.EnablePublicNet }).(pulumi.BoolOutput)
}

// Environment variable of the SCF function.
func (o GetFunctionsFunctionOutput) Environment() pulumi.MapOutput {
	return o.ApplyT(func(v GetFunctionsFunction) map[string]interface{} { return v.Environment }).(pulumi.MapOutput)
}

// Errno of the SCF function.
func (o GetFunctionsFunctionOutput) ErrNo() pulumi.IntOutput {
	return o.ApplyT(func(v GetFunctionsFunction) int { return v.ErrNo }).(pulumi.IntOutput)
}

// Handler of the SCF function.
func (o GetFunctionsFunctionOutput) Handler() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Handler }).(pulumi.StringOutput)
}

// Host of the SCF function.
func (o GetFunctionsFunctionOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Host }).(pulumi.StringOutput)
}

// Whether to automatically install dependencies.
func (o GetFunctionsFunctionOutput) InstallDependency() pulumi.BoolOutput {
	return o.ApplyT(func(v GetFunctionsFunction) bool { return v.InstallDependency }).(pulumi.BoolOutput)
}

// Whether to enable L5.
func (o GetFunctionsFunctionOutput) L5Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetFunctionsFunction) bool { return v.L5Enable }).(pulumi.BoolOutput)
}

// Memory size of the SCF function runtime, unit is M.
func (o GetFunctionsFunctionOutput) MemSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetFunctionsFunction) int { return v.MemSize }).(pulumi.IntOutput)
}

// Modify time of the SCF function trigger.
func (o GetFunctionsFunctionOutput) ModifyTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.ModifyTime }).(pulumi.StringOutput)
}

// Name of the SCF function to be queried.
func (o GetFunctionsFunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace of the SCF function to be queried.
func (o GetFunctionsFunctionOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Namespace }).(pulumi.StringOutput)
}

// CAM role of the SCF function.
func (o GetFunctionsFunctionOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Role }).(pulumi.StringOutput)
}

// Runtime of the SCF function.
func (o GetFunctionsFunctionOutput) Runtime() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Runtime }).(pulumi.StringOutput)
}

// Status of the SCF function.
func (o GetFunctionsFunctionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Status }).(pulumi.StringOutput)
}

// Status description of the SCF function.
func (o GetFunctionsFunctionOutput) StatusDesc() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.StatusDesc }).(pulumi.StringOutput)
}

// Subnet ID of the SCF function.
func (o GetFunctionsFunctionOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags of the SCF function to be queried, can use up to 10 tags.
func (o GetFunctionsFunctionOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetFunctionsFunction) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// Timeout of the SCF function maximum execution time, unit is second.
func (o GetFunctionsFunctionOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetFunctionsFunction) int { return v.Timeout }).(pulumi.IntOutput)
}

// Trigger details list the SCF function. Each element contains the following attributes:
func (o GetFunctionsFunctionOutput) TriggerInfos() GetFunctionsFunctionTriggerInfoArrayOutput {
	return o.ApplyT(func(v GetFunctionsFunction) []GetFunctionsFunctionTriggerInfo { return v.TriggerInfos }).(GetFunctionsFunctionTriggerInfoArrayOutput)
}

// Vip of the SCF function.
func (o GetFunctionsFunctionOutput) Vip() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.Vip }).(pulumi.StringOutput)
}

// VPC ID of the SCF function.
func (o GetFunctionsFunctionOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunction) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetFunctionsFunctionArrayOutput struct{ *pulumi.OutputState }

func (GetFunctionsFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFunctionsFunction)(nil)).Elem()
}

func (o GetFunctionsFunctionArrayOutput) ToGetFunctionsFunctionArrayOutput() GetFunctionsFunctionArrayOutput {
	return o
}

func (o GetFunctionsFunctionArrayOutput) ToGetFunctionsFunctionArrayOutputWithContext(ctx context.Context) GetFunctionsFunctionArrayOutput {
	return o
}

func (o GetFunctionsFunctionArrayOutput) Index(i pulumi.IntInput) GetFunctionsFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFunctionsFunction {
		return vs[0].([]GetFunctionsFunction)[vs[1].(int)]
	}).(GetFunctionsFunctionOutput)
}

type GetFunctionsFunctionTriggerInfo struct {
	// Create time of the SCF function trigger.
	CreateTime string `pulumi:"createTime"`
	// user-defined parameter of the SCF function trigger.
	CustomArgument string `pulumi:"customArgument"`
	// Whether to enable SCF function trigger.
	Enable bool `pulumi:"enable"`
	// Modify time of the SCF function trigger.
	ModifyTime string `pulumi:"modifyTime"`
	// Name of the SCF function to be queried.
	Name string `pulumi:"name"`
	// TriggerDesc of the SCF function trigger.
	TriggerDesc string `pulumi:"triggerDesc"`
	// Type of the SCF function trigger.
	Type string `pulumi:"type"`
}

// GetFunctionsFunctionTriggerInfoInput is an input type that accepts GetFunctionsFunctionTriggerInfoArgs and GetFunctionsFunctionTriggerInfoOutput values.
// You can construct a concrete instance of `GetFunctionsFunctionTriggerInfoInput` via:
//
//	GetFunctionsFunctionTriggerInfoArgs{...}
type GetFunctionsFunctionTriggerInfoInput interface {
	pulumi.Input

	ToGetFunctionsFunctionTriggerInfoOutput() GetFunctionsFunctionTriggerInfoOutput
	ToGetFunctionsFunctionTriggerInfoOutputWithContext(context.Context) GetFunctionsFunctionTriggerInfoOutput
}

type GetFunctionsFunctionTriggerInfoArgs struct {
	// Create time of the SCF function trigger.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// user-defined parameter of the SCF function trigger.
	CustomArgument pulumi.StringInput `pulumi:"customArgument"`
	// Whether to enable SCF function trigger.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// Modify time of the SCF function trigger.
	ModifyTime pulumi.StringInput `pulumi:"modifyTime"`
	// Name of the SCF function to be queried.
	Name pulumi.StringInput `pulumi:"name"`
	// TriggerDesc of the SCF function trigger.
	TriggerDesc pulumi.StringInput `pulumi:"triggerDesc"`
	// Type of the SCF function trigger.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetFunctionsFunctionTriggerInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionsFunctionTriggerInfo)(nil)).Elem()
}

func (i GetFunctionsFunctionTriggerInfoArgs) ToGetFunctionsFunctionTriggerInfoOutput() GetFunctionsFunctionTriggerInfoOutput {
	return i.ToGetFunctionsFunctionTriggerInfoOutputWithContext(context.Background())
}

func (i GetFunctionsFunctionTriggerInfoArgs) ToGetFunctionsFunctionTriggerInfoOutputWithContext(ctx context.Context) GetFunctionsFunctionTriggerInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFunctionsFunctionTriggerInfoOutput)
}

// GetFunctionsFunctionTriggerInfoArrayInput is an input type that accepts GetFunctionsFunctionTriggerInfoArray and GetFunctionsFunctionTriggerInfoArrayOutput values.
// You can construct a concrete instance of `GetFunctionsFunctionTriggerInfoArrayInput` via:
//
//	GetFunctionsFunctionTriggerInfoArray{ GetFunctionsFunctionTriggerInfoArgs{...} }
type GetFunctionsFunctionTriggerInfoArrayInput interface {
	pulumi.Input

	ToGetFunctionsFunctionTriggerInfoArrayOutput() GetFunctionsFunctionTriggerInfoArrayOutput
	ToGetFunctionsFunctionTriggerInfoArrayOutputWithContext(context.Context) GetFunctionsFunctionTriggerInfoArrayOutput
}

type GetFunctionsFunctionTriggerInfoArray []GetFunctionsFunctionTriggerInfoInput

func (GetFunctionsFunctionTriggerInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFunctionsFunctionTriggerInfo)(nil)).Elem()
}

func (i GetFunctionsFunctionTriggerInfoArray) ToGetFunctionsFunctionTriggerInfoArrayOutput() GetFunctionsFunctionTriggerInfoArrayOutput {
	return i.ToGetFunctionsFunctionTriggerInfoArrayOutputWithContext(context.Background())
}

func (i GetFunctionsFunctionTriggerInfoArray) ToGetFunctionsFunctionTriggerInfoArrayOutputWithContext(ctx context.Context) GetFunctionsFunctionTriggerInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFunctionsFunctionTriggerInfoArrayOutput)
}

type GetFunctionsFunctionTriggerInfoOutput struct{ *pulumi.OutputState }

func (GetFunctionsFunctionTriggerInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFunctionsFunctionTriggerInfo)(nil)).Elem()
}

func (o GetFunctionsFunctionTriggerInfoOutput) ToGetFunctionsFunctionTriggerInfoOutput() GetFunctionsFunctionTriggerInfoOutput {
	return o
}

func (o GetFunctionsFunctionTriggerInfoOutput) ToGetFunctionsFunctionTriggerInfoOutputWithContext(ctx context.Context) GetFunctionsFunctionTriggerInfoOutput {
	return o
}

// Create time of the SCF function trigger.
func (o GetFunctionsFunctionTriggerInfoOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunctionTriggerInfo) string { return v.CreateTime }).(pulumi.StringOutput)
}

// user-defined parameter of the SCF function trigger.
func (o GetFunctionsFunctionTriggerInfoOutput) CustomArgument() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunctionTriggerInfo) string { return v.CustomArgument }).(pulumi.StringOutput)
}

// Whether to enable SCF function trigger.
func (o GetFunctionsFunctionTriggerInfoOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetFunctionsFunctionTriggerInfo) bool { return v.Enable }).(pulumi.BoolOutput)
}

// Modify time of the SCF function trigger.
func (o GetFunctionsFunctionTriggerInfoOutput) ModifyTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunctionTriggerInfo) string { return v.ModifyTime }).(pulumi.StringOutput)
}

// Name of the SCF function to be queried.
func (o GetFunctionsFunctionTriggerInfoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunctionTriggerInfo) string { return v.Name }).(pulumi.StringOutput)
}

// TriggerDesc of the SCF function trigger.
func (o GetFunctionsFunctionTriggerInfoOutput) TriggerDesc() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunctionTriggerInfo) string { return v.TriggerDesc }).(pulumi.StringOutput)
}

// Type of the SCF function trigger.
func (o GetFunctionsFunctionTriggerInfoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetFunctionsFunctionTriggerInfo) string { return v.Type }).(pulumi.StringOutput)
}

type GetFunctionsFunctionTriggerInfoArrayOutput struct{ *pulumi.OutputState }

func (GetFunctionsFunctionTriggerInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFunctionsFunctionTriggerInfo)(nil)).Elem()
}

func (o GetFunctionsFunctionTriggerInfoArrayOutput) ToGetFunctionsFunctionTriggerInfoArrayOutput() GetFunctionsFunctionTriggerInfoArrayOutput {
	return o
}

func (o GetFunctionsFunctionTriggerInfoArrayOutput) ToGetFunctionsFunctionTriggerInfoArrayOutputWithContext(ctx context.Context) GetFunctionsFunctionTriggerInfoArrayOutput {
	return o
}

func (o GetFunctionsFunctionTriggerInfoArrayOutput) Index(i pulumi.IntInput) GetFunctionsFunctionTriggerInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFunctionsFunctionTriggerInfo {
		return vs[0].([]GetFunctionsFunctionTriggerInfo)[vs[1].(int)]
	}).(GetFunctionsFunctionTriggerInfoOutput)
}

type GetLogsLog struct {
	// Function billing time, according to duration up to the last 100ms, unit is ms.
	BillDuration int `pulumi:"billDuration"`
	// Function execution time-consuming, unit is ms.
	Duration float64 `pulumi:"duration"`
	// Name of the SCF function to be queried.
	FunctionName string `pulumi:"functionName"`
	// Whether the function call ends, `1` means the execution ends, other values indicate the call exception.
	InvokeFinished int `pulumi:"invokeFinished"`
	// Log level.
	Level string `pulumi:"level"`
	// Log output during function execution.
	Log string `pulumi:"log"`
	// The actual memory size consumed in the execution of the function, unit is Byte.
	MemUsage int `pulumi:"memUsage"`
	// Execute the requestId corresponding to the function.
	RequestId string `pulumi:"requestId"`
	// Use to filter log, optional value: `not0` only returns the error log. `is0` only returns the correct log. `TimeLimitExceeded` returns the log of the function call timeout. `ResourceLimitExceeded` returns the function call generation resource overrun log. `UserCodeException` returns logs of the user code error that occurred in the function call. Not passing the parameter means returning all logs.
	RetCode int `pulumi:"retCode"`
	// Return value after function execution is completed.
	RetMsg string `pulumi:"retMsg"`
	// Log source.
	Source string `pulumi:"source"`
	// The start time of the query, the format is `2017-05-16 20:00:00`, which can only be within one day from `endTime`.
	StartTime string `pulumi:"startTime"`
}

// GetLogsLogInput is an input type that accepts GetLogsLogArgs and GetLogsLogOutput values.
// You can construct a concrete instance of `GetLogsLogInput` via:
//
//	GetLogsLogArgs{...}
type GetLogsLogInput interface {
	pulumi.Input

	ToGetLogsLogOutput() GetLogsLogOutput
	ToGetLogsLogOutputWithContext(context.Context) GetLogsLogOutput
}

type GetLogsLogArgs struct {
	// Function billing time, according to duration up to the last 100ms, unit is ms.
	BillDuration pulumi.IntInput `pulumi:"billDuration"`
	// Function execution time-consuming, unit is ms.
	Duration pulumi.Float64Input `pulumi:"duration"`
	// Name of the SCF function to be queried.
	FunctionName pulumi.StringInput `pulumi:"functionName"`
	// Whether the function call ends, `1` means the execution ends, other values indicate the call exception.
	InvokeFinished pulumi.IntInput `pulumi:"invokeFinished"`
	// Log level.
	Level pulumi.StringInput `pulumi:"level"`
	// Log output during function execution.
	Log pulumi.StringInput `pulumi:"log"`
	// The actual memory size consumed in the execution of the function, unit is Byte.
	MemUsage pulumi.IntInput `pulumi:"memUsage"`
	// Execute the requestId corresponding to the function.
	RequestId pulumi.StringInput `pulumi:"requestId"`
	// Use to filter log, optional value: `not0` only returns the error log. `is0` only returns the correct log. `TimeLimitExceeded` returns the log of the function call timeout. `ResourceLimitExceeded` returns the function call generation resource overrun log. `UserCodeException` returns logs of the user code error that occurred in the function call. Not passing the parameter means returning all logs.
	RetCode pulumi.IntInput `pulumi:"retCode"`
	// Return value after function execution is completed.
	RetMsg pulumi.StringInput `pulumi:"retMsg"`
	// Log source.
	Source pulumi.StringInput `pulumi:"source"`
	// The start time of the query, the format is `2017-05-16 20:00:00`, which can only be within one day from `endTime`.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (GetLogsLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogsLog)(nil)).Elem()
}

func (i GetLogsLogArgs) ToGetLogsLogOutput() GetLogsLogOutput {
	return i.ToGetLogsLogOutputWithContext(context.Background())
}

func (i GetLogsLogArgs) ToGetLogsLogOutputWithContext(ctx context.Context) GetLogsLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogsLogOutput)
}

// GetLogsLogArrayInput is an input type that accepts GetLogsLogArray and GetLogsLogArrayOutput values.
// You can construct a concrete instance of `GetLogsLogArrayInput` via:
//
//	GetLogsLogArray{ GetLogsLogArgs{...} }
type GetLogsLogArrayInput interface {
	pulumi.Input

	ToGetLogsLogArrayOutput() GetLogsLogArrayOutput
	ToGetLogsLogArrayOutputWithContext(context.Context) GetLogsLogArrayOutput
}

type GetLogsLogArray []GetLogsLogInput

func (GetLogsLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLogsLog)(nil)).Elem()
}

func (i GetLogsLogArray) ToGetLogsLogArrayOutput() GetLogsLogArrayOutput {
	return i.ToGetLogsLogArrayOutputWithContext(context.Background())
}

func (i GetLogsLogArray) ToGetLogsLogArrayOutputWithContext(ctx context.Context) GetLogsLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogsLogArrayOutput)
}

type GetLogsLogOutput struct{ *pulumi.OutputState }

func (GetLogsLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogsLog)(nil)).Elem()
}

func (o GetLogsLogOutput) ToGetLogsLogOutput() GetLogsLogOutput {
	return o
}

func (o GetLogsLogOutput) ToGetLogsLogOutputWithContext(ctx context.Context) GetLogsLogOutput {
	return o
}

// Function billing time, according to duration up to the last 100ms, unit is ms.
func (o GetLogsLogOutput) BillDuration() pulumi.IntOutput {
	return o.ApplyT(func(v GetLogsLog) int { return v.BillDuration }).(pulumi.IntOutput)
}

// Function execution time-consuming, unit is ms.
func (o GetLogsLogOutput) Duration() pulumi.Float64Output {
	return o.ApplyT(func(v GetLogsLog) float64 { return v.Duration }).(pulumi.Float64Output)
}

// Name of the SCF function to be queried.
func (o GetLogsLogOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogsLog) string { return v.FunctionName }).(pulumi.StringOutput)
}

// Whether the function call ends, `1` means the execution ends, other values indicate the call exception.
func (o GetLogsLogOutput) InvokeFinished() pulumi.IntOutput {
	return o.ApplyT(func(v GetLogsLog) int { return v.InvokeFinished }).(pulumi.IntOutput)
}

// Log level.
func (o GetLogsLogOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogsLog) string { return v.Level }).(pulumi.StringOutput)
}

// Log output during function execution.
func (o GetLogsLogOutput) Log() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogsLog) string { return v.Log }).(pulumi.StringOutput)
}

// The actual memory size consumed in the execution of the function, unit is Byte.
func (o GetLogsLogOutput) MemUsage() pulumi.IntOutput {
	return o.ApplyT(func(v GetLogsLog) int { return v.MemUsage }).(pulumi.IntOutput)
}

// Execute the requestId corresponding to the function.
func (o GetLogsLogOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogsLog) string { return v.RequestId }).(pulumi.StringOutput)
}

// Use to filter log, optional value: `not0` only returns the error log. `is0` only returns the correct log. `TimeLimitExceeded` returns the log of the function call timeout. `ResourceLimitExceeded` returns the function call generation resource overrun log. `UserCodeException` returns logs of the user code error that occurred in the function call. Not passing the parameter means returning all logs.
func (o GetLogsLogOutput) RetCode() pulumi.IntOutput {
	return o.ApplyT(func(v GetLogsLog) int { return v.RetCode }).(pulumi.IntOutput)
}

// Return value after function execution is completed.
func (o GetLogsLogOutput) RetMsg() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogsLog) string { return v.RetMsg }).(pulumi.StringOutput)
}

// Log source.
func (o GetLogsLogOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogsLog) string { return v.Source }).(pulumi.StringOutput)
}

// The start time of the query, the format is `2017-05-16 20:00:00`, which can only be within one day from `endTime`.
func (o GetLogsLogOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetLogsLog) string { return v.StartTime }).(pulumi.StringOutput)
}

type GetLogsLogArrayOutput struct{ *pulumi.OutputState }

func (GetLogsLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLogsLog)(nil)).Elem()
}

func (o GetLogsLogArrayOutput) ToGetLogsLogArrayOutput() GetLogsLogArrayOutput {
	return o
}

func (o GetLogsLogArrayOutput) ToGetLogsLogArrayOutputWithContext(ctx context.Context) GetLogsLogArrayOutput {
	return o
}

func (o GetLogsLogArrayOutput) Index(i pulumi.IntInput) GetLogsLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLogsLog {
		return vs[0].([]GetLogsLog)[vs[1].(int)]
	}).(GetLogsLogOutput)
}

type GetNamespacesNamespace struct {
	// Create time of the SCF namespace.
	CreateTime string `pulumi:"createTime"`
	// Description of the SCF namespace to be queried.
	Description string `pulumi:"description"`
	// Modify time of the SCF namespace.
	ModifyTime string `pulumi:"modifyTime"`
	// Name of the SCF namespace to be queried.
	Namespace string `pulumi:"namespace"`
	// Type of the SCF namespace.
	Type string `pulumi:"type"`
}

// GetNamespacesNamespaceInput is an input type that accepts GetNamespacesNamespaceArgs and GetNamespacesNamespaceOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceInput` via:
//
//	GetNamespacesNamespaceArgs{...}
type GetNamespacesNamespaceInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceOutput() GetNamespacesNamespaceOutput
	ToGetNamespacesNamespaceOutputWithContext(context.Context) GetNamespacesNamespaceOutput
}

type GetNamespacesNamespaceArgs struct {
	// Create time of the SCF namespace.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Description of the SCF namespace to be queried.
	Description pulumi.StringInput `pulumi:"description"`
	// Modify time of the SCF namespace.
	ModifyTime pulumi.StringInput `pulumi:"modifyTime"`
	// Name of the SCF namespace to be queried.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// Type of the SCF namespace.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetNamespacesNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespace)(nil)).Elem()
}

func (i GetNamespacesNamespaceArgs) ToGetNamespacesNamespaceOutput() GetNamespacesNamespaceOutput {
	return i.ToGetNamespacesNamespaceOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceArgs) ToGetNamespacesNamespaceOutputWithContext(ctx context.Context) GetNamespacesNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceOutput)
}

// GetNamespacesNamespaceArrayInput is an input type that accepts GetNamespacesNamespaceArray and GetNamespacesNamespaceArrayOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceArrayInput` via:
//
//	GetNamespacesNamespaceArray{ GetNamespacesNamespaceArgs{...} }
type GetNamespacesNamespaceArrayInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceArrayOutput() GetNamespacesNamespaceArrayOutput
	ToGetNamespacesNamespaceArrayOutputWithContext(context.Context) GetNamespacesNamespaceArrayOutput
}

type GetNamespacesNamespaceArray []GetNamespacesNamespaceInput

func (GetNamespacesNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespace)(nil)).Elem()
}

func (i GetNamespacesNamespaceArray) ToGetNamespacesNamespaceArrayOutput() GetNamespacesNamespaceArrayOutput {
	return i.ToGetNamespacesNamespaceArrayOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceArray) ToGetNamespacesNamespaceArrayOutputWithContext(ctx context.Context) GetNamespacesNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceArrayOutput)
}

type GetNamespacesNamespaceOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespace)(nil)).Elem()
}

func (o GetNamespacesNamespaceOutput) ToGetNamespacesNamespaceOutput() GetNamespacesNamespaceOutput {
	return o
}

func (o GetNamespacesNamespaceOutput) ToGetNamespacesNamespaceOutputWithContext(ctx context.Context) GetNamespacesNamespaceOutput {
	return o
}

// Create time of the SCF namespace.
func (o GetNamespacesNamespaceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the SCF namespace to be queried.
func (o GetNamespacesNamespaceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.Description }).(pulumi.StringOutput)
}

// Modify time of the SCF namespace.
func (o GetNamespacesNamespaceOutput) ModifyTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.ModifyTime }).(pulumi.StringOutput)
}

// Name of the SCF namespace to be queried.
func (o GetNamespacesNamespaceOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.Namespace }).(pulumi.StringOutput)
}

// Type of the SCF namespace.
func (o GetNamespacesNamespaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.Type }).(pulumi.StringOutput)
}

type GetNamespacesNamespaceArrayOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespace)(nil)).Elem()
}

func (o GetNamespacesNamespaceArrayOutput) ToGetNamespacesNamespaceArrayOutput() GetNamespacesNamespaceArrayOutput {
	return o
}

func (o GetNamespacesNamespaceArrayOutput) ToGetNamespacesNamespaceArrayOutputWithContext(ctx context.Context) GetNamespacesNamespaceArrayOutput {
	return o
}

func (o GetNamespacesNamespaceArrayOutput) Index(i pulumi.IntInput) GetNamespacesNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNamespacesNamespace {
		return vs[0].([]GetNamespacesNamespace)[vs[1].(int)]
	}).(GetNamespacesNamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionCfsConfigInput)(nil)).Elem(), FunctionCfsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionCfsConfigArrayInput)(nil)).Elem(), FunctionCfsConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionImageConfigInput)(nil)).Elem(), FunctionImageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionImageConfigArrayInput)(nil)).Elem(), FunctionImageConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionLayerInput)(nil)).Elem(), FunctionLayerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionLayerArrayInput)(nil)).Elem(), FunctionLayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTriggerInput)(nil)).Elem(), FunctionTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTriggerArrayInput)(nil)).Elem(), FunctionTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTriggerInfoInput)(nil)).Elem(), FunctionTriggerInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionTriggerInfoArrayInput)(nil)).Elem(), FunctionTriggerInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerContentInput)(nil)).Elem(), LayerContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerContentPtrInput)(nil)).Elem(), LayerContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFunctionsFunctionInput)(nil)).Elem(), GetFunctionsFunctionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFunctionsFunctionArrayInput)(nil)).Elem(), GetFunctionsFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFunctionsFunctionTriggerInfoInput)(nil)).Elem(), GetFunctionsFunctionTriggerInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFunctionsFunctionTriggerInfoArrayInput)(nil)).Elem(), GetFunctionsFunctionTriggerInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogsLogInput)(nil)).Elem(), GetLogsLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogsLogArrayInput)(nil)).Elem(), GetLogsLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceInput)(nil)).Elem(), GetNamespacesNamespaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceArrayInput)(nil)).Elem(), GetNamespacesNamespaceArray{})
	pulumi.RegisterOutputType(FunctionCfsConfigOutput{})
	pulumi.RegisterOutputType(FunctionCfsConfigArrayOutput{})
	pulumi.RegisterOutputType(FunctionImageConfigOutput{})
	pulumi.RegisterOutputType(FunctionImageConfigArrayOutput{})
	pulumi.RegisterOutputType(FunctionLayerOutput{})
	pulumi.RegisterOutputType(FunctionLayerArrayOutput{})
	pulumi.RegisterOutputType(FunctionTriggerOutput{})
	pulumi.RegisterOutputType(FunctionTriggerArrayOutput{})
	pulumi.RegisterOutputType(FunctionTriggerInfoOutput{})
	pulumi.RegisterOutputType(FunctionTriggerInfoArrayOutput{})
	pulumi.RegisterOutputType(LayerContentOutput{})
	pulumi.RegisterOutputType(LayerContentPtrOutput{})
	pulumi.RegisterOutputType(GetFunctionsFunctionOutput{})
	pulumi.RegisterOutputType(GetFunctionsFunctionArrayOutput{})
	pulumi.RegisterOutputType(GetFunctionsFunctionTriggerInfoOutput{})
	pulumi.RegisterOutputType(GetFunctionsFunctionTriggerInfoArrayOutput{})
	pulumi.RegisterOutputType(GetLogsLogOutput{})
	pulumi.RegisterOutputType(GetLogsLogArrayOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceArrayOutput{})
}
