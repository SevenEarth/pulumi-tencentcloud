// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ScfNamespace struct {
	pulumi.CustomResourceState

	// SCF namespace creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the SCF namespace.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// SCF namespace last modified time.
	ModifyTime pulumi.StringOutput `pulumi:"modifyTime"`
	// Name of the SCF namespace.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// SCF namespace type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewScfNamespace registers a new resource with the given unique name, arguments, and options.
func NewScfNamespace(ctx *pulumi.Context,
	name string, args *ScfNamespaceArgs, opts ...pulumi.ResourceOption) (*ScfNamespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	var resource ScfNamespace
	err := ctx.RegisterResource("tencentcloud:Scf/scfNamespace:ScfNamespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScfNamespace gets an existing ScfNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScfNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScfNamespaceState, opts ...pulumi.ResourceOption) (*ScfNamespace, error) {
	var resource ScfNamespace
	err := ctx.ReadResource("tencentcloud:Scf/scfNamespace:ScfNamespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScfNamespace resources.
type scfNamespaceState struct {
	// SCF namespace creation time.
	CreateTime *string `pulumi:"createTime"`
	// Description of the SCF namespace.
	Description *string `pulumi:"description"`
	// SCF namespace last modified time.
	ModifyTime *string `pulumi:"modifyTime"`
	// Name of the SCF namespace.
	Namespace *string `pulumi:"namespace"`
	// SCF namespace type.
	Type *string `pulumi:"type"`
}

type ScfNamespaceState struct {
	// SCF namespace creation time.
	CreateTime pulumi.StringPtrInput
	// Description of the SCF namespace.
	Description pulumi.StringPtrInput
	// SCF namespace last modified time.
	ModifyTime pulumi.StringPtrInput
	// Name of the SCF namespace.
	Namespace pulumi.StringPtrInput
	// SCF namespace type.
	Type pulumi.StringPtrInput
}

func (ScfNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*scfNamespaceState)(nil)).Elem()
}

type scfNamespaceArgs struct {
	// Description of the SCF namespace.
	Description *string `pulumi:"description"`
	// Name of the SCF namespace.
	Namespace string `pulumi:"namespace"`
}

// The set of arguments for constructing a ScfNamespace resource.
type ScfNamespaceArgs struct {
	// Description of the SCF namespace.
	Description pulumi.StringPtrInput
	// Name of the SCF namespace.
	Namespace pulumi.StringInput
}

func (ScfNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scfNamespaceArgs)(nil)).Elem()
}

type ScfNamespaceInput interface {
	pulumi.Input

	ToScfNamespaceOutput() ScfNamespaceOutput
	ToScfNamespaceOutputWithContext(ctx context.Context) ScfNamespaceOutput
}

func (*ScfNamespace) ElementType() reflect.Type {
	return reflect.TypeOf((**ScfNamespace)(nil)).Elem()
}

func (i *ScfNamespace) ToScfNamespaceOutput() ScfNamespaceOutput {
	return i.ToScfNamespaceOutputWithContext(context.Background())
}

func (i *ScfNamespace) ToScfNamespaceOutputWithContext(ctx context.Context) ScfNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScfNamespaceOutput)
}

// ScfNamespaceArrayInput is an input type that accepts ScfNamespaceArray and ScfNamespaceArrayOutput values.
// You can construct a concrete instance of `ScfNamespaceArrayInput` via:
//
//          ScfNamespaceArray{ ScfNamespaceArgs{...} }
type ScfNamespaceArrayInput interface {
	pulumi.Input

	ToScfNamespaceArrayOutput() ScfNamespaceArrayOutput
	ToScfNamespaceArrayOutputWithContext(context.Context) ScfNamespaceArrayOutput
}

type ScfNamespaceArray []ScfNamespaceInput

func (ScfNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScfNamespace)(nil)).Elem()
}

func (i ScfNamespaceArray) ToScfNamespaceArrayOutput() ScfNamespaceArrayOutput {
	return i.ToScfNamespaceArrayOutputWithContext(context.Background())
}

func (i ScfNamespaceArray) ToScfNamespaceArrayOutputWithContext(ctx context.Context) ScfNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScfNamespaceArrayOutput)
}

// ScfNamespaceMapInput is an input type that accepts ScfNamespaceMap and ScfNamespaceMapOutput values.
// You can construct a concrete instance of `ScfNamespaceMapInput` via:
//
//          ScfNamespaceMap{ "key": ScfNamespaceArgs{...} }
type ScfNamespaceMapInput interface {
	pulumi.Input

	ToScfNamespaceMapOutput() ScfNamespaceMapOutput
	ToScfNamespaceMapOutputWithContext(context.Context) ScfNamespaceMapOutput
}

type ScfNamespaceMap map[string]ScfNamespaceInput

func (ScfNamespaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScfNamespace)(nil)).Elem()
}

func (i ScfNamespaceMap) ToScfNamespaceMapOutput() ScfNamespaceMapOutput {
	return i.ToScfNamespaceMapOutputWithContext(context.Background())
}

func (i ScfNamespaceMap) ToScfNamespaceMapOutputWithContext(ctx context.Context) ScfNamespaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScfNamespaceMapOutput)
}

type ScfNamespaceOutput struct{ *pulumi.OutputState }

func (ScfNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScfNamespace)(nil)).Elem()
}

func (o ScfNamespaceOutput) ToScfNamespaceOutput() ScfNamespaceOutput {
	return o
}

func (o ScfNamespaceOutput) ToScfNamespaceOutputWithContext(ctx context.Context) ScfNamespaceOutput {
	return o
}

// SCF namespace creation time.
func (o ScfNamespaceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ScfNamespace) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the SCF namespace.
func (o ScfNamespaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScfNamespace) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// SCF namespace last modified time.
func (o ScfNamespaceOutput) ModifyTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ScfNamespace) pulumi.StringOutput { return v.ModifyTime }).(pulumi.StringOutput)
}

// Name of the SCF namespace.
func (o ScfNamespaceOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *ScfNamespace) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// SCF namespace type.
func (o ScfNamespaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ScfNamespace) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ScfNamespaceArrayOutput struct{ *pulumi.OutputState }

func (ScfNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScfNamespace)(nil)).Elem()
}

func (o ScfNamespaceArrayOutput) ToScfNamespaceArrayOutput() ScfNamespaceArrayOutput {
	return o
}

func (o ScfNamespaceArrayOutput) ToScfNamespaceArrayOutputWithContext(ctx context.Context) ScfNamespaceArrayOutput {
	return o
}

func (o ScfNamespaceArrayOutput) Index(i pulumi.IntInput) ScfNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScfNamespace {
		return vs[0].([]*ScfNamespace)[vs[1].(int)]
	}).(ScfNamespaceOutput)
}

type ScfNamespaceMapOutput struct{ *pulumi.OutputState }

func (ScfNamespaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScfNamespace)(nil)).Elem()
}

func (o ScfNamespaceMapOutput) ToScfNamespaceMapOutput() ScfNamespaceMapOutput {
	return o
}

func (o ScfNamespaceMapOutput) ToScfNamespaceMapOutputWithContext(ctx context.Context) ScfNamespaceMapOutput {
	return o
}

func (o ScfNamespaceMapOutput) MapIndex(k pulumi.StringInput) ScfNamespaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScfNamespace {
		return vs[0].(map[string]*ScfNamespace)[vs[1].(string)]
	}).(ScfNamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScfNamespaceInput)(nil)).Elem(), &ScfNamespace{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScfNamespaceArrayInput)(nil)).Elem(), ScfNamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScfNamespaceMapInput)(nil)).Elem(), ScfNamespaceMap{})
	pulumi.RegisterOutputType(ScfNamespaceOutput{})
	pulumi.RegisterOutputType(ScfNamespaceArrayOutput{})
	pulumi.RegisterOutputType(ScfNamespaceMapOutput{})
}
