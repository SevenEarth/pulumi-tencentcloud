// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ckafka

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Instance struct {
	pulumi.CustomResourceState

	// Instance bandwidth in MBps.
	BandWidth pulumi.IntOutput `pulumi:"bandWidth"`
	// Instance configuration.
	Config InstanceConfigPtrOutput `pulumi:"config"`
	// Disk Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through
	// the control. If it is not within the interval, the plan will cause a change when first created.
	DiskSize pulumi.IntOutput `pulumi:"diskSize"`
	// Type of disk.
	DiskType pulumi.StringOutput `pulumi:"diskType"`
	// Dynamic message retention policy configuration.
	DynamicRetentionConfig InstanceDynamicRetentionConfigOutput `pulumi:"dynamicRetentionConfig"`
	// Instance name.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// Kafka version (0.10.2/1.1.1/2.4.1).
	KafkaVersion pulumi.StringOutput `pulumi:"kafkaVersion"`
	// The maximum retention time of instance logs, in minutes. the default is 10080 (7 days), the maximum is 30 days, and the
	// default 0 is not filled, which means that the log retention time recovery policy is not enabled.
	MsgRetentionTime pulumi.IntOutput `pulumi:"msgRetentionTime"`
	// Indicates whether the instance is multi zones. NOTE: if set to `true`, `zone_ids` must set together.
	MultiZoneFlag pulumi.BoolPtrOutput `pulumi:"multiZoneFlag"`
	// Partition Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed
	// through the control. If it is not within the interval, the plan will cause a change when first created.
	Partition pulumi.IntOutput `pulumi:"partition"`
	// Prepaid purchase time, such as 1, is one month.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Timestamp.
	PublicNetwork pulumi.IntOutput `pulumi:"publicNetwork"`
	// Modification of the rebalancing time after upgrade.
	RebalanceTime pulumi.IntPtrOutput `pulumi:"rebalanceTime"`
	// Prepaid automatic renewal mark, 0 means the default state, the initial state, 1 means automatic renewal, 2 means clear
	// no automatic renewal (user setting).
	RenewFlag pulumi.IntOutput `pulumi:"renewFlag"`
	// Subnet id.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Partition size, the professional version does not need tag.
	Tags InstanceTagArrayOutput `pulumi:"tags"`
	// Vip of instance.
	Vip pulumi.StringOutput `pulumi:"vip"`
	// Vpc id.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// Type of instance.
	Vport pulumi.StringOutput `pulumi:"vport"`
	// Available zone id.
	ZoneId pulumi.IntOutput `pulumi:"zoneId"`
	// List of available zone id. NOTE: this argument must set together with `multi_zone_flag`.
	ZoneIds pulumi.IntArrayOutput `pulumi:"zoneIds"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	var resource Instance
	err := ctx.RegisterResource("tencentcloud:Ckafka/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("tencentcloud:Ckafka/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// Instance bandwidth in MBps.
	BandWidth *int `pulumi:"bandWidth"`
	// Instance configuration.
	Config *InstanceConfig `pulumi:"config"`
	// Disk Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through
	// the control. If it is not within the interval, the plan will cause a change when first created.
	DiskSize *int `pulumi:"diskSize"`
	// Type of disk.
	DiskType *string `pulumi:"diskType"`
	// Dynamic message retention policy configuration.
	DynamicRetentionConfig *InstanceDynamicRetentionConfig `pulumi:"dynamicRetentionConfig"`
	// Instance name.
	InstanceName *string `pulumi:"instanceName"`
	// Kafka version (0.10.2/1.1.1/2.4.1).
	KafkaVersion *string `pulumi:"kafkaVersion"`
	// The maximum retention time of instance logs, in minutes. the default is 10080 (7 days), the maximum is 30 days, and the
	// default 0 is not filled, which means that the log retention time recovery policy is not enabled.
	MsgRetentionTime *int `pulumi:"msgRetentionTime"`
	// Indicates whether the instance is multi zones. NOTE: if set to `true`, `zone_ids` must set together.
	MultiZoneFlag *bool `pulumi:"multiZoneFlag"`
	// Partition Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed
	// through the control. If it is not within the interval, the plan will cause a change when first created.
	Partition *int `pulumi:"partition"`
	// Prepaid purchase time, such as 1, is one month.
	Period *int `pulumi:"period"`
	// Timestamp.
	PublicNetwork *int `pulumi:"publicNetwork"`
	// Modification of the rebalancing time after upgrade.
	RebalanceTime *int `pulumi:"rebalanceTime"`
	// Prepaid automatic renewal mark, 0 means the default state, the initial state, 1 means automatic renewal, 2 means clear
	// no automatic renewal (user setting).
	RenewFlag *int `pulumi:"renewFlag"`
	// Subnet id.
	SubnetId *string `pulumi:"subnetId"`
	// Partition size, the professional version does not need tag.
	Tags []InstanceTag `pulumi:"tags"`
	// Vip of instance.
	Vip *string `pulumi:"vip"`
	// Vpc id.
	VpcId *string `pulumi:"vpcId"`
	// Type of instance.
	Vport *string `pulumi:"vport"`
	// Available zone id.
	ZoneId *int `pulumi:"zoneId"`
	// List of available zone id. NOTE: this argument must set together with `multi_zone_flag`.
	ZoneIds []int `pulumi:"zoneIds"`
}

type InstanceState struct {
	// Instance bandwidth in MBps.
	BandWidth pulumi.IntPtrInput
	// Instance configuration.
	Config InstanceConfigPtrInput
	// Disk Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through
	// the control. If it is not within the interval, the plan will cause a change when first created.
	DiskSize pulumi.IntPtrInput
	// Type of disk.
	DiskType pulumi.StringPtrInput
	// Dynamic message retention policy configuration.
	DynamicRetentionConfig InstanceDynamicRetentionConfigPtrInput
	// Instance name.
	InstanceName pulumi.StringPtrInput
	// Kafka version (0.10.2/1.1.1/2.4.1).
	KafkaVersion pulumi.StringPtrInput
	// The maximum retention time of instance logs, in minutes. the default is 10080 (7 days), the maximum is 30 days, and the
	// default 0 is not filled, which means that the log retention time recovery policy is not enabled.
	MsgRetentionTime pulumi.IntPtrInput
	// Indicates whether the instance is multi zones. NOTE: if set to `true`, `zone_ids` must set together.
	MultiZoneFlag pulumi.BoolPtrInput
	// Partition Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed
	// through the control. If it is not within the interval, the plan will cause a change when first created.
	Partition pulumi.IntPtrInput
	// Prepaid purchase time, such as 1, is one month.
	Period pulumi.IntPtrInput
	// Timestamp.
	PublicNetwork pulumi.IntPtrInput
	// Modification of the rebalancing time after upgrade.
	RebalanceTime pulumi.IntPtrInput
	// Prepaid automatic renewal mark, 0 means the default state, the initial state, 1 means automatic renewal, 2 means clear
	// no automatic renewal (user setting).
	RenewFlag pulumi.IntPtrInput
	// Subnet id.
	SubnetId pulumi.StringPtrInput
	// Partition size, the professional version does not need tag.
	Tags InstanceTagArrayInput
	// Vip of instance.
	Vip pulumi.StringPtrInput
	// Vpc id.
	VpcId pulumi.StringPtrInput
	// Type of instance.
	Vport pulumi.StringPtrInput
	// Available zone id.
	ZoneId pulumi.IntPtrInput
	// List of available zone id. NOTE: this argument must set together with `multi_zone_flag`.
	ZoneIds pulumi.IntArrayInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Instance bandwidth in MBps.
	BandWidth *int `pulumi:"bandWidth"`
	// Instance configuration.
	Config *InstanceConfig `pulumi:"config"`
	// Disk Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through
	// the control. If it is not within the interval, the plan will cause a change when first created.
	DiskSize *int `pulumi:"diskSize"`
	// Type of disk.
	DiskType *string `pulumi:"diskType"`
	// Dynamic message retention policy configuration.
	DynamicRetentionConfig *InstanceDynamicRetentionConfig `pulumi:"dynamicRetentionConfig"`
	// Instance name.
	InstanceName string `pulumi:"instanceName"`
	// Kafka version (0.10.2/1.1.1/2.4.1).
	KafkaVersion *string `pulumi:"kafkaVersion"`
	// The maximum retention time of instance logs, in minutes. the default is 10080 (7 days), the maximum is 30 days, and the
	// default 0 is not filled, which means that the log retention time recovery policy is not enabled.
	MsgRetentionTime *int `pulumi:"msgRetentionTime"`
	// Indicates whether the instance is multi zones. NOTE: if set to `true`, `zone_ids` must set together.
	MultiZoneFlag *bool `pulumi:"multiZoneFlag"`
	// Partition Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed
	// through the control. If it is not within the interval, the plan will cause a change when first created.
	Partition *int `pulumi:"partition"`
	// Prepaid purchase time, such as 1, is one month.
	Period *int `pulumi:"period"`
	// Timestamp.
	PublicNetwork *int `pulumi:"publicNetwork"`
	// Modification of the rebalancing time after upgrade.
	RebalanceTime *int `pulumi:"rebalanceTime"`
	// Prepaid automatic renewal mark, 0 means the default state, the initial state, 1 means automatic renewal, 2 means clear
	// no automatic renewal (user setting).
	RenewFlag *int `pulumi:"renewFlag"`
	// Subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Partition size, the professional version does not need tag.
	Tags []InstanceTag `pulumi:"tags"`
	// Vpc id.
	VpcId string `pulumi:"vpcId"`
	// Available zone id.
	ZoneId int `pulumi:"zoneId"`
	// List of available zone id. NOTE: this argument must set together with `multi_zone_flag`.
	ZoneIds []int `pulumi:"zoneIds"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Instance bandwidth in MBps.
	BandWidth pulumi.IntPtrInput
	// Instance configuration.
	Config InstanceConfigPtrInput
	// Disk Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through
	// the control. If it is not within the interval, the plan will cause a change when first created.
	DiskSize pulumi.IntPtrInput
	// Type of disk.
	DiskType pulumi.StringPtrInput
	// Dynamic message retention policy configuration.
	DynamicRetentionConfig InstanceDynamicRetentionConfigPtrInput
	// Instance name.
	InstanceName pulumi.StringInput
	// Kafka version (0.10.2/1.1.1/2.4.1).
	KafkaVersion pulumi.StringPtrInput
	// The maximum retention time of instance logs, in minutes. the default is 10080 (7 days), the maximum is 30 days, and the
	// default 0 is not filled, which means that the log retention time recovery policy is not enabled.
	MsgRetentionTime pulumi.IntPtrInput
	// Indicates whether the instance is multi zones. NOTE: if set to `true`, `zone_ids` must set together.
	MultiZoneFlag pulumi.BoolPtrInput
	// Partition Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed
	// through the control. If it is not within the interval, the plan will cause a change when first created.
	Partition pulumi.IntPtrInput
	// Prepaid purchase time, such as 1, is one month.
	Period pulumi.IntPtrInput
	// Timestamp.
	PublicNetwork pulumi.IntPtrInput
	// Modification of the rebalancing time after upgrade.
	RebalanceTime pulumi.IntPtrInput
	// Prepaid automatic renewal mark, 0 means the default state, the initial state, 1 means automatic renewal, 2 means clear
	// no automatic renewal (user setting).
	RenewFlag pulumi.IntPtrInput
	// Subnet id.
	SubnetId pulumi.StringInput
	// Partition size, the professional version does not need tag.
	Tags InstanceTagArrayInput
	// Vpc id.
	VpcId pulumi.StringInput
	// Available zone id.
	ZoneId pulumi.IntInput
	// List of available zone id. NOTE: this argument must set together with `multi_zone_flag`.
	ZoneIds pulumi.IntArrayInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//          InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//          InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// Instance bandwidth in MBps.
func (o InstanceOutput) BandWidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.BandWidth }).(pulumi.IntOutput)
}

// Instance configuration.
func (o InstanceOutput) Config() InstanceConfigPtrOutput {
	return o.ApplyT(func(v *Instance) InstanceConfigPtrOutput { return v.Config }).(InstanceConfigPtrOutput)
}

// Disk Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through
// the control. If it is not within the interval, the plan will cause a change when first created.
func (o InstanceOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.DiskSize }).(pulumi.IntOutput)
}

// Type of disk.
func (o InstanceOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.DiskType }).(pulumi.StringOutput)
}

// Dynamic message retention policy configuration.
func (o InstanceOutput) DynamicRetentionConfig() InstanceDynamicRetentionConfigOutput {
	return o.ApplyT(func(v *Instance) InstanceDynamicRetentionConfigOutput { return v.DynamicRetentionConfig }).(InstanceDynamicRetentionConfigOutput)
}

// Instance name.
func (o InstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// Kafka version (0.10.2/1.1.1/2.4.1).
func (o InstanceOutput) KafkaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.KafkaVersion }).(pulumi.StringOutput)
}

// The maximum retention time of instance logs, in minutes. the default is 10080 (7 days), the maximum is 30 days, and the
// default 0 is not filled, which means that the log retention time recovery policy is not enabled.
func (o InstanceOutput) MsgRetentionTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.MsgRetentionTime }).(pulumi.IntOutput)
}

// Indicates whether the instance is multi zones. NOTE: if set to `true`, `zone_ids` must set together.
func (o InstanceOutput) MultiZoneFlag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.MultiZoneFlag }).(pulumi.BoolPtrOutput)
}

// Partition Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed
// through the control. If it is not within the interval, the plan will cause a change when first created.
func (o InstanceOutput) Partition() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Partition }).(pulumi.IntOutput)
}

// Prepaid purchase time, such as 1, is one month.
func (o InstanceOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Timestamp.
func (o InstanceOutput) PublicNetwork() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.PublicNetwork }).(pulumi.IntOutput)
}

// Modification of the rebalancing time after upgrade.
func (o InstanceOutput) RebalanceTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.RebalanceTime }).(pulumi.IntPtrOutput)
}

// Prepaid automatic renewal mark, 0 means the default state, the initial state, 1 means automatic renewal, 2 means clear
// no automatic renewal (user setting).
func (o InstanceOutput) RenewFlag() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.RenewFlag }).(pulumi.IntOutput)
}

// Subnet id.
func (o InstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Partition size, the professional version does not need tag.
func (o InstanceOutput) Tags() InstanceTagArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceTagArrayOutput { return v.Tags }).(InstanceTagArrayOutput)
}

// Vip of instance.
func (o InstanceOutput) Vip() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Vip }).(pulumi.StringOutput)
}

// Vpc id.
func (o InstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// Type of instance.
func (o InstanceOutput) Vport() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Vport }).(pulumi.StringOutput)
}

// Available zone id.
func (o InstanceOutput) ZoneId() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.ZoneId }).(pulumi.IntOutput)
}

// List of available zone id. NOTE: this argument must set together with `multi_zone_flag`.
func (o InstanceOutput) ZoneIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntArrayOutput { return v.ZoneIds }).(pulumi.IntArrayOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
