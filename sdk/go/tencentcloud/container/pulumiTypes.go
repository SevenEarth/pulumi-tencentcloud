// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package container

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClusterInstancesNode struct {
	AbnormalReason string `pulumi:"abnormalReason"`
	Cpu            int    `pulumi:"cpu"`
	InstanceId     string `pulumi:"instanceId"`
	IsNormal       int    `pulumi:"isNormal"`
	LanIp          string `pulumi:"lanIp"`
	Mem            int    `pulumi:"mem"`
	WanIp          string `pulumi:"wanIp"`
}

// ClusterInstancesNodeInput is an input type that accepts ClusterInstancesNodeArgs and ClusterInstancesNodeOutput values.
// You can construct a concrete instance of `ClusterInstancesNodeInput` via:
//
//          ClusterInstancesNodeArgs{...}
type ClusterInstancesNodeInput interface {
	pulumi.Input

	ToClusterInstancesNodeOutput() ClusterInstancesNodeOutput
	ToClusterInstancesNodeOutputWithContext(context.Context) ClusterInstancesNodeOutput
}

type ClusterInstancesNodeArgs struct {
	AbnormalReason pulumi.StringInput `pulumi:"abnormalReason"`
	Cpu            pulumi.IntInput    `pulumi:"cpu"`
	InstanceId     pulumi.StringInput `pulumi:"instanceId"`
	IsNormal       pulumi.IntInput    `pulumi:"isNormal"`
	LanIp          pulumi.StringInput `pulumi:"lanIp"`
	Mem            pulumi.IntInput    `pulumi:"mem"`
	WanIp          pulumi.StringInput `pulumi:"wanIp"`
}

func (ClusterInstancesNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterInstancesNode)(nil)).Elem()
}

func (i ClusterInstancesNodeArgs) ToClusterInstancesNodeOutput() ClusterInstancesNodeOutput {
	return i.ToClusterInstancesNodeOutputWithContext(context.Background())
}

func (i ClusterInstancesNodeArgs) ToClusterInstancesNodeOutputWithContext(ctx context.Context) ClusterInstancesNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterInstancesNodeOutput)
}

// ClusterInstancesNodeArrayInput is an input type that accepts ClusterInstancesNodeArray and ClusterInstancesNodeArrayOutput values.
// You can construct a concrete instance of `ClusterInstancesNodeArrayInput` via:
//
//          ClusterInstancesNodeArray{ ClusterInstancesNodeArgs{...} }
type ClusterInstancesNodeArrayInput interface {
	pulumi.Input

	ToClusterInstancesNodeArrayOutput() ClusterInstancesNodeArrayOutput
	ToClusterInstancesNodeArrayOutputWithContext(context.Context) ClusterInstancesNodeArrayOutput
}

type ClusterInstancesNodeArray []ClusterInstancesNodeInput

func (ClusterInstancesNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterInstancesNode)(nil)).Elem()
}

func (i ClusterInstancesNodeArray) ToClusterInstancesNodeArrayOutput() ClusterInstancesNodeArrayOutput {
	return i.ToClusterInstancesNodeArrayOutputWithContext(context.Background())
}

func (i ClusterInstancesNodeArray) ToClusterInstancesNodeArrayOutputWithContext(ctx context.Context) ClusterInstancesNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterInstancesNodeArrayOutput)
}

type ClusterInstancesNodeOutput struct{ *pulumi.OutputState }

func (ClusterInstancesNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterInstancesNode)(nil)).Elem()
}

func (o ClusterInstancesNodeOutput) ToClusterInstancesNodeOutput() ClusterInstancesNodeOutput {
	return o
}

func (o ClusterInstancesNodeOutput) ToClusterInstancesNodeOutputWithContext(ctx context.Context) ClusterInstancesNodeOutput {
	return o
}

func (o ClusterInstancesNodeOutput) AbnormalReason() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterInstancesNode) string { return v.AbnormalReason }).(pulumi.StringOutput)
}

func (o ClusterInstancesNodeOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterInstancesNode) int { return v.Cpu }).(pulumi.IntOutput)
}

func (o ClusterInstancesNodeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterInstancesNode) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o ClusterInstancesNodeOutput) IsNormal() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterInstancesNode) int { return v.IsNormal }).(pulumi.IntOutput)
}

func (o ClusterInstancesNodeOutput) LanIp() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterInstancesNode) string { return v.LanIp }).(pulumi.StringOutput)
}

func (o ClusterInstancesNodeOutput) Mem() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterInstancesNode) int { return v.Mem }).(pulumi.IntOutput)
}

func (o ClusterInstancesNodeOutput) WanIp() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterInstancesNode) string { return v.WanIp }).(pulumi.StringOutput)
}

type ClusterInstancesNodeArrayOutput struct{ *pulumi.OutputState }

func (ClusterInstancesNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterInstancesNode)(nil)).Elem()
}

func (o ClusterInstancesNodeArrayOutput) ToClusterInstancesNodeArrayOutput() ClusterInstancesNodeArrayOutput {
	return o
}

func (o ClusterInstancesNodeArrayOutput) ToClusterInstancesNodeArrayOutputWithContext(ctx context.Context) ClusterInstancesNodeArrayOutput {
	return o
}

func (o ClusterInstancesNodeArrayOutput) Index(i pulumi.IntInput) ClusterInstancesNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterInstancesNode {
		return vs[0].([]ClusterInstancesNode)[vs[1].(int)]
	}).(ClusterInstancesNodeOutput)
}

type ClustersCluster struct {
	ClusterId                       string `pulumi:"clusterId"`
	ClusterName                     string `pulumi:"clusterName"`
	Description                     string `pulumi:"description"`
	KubernetesVersion               string `pulumi:"kubernetesVersion"`
	NodesNum                        int    `pulumi:"nodesNum"`
	NodesStatus                     string `pulumi:"nodesStatus"`
	SecurityCertificationAuthority  string `pulumi:"securityCertificationAuthority"`
	SecurityClusterExternalEndpoint string `pulumi:"securityClusterExternalEndpoint"`
	SecurityPassword                string `pulumi:"securityPassword"`
	SecurityUsername                string `pulumi:"securityUsername"`
	TotalCpu                        int    `pulumi:"totalCpu"`
	TotalMem                        int    `pulumi:"totalMem"`
}

// ClustersClusterInput is an input type that accepts ClustersClusterArgs and ClustersClusterOutput values.
// You can construct a concrete instance of `ClustersClusterInput` via:
//
//          ClustersClusterArgs{...}
type ClustersClusterInput interface {
	pulumi.Input

	ToClustersClusterOutput() ClustersClusterOutput
	ToClustersClusterOutputWithContext(context.Context) ClustersClusterOutput
}

type ClustersClusterArgs struct {
	ClusterId                       pulumi.StringInput `pulumi:"clusterId"`
	ClusterName                     pulumi.StringInput `pulumi:"clusterName"`
	Description                     pulumi.StringInput `pulumi:"description"`
	KubernetesVersion               pulumi.StringInput `pulumi:"kubernetesVersion"`
	NodesNum                        pulumi.IntInput    `pulumi:"nodesNum"`
	NodesStatus                     pulumi.StringInput `pulumi:"nodesStatus"`
	SecurityCertificationAuthority  pulumi.StringInput `pulumi:"securityCertificationAuthority"`
	SecurityClusterExternalEndpoint pulumi.StringInput `pulumi:"securityClusterExternalEndpoint"`
	SecurityPassword                pulumi.StringInput `pulumi:"securityPassword"`
	SecurityUsername                pulumi.StringInput `pulumi:"securityUsername"`
	TotalCpu                        pulumi.IntInput    `pulumi:"totalCpu"`
	TotalMem                        pulumi.IntInput    `pulumi:"totalMem"`
}

func (ClustersClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClustersCluster)(nil)).Elem()
}

func (i ClustersClusterArgs) ToClustersClusterOutput() ClustersClusterOutput {
	return i.ToClustersClusterOutputWithContext(context.Background())
}

func (i ClustersClusterArgs) ToClustersClusterOutputWithContext(ctx context.Context) ClustersClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClustersClusterOutput)
}

// ClustersClusterArrayInput is an input type that accepts ClustersClusterArray and ClustersClusterArrayOutput values.
// You can construct a concrete instance of `ClustersClusterArrayInput` via:
//
//          ClustersClusterArray{ ClustersClusterArgs{...} }
type ClustersClusterArrayInput interface {
	pulumi.Input

	ToClustersClusterArrayOutput() ClustersClusterArrayOutput
	ToClustersClusterArrayOutputWithContext(context.Context) ClustersClusterArrayOutput
}

type ClustersClusterArray []ClustersClusterInput

func (ClustersClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClustersCluster)(nil)).Elem()
}

func (i ClustersClusterArray) ToClustersClusterArrayOutput() ClustersClusterArrayOutput {
	return i.ToClustersClusterArrayOutputWithContext(context.Background())
}

func (i ClustersClusterArray) ToClustersClusterArrayOutputWithContext(ctx context.Context) ClustersClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClustersClusterArrayOutput)
}

type ClustersClusterOutput struct{ *pulumi.OutputState }

func (ClustersClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClustersCluster)(nil)).Elem()
}

func (o ClustersClusterOutput) ToClustersClusterOutput() ClustersClusterOutput {
	return o
}

func (o ClustersClusterOutput) ToClustersClusterOutputWithContext(ctx context.Context) ClustersClusterOutput {
	return o
}

func (o ClustersClusterOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersCluster) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o ClustersClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersCluster) string { return v.ClusterName }).(pulumi.StringOutput)
}

func (o ClustersClusterOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersCluster) string { return v.Description }).(pulumi.StringOutput)
}

func (o ClustersClusterOutput) KubernetesVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersCluster) string { return v.KubernetesVersion }).(pulumi.StringOutput)
}

func (o ClustersClusterOutput) NodesNum() pulumi.IntOutput {
	return o.ApplyT(func(v ClustersCluster) int { return v.NodesNum }).(pulumi.IntOutput)
}

func (o ClustersClusterOutput) NodesStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersCluster) string { return v.NodesStatus }).(pulumi.StringOutput)
}

func (o ClustersClusterOutput) SecurityCertificationAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersCluster) string { return v.SecurityCertificationAuthority }).(pulumi.StringOutput)
}

func (o ClustersClusterOutput) SecurityClusterExternalEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersCluster) string { return v.SecurityClusterExternalEndpoint }).(pulumi.StringOutput)
}

func (o ClustersClusterOutput) SecurityPassword() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersCluster) string { return v.SecurityPassword }).(pulumi.StringOutput)
}

func (o ClustersClusterOutput) SecurityUsername() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersCluster) string { return v.SecurityUsername }).(pulumi.StringOutput)
}

func (o ClustersClusterOutput) TotalCpu() pulumi.IntOutput {
	return o.ApplyT(func(v ClustersCluster) int { return v.TotalCpu }).(pulumi.IntOutput)
}

func (o ClustersClusterOutput) TotalMem() pulumi.IntOutput {
	return o.ApplyT(func(v ClustersCluster) int { return v.TotalMem }).(pulumi.IntOutput)
}

type ClustersClusterArrayOutput struct{ *pulumi.OutputState }

func (ClustersClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClustersCluster)(nil)).Elem()
}

func (o ClustersClusterArrayOutput) ToClustersClusterArrayOutput() ClustersClusterArrayOutput {
	return o
}

func (o ClustersClusterArrayOutput) ToClustersClusterArrayOutputWithContext(ctx context.Context) ClustersClusterArrayOutput {
	return o
}

func (o ClustersClusterArrayOutput) Index(i pulumi.IntInput) ClustersClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClustersCluster {
		return vs[0].([]ClustersCluster)[vs[1].(int)]
	}).(ClustersClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInstancesNodeInput)(nil)).Elem(), ClusterInstancesNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInstancesNodeArrayInput)(nil)).Elem(), ClusterInstancesNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClustersClusterInput)(nil)).Elem(), ClustersClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClustersClusterArrayInput)(nil)).Elem(), ClustersClusterArray{})
	pulumi.RegisterOutputType(ClusterInstancesNodeOutput{})
	pulumi.RegisterOutputType(ClusterInstancesNodeArrayOutput{})
	pulumi.RegisterOutputType(ClustersClusterOutput{})
	pulumi.RegisterOutputType(ClustersClusterArrayOutput{})
}
