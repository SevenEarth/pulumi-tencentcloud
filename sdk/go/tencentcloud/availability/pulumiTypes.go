// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package availability

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ZonesByProductZone struct {
	Description string `pulumi:"description"`
	Id          string `pulumi:"id"`
	Name        string `pulumi:"name"`
	State       string `pulumi:"state"`
}

// ZonesByProductZoneInput is an input type that accepts ZonesByProductZoneArgs and ZonesByProductZoneOutput values.
// You can construct a concrete instance of `ZonesByProductZoneInput` via:
//
//          ZonesByProductZoneArgs{...}
type ZonesByProductZoneInput interface {
	pulumi.Input

	ToZonesByProductZoneOutput() ZonesByProductZoneOutput
	ToZonesByProductZoneOutputWithContext(context.Context) ZonesByProductZoneOutput
}

type ZonesByProductZoneArgs struct {
	Description pulumi.StringInput `pulumi:"description"`
	Id          pulumi.StringInput `pulumi:"id"`
	Name        pulumi.StringInput `pulumi:"name"`
	State       pulumi.StringInput `pulumi:"state"`
}

func (ZonesByProductZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesByProductZone)(nil)).Elem()
}

func (i ZonesByProductZoneArgs) ToZonesByProductZoneOutput() ZonesByProductZoneOutput {
	return i.ToZonesByProductZoneOutputWithContext(context.Background())
}

func (i ZonesByProductZoneArgs) ToZonesByProductZoneOutputWithContext(ctx context.Context) ZonesByProductZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesByProductZoneOutput)
}

// ZonesByProductZoneArrayInput is an input type that accepts ZonesByProductZoneArray and ZonesByProductZoneArrayOutput values.
// You can construct a concrete instance of `ZonesByProductZoneArrayInput` via:
//
//          ZonesByProductZoneArray{ ZonesByProductZoneArgs{...} }
type ZonesByProductZoneArrayInput interface {
	pulumi.Input

	ToZonesByProductZoneArrayOutput() ZonesByProductZoneArrayOutput
	ToZonesByProductZoneArrayOutputWithContext(context.Context) ZonesByProductZoneArrayOutput
}

type ZonesByProductZoneArray []ZonesByProductZoneInput

func (ZonesByProductZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesByProductZone)(nil)).Elem()
}

func (i ZonesByProductZoneArray) ToZonesByProductZoneArrayOutput() ZonesByProductZoneArrayOutput {
	return i.ToZonesByProductZoneArrayOutputWithContext(context.Background())
}

func (i ZonesByProductZoneArray) ToZonesByProductZoneArrayOutputWithContext(ctx context.Context) ZonesByProductZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesByProductZoneArrayOutput)
}

type ZonesByProductZoneOutput struct{ *pulumi.OutputState }

func (ZonesByProductZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesByProductZone)(nil)).Elem()
}

func (o ZonesByProductZoneOutput) ToZonesByProductZoneOutput() ZonesByProductZoneOutput {
	return o
}

func (o ZonesByProductZoneOutput) ToZonesByProductZoneOutputWithContext(ctx context.Context) ZonesByProductZoneOutput {
	return o
}

func (o ZonesByProductZoneOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesByProductZone) string { return v.Description }).(pulumi.StringOutput)
}

func (o ZonesByProductZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesByProductZone) string { return v.Id }).(pulumi.StringOutput)
}

func (o ZonesByProductZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesByProductZone) string { return v.Name }).(pulumi.StringOutput)
}

func (o ZonesByProductZoneOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesByProductZone) string { return v.State }).(pulumi.StringOutput)
}

type ZonesByProductZoneArrayOutput struct{ *pulumi.OutputState }

func (ZonesByProductZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesByProductZone)(nil)).Elem()
}

func (o ZonesByProductZoneArrayOutput) ToZonesByProductZoneArrayOutput() ZonesByProductZoneArrayOutput {
	return o
}

func (o ZonesByProductZoneArrayOutput) ToZonesByProductZoneArrayOutputWithContext(ctx context.Context) ZonesByProductZoneArrayOutput {
	return o
}

func (o ZonesByProductZoneArrayOutput) Index(i pulumi.IntInput) ZonesByProductZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonesByProductZone {
		return vs[0].([]ZonesByProductZone)[vs[1].(int)]
	}).(ZonesByProductZoneOutput)
}

type ZonesZone struct {
	Description string `pulumi:"description"`
	Id          string `pulumi:"id"`
	Name        string `pulumi:"name"`
	State       string `pulumi:"state"`
}

// ZonesZoneInput is an input type that accepts ZonesZoneArgs and ZonesZoneOutput values.
// You can construct a concrete instance of `ZonesZoneInput` via:
//
//          ZonesZoneArgs{...}
type ZonesZoneInput interface {
	pulumi.Input

	ToZonesZoneOutput() ZonesZoneOutput
	ToZonesZoneOutputWithContext(context.Context) ZonesZoneOutput
}

type ZonesZoneArgs struct {
	Description pulumi.StringInput `pulumi:"description"`
	Id          pulumi.StringInput `pulumi:"id"`
	Name        pulumi.StringInput `pulumi:"name"`
	State       pulumi.StringInput `pulumi:"state"`
}

func (ZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArgs) ToZonesZoneOutput() ZonesZoneOutput {
	return i.ToZonesZoneOutputWithContext(context.Background())
}

func (i ZonesZoneArgs) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneOutput)
}

// ZonesZoneArrayInput is an input type that accepts ZonesZoneArray and ZonesZoneArrayOutput values.
// You can construct a concrete instance of `ZonesZoneArrayInput` via:
//
//          ZonesZoneArray{ ZonesZoneArgs{...} }
type ZonesZoneArrayInput interface {
	pulumi.Input

	ToZonesZoneArrayOutput() ZonesZoneArrayOutput
	ToZonesZoneArrayOutputWithContext(context.Context) ZonesZoneArrayOutput
}

type ZonesZoneArray []ZonesZoneInput

func (ZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArray) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return i.ToZonesZoneArrayOutputWithContext(context.Background())
}

func (i ZonesZoneArray) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneArrayOutput)
}

type ZonesZoneOutput struct{ *pulumi.OutputState }

func (ZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (o ZonesZoneOutput) ToZonesZoneOutput() ZonesZoneOutput {
	return o
}

func (o ZonesZoneOutput) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return o
}

func (o ZonesZoneOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Description }).(pulumi.StringOutput)
}

func (o ZonesZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Id }).(pulumi.StringOutput)
}

func (o ZonesZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Name }).(pulumi.StringOutput)
}

func (o ZonesZoneOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.State }).(pulumi.StringOutput)
}

type ZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (ZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) Index(i pulumi.IntInput) ZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonesZone {
		return vs[0].([]ZonesZone)[vs[1].(int)]
	}).(ZonesZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesByProductZoneInput)(nil)).Elem(), ZonesByProductZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesByProductZoneArrayInput)(nil)).Elem(), ZonesByProductZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneInput)(nil)).Elem(), ZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneArrayInput)(nil)).Elem(), ZonesZoneArray{})
	pulumi.RegisterOutputType(ZonesByProductZoneOutput{})
	pulumi.RegisterOutputType(ZonesByProductZoneArrayOutput{})
	pulumi.RegisterOutputType(ZonesZoneOutput{})
	pulumi.RegisterOutputType(ZonesZoneArrayOutput{})
}
