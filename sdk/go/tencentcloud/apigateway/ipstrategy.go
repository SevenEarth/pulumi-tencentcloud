// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IPStrategy struct {
	pulumi.CustomResourceState

	// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The ID of the API gateway service.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// IP address data.
	StrategyData pulumi.StringOutput `pulumi:"strategyData"`
	// IP policy ID.
	StrategyId pulumi.StringOutput `pulumi:"strategyId"`
	// User defined strategy name.
	StrategyName pulumi.StringOutput `pulumi:"strategyName"`
	// Blacklist or whitelist.
	StrategyType pulumi.StringOutput `pulumi:"strategyType"`
}

// NewIPStrategy registers a new resource with the given unique name, arguments, and options.
func NewIPStrategy(ctx *pulumi.Context,
	name string, args *IPStrategyArgs, opts ...pulumi.ResourceOption) (*IPStrategy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	if args.StrategyData == nil {
		return nil, errors.New("invalid value for required argument 'StrategyData'")
	}
	if args.StrategyName == nil {
		return nil, errors.New("invalid value for required argument 'StrategyName'")
	}
	if args.StrategyType == nil {
		return nil, errors.New("invalid value for required argument 'StrategyType'")
	}
	var resource IPStrategy
	err := ctx.RegisterResource("tencentcloud:APIGateway/iPStrategy:IPStrategy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPStrategy gets an existing IPStrategy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPStrategy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPStrategyState, opts ...pulumi.ResourceOption) (*IPStrategy, error) {
	var resource IPStrategy
	err := ctx.ReadResource("tencentcloud:APIGateway/iPStrategy:IPStrategy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPStrategy resources.
type ipstrategyState struct {
	// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	CreateTime *string `pulumi:"createTime"`
	// The ID of the API gateway service.
	ServiceId *string `pulumi:"serviceId"`
	// IP address data.
	StrategyData *string `pulumi:"strategyData"`
	// IP policy ID.
	StrategyId *string `pulumi:"strategyId"`
	// User defined strategy name.
	StrategyName *string `pulumi:"strategyName"`
	// Blacklist or whitelist.
	StrategyType *string `pulumi:"strategyType"`
}

type IPStrategyState struct {
	// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	CreateTime pulumi.StringPtrInput
	// The ID of the API gateway service.
	ServiceId pulumi.StringPtrInput
	// IP address data.
	StrategyData pulumi.StringPtrInput
	// IP policy ID.
	StrategyId pulumi.StringPtrInput
	// User defined strategy name.
	StrategyName pulumi.StringPtrInput
	// Blacklist or whitelist.
	StrategyType pulumi.StringPtrInput
}

func (IPStrategyState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipstrategyState)(nil)).Elem()
}

type ipstrategyArgs struct {
	// The ID of the API gateway service.
	ServiceId string `pulumi:"serviceId"`
	// IP address data.
	StrategyData string `pulumi:"strategyData"`
	// User defined strategy name.
	StrategyName string `pulumi:"strategyName"`
	// Blacklist or whitelist.
	StrategyType string `pulumi:"strategyType"`
}

// The set of arguments for constructing a IPStrategy resource.
type IPStrategyArgs struct {
	// The ID of the API gateway service.
	ServiceId pulumi.StringInput
	// IP address data.
	StrategyData pulumi.StringInput
	// User defined strategy name.
	StrategyName pulumi.StringInput
	// Blacklist or whitelist.
	StrategyType pulumi.StringInput
}

func (IPStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipstrategyArgs)(nil)).Elem()
}

type IPStrategyInput interface {
	pulumi.Input

	ToIPStrategyOutput() IPStrategyOutput
	ToIPStrategyOutputWithContext(ctx context.Context) IPStrategyOutput
}

func (*IPStrategy) ElementType() reflect.Type {
	return reflect.TypeOf((**IPStrategy)(nil)).Elem()
}

func (i *IPStrategy) ToIPStrategyOutput() IPStrategyOutput {
	return i.ToIPStrategyOutputWithContext(context.Background())
}

func (i *IPStrategy) ToIPStrategyOutputWithContext(ctx context.Context) IPStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPStrategyOutput)
}

// IPStrategyArrayInput is an input type that accepts IPStrategyArray and IPStrategyArrayOutput values.
// You can construct a concrete instance of `IPStrategyArrayInput` via:
//
//          IPStrategyArray{ IPStrategyArgs{...} }
type IPStrategyArrayInput interface {
	pulumi.Input

	ToIPStrategyArrayOutput() IPStrategyArrayOutput
	ToIPStrategyArrayOutputWithContext(context.Context) IPStrategyArrayOutput
}

type IPStrategyArray []IPStrategyInput

func (IPStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPStrategy)(nil)).Elem()
}

func (i IPStrategyArray) ToIPStrategyArrayOutput() IPStrategyArrayOutput {
	return i.ToIPStrategyArrayOutputWithContext(context.Background())
}

func (i IPStrategyArray) ToIPStrategyArrayOutputWithContext(ctx context.Context) IPStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPStrategyArrayOutput)
}

// IPStrategyMapInput is an input type that accepts IPStrategyMap and IPStrategyMapOutput values.
// You can construct a concrete instance of `IPStrategyMapInput` via:
//
//          IPStrategyMap{ "key": IPStrategyArgs{...} }
type IPStrategyMapInput interface {
	pulumi.Input

	ToIPStrategyMapOutput() IPStrategyMapOutput
	ToIPStrategyMapOutputWithContext(context.Context) IPStrategyMapOutput
}

type IPStrategyMap map[string]IPStrategyInput

func (IPStrategyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPStrategy)(nil)).Elem()
}

func (i IPStrategyMap) ToIPStrategyMapOutput() IPStrategyMapOutput {
	return i.ToIPStrategyMapOutputWithContext(context.Background())
}

func (i IPStrategyMap) ToIPStrategyMapOutputWithContext(ctx context.Context) IPStrategyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPStrategyMapOutput)
}

type IPStrategyOutput struct{ *pulumi.OutputState }

func (IPStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPStrategy)(nil)).Elem()
}

func (o IPStrategyOutput) ToIPStrategyOutput() IPStrategyOutput {
	return o
}

func (o IPStrategyOutput) ToIPStrategyOutputWithContext(ctx context.Context) IPStrategyOutput {
	return o
}

// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
func (o IPStrategyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *IPStrategy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The ID of the API gateway service.
func (o IPStrategyOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *IPStrategy) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// IP address data.
func (o IPStrategyOutput) StrategyData() pulumi.StringOutput {
	return o.ApplyT(func(v *IPStrategy) pulumi.StringOutput { return v.StrategyData }).(pulumi.StringOutput)
}

// IP policy ID.
func (o IPStrategyOutput) StrategyId() pulumi.StringOutput {
	return o.ApplyT(func(v *IPStrategy) pulumi.StringOutput { return v.StrategyId }).(pulumi.StringOutput)
}

// User defined strategy name.
func (o IPStrategyOutput) StrategyName() pulumi.StringOutput {
	return o.ApplyT(func(v *IPStrategy) pulumi.StringOutput { return v.StrategyName }).(pulumi.StringOutput)
}

// Blacklist or whitelist.
func (o IPStrategyOutput) StrategyType() pulumi.StringOutput {
	return o.ApplyT(func(v *IPStrategy) pulumi.StringOutput { return v.StrategyType }).(pulumi.StringOutput)
}

type IPStrategyArrayOutput struct{ *pulumi.OutputState }

func (IPStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IPStrategy)(nil)).Elem()
}

func (o IPStrategyArrayOutput) ToIPStrategyArrayOutput() IPStrategyArrayOutput {
	return o
}

func (o IPStrategyArrayOutput) ToIPStrategyArrayOutputWithContext(ctx context.Context) IPStrategyArrayOutput {
	return o
}

func (o IPStrategyArrayOutput) Index(i pulumi.IntInput) IPStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IPStrategy {
		return vs[0].([]*IPStrategy)[vs[1].(int)]
	}).(IPStrategyOutput)
}

type IPStrategyMapOutput struct{ *pulumi.OutputState }

func (IPStrategyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IPStrategy)(nil)).Elem()
}

func (o IPStrategyMapOutput) ToIPStrategyMapOutput() IPStrategyMapOutput {
	return o
}

func (o IPStrategyMapOutput) ToIPStrategyMapOutputWithContext(ctx context.Context) IPStrategyMapOutput {
	return o
}

func (o IPStrategyMapOutput) MapIndex(k pulumi.StringInput) IPStrategyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IPStrategy {
		return vs[0].(map[string]*IPStrategy)[vs[1].(string)]
	}).(IPStrategyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IPStrategyInput)(nil)).Elem(), &IPStrategy{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPStrategyArrayInput)(nil)).Elem(), IPStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPStrategyMapInput)(nil)).Elem(), IPStrategyMap{})
	pulumi.RegisterOutputType(IPStrategyOutput{})
	pulumi.RegisterOutputType(IPStrategyArrayOutput{})
	pulumi.RegisterOutputType(IPStrategyMapOutput{})
}
