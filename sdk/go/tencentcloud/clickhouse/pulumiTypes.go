// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhouse

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type InstanceCommonSpec struct {
	// Node count. NOTE: Only support value 3.
	Count int `pulumi:"count"`
	// Disk size.
	DiskSize int `pulumi:"diskSize"`
	// Spec name.
	SpecName string `pulumi:"specName"`
}

// InstanceCommonSpecInput is an input type that accepts InstanceCommonSpecArgs and InstanceCommonSpecOutput values.
// You can construct a concrete instance of `InstanceCommonSpecInput` via:
//
//          InstanceCommonSpecArgs{...}
type InstanceCommonSpecInput interface {
	pulumi.Input

	ToInstanceCommonSpecOutput() InstanceCommonSpecOutput
	ToInstanceCommonSpecOutputWithContext(context.Context) InstanceCommonSpecOutput
}

type InstanceCommonSpecArgs struct {
	// Node count. NOTE: Only support value 3.
	Count pulumi.IntInput `pulumi:"count"`
	// Disk size.
	DiskSize pulumi.IntInput `pulumi:"diskSize"`
	// Spec name.
	SpecName pulumi.StringInput `pulumi:"specName"`
}

func (InstanceCommonSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCommonSpec)(nil)).Elem()
}

func (i InstanceCommonSpecArgs) ToInstanceCommonSpecOutput() InstanceCommonSpecOutput {
	return i.ToInstanceCommonSpecOutputWithContext(context.Background())
}

func (i InstanceCommonSpecArgs) ToInstanceCommonSpecOutputWithContext(ctx context.Context) InstanceCommonSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCommonSpecOutput)
}

func (i InstanceCommonSpecArgs) ToInstanceCommonSpecPtrOutput() InstanceCommonSpecPtrOutput {
	return i.ToInstanceCommonSpecPtrOutputWithContext(context.Background())
}

func (i InstanceCommonSpecArgs) ToInstanceCommonSpecPtrOutputWithContext(ctx context.Context) InstanceCommonSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCommonSpecOutput).ToInstanceCommonSpecPtrOutputWithContext(ctx)
}

// InstanceCommonSpecPtrInput is an input type that accepts InstanceCommonSpecArgs, InstanceCommonSpecPtr and InstanceCommonSpecPtrOutput values.
// You can construct a concrete instance of `InstanceCommonSpecPtrInput` via:
//
//          InstanceCommonSpecArgs{...}
//
//  or:
//
//          nil
type InstanceCommonSpecPtrInput interface {
	pulumi.Input

	ToInstanceCommonSpecPtrOutput() InstanceCommonSpecPtrOutput
	ToInstanceCommonSpecPtrOutputWithContext(context.Context) InstanceCommonSpecPtrOutput
}

type instanceCommonSpecPtrType InstanceCommonSpecArgs

func InstanceCommonSpecPtr(v *InstanceCommonSpecArgs) InstanceCommonSpecPtrInput {
	return (*instanceCommonSpecPtrType)(v)
}

func (*instanceCommonSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCommonSpec)(nil)).Elem()
}

func (i *instanceCommonSpecPtrType) ToInstanceCommonSpecPtrOutput() InstanceCommonSpecPtrOutput {
	return i.ToInstanceCommonSpecPtrOutputWithContext(context.Background())
}

func (i *instanceCommonSpecPtrType) ToInstanceCommonSpecPtrOutputWithContext(ctx context.Context) InstanceCommonSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCommonSpecPtrOutput)
}

type InstanceCommonSpecOutput struct{ *pulumi.OutputState }

func (InstanceCommonSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCommonSpec)(nil)).Elem()
}

func (o InstanceCommonSpecOutput) ToInstanceCommonSpecOutput() InstanceCommonSpecOutput {
	return o
}

func (o InstanceCommonSpecOutput) ToInstanceCommonSpecOutputWithContext(ctx context.Context) InstanceCommonSpecOutput {
	return o
}

func (o InstanceCommonSpecOutput) ToInstanceCommonSpecPtrOutput() InstanceCommonSpecPtrOutput {
	return o.ToInstanceCommonSpecPtrOutputWithContext(context.Background())
}

func (o InstanceCommonSpecOutput) ToInstanceCommonSpecPtrOutputWithContext(ctx context.Context) InstanceCommonSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceCommonSpec) *InstanceCommonSpec {
		return &v
	}).(InstanceCommonSpecPtrOutput)
}

// Node count. NOTE: Only support value 3.
func (o InstanceCommonSpecOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceCommonSpec) int { return v.Count }).(pulumi.IntOutput)
}

// Disk size.
func (o InstanceCommonSpecOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceCommonSpec) int { return v.DiskSize }).(pulumi.IntOutput)
}

// Spec name.
func (o InstanceCommonSpecOutput) SpecName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceCommonSpec) string { return v.SpecName }).(pulumi.StringOutput)
}

type InstanceCommonSpecPtrOutput struct{ *pulumi.OutputState }

func (InstanceCommonSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCommonSpec)(nil)).Elem()
}

func (o InstanceCommonSpecPtrOutput) ToInstanceCommonSpecPtrOutput() InstanceCommonSpecPtrOutput {
	return o
}

func (o InstanceCommonSpecPtrOutput) ToInstanceCommonSpecPtrOutputWithContext(ctx context.Context) InstanceCommonSpecPtrOutput {
	return o
}

func (o InstanceCommonSpecPtrOutput) Elem() InstanceCommonSpecOutput {
	return o.ApplyT(func(v *InstanceCommonSpec) InstanceCommonSpec {
		if v != nil {
			return *v
		}
		var ret InstanceCommonSpec
		return ret
	}).(InstanceCommonSpecOutput)
}

// Node count. NOTE: Only support value 3.
func (o InstanceCommonSpecPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceCommonSpec) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// Disk size.
func (o InstanceCommonSpecPtrOutput) DiskSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceCommonSpec) *int {
		if v == nil {
			return nil
		}
		return &v.DiskSize
	}).(pulumi.IntPtrOutput)
}

// Spec name.
func (o InstanceCommonSpecPtrOutput) SpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceCommonSpec) *string {
		if v == nil {
			return nil
		}
		return &v.SpecName
	}).(pulumi.StringPtrOutput)
}

type InstanceDataSpec struct {
	// Data spec count.
	Count int `pulumi:"count"`
	// Disk size.
	DiskSize int `pulumi:"diskSize"`
	// Spec name.
	SpecName string `pulumi:"specName"`
}

// InstanceDataSpecInput is an input type that accepts InstanceDataSpecArgs and InstanceDataSpecOutput values.
// You can construct a concrete instance of `InstanceDataSpecInput` via:
//
//          InstanceDataSpecArgs{...}
type InstanceDataSpecInput interface {
	pulumi.Input

	ToInstanceDataSpecOutput() InstanceDataSpecOutput
	ToInstanceDataSpecOutputWithContext(context.Context) InstanceDataSpecOutput
}

type InstanceDataSpecArgs struct {
	// Data spec count.
	Count pulumi.IntInput `pulumi:"count"`
	// Disk size.
	DiskSize pulumi.IntInput `pulumi:"diskSize"`
	// Spec name.
	SpecName pulumi.StringInput `pulumi:"specName"`
}

func (InstanceDataSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDataSpec)(nil)).Elem()
}

func (i InstanceDataSpecArgs) ToInstanceDataSpecOutput() InstanceDataSpecOutput {
	return i.ToInstanceDataSpecOutputWithContext(context.Background())
}

func (i InstanceDataSpecArgs) ToInstanceDataSpecOutputWithContext(ctx context.Context) InstanceDataSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDataSpecOutput)
}

func (i InstanceDataSpecArgs) ToInstanceDataSpecPtrOutput() InstanceDataSpecPtrOutput {
	return i.ToInstanceDataSpecPtrOutputWithContext(context.Background())
}

func (i InstanceDataSpecArgs) ToInstanceDataSpecPtrOutputWithContext(ctx context.Context) InstanceDataSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDataSpecOutput).ToInstanceDataSpecPtrOutputWithContext(ctx)
}

// InstanceDataSpecPtrInput is an input type that accepts InstanceDataSpecArgs, InstanceDataSpecPtr and InstanceDataSpecPtrOutput values.
// You can construct a concrete instance of `InstanceDataSpecPtrInput` via:
//
//          InstanceDataSpecArgs{...}
//
//  or:
//
//          nil
type InstanceDataSpecPtrInput interface {
	pulumi.Input

	ToInstanceDataSpecPtrOutput() InstanceDataSpecPtrOutput
	ToInstanceDataSpecPtrOutputWithContext(context.Context) InstanceDataSpecPtrOutput
}

type instanceDataSpecPtrType InstanceDataSpecArgs

func InstanceDataSpecPtr(v *InstanceDataSpecArgs) InstanceDataSpecPtrInput {
	return (*instanceDataSpecPtrType)(v)
}

func (*instanceDataSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceDataSpec)(nil)).Elem()
}

func (i *instanceDataSpecPtrType) ToInstanceDataSpecPtrOutput() InstanceDataSpecPtrOutput {
	return i.ToInstanceDataSpecPtrOutputWithContext(context.Background())
}

func (i *instanceDataSpecPtrType) ToInstanceDataSpecPtrOutputWithContext(ctx context.Context) InstanceDataSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDataSpecPtrOutput)
}

type InstanceDataSpecOutput struct{ *pulumi.OutputState }

func (InstanceDataSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDataSpec)(nil)).Elem()
}

func (o InstanceDataSpecOutput) ToInstanceDataSpecOutput() InstanceDataSpecOutput {
	return o
}

func (o InstanceDataSpecOutput) ToInstanceDataSpecOutputWithContext(ctx context.Context) InstanceDataSpecOutput {
	return o
}

func (o InstanceDataSpecOutput) ToInstanceDataSpecPtrOutput() InstanceDataSpecPtrOutput {
	return o.ToInstanceDataSpecPtrOutputWithContext(context.Background())
}

func (o InstanceDataSpecOutput) ToInstanceDataSpecPtrOutputWithContext(ctx context.Context) InstanceDataSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceDataSpec) *InstanceDataSpec {
		return &v
	}).(InstanceDataSpecPtrOutput)
}

// Data spec count.
func (o InstanceDataSpecOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceDataSpec) int { return v.Count }).(pulumi.IntOutput)
}

// Disk size.
func (o InstanceDataSpecOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceDataSpec) int { return v.DiskSize }).(pulumi.IntOutput)
}

// Spec name.
func (o InstanceDataSpecOutput) SpecName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceDataSpec) string { return v.SpecName }).(pulumi.StringOutput)
}

type InstanceDataSpecPtrOutput struct{ *pulumi.OutputState }

func (InstanceDataSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceDataSpec)(nil)).Elem()
}

func (o InstanceDataSpecPtrOutput) ToInstanceDataSpecPtrOutput() InstanceDataSpecPtrOutput {
	return o
}

func (o InstanceDataSpecPtrOutput) ToInstanceDataSpecPtrOutputWithContext(ctx context.Context) InstanceDataSpecPtrOutput {
	return o
}

func (o InstanceDataSpecPtrOutput) Elem() InstanceDataSpecOutput {
	return o.ApplyT(func(v *InstanceDataSpec) InstanceDataSpec {
		if v != nil {
			return *v
		}
		var ret InstanceDataSpec
		return ret
	}).(InstanceDataSpecOutput)
}

// Data spec count.
func (o InstanceDataSpecPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceDataSpec) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// Disk size.
func (o InstanceDataSpecPtrOutput) DiskSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceDataSpec) *int {
		if v == nil {
			return nil
		}
		return &v.DiskSize
	}).(pulumi.IntPtrOutput)
}

// Spec name.
func (o InstanceDataSpecPtrOutput) SpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceDataSpec) *string {
		if v == nil {
			return nil
		}
		return &v.SpecName
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCommonSpecInput)(nil)).Elem(), InstanceCommonSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCommonSpecPtrInput)(nil)).Elem(), InstanceCommonSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDataSpecInput)(nil)).Elem(), InstanceDataSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDataSpecPtrInput)(nil)).Elem(), InstanceDataSpecArgs{})
	pulumi.RegisterOutputType(InstanceCommonSpecOutput{})
	pulumi.RegisterOutputType(InstanceCommonSpecPtrOutput{})
	pulumi.RegisterOutputType(InstanceDataSpecOutput{})
	pulumi.RegisterOutputType(InstanceDataSpecPtrOutput{})
}
